<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>e+Thomas</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://thomaslau.github.io/"/>
  <updated>2020-01-02T23:51:08.035Z</updated>
  <id>http://thomaslau.github.io/</id>
  
  <author>
    <name>Thomas Lau</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>新一年的技术叨叨</title>
    <link href="http://thomaslau.github.io/2020/01/02/2020-01-02-new_decades_new_life/"/>
    <id>http://thomaslau.github.io/2020/01/02/2020-01-02-new_decades_new_life/</id>
    <published>2020-01-01T16:59:10.000Z</published>
    <updated>2020-01-02T23:51:08.035Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><i><strong>intro1</strong>：kafk异常io图，kafka rebalance和reassigne区别</i><br><i><strong>intro2</strong>: kafka真的只能从leader partition读写吗</i><br><i><strong>intro3</strong>: 一个不太正常的elasticsaerch分片分布场景下的扩容</i></p>
</blockquote>
<h2 id="从一些系统监控图能看到些什么"><a href="#从一些系统监控图能看到些什么" class="headerlink" title="从一些系统监控图能看到些什么"></a>从一些系统监控图能看到些什么</h2><p>最近在排查线上问题时，留意到几台Kafka机器的基础的zabbix io/cpu监控，图一所示平稳读操作中夹杂一些尖峰，图二是之前放大的图<br><a id="more"></a><br><img src="/images/20_kafka_perfect_IO.png" width="100%"><br>放大看，io持续还是明显的<br><img src="/images/20_kafka_bad_IO.png" width="100%"><br>从上述图能够看出，Kafka非常少有大量读磁盘的操作，主要还是定期批量写磁盘操作，而且顺序写操作磁盘非常高效。但为什么上图最近读磁盘增加了许多呢？我们知道Kafka在写消息时，消息实际上时写入page cache(内存)中，然后由异步线程刷盘，消息从page cache落地磁盘。而读取消息时，是直接由page cache转入socket发送出去[也即大家说的零拷贝技术]。如果page cache没有命中相应数据(offset)，Kafka就会通过idx文件，即索引，定位到对应的数据文件，将整个文件从磁盘加载消息到page cache,然后再从socket发出去，此时就会发生不小的磁盘读操作。<br>也就是说，<strong>page cache常没有命中消费的数据，这通常是消费延迟导致</strong>，查看消费监控，确实存在一些groupid的消费者存在严重的消费延迟情况，甚至还有程序经常从头开始消费。<br>这些都应该是尽量避免的，因为 <strong>使用page cahce当遇到问题脏页，内存回收等问题时，易造成消息读写的延迟，而且过多page cache也影响linux系统本身性能，如果未关闭swap问题可能更严重了</strong>。 不过据说来自阿里的 RocketMQ 在这方面做了些优化。</p>
<h2 id="Kafka-rebalance-vs-Kafka-reassigne"><a href="#Kafka-rebalance-vs-Kafka-reassigne" class="headerlink" title="Kafka rebalance vs Kafka reassigne"></a>Kafka rebalance vs Kafka reassigne</h2><p>还有一点的是，我们知道Kafka读写的都是partition，partition分为leader/follower角色，在过去对于Kafka的partition来说，只有leader才会进行读写操作，folower仅进行同步/复制/备份(当然，有些例外如测试等, 不过现在更例外了，请看下文)，follower对于consumer/producer等client来说是透明的，这也可以认为是kafka数据一致性的方法。<br>同Mysql的实现不同，Mysql分为主从，通常会针对主从作读写分离操作，实现性能提升，而Kafka则分为多个partition，读写分离到多partition上，他们的负载均衡就是通过 broker(机器)+partition+角色(leader) 的均衡实现的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">We assume that there are many partitions in a cluster and try to </div><div class="line">spread the leaders evenly among brokers. That way, even for a </div><div class="line">particularpartition, all clients have to talk to a single broker, </div><div class="line">the overall workload is still balanced.</div></pre></td></tr></table></figure></p>
<p>不过，是否读replica这个做法在多数据中心时是有一定益处的，<strong>为此Kafka就做了改进，允许消费者从最近的副本进行获取</strong>，<strong><a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-392%3A+Allow+consumers+to+fetch+from+closest+replica" target="_blank" rel="external">KIP-392: Allow consumers to fetch from closest replica</a><br><a href="https://github.com/apache/kafka/pull/6832" target="_blank" rel="external">KAFKA-8443 Broker support for fetch from followers #6832</a>, <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=125307901" target="_blank" rel="external">Release Plan 2.4.0</a>，</strong> 这个改进可以说更上层楼，<strong>在目前最新的2.4.0版本发布</strong>，如果你通过百度查询，国内相关文章不多，所以需要自己阅读官方指导了。<br>其次，可以看到一些kafka server的监控软件，如Kafka Manager有个leader skew，用来衡量leader倾斜度，简单列举下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Brokers Spread：看作broker使用率，该topic分布的broker占集群broker总量百分比</div><div class="line">Brokers Skew：该topic偏离均值的broker占集群broker总量百分比</div><div class="line">Brokers Leader Skew：Percentage of brokers having more partitions as leader than the average，</div><div class="line">leader partition是否存在倾斜，即没有达到平均leader比重的broker数量占集群broker总量百分比</div></pre></td></tr></table></figure></p>
<p>这是因为Kafka所有读写都在leader上进行， broker leader skew过高会导致读写负载不均衡，<br>Kafka有个参数 auto.leader.rebalance.enable，默认为true 可以使kafka自动定期做leader的rebalance，消除写不均衡的问题。</p>
<h2 id="那么这个-rebalance-和reassign-有关系吗"><a href="#那么这个-rebalance-和reassign-有关系吗" class="headerlink" title="那么这个 rebalance 和reassign 有关系吗"></a>那么这个 rebalance 和reassign 有关系吗</h2><p>需要指出，这里的Kafka rebalance，不是指kafka consumer的rebalance，而是kafka partition的rebalance，也就是 kafka leader rebalance，即针对partition的 均衡，与此相关的还有一个 partition reassign，都是实现kafka server的各个broker之间的负载均衡的方式。<br>有的文章没有注意把二者混为一谈，认为partition rebalance 会引起partition重分配， 导致对于大吞吐量的应用在leader rebalance 时，可能导致partition不可用的，无法读写数据，在生产环境关闭该功能，或者 rebalance 可能短暂导致如partition不可写等，其实无此必要。<br><strong>partition reblance 和 partition reassign 是两个概念</strong>，reassign 是在监听ZK事件时触发的，比如我们通过ReassignPartitionsCommand命令操作分片迁移。<br>Kafka rebalance判断依据是 imbalanceRatio 因子的大小，而扩展节点(broker)不会引起imbalanceRatio的变化，因为 totalTopicPartitionsForBroker不变，totalTopicPartitionsNotLedByBroker 和新的broker无关，除非已经手动设置作修改。<br>rebalance是否会引起reasign呢？官方没有详细涉及，从笔者也正在阅读这块代码，尚未发现rebalance会导致resign的情况。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div></pre></td><td class="code"><pre><div class="line"><span class="type">ControllerContext</span>.scala</div><div class="line">...</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">checkAndTriggerPartitionRebalance</span></span>(): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">if</span> (isActive()) &#123;</div><div class="line">      trace(<span class="string">"checking need to trigger partition rebalance"</span>)</div><div class="line">      <span class="comment">// get all the active brokers</span></div><div class="line">      <span class="keyword">var</span> preferredReplicasForTopicsByBrokers: <span class="type">Map</span>[<span class="type">Int</span>, <span class="type">Map</span>[<span class="type">TopicAndPartition</span>, <span class="type">Seq</span>[<span class="type">Int</span>]]] = <span class="literal">null</span></div><div class="line">      inLock(controllerContext.controllerLock) &#123;</div><div class="line">        preferredReplicasForTopicsByBrokers =</div><div class="line">          controllerContext.partitionReplicaAssignment.filterNot(p =&gt; deleteTopicManager.isTopicQueuedUpForDeletion(p._1.topic)).groupBy &#123;</div><div class="line">            <span class="keyword">case</span>(topicAndPartition, assignedReplicas) =&gt; assignedReplicas.head</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      debug(<span class="string">"preferred replicas by broker "</span> + preferredReplicasForTopicsByBrokers)</div><div class="line">      <span class="comment">// for each broker, check if a preferred replica election needs to be triggered</span></div><div class="line">      preferredReplicasForTopicsByBrokers.foreach &#123;</div><div class="line">        <span class="keyword">case</span>(leaderBroker, topicAndPartitionsForBroker) =&gt; &#123;</div><div class="line">          <span class="keyword">var</span> imbalanceRatio: <span class="type">Double</span> = <span class="number">0</span></div><div class="line">          <span class="keyword">var</span> topicsNotInPreferredReplica: <span class="type">Map</span>[<span class="type">TopicAndPartition</span>, <span class="type">Seq</span>[<span class="type">Int</span>]] = <span class="literal">null</span></div><div class="line">          inLock(controllerContext.controllerLock) &#123;</div><div class="line">            topicsNotInPreferredReplica =</div><div class="line">              topicAndPartitionsForBroker.filter &#123;</div><div class="line">                <span class="keyword">case</span>(topicPartition, replicas) =&gt; &#123;</div><div class="line">                  controllerContext.partitionLeadershipInfo.contains(topicPartition) &amp;&amp;</div><div class="line">                  controllerContext.partitionLeadershipInfo(topicPartition).leaderAndIsr.leader != leaderBroker</div><div class="line">                &#125;</div><div class="line">              &#125;</div><div class="line">            debug(<span class="string">"topics not in preferred replica "</span> + topicsNotInPreferredReplica)</div><div class="line">            <span class="keyword">val</span> totalTopicPartitionsForBroker = topicAndPartitionsForBroker.size</div><div class="line">            <span class="keyword">val</span> totalTopicPartitionsNotLedByBroker = topicsNotInPreferredReplica.size</div><div class="line">            imbalanceRatio = totalTopicPartitionsNotLedByBroker.toDouble / totalTopicPartitionsForBroker</div><div class="line">            trace(<span class="string">"leader imbalance ratio for broker %d is %f"</span>.format(leaderBroker, imbalanceRatio))</div><div class="line">          &#125;</div><div class="line">          <span class="comment">// check ratio and if greater than desired ratio, trigger a rebalance for the topic partitions</span></div><div class="line">          <span class="comment">// that need to be on this broker</span></div><div class="line">          <span class="keyword">if</span> (imbalanceRatio &gt; (config.leaderImbalancePerBrokerPercentage.toDouble / <span class="number">100</span>)) &#123;</div><div class="line">            topicsNotInPreferredReplica.foreach &#123;</div><div class="line">              <span class="keyword">case</span>(topicPartition, replicas) =&gt; &#123;</div><div class="line">                inLock(controllerContext.controllerLock) &#123;</div><div class="line">                  <span class="comment">// do this check only if the broker is live and there are no partitions being reassigned currently</span></div><div class="line">                  <span class="comment">// and preferred replica election is not in progress</span></div><div class="line">                  <span class="keyword">if</span> (controllerContext.liveBrokerIds.contains(leaderBroker) &amp;&amp;</div><div class="line">                      controllerContext.partitionsBeingReassigned.size == <span class="number">0</span> &amp;&amp;</div><div class="line">                      controllerContext.partitionsUndergoingPreferredReplicaElection.size == <span class="number">0</span> &amp;&amp;</div><div class="line">                      !deleteTopicManager.isTopicQueuedUpForDeletion(topicPartition.topic) &amp;&amp;</div><div class="line">                      controllerContext.allTopics.contains(topicPartition.topic)) &#123;</div><div class="line">                    onPreferredReplicaElection(<span class="type">Set</span>(topicPartition), <span class="literal">true</span>)</div><div class="line">                  &#125;</div><div class="line">                &#125;</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * This callback is invoked by the reassigned partitions listener. When an admin command initiates a partition</div><div class="line">   * reassignment, it creates the /admin/reassign_partitions path that triggers the zookeeper listener.</div><div class="line">   * Reassigning replicas for a partition goes through a few steps listed in the code.</div><div class="line">   * RAR = Reassigned replicas</div><div class="line">   * OAR = Original list of replicas for partition</div><div class="line">   * AR = current assigned replicas</div><div class="line">   *</div><div class="line">   * 1. Update AR in ZK with OAR + RAR.</div><div class="line">   * 2. Send LeaderAndIsr request to every replica in OAR + RAR (with AR as OAR + RAR). We do this by forcing an update</div><div class="line">   *    of the leader epoch in zookeeper.</div><div class="line">   * 3. Start new replicas RAR - OAR by moving replicas in RAR - OAR to NewReplica state.</div><div class="line">   * 4. Wait until all replicas in RAR are in sync with the leader.</div><div class="line">   * 5  Move all replicas in RAR to OnlineReplica state.</div><div class="line">   * 6. Set AR to RAR in memory.</div><div class="line">   * 7. If the leader is not in RAR, elect a new leader from RAR. If new leader needs to be elected from RAR, a LeaderAndIsr</div><div class="line">   *    will be sent. If not, then leader epoch will be incremented in zookeeper and a LeaderAndIsr request will be sent.</div><div class="line">   *    In any case, the LeaderAndIsr request will have AR = RAR. This will prevent the leader from adding any replica in</div><div class="line">   *    RAR - OAR back in the isr.</div><div class="line">   * 8. Move all replicas in OAR - RAR to OfflineReplica state. As part of OfflineReplica state change, we shrink the</div><div class="line">   *    isr to remove OAR - RAR in zookeeper and sent a LeaderAndIsr ONLY to the Leader to notify it of the shrunk isr.</div><div class="line">   *    After that, we send a StopReplica (delete = false) to the replicas in OAR - RAR.</div><div class="line">   * 9. Move all replicas in OAR - RAR to NonExistentReplica state. This will send a StopReplica (delete = false) to</div><div class="line">   *    the replicas in OAR - RAR to physically delete the replicas on disk.</div><div class="line">   * 10. Update AR in ZK with RAR.</div><div class="line">   * 11. Update the /admin/reassign_partitions path in ZK to remove this partition.</div><div class="line">   * 12. After electing leader, the replicas and isr information changes. So resend the update metadata request to every broker.</div><div class="line">   *</div><div class="line">   * For example, if OAR = &#123;1, 2, 3&#125; and RAR = &#123;4,5,6&#125;, the values in the assigned replica (AR) and leader/isr path in ZK</div><div class="line">   * may go through the following transition.</div><div class="line">   * AR                 leader/isr</div><div class="line">   * &#123;1,2,3&#125;            1/&#123;1,2,3&#125;           (initial state)</div><div class="line">   * &#123;1,2,3,4,5,6&#125;      1/&#123;1,2,3&#125;           (step 2)</div><div class="line">   * &#123;1,2,3,4,5,6&#125;      1/&#123;1,2,3,4,5,6&#125;     (step 4)</div><div class="line">   * &#123;1,2,3,4,5,6&#125;      4/&#123;1,2,3,4,5,6&#125;     (step 7)</div><div class="line">   * &#123;1,2,3,4,5,6&#125;      4/&#123;4,5,6&#125;           (step 8)</div><div class="line">   * &#123;4,5,6&#125;            4/&#123;4,5,6&#125;           (step 10)</div><div class="line">   *</div><div class="line">   * Note that we have to update AR in ZK with RAR last since it's the only place where we store OAR persistently.</div><div class="line">   * This way, if the controller crashes before that step, we can still recover.</div><div class="line">   */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">onPartitionReassignment</span></span>(topicAndPartition: <span class="type">TopicAndPartition</span>, reassignedPartitionContext: <span class="type">ReassignedPartitionsContext</span>) &#123;</div><div class="line">    <span class="keyword">val</span> reassignedReplicas = reassignedPartitionContext.newReplicas</div><div class="line">    areReplicasInIsr(topicAndPartition.topic, topicAndPartition.partition, reassignedReplicas) <span class="keyword">match</span> &#123;</div><div class="line">      <span class="keyword">case</span> <span class="literal">false</span> =&gt;</div><div class="line">        info(<span class="string">"New replicas %s for partition %s being "</span>.format(reassignedReplicas.mkString(<span class="string">","</span>), topicAndPartition) +</div><div class="line">          <span class="string">"reassigned not yet caught up with the leader"</span>)</div><div class="line">        <span class="keyword">val</span> newReplicasNotInOldReplicaList = reassignedReplicas.toSet -- controllerContext.partitionReplicaAssignment(topicAndPartition).toSet</div><div class="line">        <span class="keyword">val</span> newAndOldReplicas = (reassignedPartitionContext.newReplicas ++ controllerContext.partitionReplicaAssignment(topicAndPartition)).toSet</div><div class="line">        <span class="comment">//1. Update AR in ZK with OAR + RAR.</span></div><div class="line">        updateAssignedReplicasForPartition(topicAndPartition, newAndOldReplicas.toSeq)</div><div class="line">        <span class="comment">//2. Send LeaderAndIsr request to every replica in OAR + RAR (with AR as OAR + RAR).</span></div><div class="line">        updateLeaderEpochAndSendRequest(topicAndPartition, controllerContext.partitionReplicaAssignment(topicAndPartition),</div><div class="line">          newAndOldReplicas.toSeq)</div><div class="line">        <span class="comment">//3. replicas in RAR - OAR -&gt; NewReplica</span></div><div class="line">        startNewReplicasForReassignedPartition(topicAndPartition, reassignedPartitionContext, newReplicasNotInOldReplicaList)</div><div class="line">        info(<span class="string">"Waiting for new replicas %s for partition %s being "</span>.format(reassignedReplicas.mkString(<span class="string">","</span>), topicAndPartition) +</div><div class="line">          <span class="string">"reassigned to catch up with the leader"</span>)</div><div class="line">      <span class="keyword">case</span> <span class="literal">true</span> =&gt;</div><div class="line">        <span class="comment">//4. Wait until all replicas in RAR are in sync with the leader.</span></div><div class="line">        <span class="keyword">val</span> oldReplicas = controllerContext.partitionReplicaAssignment(topicAndPartition).toSet -- reassignedReplicas.toSet</div><div class="line">        <span class="comment">//5. replicas in RAR -&gt; OnlineReplica</span></div><div class="line">        reassignedReplicas.foreach &#123; replica =&gt;</div><div class="line">          replicaStateMachine.handleStateChanges(<span class="type">Set</span>(<span class="keyword">new</span> <span class="type">PartitionAndReplica</span>(topicAndPartition.topic, topicAndPartition.partition,</div><div class="line">            replica)), <span class="type">OnlineReplica</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//6. Set AR to RAR in memory.</span></div><div class="line">        <span class="comment">//7. Send LeaderAndIsr request with a potential new leader (if current leader not in RAR) and</span></div><div class="line">        <span class="comment">//   a new AR (using RAR) and same isr to every broker in RAR</span></div><div class="line">        moveReassignedPartitionLeaderIfRequired(topicAndPartition, reassignedPartitionContext)</div><div class="line">        <span class="comment">//8. replicas in OAR - RAR -&gt; Offline (force those replicas out of isr)</span></div><div class="line">        <span class="comment">//9. replicas in OAR - RAR -&gt; NonExistentReplica (force those replicas to be deleted)</span></div><div class="line">        stopOldReplicasOfReassignedPartition(topicAndPartition, reassignedPartitionContext, oldReplicas)</div><div class="line">        <span class="comment">//10. Update AR in ZK with RAR.</span></div><div class="line">        updateAssignedReplicasForPartition(topicAndPartition, reassignedReplicas)</div><div class="line">        <span class="comment">//11. Update the /admin/reassign_partitions path in ZK to remove this partition.</span></div><div class="line">        removePartitionFromReassignedPartitions(topicAndPartition)</div><div class="line">        info(<span class="string">"Removed partition %s from the list of reassigned partitions in zookeeper"</span>.format(topicAndPartition))</div><div class="line">        controllerContext.partitionsBeingReassigned.remove(topicAndPartition)</div><div class="line">        <span class="comment">//12. After electing leader, the replicas and isr information changes, so resend the update metadata request to every broker</span></div><div class="line">        sendUpdateMetadataRequest(controllerContext.liveOrShuttingDownBrokerIds.toSeq, <span class="type">Set</span>(topicAndPartition))</div><div class="line">        <span class="comment">// signal delete topic thread if reassignment for some partitions belonging to topics being deleted just completed</span></div><div class="line">        deleteTopicManager.resumeDeletionForTopics(<span class="type">Set</span>(topicAndPartition.topic))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>partition reassign又具体做了些什么</strong>，上文 onPartitionReassignment 部分可以看出大概，不必追踪代码具体细节，只通过上述代码里方法名字和注释，大概可以了解到，在controller接收到reassign指令，并updateLeaderEpochAndSendRequest后，会新分配一个副本，并努力追上 Leader 的位移，从而加入ISR(In Sync Replicas)，待全部的RAR副本(Reassigned replicas)都加入 ISR 之后，就会进行分区 Leader 选举，选举完删除原有的副本，在Kafka扩容broker时，kafka-reassign-partitions.sh脚本的–generate/–execute 配合即可完成上述变更。</p>
<h2 id="Elasticsearch-的扩容"><a href="#Elasticsearch-的扩容" class="headerlink" title="Elasticsearch 的扩容"></a>Elasticsearch 的扩容</h2><p>同Kafka partition reassign一样，Elasticseach在扩展节点时也会遇到shards的平衡问题，此时通过master节点手动/自动指定shards之间的 rebalance，如通过控制集群的 cluster.routing.allocation.enable/cluster.routing.rebalance.enable来决定哪类分片可被分配/哪类分片可被再平衡，尽量做到不影响线上的读写。<br>这在主节点都具备至少一个从节点时，机制运行良好，但在些极端情况下，有些shards因不得已原因没有从shards，如何扩容而不影响线上读写呢？<br>下一篇文章里笔者会总结下，这里贴一张elasticsearch某个数据节点的cpu负载图，同时告知磁盘io/网络io图走势都和该cpu走势类似，你能在图上指出正常、磁盘超85%、磁盘超95%、挂载MFS存储、卸载MFS存储、扩容所对应的时间点吗（假设索引是daily的，只需指出天级别的即可）<br><img src="/images/20_elasticsearch_cpu_except.png" width="100%"></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>最后是，例行夹带私货部分。<br>设计模式至今仍被国内许多编程人奉为圭臬，也成了面试青睐的问题，若你从事架构/中间件，那可能必考题了。<br>十年前，笔者还是在校生的时候，是设计模式的拥趸，那一年笔者读完了从 HeadFirst的《设计模式》到一千多页《Java与模式》( <a href="https://book.douban.com/subject/1214074/" target="_blank" rel="external">https://book.douban.com/subject/1214074/</a> ,阎宏博士著 )，再到斥巨资买来GoF的《设计模式：可复用面向对象软件的基础》看完。<br>但经历越久，越觉得设计模式可以扩展一个人的编程世界，但亦有其局限性。<br><strong>为什么这么说？</strong><br>23个设计模式是Erich Gamma等四位博士(Gang of four), 从前人的经验中总结出来的，从面向对象的设计中精选出23种构建健壮/灵活代码设计的技巧，正如其前言所述 <i><strong>本书假设你至少已经比较熟悉一种面向对象编程语言，并且有一定的面向对象设计经验。当我们提及“类型”和“多态”，或“接口”继承与“实现”继承的关系时，你应该对这些概念了然于胸”</strong></i>。<br>23种模式比如工厂模式里分简单工厂/抽象工厂模式是否算设计模式，这也曾经是个争论点。<br>如今笔者认为设计模式是不存在的，如果类似主题的话，不如看《面向模式的软件架构》上下卷，后者更接近怎么去设计软件。<br>甚至，对于JAVA研发来说，背诵设计模式不如背诵阿里巴巴的《阿里巴巴Java规范》，尽管笔者对其评价是负面为主，但同意其在实际开发中的实用性。<br>不赞同上述观点的人可能会以JAVA的BIO就通过装饰者模式实现了各种便捷的reader/stream或者dubbo里的策略模式反驳笔者，但请问下，读小文件或配置之类的文件时大家的选择是各种stream装饰读，还是IOUtils.tostrings或者java 7后提供的Files.listAsstring之类方法“一言以蔽之”略过这些stream？高性能拷贝文件时大家又会选择各种stream组装吗？<br><strong>今人有二十三种设计模式，古人也有三十六计</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;i&gt;&lt;strong&gt;intro1&lt;/strong&gt;：kafk异常io图，kafka rebalance和reassigne区别&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro2&lt;/strong&gt;: kafka真的只能从leader partition读写吗&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro3&lt;/strong&gt;: 一个不太正常的elasticsaerch分片分布场景下的扩容&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;从一些系统监控图能看到些什么&quot;&gt;&lt;a href=&quot;#从一些系统监控图能看到些什么&quot; class=&quot;headerlink&quot; title=&quot;从一些系统监控图能看到些什么&quot;&gt;&lt;/a&gt;从一些系统监控图能看到些什么&lt;/h2&gt;&lt;p&gt;最近在排查线上问题时，留意到几台Kafka机器的基础的zabbix io/cpu监控，图一所示平稳读操作中夹杂一些尖峰，图二是之前放大的图&lt;br&gt;
    
    </summary>
    
    
      <category term="kafka" scheme="http://thomaslau.github.io/tags/kafka/"/>
    
      <category term="yearly" scheme="http://thomaslau.github.io/tags/yearly/"/>
    
      <category term="elasticsearch" scheme="http://thomaslau.github.io/tags/elasticsearch/"/>
    
      <category term="architecture" scheme="http://thomaslau.github.io/tags/architecture/"/>
    
  </entry>
  
  <entry>
    <title>一段IP查找函数的优化及其它</title>
    <link href="http://thomaslau.github.io/2019/12/03/2019-12-03-on_optimising_a_ip_find_function/"/>
    <id>http://thomaslau.github.io/2019/12/03/2019-12-03-on_optimising_a_ip_find_function/</id>
    <published>2019-12-02T16:59:10.000Z</published>
    <updated>2019-12-03T01:06:00.958Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><i><strong>intro1</strong>：对一段解析17monipdb/ipip.net ip库 函数的 15倍-70倍-300倍 性能优化</i><br><i><strong>intro2</strong>: 一个sql count 语句的优化</i></p>
</blockquote>
<p>声明：</p>
<ol>
<li>本文代码均为本人所写或可在网上搜索的到的开源代码，遵循开源协议。</li>
<li>文中引用代码不涉及所就职公司代码，即便有也是本人从开源代码获取，或做了混淆处理。<a id="more"></a>
<h4 id="起因："><a href="#起因：" class="headerlink" title="起因："></a>起因：</h4>先看一段某系统中的的IP查询的代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IpParse</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> offset;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] index = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ByteBuffer dataBuffer;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ByteBuffer indexBuffer;</div><div class="line">    ...</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Area <span class="title">find</span><span class="params">(String ip)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ip_prefix_value = <span class="keyword">new</span> Integer(ip.substring(<span class="number">0</span>, ip.indexOf(<span class="string">"."</span>)));</div><div class="line">        <span class="keyword">long</span> ip2long_value = ip2long(ip);</div><div class="line">        <span class="keyword">int</span> start = index[ip_prefix_value];</div><div class="line">        <span class="keyword">int</span> max_comp_len = offset - <span class="number">1028</span>;</div><div class="line">        <span class="keyword">long</span> index_offset = -<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> index_length = -<span class="number">1</span>;</div><div class="line">        <span class="keyword">byte</span> b = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (start = start * <span class="number">8</span> + <span class="number">1024</span>; start &lt; max_comp_len; start += <span class="number">8</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (int2long(indexBuffer.getInt(start)) &gt;= ip2long_value) &#123;</div><div class="line">                index_offset = bytesToLong(b, indexBuffer.get(start + <span class="number">6</span>), indexBuffer.get(start + <span class="number">5</span>),</div><div class="line">                        indexBuffer.get(start + <span class="number">4</span>));</div><div class="line">                index_length = <span class="number">0xFF</span> &amp; indexBuffer.get(start + <span class="number">7</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">byte</span>[] areaBytes;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            dataBuffer.position(offset + (<span class="keyword">int</span>) index_offset - <span class="number">1024</span>);</div><div class="line">            areaBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[index_length];</div><div class="line">            dataBuffer.get(areaBytes, <span class="number">0</span>, index_length);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Area(<span class="keyword">new</span> String(areaBytes).split(<span class="string">"\t"</span>, -<span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 读取 ip 库到 dataBuffer</span></div><div class="line">        <span class="comment">// dataBuffer 读取并设置 indexBuffer</span></div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>不知道读者看到这段代码是否有所忆，笔者第一眼看到这段代码时，就想起很久前还在用php解析17monipdb的IP库代码，解析部分代码，尤其是256个数组、ip2long等几个ip处理函数，看起来和网上代码的完全一样，只不过这里是参考了c#实现。<br>17monipdb曾是一个开放的优质的ip库，后来似乎属ipip.net这家公司所有(非官方信息，网上资料较少，从百度结果/代码/数据格式推测)，并另起一收费版ip库。在这之前，更为大家使用的是QQ IP数据库，也叫纯真IP数据库，它最为熟知的是一个叫做 qqwry.dat 的二进制文件。笔者曾在实习的第一家公司时，就是用 C 语言解析 qqwry.dat 的文件，根据IP获取省市信息，至今还依稀记得它分为头信息/数据段/索引段，从索引段读取索引/偏移信息并对数据段建立索引后方可使用，17monipdb/ipip.net也是这个原理，<a href="https://blog.csdn.net/donghuib/article/details/53736764" target="_blank" rel="external">这里看17monip数据格式</a>。</p>
<h4 id="言归正传"><a href="#言归正传" class="headerlink" title="言归正传"></a>言归正传</h4><p>当笔者被告知这段代码性能能达到300万/s的查询次时，其实是怀疑的，毕竟有一个大且不可优化的锁lock了查询函数的大部分，事实上性能确实未达到20万/s(下文会附上数据)。<br><strong>如何优化呢？</strong><br>先看关键部分，lock.lock()， 这个lock其实是一个ReentrantLock，也就是相当于synchronize，一个完全的悲观锁，虽然java(似乎是1.6以后，对ReentrantLock做了比synchronize好一点的优化),也就是说，这里多线程访问其实是线性的。<br><strong>为什么这里要lock呢，可以优化吗？</strong><br>这里用lock是因为涉及的ByteBuffer几个操作不是线程安全的，其实上文 indexBuffer 也同样非 Thread-safe的，只是这里的操作相当于不可变量(immutable)，所以不加锁(lock)也未产生并发问题。正是因为有ByteBuffer的非线程安全操作，所以这里不会采用优化锁的思路去优化，因为首先想到的是ByteBuffer替换为byte数组，这样所有offset/偏移都是方法局部变量，无所谓并发了，企图用ByteBuffer这个所谓的零拷贝技术实在是大材小用/滥用/金玉其外，实际上，<strong>七牛就有个byte数组的实现</strong>，<a href="https://github.com/qiniu/ip17mon-java" target="_blank" rel="external">ip17mon-java</a>，正如其自称“IP 17mon java version, 比官方的速度快很多，支持监视文件改动自动加载”，下文会对其做个benchmark/或对其做个指正，并对比下和笔者B Tree实现的哪个更快。<br><blockquote><p>题外话：为什么这里要lock呢，其实可能还有一个考虑，就是实现者可能想实现动态更新IP库信息(包括文件改动全量更新/部分更新)。<br>如果全量更新，其实可以有其他lockless的方式优化，就是将IP库信息设置为volatile/autorefference的，更新的时候加锁或CAS方式(这也是下文代码采用方式)，find函数可以采用经典的Doug Lee在JUC包采用的方法local变量保存引用。<br>如果部分更新，那么不建议这么做，因为要修改索引段数据，索引段本身是个数组，大部分改动不会只是追加的方式，那样不比全量更新改动更少。</p>
</blockquote></p>
<h4 id="但有没有其他更好的或更高性能的实现呢？"><a href="#但有没有其他更好的或更高性能的实现呢？" class="headerlink" title="但有没有其他更好的或更高性能的实现呢？"></a>但有没有其他更好的或更高性能的实现呢？</h4><p><strong>我想做的通用一点，且其格式扩展起来方便，或者性能高。</strong><br>因为是对查找性能要求高，所以首先想到了 BTree，看起来像数据库，实际上，一些数据库实现就有线程安全的BTree可借鉴，这样动态更新很方便。<br>我们知道Mysql数据库索引的innodb实现就是BTree，比如2000万(好像是)数据通常会用一个三层BTree即可满足，1-4次io就能定位数据，前文几个解析17monipdb的本质上也是个一层的BTree，一层有256个索引分段定位ip位于哪个“段”(类似Mysql的页)，之后就是从该页中进行二分查找，找到该ip所属的条目，该条目携带的信息即是其ip库地址信息。<br>这里只不过是一层，为了减少内存的花费。<br>需要先明确的一点，查询时，都会把ip通过移位转化为一个对应的long数值，然后通过long找到对应ip段。<br><strong>其次，我想做的更通用一点，因为通过第三方渠道获取的IP信息可能只是一行文本数据，不是17monipdb那样的结构化的二进制数据, 且方便其他扩展。</strong><br>综上，笔者决定采用 B+ Tree和地址数组 的数据结构保存IP库信息(BTree保存IP段-&gt;对应地址信息在地址数组下标)。<br>公司的IP数据也是文本方式提供，而国外就有个免费的基于文本的IP库 Maxmind geoip，它也是logstash官方ip插件在用/ELK等支持的IP库，我们配置logstash ip/地址功能时就是用这个免费IP库。该IP库主要分为两个文件 城市信息和IP段-城市id文件，下载下来后，IP段-城市id文件可能几百MB，加载会耗时，所以需要剔除部分信息。笔者简化后，城市信息/BTree实际占用内存约60MB，而17monipdb在20-30MB左右。</p>
<p>OceanBase/Hsqldb都有java版实现的B+Tree，但改起来麻烦，所以笔者直接用 <a href="https://en.wikibooks.org/wiki/Algorithm_Implementation/Trees/B%2B_tree" target="_blank" rel="external">维基百科</a>上的B+Tree代码。<br>代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> https://en.wikibooks.org/wiki/Algorithm_Implementation/Trees/B%2B_tree</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BPlusTree</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> Node&lt;V&gt; root;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> M_LEAF;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> N_INNER;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BPlusTree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(n, n);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BPlusTree</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        M_LEAF = m;</div><div class="line">        N_INNER = n;</div><div class="line">        root = <span class="keyword">new</span> LeafNode();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">long</span> key, V value)</span> </span>&#123;</div><div class="line">        Split&lt;V&gt; result = root.insert(key, value);</div><div class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</div><div class="line">            InnerNode _root = <span class="keyword">new</span> InnerNode();</div><div class="line">            _root.num = <span class="number">1</span>;</div><div class="line">            _root.keys[<span class="number">0</span>] = result.key;</div><div class="line">            _root.children[<span class="number">0</span>] = result.left;</div><div class="line">            _root.children[<span class="number">1</span>] = result.right;</div><div class="line">            root = _root;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">find</span><span class="params">(<span class="keyword">long</span> key)</span> </span>&#123;</div><div class="line">        Node&lt;V&gt; node = root;</div><div class="line">        <span class="keyword">while</span> (node <span class="keyword">instanceof</span> BPlusTree.InnerNode) &#123;</div><div class="line">            InnerNode inner = (InnerNode) node;</div><div class="line">            <span class="keyword">int</span> idx = inner.getLoc(key);</div><div class="line">            node = inner.children[idx];</div><div class="line">        &#125;</div><div class="line">        LeafNode leaf = (LeafNode) node;</div><div class="line">        <span class="keyword">int</span> idx = leaf.getLoc(key);</div><div class="line">        <span class="keyword">if</span> (idx &lt; leaf.num &amp;&amp; leaf.keys[idx]==key) &#123;</div><div class="line">            <span class="keyword">return</span> leaf.values[idx];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">findMinGTE</span><span class="params">(<span class="keyword">long</span> key)</span> </span>&#123;</div><div class="line">        Node&lt;V&gt; node = root;</div><div class="line">        <span class="keyword">while</span> (node <span class="keyword">instanceof</span> BPlusTree.InnerNode) &#123;</div><div class="line">            InnerNode inner = (InnerNode) node;</div><div class="line">            <span class="keyword">int</span> idx = inner.getLoc(key);</div><div class="line">            node = inner.children[idx];</div><div class="line">        &#125;</div><div class="line">        LeafNode leaf = (LeafNode) node;</div><div class="line">        <span class="keyword">int</span> idx = leaf.getLoc(key);</div><div class="line">        <span class="keyword">if</span> (idx &lt; leaf.num &amp;&amp; leaf.keys[idx] == key) &#123;</div><div class="line">            <span class="keyword">return</span> leaf.values[idx];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (idx &lt; leaf.num) &#123;</div><div class="line">                <span class="keyword">return</span> find(leaf.keys[idx]);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> find(leaf.keys[idx]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">protected</span> <span class="keyword">int</span> num;</div><div class="line">        <span class="keyword">protected</span> <span class="keyword">long</span>[] keys;</div><div class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLoc</span><span class="params">(<span class="keyword">long</span> key)</span></span>;</div><div class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> Split&lt;T&gt; <span class="title">insert</span><span class="params">(<span class="keyword">long</span> key, T value)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LeafNode</span> <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        <span class="keyword">final</span> V[] values = (V[]) <span class="keyword">new</span> Object[M_LEAF];</div><div class="line">        &#123;</div><div class="line">            keys = <span class="keyword">new</span> <span class="keyword">long</span>[M_LEAF];</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLoc</span><span class="params">(<span class="keyword">long</span> key)</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (keys[i] - key &gt;= <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> num;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Split&lt;V&gt; <span class="title">insert</span><span class="params">(<span class="keyword">long</span> key, V value)</span> </span>&#123;</div><div class="line">            <span class="keyword">int</span> i = getLoc(key);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.num == M_LEAF) &#123;</div><div class="line">                <span class="keyword">int</span> mid = (M_LEAF + <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">                <span class="keyword">int</span> sNum = <span class="keyword">this</span>.num - mid;</div><div class="line">                LeafNode sibling = <span class="keyword">new</span> LeafNode();</div><div class="line">                sibling.num = sNum;</div><div class="line">                System.arraycopy(<span class="keyword">this</span>.keys, mid, sibling.keys, <span class="number">0</span>, sNum);</div><div class="line">                System.arraycopy(<span class="keyword">this</span>.values, mid, sibling.values, <span class="number">0</span>, sNum);</div><div class="line">                <span class="keyword">this</span>.num = mid;</div><div class="line">                <span class="keyword">if</span> (i &lt; mid) &#123;</div><div class="line">                    <span class="keyword">this</span>.insertNonfull(key, value, i);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    sibling.insertNonfull(key, value, i - mid);</div><div class="line">                &#125;</div><div class="line">                Split&lt;V&gt; result = <span class="keyword">new</span> Split&lt;V&gt;(sibling.keys[<span class="number">0</span>],<span class="keyword">this</span>, sibling);</div><div class="line">                <span class="keyword">return</span> result;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">this</span>.insertNonfull(key, value, i);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertNonfull</span><span class="params">(<span class="keyword">long</span> key, V value, <span class="keyword">int</span> idx)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (idx &lt; num &amp;&amp; keys[idx] == key) &#123;</div><div class="line">                values[idx] = value;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                System.arraycopy(keys, idx, keys, idx + <span class="number">1</span>, num - idx);</div><div class="line">                System.arraycopy(values, idx, values, idx + <span class="number">1</span>, num - idx);</div><div class="line">                keys[idx] = key;</div><div class="line">                values[idx] = value;</div><div class="line">                num++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerNode</span> <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        <span class="keyword">final</span> Node&lt;V&gt;[] children = <span class="keyword">new</span> Node[N_INNER + <span class="number">1</span>];</div><div class="line">        &#123;</div><div class="line">            keys = <span class="keyword">new</span> <span class="keyword">long</span>[N_INNER];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLoc</span><span class="params">(<span class="keyword">long</span> key)</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (keys[i] - key &gt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> num;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Split&lt;V&gt; <span class="title">insert</span><span class="params">(<span class="keyword">long</span> key, V value)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.num == N_INNER) &#123;</div><div class="line">                <span class="keyword">int</span> mid = (N_INNER + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">                <span class="keyword">int</span> sNum = <span class="keyword">this</span>.num - mid;</div><div class="line">                InnerNode sibling = <span class="keyword">new</span> InnerNode();</div><div class="line">                sibling.num = sNum;</div><div class="line">                System.arraycopy(<span class="keyword">this</span>.keys, mid, sibling.keys, <span class="number">0</span>, sNum);</div><div class="line">                System.arraycopy(<span class="keyword">this</span>.children, mid, sibling.children, <span class="number">0</span>, sNum + <span class="number">1</span>);</div><div class="line">                <span class="keyword">this</span>.num = mid - <span class="number">1</span>;</div><div class="line">                Split&lt;V&gt; result = <span class="keyword">new</span> Split&lt;V&gt;(<span class="keyword">this</span>.keys[mid - <span class="number">1</span>], <span class="keyword">this</span>, sibling);</div><div class="line">                <span class="keyword">if</span> (key - result.key &lt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">this</span>.insertNonfull(key, value);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    sibling.insertNonfull(key, value);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> result;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">this</span>.insertNonfull(key, value);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertNonfull</span><span class="params">(<span class="keyword">long</span> key, V value)</span> </span>&#123;</div><div class="line">            <span class="keyword">int</span> idx = getLoc(key);</div><div class="line">            Split&lt;V&gt; result = children[idx].insert(key, value);</div><div class="line">            <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (idx == num) &#123;</div><div class="line">                    keys[idx] = result.key;</div><div class="line">                    children[idx] = result.left;</div><div class="line">                    children[idx + <span class="number">1</span>] = result.right;</div><div class="line">                    num++;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    System.arraycopy(keys, idx, keys, idx + <span class="number">1</span>, num - idx);</div><div class="line">                    System.arraycopy(children, idx, children, idx + <span class="number">1</span>, num - idx + <span class="number">1</span>);</div><div class="line">                    children[idx] = result.left;</div><div class="line">                    children[idx + <span class="number">1</span>] = result.right;</div><div class="line">                    keys[idx] = result.key;</div><div class="line">                    num++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Split</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> key;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Node&lt;T&gt; left;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Node&lt;T&gt; right;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Split</span><span class="params">(<span class="keyword">long</span> k, Node&lt;T&gt; l, Node&lt;T&gt; r)</span> </span>&#123;</div><div class="line">            key = k;</div><div class="line">            left = l;</div><div class="line">            right = r;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IPMaxV2</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> BPlusTree&lt;Integer&gt; bTree;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> CityInfo[] cityInfoArray;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(String ipDbMaxPath, String ipCityPath)</span> </span>&#123;</div><div class="line">        Map&lt;Long, Integer&gt; cityInfoMap_r = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">110_000</span>);</div><div class="line">        cityInfoArray = <span class="keyword">new</span> CityInfo[<span class="number">110_000</span>];</div><div class="line">        String line = <span class="keyword">null</span>;</div><div class="line">        Splitter splitter = Splitter.on(<span class="string">","</span>);</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(ipCityPath))) &#123;</div><div class="line">            <span class="comment">/*String */</span>line = br.readLine();</div><div class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">                List&lt;String&gt; arr = splitter.splitToList(line);</div><div class="line">                Long id = Long.valueOf(arr.get(<span class="number">0</span>));</div><div class="line">                String continentCode = <span class="string">"*"</span>; <span class="comment">// 适配ipipnet库 大陆信息为空，配置的AP_新加坡 是机会转化为 *_新加坡</span></div><div class="line">                String countryCode = arr.get(<span class="number">2</span>);</div><div class="line">                String country = countryNmaeAdjust(arr.get(<span class="number">3</span>));</div><div class="line">                String subCode = arr.get(<span class="number">4</span>);</div><div class="line">                String subName = provinceNmaeAdjust(arr.get(<span class="number">3</span>), arr.get(<span class="number">5</span>));</div><div class="line">                String cityName= arr.get(<span class="number">6</span>);</div><div class="line">                cityInfoArray[i++] = <span class="keyword">new</span> CityInfo(id, continentCode, countryCode, country, subCode, subName, cityName, arr.get(<span class="number">7</span>));</div><div class="line">                cityInfoMap_r.put(id, i);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="comment">// log.error("err line: " + line);</span></div><div class="line">            <span class="comment">// log.error("error load maxmind city info", e);</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//TODO ip库的问题：1.地域信息都是空的情况（如：86.62.5.0/24,,,,0,1,,,,） 2.是否存在ip跳跃的情况</span></div><div class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">        BPlusTree&lt;Integer&gt; bTree_r = <span class="keyword">new</span> BPlusTree&lt;&gt;(<span class="number">64</span>, <span class="number">64</span>);</div><div class="line">        <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(ipDbMaxPath))) &#123;</div><div class="line">            line = br.readLine();</div><div class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">                String[] arr = line.split(<span class="string">","</span>);</div><div class="line">                <span class="keyword">long</span> key = Long.valueOf(arr[<span class="number">0</span>]);</div><div class="line">                Long cityId = Long.valueOf(arr[<span class="number">1</span>]);</div><div class="line">                <span class="comment">// check_insert(key, cityId, arr, bTree_r);</span></div><div class="line">                cityId = (cityId.longValue() != <span class="number">0</span>) ? cityId:Long.valueOf(arr[<span class="number">1</span>]);</div><div class="line">                Integer idx = cityInfoMap_r.get(cityId);</div><div class="line">                <span class="comment">// System.err.println(line + "--" + idx);</span></div><div class="line">                bTree_r.insert(key, idx);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="comment">// log.error("error load maxmind ip lib", e);</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> readEnd = System.currentTimeMillis();</div><div class="line">        <span class="comment">// log.info("index ip cost: &#123;&#125; ms.", readEnd - start);</span></div><div class="line">        bTree = bTree_r;</div><div class="line">        cityInfoMap_r = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">// cityInfoArray = cityInfoMap_r;</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> CityInfo <span class="title">find</span><span class="params">(String ip)</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> ip_long = convIp2Long2(ip);</div><div class="line">        BPlusTree&lt;Integer&gt; bTree_r = bTree;</div><div class="line">        Integer id = bTree_r.findMinGTE(ip_long);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == id) &#123;</div><div class="line">            <span class="keyword">return</span> UNKNOWAREA;</div><div class="line">        &#125;</div><div class="line">        CityInfo cityInfo = cityInfoArray[id];</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == cityInfo) &#123;</div><div class="line">            <span class="keyword">return</span> UNKNOWAREA;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cityInfo;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> CityInfo <span class="title">find</span><span class="params">(<span class="keyword">long</span> ip)</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> ip_long = ip;</div><div class="line">        BPlusTree&lt;Integer&gt; bTree_r = bTree;</div><div class="line">        Integer id = bTree_r.findMinGTE(ip_long);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == id) &#123;</div><div class="line">            <span class="keyword">return</span> UNKNOWAREA;</div><div class="line">        &#125;</div><div class="line">        CityInfo cityInfo = cityInfoArray[id];</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == cityInfo) &#123;</div><div class="line">            <span class="keyword">return</span> UNKNOWAREA;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cityInfo;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CityInfo UNKNOWAREA = <span class="keyword">new</span> CityInfo(<span class="number">0L</span>, <span class="string">"*"</span>, <span class="string">"*"</span>, <span class="string">"*"</span>, <span class="string">"*"</span>, <span class="string">"*"</span>, <span class="string">"*"</span>, <span class="string">"*"</span>);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">setOrDefault</span><span class="params">(String xx)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">null</span> == xx || xx.length() == <span class="number">0</span>) ? <span class="string">"*"</span> : xx;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">b2int</span><span class="params">(<span class="keyword">byte</span>[] origBytes)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> value = <span class="number">0</span>;</div><div class="line">        <span class="keyword">switch</span> (origBytes.length) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            value = (<span class="keyword">int</span>) ((origBytes[<span class="number">0</span>] &amp; <span class="number">0x0F</span>));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">            value = <span class="number">10</span> * (<span class="keyword">int</span>) (origBytes[<span class="number">0</span>] &amp; <span class="number">0x0F</span>) + (origBytes[<span class="number">1</span>] &amp; <span class="number">0x0F</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">            value = <span class="number">100</span> * (<span class="keyword">int</span>) (origBytes[<span class="number">0</span>] &amp; <span class="number">0x0F</span>) + <span class="number">10</span> * (origBytes[<span class="number">1</span>] &amp; <span class="number">0x0F</span>) + (origBytes[<span class="number">2</span>] &amp; <span class="number">0x0F</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// return value &gt; 255 ? -1 : value;</span></div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">convIp2Long2</span><span class="params">(String ip)</span> </span>&#123;</div><div class="line">        String[] ss = ip.split(<span class="string">"\\."</span>);</div><div class="line">        <span class="keyword">if</span> (ss.length &lt; <span class="number">4</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ip_int = (b2int(ss[<span class="number">0</span>].getBytes()) &lt;&lt; <span class="number">24</span>) | (b2int(ss[<span class="number">1</span>].getBytes()) &lt;&lt; <span class="number">16</span>) | (b2int(ss[<span class="number">2</span>].getBytes()) &lt;&lt; <span class="number">8</span>)</div><div class="line">                | b2int(ss[<span class="number">3</span>].getBytes());</div><div class="line">        <span class="keyword">long</span> ret_long = ip_int &amp; <span class="number">0x7fffffffL</span>;</div><div class="line">        <span class="keyword">if</span> (ip_int &lt; <span class="number">0</span>) &#123;</div><div class="line">            ret_long |= <span class="number">0x080000000L</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret_long;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Deprecated</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">convIp2Long</span><span class="params">(String ip)</span> </span>&#123;</div><div class="line">        String[] ss = ip.split(<span class="string">"\\."</span>);</div><div class="line">        <span class="keyword">int</span> ip_int = (Integer.parseInt(ss[<span class="number">0</span>]) &lt;&lt; <span class="number">24</span>) | (Integer.parseInt(ss[<span class="number">1</span>]) &lt;&lt; <span class="number">16</span>) | (Integer.parseInt(ss[<span class="number">2</span>]) &lt;&lt; <span class="number">8</span>)</div><div class="line">                | Integer.parseInt(ss[<span class="number">3</span>]);</div><div class="line">        <span class="keyword">long</span> ret_long = ip_int &amp; <span class="number">0x7fffffffL</span>;</div><div class="line">        <span class="keyword">if</span> (ip_int &lt; <span class="number">0</span>) &#123;</div><div class="line">            ret_long |= <span class="number">0x080000000L</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret_long;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addPrivateNetInfo</span><span class="params">(BPlusTree&lt;Long&gt; bTree, Map&lt;Long, CityInfo&gt; cityInfoMap)</span> </span>&#123;</div><div class="line">        <span class="comment">// ipv4 国际保留地址</span></div><div class="line">        String ipInfo = <span class="string">"16777215,1,1;184549375,1,1;1686110207,1,1;2147483647,1,1;2852061183,1,1;"</span></div><div class="line">                + <span class="string">"2887778303,1,1;3221225727,1,1;3221225479,1,1;3221225480,1,1;3221225481,1,1;"</span></div><div class="line">                + <span class="string">"3221225482,1,1;3221225642,1,1;3221225643,1,1;3221226239,1,1;3223307519,1,1;"</span></div><div class="line">                + <span class="string">"3224683007,1,1;3227018239,1,1;3232301055,1,1;3232706815,1,1;3323199487,1,1;"</span></div><div class="line">                + <span class="string">"3325256959,1,1;3405804031,1,1;4026531839,1,1;4294967295,1,1;4294967295,1,1"</span>;</div><div class="line">        <span class="keyword">for</span> (String ipip : ipInfo.split(<span class="string">";"</span>)) &#123;</div><div class="line">            String[] line = ipip.split(<span class="string">","</span>);</div><div class="line">            check_insert(Long.valueOf(line[<span class="number">0</span>]), Long.valueOf(line[<span class="number">1</span>]), line, bTree);</div><div class="line">        &#125;</div><div class="line">        cityInfoMap.put(<span class="number">1L</span>, <span class="keyword">new</span> CityInfo(<span class="number">1L</span>, <span class="string">"保留地址"</span>, <span class="string">"保留地址"</span>, <span class="string">"保留地址"</span>, <span class="string">"保留地址"</span>, <span class="string">"保留地址"</span>, <span class="string">"保留地址"</span>, <span class="string">"*"</span>));</div><div class="line">        cityInfoMap.put(<span class="number">0L</span>, <span class="keyword">new</span> CityInfo(<span class="number">0L</span>, <span class="string">"未定义"</span>, <span class="string">"未定义"</span>, <span class="string">"未定义"</span>, <span class="string">"未定义"</span>, <span class="string">"未定义"</span>, <span class="string">"未定义"</span>, <span class="string">"*"</span>));</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CityInfo</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</div><div class="line">    <span class="keyword">private</span> String continentCode;</div><div class="line">    <span class="keyword">private</span> String countryCode;</div><div class="line">    <span class="keyword">private</span> String countryName;</div><div class="line">    <span class="keyword">private</span> String subCode;</div><div class="line">    <span class="keyword">private</span> String subName;</div><div class="line">    <span class="keyword">private</span> String cityName;</div><div class="line">    <span class="keyword">private</span> String timeZone;</div><div class="line">    ...getter/setter</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>解释：</p>
<ol>
<li><strong>这里的find不是标准的BTree find 方法，因为存储的是IP段，所以BTree节点存的是IP界限，查询时对于查找不到返回null的[常见]会再次追溯父节点，返回大于该数值的最小(右侧最左)的节点，即 findGTE方法。</strong> </li>
<li>简单起见，代码中保证IP段连续/保留IP段这些没加进来，但是必须的，否则可能导致结果不准确。</li>
</ol>
<h4 id="下面是BenchMark数据"><a href="#下面是BenchMark数据" class="headerlink" title="下面是BenchMark数据"></a>下面是BenchMark数据</h4><p>使用 JMH 测试的性能，2-32线程:<br>target_ipparse表示原来的方法，target_localtor为七牛开源的解析方法，target_maxmindv2为笔者的B Tree方法。硬件为2017年 8G i5 new Mac，JDK信息如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># JMH version: 1.21</span></div><div class="line"><span class="comment"># VM version: JDK 1.8.0_151, Java HotSpot(TM) 64-Bit Server VM, 25.151-b12</span></div><div class="line"><span class="comment"># VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/bin/java</span></div><div class="line"><span class="comment"># VM options: -Dfile.encoding=UTF-8</span></div><div class="line"><span class="comment"># Warmup: 1 iterations, 10 s each</span></div><div class="line"><span class="comment"># Measurement: 3 iterations, 10 s each</span></div><div class="line"><span class="comment"># Timeout: 10 min per iteration</span></div><div class="line"><span class="comment"># Threads: 2 threads, will synchronize iterations</span></div><div class="line"><span class="comment"># Benchmark mode: Throughput, ops/time</span></div><div class="line">....</div><div class="line"><span class="comment"># 2 线程</span></div><div class="line">Benchmark                Mode  Cnt     Score      Error   Units</div><div class="line">JMHIP.target_ipparse    thrpt    3   113.956 ±  391.000  ops/ms</div><div class="line">JMHIP.target_localtor   thrpt    3  1846.572 ± 3566.676  ops/ms</div><div class="line">JMHIP.target_maxmindv2  thrpt    3  1995.854 ±  125.343  ops/ms</div><div class="line"></div><div class="line"><span class="comment"># 4 线程</span></div><div class="line">Benchmark                Mode  Cnt     Score      Error   Units</div><div class="line">JMHIP.target_ipparse    thrpt    3   137.426 ±   18.704  ops/ms</div><div class="line">JMHIP.target_localtor   thrpt    3  1847.472 ±  951.733  ops/ms</div><div class="line">JMHIP.target_maxmindv2  thrpt    3  1817.778 ± 3347.274  ops/ms</div><div class="line"></div><div class="line"><span class="comment"># 8 线程</span></div><div class="line">Benchmark                Mode  Cnt     Score     Error   Units</div><div class="line">JMHIP.target_ipparse    thrpt    3   140.642 ±  79.715  ops/ms</div><div class="line">JMHIP.target_localtor   thrpt    3  1888.104 ± 439.820  ops/ms</div><div class="line">JMHIP.target_maxmindv2  thrpt    3  2040.365 ± 336.506  ops/ms</div><div class="line"></div><div class="line"><span class="comment"># 16 线程</span></div><div class="line">Benchmark                Mode  Cnt     Score     Error   Units</div><div class="line">JMHIP.target_ipparse    thrpt    3   139.092 ±  33.246  ops/ms</div><div class="line">JMHIP.target_localtor   thrpt    3  1792.992 ± 396.497  ops/ms</div><div class="line">JMHIP.target_maxmindv2  thrpt    3  2077.337 ± 278.774  ops/ms</div><div class="line"></div><div class="line"><span class="comment"># 32 线程</span></div><div class="line">Benchmark                Mode  Cnt     Score      Error   Units</div><div class="line">JMHIP.target_ipparse    thrpt    3   110.591 ±  128.144  ops/ms</div><div class="line">JMHIP.target_localtor   thrpt    3  1538.003 ± 1925.825  ops/ms</div><div class="line">JMHIP.target_maxmindv2  thrpt    3  2079.801 ±  838.722  ops/ms</div></pre></td></tr></table></figure></p>
<p>JMH类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="meta">@State</span>(Scope.Benchmark)</div><div class="line"><span class="meta">@BenchmarkMode</span>(Mode.Throughput)</div><div class="line"><span class="meta">@OutputTimeUnit</span>(TimeUnit.MILLISECONDS)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMHIP</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> Locator locator;</div><div class="line">    <span class="keyword">static</span> IpParse ipParse;</div><div class="line">    <span class="keyword">static</span> IPMaxV2 ipmaxv2;</div><div class="line">    <span class="meta">@Setup</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">target_blank</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        locator = Locator.loadFromLocal(<span class="string">"/Users/thomas/git/17monipdb.dat"</span>);</div><div class="line">        System.out.println(locator.find(<span class="string">"220.255.1.166"</span>));</div><div class="line">       </div><div class="line">        ipmaxv2 = <span class="keyword">new</span> IPMaxV2();</div><div class="line">        ipmaxv2.init(<span class="string">"/Users/thomas/git/maxmind_ip_data"</span>, <span class="string">"/Users/thomas/git/maxmind_city_data"</span>);</div><div class="line">        System.out.println(ipmaxv2.find(<span class="string">"220.255.1.166"</span>));</div><div class="line"></div><div class="line">        ipParse.load(<span class="string">"/Users/thomas/git/17monipdb.dat"</span>);</div><div class="line">        System.out.println(ipParse.find(<span class="string">"220.255.1.166"</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// @CompilerControl(CompilerControl.Mode.INLINE)</span></div><div class="line">    <span class="meta">@Benchmark</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">target_localtor</span><span class="params">()</span> </span>&#123;</div><div class="line">        locator.find(<span class="string">"220.255.1.166"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Benchmark</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">target_maxmindv2</span><span class="params">()</span> </span>&#123;</div><div class="line">        ipmaxv2.find(<span class="string">"220.255.1.166"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Benchmark</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">target_maxmindv2long</span><span class="params">()</span> </span>&#123;</div><div class="line">        ipmaxv2.find(<span class="number">16819199l</span>);<span class="comment">// 16819199 3707699622</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Benchmark</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">target_ipparse</span><span class="params">()</span> </span>&#123;</div><div class="line">        ipParse.find(<span class="string">"220.255.1.166"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</div><div class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder().include(JMHIP.class.getSimpleName()).warmupIterations(<span class="number">1</span>)</div><div class="line">                .measurementIterations(<span class="number">3</span>).threads(<span class="number">16</span>).forks(<span class="number">1</span>).build();</div><div class="line">        <span class="keyword">new</span> Runner(opt).run();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>针对这个结果几个有趣总结：</p>
<ol>
<li>几轮结果，ipparse/localtor 都是8线程(4核)时性能最好，而 maxmindv2比较稳定。</li>
<li>老的ipparse性能其实只有15万/s不到的吞吐量，localtor比maxmindv2稍微差点，但也可达到200万/s的吞吐量</li>
</ol>
<p>对于1，说明ipparse/localtor在更大如200线程并发时，性能其实会更差，甚至达不到10万/s，虽然对应用可能足够，但是和声称的差距还是蛮大的。<br>对于1，localtor似乎是无锁的，竟然也会因线程增长而减少，有点意外。另外如果仔细看 Localtor代码，可以发现其文件流/URL流都没有规范的关闭，AutoReload的那个类不够并发安全。<br>对于2，奇怪的是maxmindv2怎么始终不变？是不是还漏了哪里的明显的性能优化点？</p>
<h4 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h4><p>实际上：</p>
<ol>
<li>是的，find(String ip) 这个方法里，convIp2Long2(ip)也耗费许多性能，如果用 find(long ip)替代，还可以有 5倍性能的提升！(一个快速把字符串ip转化为long数字的方法就是使用查表方法，毕竟只额外需一个长度为256的数组)。<br>见 下文benchmark数据。</li>
<li>上述ip 220.255.1.166或者说3707699622，其实是一个B+ Tree首次未命中的情况，如果首次命中性能会怎样？可以再有24倍的性能提升！做到这点其实不难，可以在创建B+ Tree索引时，叶节点加一个指针指向他的下一个兄弟叶节点。<br>这个是jmh数据，这也是为什么上文采用 220.255.1.166这个IP，因为它可以代表大多数差性能下的查询。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 16 线程   string ip -&gt; long ip : 3707699622</span></div><div class="line">Benchmark                    Mode  Cnt     Score      Error   Units</div><div class="line">JMHIP.target_maxmindv2      thrpt    3  2110.476 ±  647.039  ops/ms</div><div class="line">JMHIP.target_maxmindv2long  thrpt    3  9010.649 ± 1973.710  ops/ms</div><div class="line"></div><div class="line"><span class="comment"># 16 线程   string ip -&gt; long ip + 命中 : 16819199</span></div><div class="line">Benchmark                    Mode  Cnt      Score       Error   Units</div><div class="line">JMHIP.target_maxmindv2      thrpt    3   2068.251 ±   178.626  ops/ms</div><div class="line">JMHIP.target_maxmindv2long  thrpt    3  46669.170 ± 28929.424  ops/ms</div></pre></td></tr></table></figure>
</li>
</ol>
<p>总结下来，使用B Tree和优化convIp2Long2可以有70倍性能提升的，这还是在ipparse 表现最好情况下，如果再优化BTree首次命中情况，就会有约300倍性能提升了。</p>
<h4 id="SQL-count-id"><a href="#SQL-count-id" class="headerlink" title="SQL count(id)"></a>SQL count(id)</h4><p>几个月前，朋友问的一个问题，是我几年前写的系统，大概是定时刷Mysql数据库的任务，3分钟一次，数据量最近破千万了，加了功能，发现任务耗时超过了3分钟，咨询我优化下。<br>N年不做数据库相关的我，不再熟练sql优化了，看到代码里sql语句其实还是有种放弃的感觉，但好在看到有几条类似：<br>    <strong>select count(*) from xxx</strong><br>的统计sql,id就是各个表的主键索引，试着把它换为 count一个二级索引，即一个非空且index的列：<br>    <strong>select count(*) from xxx where uid &gt; 0</strong><br>耗时还是能从4秒多提升到0.37秒。勉强挤进2分半了。<br>因为第一种要全表扫描，但是mysql innodb 的clustered index其实把主键和行数据存放在一起的[这也是为什么列存储兴起]，但二级索引(secondary index)不会包含，仅记录主键指向行记录。<br><strong>对于用count(*)/count(id)统计表记录总数时，利用二级索引进行count会快些。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;i&gt;&lt;strong&gt;intro1&lt;/strong&gt;：对一段解析17monipdb/ipip.net ip库 函数的 15倍-70倍-300倍 性能优化&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro2&lt;/strong&gt;: 一个sql count 语句的优化&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;声明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本文代码均为本人所写或可在网上搜索的到的开源代码，遵循开源协议。&lt;/li&gt;
&lt;li&gt;文中引用代码不涉及所就职公司代码，即便有也是本人从开源代码获取，或做了混淆处理。
    
    </summary>
    
    
      <category term="B Tree" scheme="http://thomaslau.github.io/tags/B-Tree/"/>
    
      <category term="17monipdb" scheme="http://thomaslau.github.io/tags/17monipdb/"/>
    
      <category term="guava ratelimiter" scheme="http://thomaslau.github.io/tags/guava-ratelimiter/"/>
    
      <category term="sql.count" scheme="http://thomaslau.github.io/tags/sql-count/"/>
    
  </entry>
  
  <entry>
    <title>海量数据计数的一个方法分析</title>
    <link href="http://thomaslau.github.io/2019/11/20/2019-11-20-on_redis_hyperloglog/"/>
    <id>http://thomaslau.github.io/2019/11/20/2019-11-20-on_redis_hyperloglog/</id>
    <published>2019-11-20T15:59:10.000Z</published>
    <updated>2019-11-21T01:09:12.681Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><i><strong>intro1</strong>：如何存储以及计算一份资源的累积UV/PV？</i><br><i><strong>intro2</strong>: 使用 hyperloglog 究竟有多节省内存呢？</i></p>
</blockquote>
<h4 id="现象和问题："><a href="#现象和问题：" class="headerlink" title="现象和问题："></a>现象和问题：</h4><p>接一需求，一顿抽丝剥茧去干扰取核心后才弄清楚原始的需求：即时的计算资源累积UV，即对uid去重后进行计数，超阈值则上报。</p>
<h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>自然想到了Redis的 Hyperloglog[以下简称HLL] 数据结构计数。<br><blockquote><p>Redis的HyperLogLog 每Key只需要12kB就可以统计大到 2^64个的用户，而保持0.81%的误差率。</p>
</blockquote><br><a id="more"></a><br>文末备注几个关于 HLL 的链接，这里简单白话一下HLL，方便阅读本文:<br>HLL是一种类似bitmap的计数原理，但由于采用了多次高离散的hash函数，使得它比 bitmap 消耗更少的内存，据说Google也在用它计数。<br>借助于精妙的假设采用时间换空间的思想，关键是这个时间还不大。</p>
<p>对于去重计数，redis提供的就有Set/Bitmap数据结构，这也是最开始考虑几次后对使用HLL有些疑虑原因，我们的资源总量预估十亿，如果仅按三个月过期来算也有数千万：<br><blockquote><ol>
<li>如果HLL每个Key计数也是耗费KB甚至最大12KB，那么redis内存可能就要上百GB到10个T这么多</li>
<li>长尾效应：显然这些资源，可能至少百分80不会过千或过万，这个时候是不是用 保存uid的set结构比HLL更节省内存呢</li>
</ol>
</blockquote><br>其实还想过性能足够，支持文件存储HBase、Cassandra、Pegasus等，但都未有提供HLL的数据结构或者操作接口，那么他们是否支持近似，比如自己写一个BloomFilter+计数或者HLL的value值操作？<br>估算一下Guava BloomFilter 实现对于500万千分之一的误差耗费空间是 80K bit，不比HLL小，而且众所周知，即便实现，也要解决一个大多数分布式存储更新同一个Key面临的问题： 即非同一线程/进程并发处理同一个Key时的原子性问题。而 HBase、Pegasus都有基于CAS原理的 check_and_put/check_and_mutate 类似操作，Cassandra也不同程度支持原子性更新，但实现起来对于耗时/快照空间可能要慎重，而且更新失败之后再获取再重试，即便几率很小也会导致实现的代码本身难看，而 Redis HLL是add操作即单进程封装了所有逻辑，可谓天生原子性，且数据只需存储一份，更且支持 merge另一个 HLL，而Guava的BloomFilter要直到 15.0 版本才支持 merge 另一个BloomFilter，而且另一个问题是 “As of Guava 23.0, this class is thread-safe and lock-free.”，23.0版本后 Guava 的BF才是线程安全的( <strong>意味着，以前很多介绍Guava Bloomfilter的文章，如果没提到最低支持版本就基本上不严谨/不实用的</strong>)。<br>也不会选择Spark，因为这里的问题本身在于持久化存储，而不是计算资源本身。<br>当然了，单Key的热点问题上述几个选型都是存在的。</p>
<p>所以，用 Redis+HLL，但是我确实想知道是否存在上文的长尾效应问题，也就是，一份资源累积独立访问用户数达到多少时用HLL比Set “划算”？</p>
<h4 id="动手试一下"><a href="#动手试一下" class="headerlink" title="动手试一下"></a>动手试一下</h4><p>redis提供了 info memory 和 debug object key 可供查看(精确或近似的对象级别的)内存消耗。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- pfadd_sadd.lua</span></div><div class="line"><span class="keyword">local</span> <span class="built_in">time</span> = redis.call(<span class="string">'time'</span>);</div><div class="line"><span class="keyword">local</span> now_micros = <span class="built_in">tonumber</span>(<span class="built_in">time</span>[<span class="number">1</span>])*<span class="number">1000000</span> + <span class="built_in">tonumber</span>(<span class="built_in">time</span>[<span class="number">2</span>]);</div><div class="line"><span class="built_in">math</span>.<span class="built_in">randomseed</span>(now_micros);</div><div class="line"><span class="keyword">local</span> num = <span class="built_in">math</span>.<span class="built_in">random</span>(<span class="number">100000000</span>, <span class="number">10000000000</span>);</div><div class="line"><span class="keyword">for</span> i=<span class="number">10000</span>,<span class="number">1</span>,<span class="number">-1</span> <span class="keyword">do</span></div><div class="line">    <span class="comment">-- redis.call('sadd',"myset", math.random(1000000000, 10000000000));</span></div><div class="line">    <span class="comment">-- redis.call('PFADD',"mypfa", math.random(1000000000, 10000000000));</span></div><div class="line">    redis.call(KEYS[<span class="number">1</span>],ARGV[<span class="number">1</span>], <span class="built_in">math</span>.<span class="built_in">random</span>(<span class="number">1000000000</span>, <span class="number">10000000000</span>));</div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="keyword">return</span> <span class="number">1</span></div></pre></td></tr></table></figure>
<p>这个lua脚本就是可以实现 n次随机uid去 sadd myset xxx 和 pfadd myHLL xxx 的操作，简单来说就是通过 lua 随机函数生成10000个随机uid，并sadd或者pfadd到redis里。<br>需要解释下为什么lua随机数这里代码有点”不走寻常路”</p>
<ol>
<li>如果直接用math.random() 初始化，可能会导致每次生成的随机uid 序列是一样的，即多次跑脚本后set数量不增。</li>
<li>为什么不用 math.randomseed(os.time()) 生成随机数更好看？试过，不过redis lua 编译器禁止调用系统相关的os函数，是的，安全考虑。</li>
</ol>
<p>运行：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➜  ztemp redis-cli --<span class="built_in">eval</span> pfadd_sadd.lua pfadd , <span class="string">"myHLL"</span></div><div class="line">(<span class="built_in">integer</span>) 1</div><div class="line">➜  ztemp redis-cli --<span class="built_in">eval</span> pfadd_sadd.lua sadd , <span class="string">"myset2"</span></div><div class="line">(<span class="built_in">integer</span>) 1</div><div class="line">➜  ztemp</div></pre></td></tr></table></figure></p>
<p>内存查看:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; info memory</div><div class="line"><span class="comment"># Memory</span></div><div class="line">used_memory:7594672</div><div class="line">used_memory_human:7.24M</div><div class="line">used_memory_rss:6213632</div><div class="line">used_memory_rss_human:5.93M</div><div class="line">...</div><div class="line">127.0.0.1:6379&gt; debug object myHLL</div><div class="line">Value at:0x7fb99e614160 refcount:1 encoding:raw serializedlength:10578 lru:14012310 lru_seconds_idle:15</div><div class="line">127.0.0.1:6379&gt; info memory</div><div class="line"><span class="comment"># Memory</span></div><div class="line">used_memory:7608176</div><div class="line">used_memory_human:7.26M</div><div class="line">used_memory_rss:6250496</div><div class="line">used_memory_rss_human:5.96M</div><div class="line">...</div><div class="line">127.0.0.1:6379&gt; debug object myset2</div><div class="line">Value at:0x7fb9a08e3870 refcount:1 encoding:hashtable serializedlength:499960 lru:14012406 lru_seconds_idle:12</div><div class="line">127.0.0.1:6379&gt; info memory</div><div class="line"><span class="comment"># Memory</span></div><div class="line">used_memory:13981680</div><div class="line">used_memory_human:13.33M</div><div class="line">used_memory_rss:8421376</div><div class="line">used_memory_rss_human:8.03M</div><div class="line">...</div><div class="line">127.0.0.1:6379&gt; pfcount myHLL</div><div class="line">(<span class="built_in">integer</span>) 99287</div><div class="line">127.0.0.1:6379&gt; scard myset2</div><div class="line">(<span class="built_in">integer</span>) 99991</div></pre></td></tr></table></figure></p>
<p>上面是测试 十万次随机(注意不是10万条)uid数据量差，还是蛮大的，分别是在 10KB和 6387KB。<br>ps. 这里也可以看到 lua 伪随机数效果还是不错的。<br>对于一千条测试下来 Set耗费是HLL的五倍。<br>还是蛮意外的。实际上 redis 作者 Salvatore Sanfilippo(Antirez)已经在代码注释里写了些参考数据，值得一看：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> ...</div><div class="line"> * The following table shows average cardinality vs bytes used, 100</div><div class="line"> * samples per cardinality (when the set was not representable because</div><div class="line"> * of registers with too big value, the dense representation size was used</div><div class="line"> * as a sample).</div><div class="line"> *</div><div class="line"> * 100 267</div><div class="line"> * 200 485</div><div class="line"> * 300 678</div><div class="line"> * 400 859</div><div class="line"> * 500 1033</div><div class="line"> * 600 1205</div><div class="line"> * 700 1375</div><div class="line"> * 800 1544</div><div class="line"> * 900 1713</div><div class="line"> * 1000 1882</div><div class="line"> * 2000 3480</div><div class="line"> * 3000 4879</div><div class="line"> * 4000 6089</div><div class="line"> * 5000 7138</div><div class="line"> * 6000 8042</div><div class="line"> * 7000 8823</div><div class="line"> * 8000 9500</div><div class="line"> * 9000 10088</div><div class="line"> * 10000 10591</div><div class="line"> *</div><div class="line"> * The dense representation uses 12288 bytes, so there is a big win up to</div><div class="line"> * a cardinality of ~2000-3000. For bigger cardinalities the constant times</div><div class="line"> * involved in updating the sparse representation is not justified by the</div><div class="line"> * memory savings. The exact maximum length of the sparse representation</div><div class="line"> * when this implementation switches to the dense representation is</div><div class="line"> * configured via the define server.hll_sparse_max_bytes.</div><div class="line"> */</div></pre></td></tr></table></figure></p>
<p>也就是说其实用户UV达到300就已经比set划算了。</p>
<h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><ol>
<li><a href="http://algo.inria.fr/flajolet/Publications/FlFuGaMe07.pdf" target="_blank" rel="external">Hyperloglog: The analysis of a near-optimal cardinality estimation algorithm</a></li>
<li><a href="http://www.rainybowe.com/blog/2017/07/13/%E7%A5%9E%E5%A5%87%E7%9A%84HyperLogLog%E7%AE%97%E6%B3%95/index.html" target="_blank" rel="external">神奇的HyperLogLog算法</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/58519480" target="_blank" rel="external">走近源码：神奇的HyperLogLog</a></li>
<li><a href="https://docs.redislabs.com/latest/ri/memory-optimizations/" target="_blank" rel="external">Memory Optimization</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;i&gt;&lt;strong&gt;intro1&lt;/strong&gt;：如何存储以及计算一份资源的累积UV/PV？&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro2&lt;/strong&gt;: 使用 hyperloglog 究竟有多节省内存呢？&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;现象和问题：&quot;&gt;&lt;a href=&quot;#现象和问题：&quot; class=&quot;headerlink&quot; title=&quot;现象和问题：&quot;&gt;&lt;/a&gt;现象和问题：&lt;/h4&gt;&lt;p&gt;接一需求，一顿抽丝剥茧去干扰取核心后才弄清楚原始的需求：即时的计算资源累积UV，即对uid去重后进行计数，超阈值则上报。&lt;/p&gt;
&lt;h4 id=&quot;方案&quot;&gt;&lt;a href=&quot;#方案&quot; class=&quot;headerlink&quot; title=&quot;方案&quot;&gt;&lt;/a&gt;方案&lt;/h4&gt;&lt;p&gt;自然想到了Redis的 Hyperloglog[以下简称HLL] 数据结构计数。&lt;br&gt;&lt;blockquote&gt;&lt;p&gt;Redis的HyperLogLog 每Key只需要12kB就可以统计大到 2^64个的用户，而保持0.81%的误差率。&lt;/p&gt;
&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://thomaslau.github.io/tags/Redis/"/>
    
      <category term="Hyperloglog" scheme="http://thomaslau.github.io/tags/Hyperloglog/"/>
    
  </entry>
  
  <entry>
    <title>Maven Profile的两个技巧和一个注意事项</title>
    <link href="http://thomaslau.github.io/2019/11/13/2019-11-13-on_maven_profiles/"/>
    <id>http://thomaslau.github.io/2019/11/13/2019-11-13-on_maven_profiles/</id>
    <published>2019-11-13T15:59:10.000Z</published>
    <updated>2019-11-15T00:55:59.330Z</updated>
    
    <content type="html"><![CDATA[<p><strong>现象和问题：</strong><br>写了个 xx-service 的基于maven项目，借助spring配置文件可执行，现在有需求是希望将该项目以SDk方式打包到maven仓库以便使用其中某些service类(暂不论合理与否)，如何通过maven profile实现在编辑器里不同开发人员默认用不同的 active profile？<br>实现不同的 active profile是希望双方在开发的时候，一个可以直接package出来 不含配置文件的纯 SDK 包，而我这边使用eclipse时可以默认生成需要的配置文件(local profile)到classpath下，免于命令行切换,提高开发/测试效率。<br><a id="more"></a><br>源项目通过Main函数启动，所以一种方案是定义spring.active.profile的方式，在eclipse配置参数方式启动，但是我不希望引入这种不纯粹的方式，过多依赖在一些零散的地方设置，就像我觉得使用lomb组件的不配谈代码优雅。<br>大部分了解maven的会想到active profile实现，但我也不想通过maven安装包下的 settings.xml中使用activeProfiles指定的方式，更不想通过两人部分代码不同的方式实现，即希望两人看到的代码一样。<br><strong>最好能都在项目代码里如pom.xml/xx.properties（配置即是代码!）里设置搞定。</strong><br><strong>那么有什么好办法呢？</strong><br>因为classpath生成是在编译之后，即maven编译之后的，所以不要妄想通过eclipse的配置 jvm run 参数，必定是在maven编译前或时(eclipse通过m2e和maven交互即时编译)，而maven pom.xml没有支持 if-else这类表达式语言的，实际上maevn基于配置的理念并不能支持其如DSL一般灵活，gradle可以。m2eclipse只是扩展了maven集成到eclipse的能力，并未扩展功能。<br>如果pom指定了A profile为active的，没有理由在其他人机器上A profile不是active的，除非maven支持基于机器等设置profile。好在maven 对profile本身支持力度是勉强可以达到上述功能。</p>
<h4 id="让我们先看看官方支持激活profile的几种方式："><a href="#让我们先看看官方支持激活profile的几种方式：" class="headerlink" title="让我们先看看官方支持激活profile的几种方式："></a>让我们先看看官方支持激活profile的几种方式：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--配置默认激活--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--通过jdk版本--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jdk</span>&gt;</span>[1.5,)<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--根据当前操作系统--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">os</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Windows XP<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">family</span>&gt;</span>Windows<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">arch</span>&gt;</span>x86<span class="tag">&lt;/<span class="name">arch</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2600<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">os</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--通过系统环境变量--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>test<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--通过文件的存在或缺失--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">missing</span>&gt;</span>target/generated-sources/axistools/wsdl2java/wdl<span class="tag">&lt;/<span class="name">missing</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exists</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">file</span>&gt;</span></div></pre></td></tr></table></figure>
<p>所以解决办法就是环境变量或者文件是否存在的方式。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>local<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">property</span>&gt;</span> </div><div class="line">           <span class="tag">&lt;<span class="name">name</span>&gt;</span>user.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">value</span>&gt;</span>thomas<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">log.path</span>&gt;</span>./logs<span class="tag">&lt;/<span class="name">log.path</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/profiles/common<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>sdk<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>该方式虽然也依赖一些配置，但好处是一目了然，看到代码即可明白。<br>通过上述配置，在我的eclipse上是classpath下包含配置的local模式可运行项目，而在对方机器就是sdk可打包项目，非常轻便了。<br>对方可通过 mvn deploy 正常的发布包，但是，当我使用 “mvn package deploy -Psdk” 时，却发现打出来的包中包含了配置文件！</p>
<h4 id="为什么，指定了-sdk-的profile却发现配置文件被包含进来"><a href="#为什么，指定了-sdk-的profile却发现配置文件被包含进来" class="headerlink" title="为什么，指定了 sdk 的profile却发现配置文件被包含进来"></a>为什么，指定了 sdk 的profile却发现配置文件被包含进来</h4><p>怎么定位问题呢？使用 help:active-profiles 命令试试：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">-&gt; mvn -P sdk  <span class="built_in">help</span>:active-profiles</div><div class="line">...</div><div class="line">Active Profiles <span class="keyword">for</span> Project <span class="string">'org.thomas:justitia-service:jar:0.2.8-SNAPSHOT'</span>:</div><div class="line"></div><div class="line">The following profiles are active:</div><div class="line"></div><div class="line"> - sonar (<span class="built_in">source</span>: external)</div><div class="line"> - gdev (<span class="built_in">source</span>: external)</div><div class="line"> - <span class="built_in">local</span> (<span class="built_in">source</span>: org.thomas:justitia-service:0.2.8-SNAPSHOT)</div><div class="line"> - sdk (<span class="built_in">source</span>: org.thomas:justitia-service:0.2.8-SNAPSHOT)</div><div class="line"> - dev (<span class="built_in">source</span>: org.thomas:justitia-parent:0.2.8-SNAPSHOT)</div><div class="line"> ...</div></pre></td></tr></table></figure></p>
<p>即，”mvn -P sdk”并不表示 仅使用 sdk 或parent/setting.xml里指定的active的profile打包，还包括任何能够匹配的profile！<br>即上面输出里看到的，默认生效的profile有 settings.xml定义的 sonar/gdev，还有本pom.xml里的 local/sdk 的profile，以及父类的默认 dev ，<em>这是一个注意事项</em></p>
<h4 id="怎么解决或者原因在哪呢？"><a href="#怎么解决或者原因在哪呢？" class="headerlink" title="怎么解决或者原因在哪呢？"></a>怎么解决或者原因在哪呢？</h4><p>其实 -P 参数支持简单的包含/排除运算，即 <strong>mvn package deploy -Plocal</strong> 就表示排除 local 这个active profile， !local 也表示排除， +local表示添加 local，<em>这是一个技巧</em>，代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; activeProfiles = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">List&lt;String&gt; inactiveProfiles = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line"><span class="keyword">if</span> ( commandLine.hasOption( CLIManager.ACTIVATE_PROFILES ) )</div><div class="line">&#123;</div><div class="line">    String[] profileOptionValues = commandLine.getOptionValues( CLIManager.ACTIVATE_PROFILES );</div><div class="line">    <span class="keyword">if</span> ( profileOptionValues != <span class="keyword">null</span> )</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> ( String profileOptionValue : profileOptionValues )</div><div class="line">        &#123;</div><div class="line">            StringTokenizer profileTokens = <span class="keyword">new</span> StringTokenizer( profileOptionValue, <span class="string">","</span> );</div><div class="line"></div><div class="line">            <span class="keyword">while</span> ( profileTokens.hasMoreTokens() )</div><div class="line">            &#123;</div><div class="line">                String profileAction = profileTokens.nextToken().trim();</div><div class="line"></div><div class="line">                <span class="keyword">if</span> ( profileAction.startsWith( <span class="string">"-"</span> ) || profileAction.startsWith( <span class="string">"!"</span> ) )</div><div class="line">                &#123;</div><div class="line">                    inactiveProfiles.add( profileAction.substring( <span class="number">1</span> ) );</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ( profileAction.startsWith( <span class="string">"+"</span> ) )</div><div class="line">                &#123;</div><div class="line">                    activeProfiles.add( profileAction.substring( <span class="number">1</span> ) );</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    activeProfiles.add( profileAction );</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>这是第二个技巧</em></p>
<h4 id="但为什么-sonar-gdev-local-sdk-dev-这些profile都生效了？"><a href="#但为什么-sonar-gdev-local-sdk-dev-这些profile都生效了？" class="headerlink" title="但为什么 sonar/gdev/local/sdk/dev 这些profile都生效了？"></a>但为什么 sonar/gdev/local/sdk/dev 这些profile都生效了？</h4><p>在<br>org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor.populateFromSettings(MavenExecutionRequest, Settings)<br>这个方法有涉及，不过这里我们倒序追溯一下：</p>
<p>mvn 命令的入口都在 org.apache.maven.cli.MavenCli 类里面，MavenCli 封装配置build好一个MavenExecutionRequest 之后，最终调用DefaultMaven.doExecute(MavenExecutionRequest request)实现，也是所有maven项目的MavenExecutionRequest，Project/Module/Artifact等都是在此实现的，该方法会调用这个方法进行 Project 的初始化：<br>org.apache.maven.project.DefaultProjectBuilder.initProject(MavenProject, ModelBuildingResult, Map<file, boolean="">)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initProject</span><span class="params">( MavenProject project, ModelBuildingResult result, Map&lt;File, Boolean&gt; profilesXmls )</span></span></div><div class="line">&#123;</div><div class="line">    Model model = result.getEffectiveModel();</div><div class="line">    project.setModel( model );</div><div class="line">    project.setOriginalModel( result.getRawModel() );</div><div class="line"></div><div class="line">    project.setFile( model.getPomFile() );</div><div class="line"></div><div class="line">    File parentPomFile = result.getRawModel( result.getModelIds().get( <span class="number">1</span> ) ).getPomFile();</div><div class="line">    project.setParentFile( parentPomFile );</div><div class="line"></div><div class="line">    Artifact projectArtifact =</div><div class="line">        repositorySystem.createArtifact( project.getGroupId(), project.getArtifactId(), project.getVersion(), <span class="keyword">null</span>,</div><div class="line">                                         project.getPackaging() );</div><div class="line">    project.setArtifact( projectArtifact );</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ( project.getFile() != <span class="keyword">null</span> )</div><div class="line">    &#123;</div><div class="line">        Build build = project.getBuild();</div><div class="line">        project.addScriptSourceRoot( build.getScriptSourceDirectory() );</div><div class="line">        project.addCompileSourceRoot( build.getSourceDirectory() );</div><div class="line">        project.addTestCompileSourceRoot( build.getTestSourceDirectory() );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    List&lt;Profile&gt; activeProfiles = <span class="keyword">new</span> ArrayList&lt;Profile&gt;();</div><div class="line">    activeProfiles.addAll( result.getActivePomProfiles( result.getModelIds().get( <span class="number">0</span> ) ) );</div><div class="line">    activeProfiles.addAll( result.getActiveExternalProfiles() );</div><div class="line">    project.setActiveProfiles( activeProfiles );</div><div class="line"></div><div class="line">    project.setInjectedProfileIds( <span class="string">"external"</span>, getProfileIds( result.getActiveExternalProfiles() ) );</div><div class="line">    <span class="keyword">for</span> ( String modelId : result.getModelIds() )</div><div class="line">    &#123;</div><div class="line">        project.setInjectedProfileIds( modelId, getProfileIds( result.getActivePomProfiles( modelId ) ) );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    String modelId = findProfilesXml( result, profilesXmls );</div><div class="line">    <span class="keyword">if</span> ( modelId != <span class="keyword">null</span> )</div><div class="line">    &#123;</div><div class="line">        ModelProblem problem =</div><div class="line">            <span class="keyword">new</span> DefaultModelProblem( <span class="string">"Detected profiles.xml alongside "</span> + modelId</div><div class="line">                + <span class="string">", this file is no longer supported and was ignored"</span> + <span class="string">", please use the settings.xml instead"</span>,</div><div class="line">                                     ModelProblem.Severity.WARNING, model, -<span class="number">1</span>, -<span class="number">1</span>, <span class="keyword">null</span> );</div><div class="line">        result.getProblems().add( problem );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></file,></p>
<p>这几个方法就是分别从 pom/父项目/maven settings中获取active profile的，而profile 判定isActive是支持系统变量方式的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">activeProfiles.addAll( result.getActivePomProfiles( result.getModelIds().get( <span class="number">0</span> ) ) );</div><div class="line">activeProfiles.addAll( result.getActiveExternalProfiles() );</div><div class="line">project.setActiveProfiles( activeProfiles );</div><div class="line">project.setInjectedProfileIds( <span class="string">"external"</span>, getProfileIds( result.getActiveExternalProfiles() ) );</div></pre></td></tr></table></figure></p>
<p>三类profile都会作为maven project的Active Profiles，这也是 help:active-profiles 实现原理。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getActiveProfileStatement</span><span class="params">( MavenProject project, StringBuilder message )</span></span></div><div class="line">&#123;</div><div class="line">    Map&lt;String, List&lt;String&gt;&gt; activeProfileIds = project.getInjectedProfileIds();</div><div class="line"></div><div class="line">    message.append( LS );</div><div class="line">    message.append( <span class="string">"Active Profiles for Project \'"</span> ).append( project.getId() ).append( <span class="string">"\':"</span> );</div><div class="line">    message.append( LS ).append( LS );</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ( activeProfileIds.isEmpty() )</div><div class="line">    &#123;</div><div class="line">        message.append( <span class="string">"There are no active profiles."</span> );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        message.append( <span class="string">"The following profiles are active:"</span> ).append( LS );</div><div class="line"></div><div class="line">        <span class="keyword">for</span> ( Map.Entry&lt;String, List&lt;String&gt;&gt; entry : activeProfileIds.entrySet() )</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span> ( String profileId : entry.getValue() )</div><div class="line">            &#123;</div><div class="line">                message.append( LS ).append( <span class="string">" - "</span> ).append( profileId );</div><div class="line">                message.append( <span class="string">" (source: "</span> ).append( entry.getKey() ).append( <span class="string">")"</span> );</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    message.append( LS );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>说两个不相关的问题：<br>1.<br>Mac 的sed命令不支持一些linux sed写法 众所周知，有时甚至导致一些莫名其妙运行结果，故建议避免使用，改为linux sed 即安装gsed：<br><strong>brew install gnu-sed</strong><br>不过不建议把gsed替换或直接别名为sed, 有些外部进程会调用sed。<br>2.<br>最近在写一个Chrome extension，发现下面写法返回空，要是把 sendResponse 放到chrome.storage.local.get的回调函数里就会报一个 类似：<br>“unchecked runtime lasterror the message port closed before a response”的错误，原因就是因为异步且没有作为回调函数的方式，但即便用Promise也是该情况，<br>解决办法是给函数加一个简单的 return true；即把下面else里已有的注释掉，现有注释部分打开，就解决该问题了。<a href="https://github.com/mozilla/webextension-polyfill/issues/130" target="_blank" rel="external">https://github.com/mozilla/webextension-polyfill/issues/130</a><br>虽然写过一些js代码，但觉得js的这个功能很神奇。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">chrome.runtime.onMessage.addListener(main.onMessageListener);</div><div class="line">...</div><div class="line">onMessageListener: <span class="function"><span class="keyword">function</span>(<span class="params">message, sender, sendResponse</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(message == <span class="string">'tabs'</span>)&#123;</div><div class="line">        sendResponse(main.queue.slice());</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">var</span> msg;</div><div class="line">        chrome.storage.local.get(message, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">            msg=result[message];</div><div class="line">            alert(result)</div><div class="line">        &#125;);</div><div class="line">        sendResponse(msg);</div><div class="line">        <span class="comment">/*new Promise(function(resolve, reject)&#123;</span></div><div class="line">            chrome.storage.local.get(message, function(result) &#123;</div><div class="line">                msg=result[message];</div><div class="line">                resolve(msg)</div><div class="line">            &#125;);</div><div class="line">        &#125;).then((data)=&gt; sendResponse(data));*/</div><div class="line">        <span class="comment">// return true</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// return true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;现象和问题：&lt;/strong&gt;&lt;br&gt;写了个 xx-service 的基于maven项目，借助spring配置文件可执行，现在有需求是希望将该项目以SDk方式打包到maven仓库以便使用其中某些service类(暂不论合理与否)，如何通过maven profile实现在编辑器里不同开发人员默认用不同的 active profile？&lt;br&gt;实现不同的 active profile是希望双方在开发的时候，一个可以直接package出来 不含配置文件的纯 SDK 包，而我这边使用eclipse时可以默认生成需要的配置文件(local profile)到classpath下，免于命令行切换,提高开发/测试效率。&lt;br&gt;
    
    </summary>
    
    
      <category term="Maven" scheme="http://thomaslau.github.io/tags/Maven/"/>
    
      <category term="Chrome" scheme="http://thomaslau.github.io/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>Https模式下Nginx+SpringSecurity+SSO的一个交互问题</title>
    <link href="http://thomaslau.github.io/2019/10/28/2019-10-28-nginx_springsecurity_cas_error/"/>
    <id>http://thomaslau.github.io/2019/10/28/2019-10-28-nginx_springsecurity_cas_error/</id>
    <published>2019-10-28T15:59:10.000Z</published>
    <updated>2019-11-15T00:11:31.884Z</updated>
    
    <content type="html"><![CDATA[<p><strong>现象和问题：</strong><br>有一个基于SpringBoot+Spring Security和CAS SSO的应用A，端口是8080，前端为Nginx，Nginx对外为https，即443端口，nginx内部反向代理到A就是常规的http协议了，应用A配置了正确的SSO login url和service url，历史原因，Nginx混乱的逻辑，没有配置80(http)强转443(https)。<br>问题来了：服务A本身运行正常，但是开启nginx前端代理时候，发现通过https进入系统A时，第一次(sso登录验证成功)通过url1总是跳转到 80端口(http)的服务，而不是443端口(https)的A应用，但是第二次再通过url1就能正常访问A应用。<br><a id="more"></a><br>怎么去解决这个问题呢？可能大部分人没看懂上文所述问题所在，也会猜到在Nginx上配置80强转443即可解决问题。<br>但本文希望探寻下问题的本质，以及有无其他解决办法。<br><strong>先看简化且脱敏后的nginx配置</strong><br>80端口为原生网页，443为A应用代理端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen       80;</div><div class="line">        server_name  localhost;</div><div class="line">        location / &#123;</div><div class="line">            root   html;</div><div class="line">            index  index.html index.htm;</div><div class="line">        &#125;</div><div class="line">        error_page   500 502 503 504  /50x.html;</div><div class="line">        location = /50x.html &#123;</div><div class="line">            root   html;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    upstream  audit_config.short &#123;</div><div class="line">      server 127.0.0.1:8080 max_fails=200 fail_timeout=10;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    server &#123;</div><div class="line">        listen       443 ssl;</div><div class="line">        server_name  dev.example.com;</div><div class="line">        ssl_certificate      /usr/local/etc/nginx/ssl/test.crt; # cert.pem;</div><div class="line">        ssl_certificate_key  /usr/local/etc/nginx/ssl/test.key; # cert.key;</div><div class="line">        ssl_session_cache    shared:SSL:1m;</div><div class="line">        ssl_session_timeout  5m;</div><div class="line">        ssl_ciphers  HIGH:!aNULL:!MD5;</div><div class="line">        ssl_prefer_server_ciphers  on;</div><div class="line">        proxy_set_header    Host $http_host;</div><div class="line">        location / &#123;</div><div class="line">            proxy_pass  http://audit_config.short;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    include servers/*;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果你对Spring Boot+Spring security+cas部分代码感兴趣，文末也附带脱敏后的代码了。<br>先透露下问题出在nginx的这行配置 “proxy_set_header Host $http_host”。</p>
<p>打开浏览器访问 <a href="https://dev.example.com/rule/index" target="_blank" rel="external">https://dev.example.com/rule/index</a> ,可以看到前面几个跳转 sso 服务器以及本地service url：<a href="https://dev.example.com/login/cas" target="_blank" rel="external">https://dev.example.com/login/cas</a> 都是正确的，即 SSO登录验证成功，访问<a href="https://dev.example.com/login/cas" target="_blank" rel="external">https://dev.example.com/login/cas</a> 也确实返回了 302 跳转链接： <a href="http://dev.example.com/rule/index" target="_blank" rel="external">http://dev.example.com/rule/index</a> ，问题就在302跳转这一步，返回302时的Location是http:// 而不是https://。</p>
<p><strong>如何定位是哪一步出错？</strong></p>
<p>如果把Spring Boot日志设置为debug level可能是可以的，幸而 Spring Security打印的日志足够详细，我们才能看到返回 302 条转链接相关一条log：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2019-10-28 23:27:56.268 DEBUG 50901 --- [nio-8099-exec-1] o.s.s.w.s.HttpSessionRequestCache        :  \</div><div class="line">DefaultSavedRequest added to Session: DefaultSavedRequest[http://dev.example.com/rule/index]</div></pre></td></tr></table></figure></p>
<p>即上面A应用返回的是http，而不是htts，是否意味着A应用的spring security cas的bug？<br>下面我会针对这条日志，看几种不同的解决方案。</p>
<h2 id="0"><a href="#0" class="headerlink" title="0."></a>0.</h2><p>先不看即决方案，先看 http:// 是怎么来的？通过 DefaultSavedRequest 源码，可以看到http其实是 从tomcat的Request的schema取得，tomcat的Request 解析/设置 有其本身的逻辑，当Nginx通过<a href="http://协议，就决定request只能获取http的schema。不过设置" target="_blank" rel="external">http://协议，就决定request只能获取http的schema。不过设置</a> “proxy_set_header Host $http_host” 就导致tomcat解析后，当发生302跳转时拼接的Host前半部分就是Host，即<a href="http://开头。" target="_blank" rel="external">http://开头。</a></p>
<p>上面日志，即Spring Security返回http是对错？有的人认为可能是bug，其实不是。Nginx和A应用之间是 http协议，也就是说，nginx传给A应用时已经向其屏蔽了客户端的https信息，如果Spring Security解析出 https的schema，那Spring Security才是真正有bug了。</p>
<p>故而考虑下面方法。</p>
<h2 id="1-修改Nginx到tomcat的配置"><a href="#1-修改Nginx到tomcat的配置" class="headerlink" title="1. 修改Nginx到tomcat的配置"></a>1. 修改Nginx到tomcat的配置</h2><p>修改Nginx到tomcat的配置，把客户端的 request 信息通过 proxy_set_header方式都传给 tomcat，从而让Spring security正确解析。<br>这个方法是可行的，可以参考这篇博文：<a href="https://blog.csdn.net/goldenfish1919/article/details/78815192" target="_blank" rel="external">SSO 无法获取正确的schema</a><br>简单摘录下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># nginx 配置</div><div class="line">proxy_set_header       Host $host; </div><div class="line">proxy_set_header  X-Real-IP  $remote_addr; </div><div class="line">proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for; </div><div class="line">proxy_set_header X-Forwarded-Proto  $scheme;</div><div class="line">---</div><div class="line"># tomcat 配置</div><div class="line"><span class="tag">&lt;<span class="name">Engine</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.RemoteIpValve"</span> </span></div><div class="line">    <span class="attr">remoteIpHeader</span>=<span class="string">"X-Forwarded-For"</span> </div><div class="line">    <span class="attr">protocolHeader</span>=<span class="string">"X-Forwarded-Proto"</span> </div><div class="line">    <span class="attr">protocolHeaderHttpsValue</span>=<span class="string">"https"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">Engine</span> &gt;</span></div></pre></td></tr></table></figure></p>
<p>如果你的应用复杂，多处使用到客户端原始的 request 信息里的header等(或不仅仅在sso登录这一步使用)，那么 推荐该方式，虽然 使用/配置 起来较为复杂。</p>
<h2 id="2-修改-Spring-Security-CAS代码"><a href="#2-修改-Spring-Security-CAS代码" class="headerlink" title="2. 修改 Spring Security CAS代码"></a>2. 修改 Spring Security CAS代码</h2><p>能否修改Spring Security或者 CAS代码来实现？既然nginx传给应用A时已经丢失了schema信息，那么能否通过Spring的配置信息设置正确的Location？<br>让我们先看看 Spring Security 在哪里生成该Location。追寻 CasAuthenticationFilter 这个CAS的SSO实现filter，可以发现在 SavedRequestAwareAuthenticationSuccessHandler 通过 DefaultRedirectStrategy 生成了 302跳转的redirectUrl：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultRedirectStrategy</span> <span class="keyword">implements</span> <span class="title">RedirectStrategy</span> </span>&#123;</div><div class="line">...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRedirect</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></div><div class="line">            String url) <span class="keyword">throws</span> IOException &#123;</div><div class="line">        String redirectUrl = calculateRedirectUrl(request.getContextPath(), url);</div><div class="line">        redirectUrl = response.encodeRedirectURL(redirectUrl);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">            logger.debug(<span class="string">"Redirecting to '"</span> + redirectUrl + <span class="string">"'"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        response.sendRedirect(redirectUrl);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">calculateRedirectUrl</span><span class="params">(String contextPath, String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!UrlUtils.isAbsoluteUrl(url)) &#123;</div><div class="line">            <span class="keyword">if</span> (isContextRelative()) &#123;</div><div class="line">                <span class="keyword">return</span> url;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> contextPath + url;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Full URL, including http(s)://</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!isContextRelative()) &#123;</div><div class="line">            <span class="keyword">return</span> url;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Calculate the relative URL from the fully qualified URL, minus the last</span></div><div class="line">        <span class="comment">// occurrence of the scheme and base context.</span></div><div class="line">        url = url.substring(url.lastIndexOf(<span class="string">"://"</span>) + <span class="number">3</span>); <span class="comment">// strip off scheme</span></div><div class="line">        url = url.substring(url.indexOf(contextPath) + contextPath.length());</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (url.length() &gt; <span class="number">1</span> &amp;&amp; url.charAt(<span class="number">0</span>) == <span class="string">'/'</span>) &#123;</div><div class="line">            url = url.substring(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> url;</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重写 sendRedirect 方法即可，即直接加个 如果redirect url以<a href="http://开头则替换为https://的逻辑。" target="_blank" rel="external">http://开头则替换为https://的逻辑。</a><br>不过由于Location是在 Spring Request里拼成的，有的同学可能会想到，那么是否可以通过只让这个 Location 以 // 开头，这样能适配http/https，即是否可以用下面方式？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (url.startsWith(<span class="string">"http://"</span>)) &#123;</div><div class="line">    tmpUrl = tmpUrl.substring(<span class="string">"http:"</span>.length());</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (url.startsWith(<span class="string">"https://"</span>)) &#123;</div><div class="line">    tmpUrl = tmpUrl.substring(<span class="string">"https:"</span>.length());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种方式是不可以的，org.apache.catalina.connector.Response.toAbsolute(String location) 这里实际上会对 redirectUrl 做一个schema的判断并修改为http或https。</p>
<p>但是考虑到，用https还是 http其实在配置 sso的 service url 时候已经可知了，所以可以根据 service url 来判断用http还是https，见下文MoreDefaultRedirectStrategy.java 部分代码。</p>
<h2 id="3-删除Nginx配置"><a href="#3-删除Nginx配置" class="headerlink" title="3. 删除Nginx配置"></a>3. 删除Nginx配置</h2><p>上面两种方法都可解决问题，方案2较之方案1改动少，而且无需改nginx，但是他们其实都违背了系统设计之间单一性，增加了不必要的耦合。<br><strong>如果 把 Nginx里 “proxy_set_header Host $http_host;” 这行去掉会发生什么呢？</strong><br>还是开启应用A的Spring log level为debug会发现<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2019-10-28 23:27:56.268 DEBUG 50901 --- [nio-8099-exec-1] o.s.s.w.s.HttpSessionRequestCache        :   \</div><div class="line">DefaultSavedRequest added to Session: DefaultSavedRequest[http://audit_config.short/rule/index]</div></pre></td></tr></table></figure></p>
<p>你是否感到奇怪这里返回的跳转链接是 <a href="http://audit_config.short/rule/index" target="_blank" rel="external">http://audit_config.short/rule/index</a> ？更奇怪的是返回给客户端(浏览器)竟然是正确的Location，即 <a href="https://dev.example.com/rule/index" target="_blank" rel="external">https://dev.example.com/rule/index</a> 。<br>首先注意 host 为 audit_config.short ，即配置的nginx的 upstream名字，而不是大多数人认为的 dev.example.com，<br>其次Nginx把 Location中的 audit_config.short 重写了。<br><strong>怎么去验证这个想法呢？</strong><br>nginx debug 日志打开：<br>1）server配置添加 error_log /path/to/log; 这一行。<br>2）如果是Mac brew 安装，需要 “brew install nginx –cc –with-debug”指令，记住这里要加 –cc的参数，否则不对，至少目前版本的不对。</p>
<p>可以看到一下nginx日志：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http upstream request: "/login/cas?ticket=ST-114933-UenJLINO5uyRLv6Mq1uA-cas01.example.org"</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http upstream process header</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 malloc: 00007FEFE0004C00:4096</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 recv: eof:1, avail:322, err:0</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 recv: fd:11 322 of 4096</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http proxy status 302 "302 "</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http proxy header: "X-Content-Type-Options: nosniff"</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http proxy header: "X-XSS-Protection: 1; mode=block"</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http proxy header: "Cache-Control: no-cache, no-store, max-age=0, must-revalidate"</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http proxy header: "Pragma: no-cache"</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http proxy header: "Expires: 0"</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http proxy header: "X-Frame-Options: DENY"</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 posix_memalign: 00007FEFE000DC00:4096 @16</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http proxy header: "Location: http://audit_config.short/rule/index"</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http proxy header: "Content-Length: 0"</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http proxy header: "Date: Fri, 25 Oct 2019 11:11:16 GMT"</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http proxy header: "Connection: close"</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http proxy header done</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 rewritten location: "/rule/index"</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 HTTP/1.1 302</span></div><div class="line">Server: nginx/1.17.3</div><div class="line">Date: Mon, 28 Oct 2019 11:11:16 GMT</div><div class="line">Content-Length: 0</div><div class="line">Location: https://dev.example.com/rule/index</div><div class="line">Connection: keep-alive</div><div class="line">X-Content-Type-Options: nosniff</div><div class="line">X-XSS-Protection: 1; mode=block</div><div class="line">Cache-Control: no-cache, no-store, max-age=0, must-revalidate</div><div class="line">Pragma: no-cache</div><div class="line">Expires: 0</div><div class="line">X-Frame-Options: DENY</div><div class="line"></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 write new buf t:1 f:0 00007FEFE000DE98, pos 00007FEFE000DE98, size: 344 file: 0, size: 0</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http write filter: l:0 f:0 s:344</span></div></pre></td></tr></table></figure></p>
<p>也就是说 Nginx其实已经 rewrite 302的Location了，那么什么情况下会rewrite呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">// ngx_http_upstream.c</div><div class="line">static ngx_int_t</div><div class="line">ngx_http_upstream_rewrite_location(ngx_http_request_t *r, ngx_table_elt_t *h,</div><div class="line">    ngx_uint_t offset)</div><div class="line">&#123;</div><div class="line">    ngx_int_t         rc;</div><div class="line">    ngx_table_elt_t  *ho;</div><div class="line"></div><div class="line">    ho = ngx_list_push(&amp;r-&gt;headers_out.headers);</div><div class="line">    if (ho == NULL) &#123;</div><div class="line">        return NGX_ERROR;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    *ho = *h;</div><div class="line"></div><div class="line">    if (r-&gt;upstream-&gt;rewrite_redirect) &#123;</div><div class="line">        rc = r-&gt;upstream-&gt;rewrite_redirect(r, ho, 0);</div><div class="line"></div><div class="line">        if (rc == NGX_DECLINED) &#123;</div><div class="line">            return NGX_OK;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (rc == NGX_OK) &#123;</div><div class="line">            r-&gt;headers_out.location = ho;</div><div class="line"></div><div class="line">            ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r-&gt;connection-&gt;log, 0,</div><div class="line">                           &quot;rewritten location: \&quot;%V\&quot;&quot;, &amp;ho-&gt;value);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return rc;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (ho-&gt;value.data[0] != &apos;/&apos;) &#123;</div><div class="line">        r-&gt;headers_out.location = ho;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /*</div><div class="line">     * we do not set r-&gt;headers_out.location here to avoid handling</div><div class="line">     * relative redirects in ngx_http_header_filter()</div><div class="line">     */</div><div class="line"></div><div class="line">    return NGX_OK;</div><div class="line">&#125;</div><div class="line">-----</div><div class="line">static ngx_int_t</div><div class="line">ngx_http_proxy_rewrite_redirect(ngx_http_request_t *r, ngx_table_elt_t *h,</div><div class="line">    size_t prefix)</div><div class="line">&#123;</div><div class="line">    size_t                      len;</div><div class="line">    ngx_int_t                   rc;</div><div class="line">    ngx_uint_t                  i;</div><div class="line">    ngx_http_proxy_rewrite_t   *pr;</div><div class="line">    ngx_http_proxy_loc_conf_t  *plcf;</div><div class="line"></div><div class="line">    plcf = ngx_http_get_module_loc_conf(r, ngx_http_proxy_module);</div><div class="line"></div><div class="line">    pr = plcf-&gt;redirects-&gt;elts;</div><div class="line"></div><div class="line">    if (pr == NULL) &#123;</div><div class="line">        return NGX_DECLINED;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    len = h-&gt;value.len - prefix;</div><div class="line"></div><div class="line">    for (i = 0; i &lt; plcf-&gt;redirects-&gt;nelts; i++) &#123;</div><div class="line">        rc = pr[i].handler(r, h, prefix, len, &amp;pr[i]);</div><div class="line"></div><div class="line">        if (rc != NGX_DECLINED) &#123;</div><div class="line">            return rc;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return NGX_DECLINED;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码看下去略长，不过可以参考官方注释：<br><a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_redirect" target="_blank" rel="external">http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_redirect</a><br>即，这里仅能进行简单的 proxy_pass 逆向替换。</p>
<p><strong>附：相关代码</strong><br>spring-boot.version：1.5.4.RELEASE<br>spring-security-cas：4.2.3.RELEASE</p>
<p>application.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">login.filter.type=devcas</div><div class="line">sso.cas.servicePath=https://sso.example.com/cas</div><div class="line"># sso.cas.localPath=http://127.0.0.1:8099/login/cas</div><div class="line">sso.cas.localPath=https://dev.example.com/login/cas</div></pre></td></tr></table></figure></p>
<p>下面是简单写的一段demo代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"login.filter"</span>, name = <span class="string">"type"</span>, havingValue = <span class="string">"devcas"</span>)</div><div class="line"><span class="comment">// @ConfigurationProperties(prefix = "sso.cas")</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CASConfiguation</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;sso.cas.servicePath&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String servicePath;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;sso.cas.localPath&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String localPath;</div><div class="line">   </div><div class="line">    <span class="meta">@Resource</span> CurrentUserDetailsService userDetailsService;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ServiceProperties <span class="title">serviceProperties</span><span class="params">()</span> </span>&#123;</div><div class="line">        ServiceProperties serviceProperties = <span class="keyword">new</span> ServiceProperties();</div><div class="line">        serviceProperties.setService(localPath);</div><div class="line">        <span class="comment">// serviceProperties.setSendRenew(false);</span></div><div class="line">        <span class="keyword">return</span> serviceProperties;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@Primary</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AuthenticationEntryPoint <span class="title">authenticationEntryPoint</span><span class="params">(ServiceProperties sP)</span> </span>&#123;</div><div class="line">        CasAuthenticationEntryPoint entryPoint = <span class="keyword">new</span> CasAuthenticationEntryPoint();</div><div class="line">        entryPoint.setLoginUrl(servicePath);</div><div class="line">        entryPoint.setServiceProperties(sP);</div><div class="line">        <span class="keyword">return</span> entryPoint;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> TicketValidator <span class="title">ticketValidator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cas20ServiceTicketValidator(servicePath);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> CasAuthenticationProvider <span class="title">casAuthenticationProvider</span><span class="params">()</span> </span>&#123;</div><div class="line">        CasAuthenticationProvider provider = <span class="keyword">new</span> CasAuthenticationProvider();</div><div class="line">        provider.setServiceProperties(serviceProperties());</div><div class="line">        provider.setTicketValidator(ticketValidator());</div><div class="line">        provider.setUserDetailsService(userDetailsService);</div><div class="line">        provider.setKey(<span class="string">"CAS_PROVIDER_LOCALHOST_9000"</span>);</div><div class="line">        <span class="keyword">return</span> provider;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SecurityContextLogoutHandler <span class="title">securityContextLogoutHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SecurityContextLogoutHandler();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> LogoutFilter <span class="title">logoutFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        LogoutFilter logoutFilter = <span class="keyword">new</span> LogoutFilter(servicePath+<span class="string">"/logout"</span>, securityContextLogoutHandler());</div><div class="line">        logoutFilter.setFilterProcessesUrl(<span class="string">"/logout/cas"</span>);</div><div class="line">        <span class="keyword">return</span> logoutFilter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SingleSignOutFilter <span class="title">singleSignOutFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        SingleSignOutFilter singleSignOutFilter = <span class="keyword">new</span> SingleSignOutFilter();</div><div class="line">        singleSignOutFilter.setCasServerUrlPrefix(servicePath+<span class="string">"/logout"</span>);</div><div class="line">        singleSignOutFilter.setIgnoreInitConfiguration(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> singleSignOutFilter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@EventListener</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SingleSignOutHttpSessionListener <span class="title">singleSignOutHttpSessionListener</span><span class="params">(HttpSessionEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SingleSignOutHttpSessionListener();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@EnableWebSecurity</span>(debug = <span class="keyword">true</span>)</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"login.filter"</span>, name = <span class="string">"type"</span>, havingValue = <span class="string">"devcas"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> AuthenticationProvider authenticationProvider;</div><div class="line">    <span class="keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint;</div><div class="line">    <span class="keyword">private</span> SingleSignOutFilter singleSignOutFilter;</div><div class="line">    <span class="keyword">private</span> LogoutFilter logoutFilter;</div><div class="line">    <span class="keyword">private</span> ServiceProperties serviceProperties;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecurityConfig</span><span class="params">(CasAuthenticationProvider casAuthenticationProvider, AuthenticationEntryPoint eP,</span></span></div><div class="line">            LogoutFilter lF, SingleSignOutFilter ssF, ServiceProperties serviceProperties) &#123;</div><div class="line">        <span class="keyword">this</span>.authenticationProvider = casAuthenticationProvider;</div><div class="line">        <span class="keyword">this</span>.authenticationEntryPoint = eP;</div><div class="line">        <span class="keyword">this</span>.logoutFilter = lF;</div><div class="line">        <span class="keyword">this</span>.singleSignOutFilter = ssF;</div><div class="line">        <span class="keyword">this</span>.serviceProperties = serviceProperties;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;       </div><div class="line">        http</div><div class="line">        .authorizeRequests()</div><div class="line">        .regexMatchers(<span class="string">"/accdenied"</span>, <span class="string">"/css.*"</span>, <span class="string">"/accdenied"</span>,<span class="string">"/assets.*"</span>, <span class="string">"/favicon.ico"</span>, <span class="string">"/login/cas.*"</span>).permitAll()</div><div class="line">        .antMatchers(<span class="string">"/test"</span>).authenticated()<span class="comment">//.access("hasRole('ROLE_USER')")</span></div><div class="line">        .antMatchers(<span class="string">"/secure/**"</span>).access(<span class="string">"hasRole('ROLE_SUPERVISOR')"</span>)</div><div class="line">        .anyRequest().authenticated()</div><div class="line">        .and()</div><div class="line">        .logout()</div><div class="line">        .logoutUrl(<span class="string">"/logout/cas"</span>)</div><div class="line">        .permitAll()</div><div class="line">        .and()</div><div class="line">        .csrf().disable();</div><div class="line"></div><div class="line">        http</div><div class="line">        .exceptionHandling().accessDeniedPage(<span class="string">"/accdenied"</span>)</div><div class="line">        .and().httpBasic().authenticationEntryPoint(authenticationEntryPoint)</div><div class="line">        .and()</div><div class="line">        .addFilter(casAuthenticationFilter(serviceProperties))</div><div class="line">        .addFilterBefore(logoutFilter, LogoutFilter.class)</div><div class="line">        .addFilterBefore(singleSignOutFilter, CasAuthenticationFilter.class);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        auth.authenticationProvider(authenticationProvider);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationManager <span class="title">authenticationManager</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProviderManager(Arrays.asList(authenticationProvider));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> CasAuthenticationFilter <span class="title">casAuthenticationFilter</span><span class="params">(ServiceProperties serviceProperties)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        CasAuthenticationFilter filter = <span class="keyword">new</span> CasAuthenticationFilter();</div><div class="line">        filter.setServiceProperties(serviceProperties);</div><div class="line">        filter.setAuthenticationManager(authenticationManager());</div><div class="line">        CasSuccessHandler casSuccessHandler = <span class="keyword">new</span> CasSuccessHandler();</div><div class="line">        filter.setAuthenticationSuccessHandler(casSuccessHandler);</div><div class="line">        <span class="keyword">return</span> filter;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CasSuccessHandler</span> <span class="keyword">extends</span> <span class="title">SavedRequestAwareAuthenticationSuccessHandler</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">                                        HttpServletResponse response, Authentication authentication) <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">        CurrentUser userDetails = (CurrentUser) SecurityContextHolder.getContext()</div><div class="line">                .getAuthentication()</div><div class="line">                .getPrincipal();</div><div class="line">        <span class="keyword">if</span> (userDetails != <span class="keyword">null</span>) &#123;</div><div class="line">            SysMenu menuRoot = userDetails.getMenuRoot();</div><div class="line">            String userName = userDetails.getSysUser().getUserName();</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">super</span>.onAuthenticationSuccess(request, response, authentication);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>MoreDefaultRedirectStrategy部分更改：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MoreDefaultRedirectStrategy</span> <span class="keyword">extends</span> <span class="title">DefaultRedirectStrategy</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> rewrite;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRedirect</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></div><div class="line">            String url) <span class="keyword">throws</span> IOException &#123;</div><div class="line">        String redirectUrl = calculateRedirectUrl(request.getContextPath(), url);</div><div class="line">        redirectUrl = response.encodeRedirectURL(redirectUrl);</div><div class="line">        <span class="keyword">if</span> (rewrite) &#123;</div><div class="line">            <span class="keyword">if</span> (redirectUrl.startsWith(<span class="string">"http://"</span>)) &#123;</div><div class="line">                redirectUrl = <span class="string">"https://"</span> + redirectUrl.substring(<span class="string">"http://"</span>.length());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">            logger.debug(<span class="string">"Redirecting to '"</span> + redirectUrl + <span class="string">"'"</span>);</div><div class="line">        &#125;</div><div class="line">        response.sendRedirect(redirectUrl);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRewrite</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> rewrite;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRewrite</span><span class="params">(<span class="keyword">boolean</span> rewrite)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.rewrite = rewrite;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">---</div><div class="line"><span class="comment">// 其次需要在上述SecurityConfig里变动：</span></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> CasAuthenticationFilter <span class="title">casAuthenticationFilter</span><span class="params">(ServiceProperties serviceProperties)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    CasAuthenticationFilter filter = <span class="keyword">new</span> CasAuthenticationFilter();</div><div class="line">    filter.setServiceProperties(serviceProperties);</div><div class="line">    filter.setAuthenticationManager(authenticationManager());</div><div class="line">    CasSuccessHandler casSuccessHandler = <span class="keyword">new</span> CasSuccessHandler();</div><div class="line">   </div><div class="line">    MoreDefaultRedirectStrategy redirect = <span class="keyword">new</span> MoreDefaultRedirectStrategy();</div><div class="line">    String service = serviceProperties.getService();</div><div class="line">    <span class="keyword">if</span> (service.startsWith(<span class="string">"https://"</span>)) &#123;</div><div class="line">        redirect.setRewrite(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    casSuccessHandler.setRedirectStrategy(redirect);</div><div class="line">   </div><div class="line">    filter.setAuthenticationSuccessHandler(casSuccessHandler);</div><div class="line">    <span class="keyword">return</span> filter;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong> outro </strong><br>说一个不相干的感悟，为什么TCP必须三次握手？<br>在网上可以搜到答案，都很有道理，不过我想补充一下，这或许是很多人并不在乎的点，或者认为讨论三次以上意义不大。<br>但为什么是三次，五次不行吗？<br>三次其实就是请求确认-&gt;确认-&gt;对确认的确认，如果从严格的科学理论上讲，这可能是不够的，一个无限循环，但是从技术上讲，也就是涉及经验(当然也综合考虑了性能/效率等因素)。<br>超过三次就强制认为失败而已。<br>计算机技术并没有大家想象的那么严谨，甚至可能会有 0.3不等于0.3的情况，如果大学了解过一点数电和模电的知识，就会知道这种区别，如果再学过物理理论的对立面–物理实验，就会理解 误差/精确度 的含义。<br>同时也会知道，流行大众以及电影上的“蝴蝶效应”其实算是个笑话吧。但这并不表示误差就不重要，实际上，上个世纪最伟大的物理理论，跟人们对于极小误差的纠结源远很深呢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;现象和问题：&lt;/strong&gt;&lt;br&gt;有一个基于SpringBoot+Spring Security和CAS SSO的应用A，端口是8080，前端为Nginx，Nginx对外为https，即443端口，nginx内部反向代理到A就是常规的http协议了，应用A配置了正确的SSO login url和service url，历史原因，Nginx混乱的逻辑，没有配置80(http)强转443(https)。&lt;br&gt;问题来了：服务A本身运行正常，但是开启nginx前端代理时候，发现通过https进入系统A时，第一次(sso登录验证成功)通过url1总是跳转到 80端口(http)的服务，而不是443端口(https)的A应用，但是第二次再通过url1就能正常访问A应用。&lt;br&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="http://thomaslau.github.io/tags/Nginx/"/>
    
      <category term="SpringSecurity" scheme="http://thomaslau.github.io/tags/SpringSecurity/"/>
    
      <category term="CAS SSO" scheme="http://thomaslau.github.io/tags/CAS-SSO/"/>
    
  </entry>
  
  <entry>
    <title>Many Links 0920</title>
    <link href="http://thomaslau.github.io/2019/09/20/2019-09-20-many_links_0920/"/>
    <id>http://thomaslau.github.io/2019/09/20/2019-09-20-many_links_0920/</id>
    <published>2019-09-19T17:09:07.000Z</published>
    <updated>2019-10-22T00:36:15.977Z</updated>
    
    <content type="html"><![CDATA[<p>1.<br><a href="https://www.easyice.cn/archives/328" target="_blank" rel="external">https://www.easyice.cn/archives/328</a><br>一次 JBD2进程导致磁盘 IO 高的分析解决过程<br>设计不合理，导致对 zk 执行大量写操作，导致io高。<br>临时措施：将 zk 的数据路径调整到系统盘，系统盘为 ssd<br>使用 sysdig+strace 工具<br>2.<br>软件架构被高估，清晰简单的设计被低估<br><a href="https://www.infoq.cn/article/NKLNc0HHtZNaviOX2VdV" target="_blank" rel="external">https://www.infoq.cn/article/NKLNc0HHtZNaviOX2VdV</a><br><a id="more"></a><br>3.<br>几种支持分页的ES查询方式<br><a href="https://www.jianshu.com/p/3acc365240b6" target="_blank" rel="external">https://www.jianshu.com/p/3acc365240b6</a><br><blockquote><p>scroll<br>sliced scroll<br>search after<br>…<br>sliced scroll api 除指定上下文保留时间外，还需要指定最大切片和当前切片，最大切片数据一般和shard数一致或者小于shard数，每个切片的scroll操作和scroll api的操作是一致的.<br>…<br>上面两种翻页的方式都无法支撑用户在线高并发操作，search_after提供了一种动态指针的方案，即基于上一页排序值检索下一页实现动态分页：<br>说白了 search_after 并没有解决随机跳页查询的场景，但是可以支撑多query并发请求；search_after 操作需要指定一个支持排序且值唯一的字段用来做下一页拉取的指针，这种翻页方式也可以通过bool查询的range filter实现。</p>
</blockquote><br>4.<br>为 JPA 插上翅膀的 QueryDSL<br><a href="https://mp.weixin.qq.com/s/WUWSygSUjL4mSoimvzZw3g" target="_blank" rel="external">https://mp.weixin.qq.com/s/WUWSygSUjL4mSoimvzZw3g</a><br>5.<br>用Elasticsearch做Terms聚合计算数据不准的问题<br><a href="https://www.dongwm.com/post/elasticsearch-terms-agg-is-not-accurate/" target="_blank" rel="external">https://www.dongwm.com/post/elasticsearch-terms-agg-is-not-accurate/</a><br><blockquote><p>关于文档计数错误，在延伸阅读链接 1 中有一个小节专门介绍文档计数错误 (Calculating Document Count Error)，其中提到了在返回结果的 aggregations 中包含了doc_count_error_upper_bound(没有在这次聚合中返回、但是可能存在的潜在聚合结果) 和sum_other_doc_count(聚合中没有统计到的文档数)。要注意其中的doc_count_error_upper_bound键名有「上界」的意思，也就是表示在预估的最坏情况下沒有被算进最终结果的值，当然doc_count_error_upper_bound的值越大，最终数据不准确的可能性越大，能确定的是，它的值为 0 表示数据完全正确，但是它不为 0，不代表这次聚合的数据是错误的，大家要记住。</p>
</blockquote></p>
<p>6.<br>下面几条均来自阮一峰的每周更新:<br><a href="http://www.ruanyifeng.com/blog/2019/09/weekly-issue-73.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2019/09/weekly-issue-73.html</a><br><blockquote><p>1)世界最古老的在线摄像头<br>位于旧金山的 FogCam，是目前最古老的网络直播摄影头，从1994年开始上线，至今已经直播了25个年头。它于8月30日正式关闭。<br>他们表示关闭摄像头，主要是因为学校里再也找不到地方放置摄像头了。另外，根据维基百科记载，FogCam 网站也是成立最久，而且一直到现在还在运行的网站之一。</p>
<p>2)中国贫穷地区的发展（中文）<br><a href="https://finance.sina.cn/china/gncj/2019-05-31/detail-ihvhiqay2662671.d.html" target="_blank" rel="external">https://finance.sina.cn/china/gncj/2019-05-31/detail-ihvhiqay2662671.d.html</a><br>Quora 上有人再次针对中国提出尖锐问题：如果中国有那么多钱投资其他国家，为什么不用这些钱发展本国的贫困地区呢？有一个答案内容详实，获赞最高，让围观小伙伴们赞不绝口。<br>3)<br>最黑的黑色汽车<br>宝马发布了 Vantablack 版本的 X6 轿车。Vantablack 是世界最黑的黑色颜料，可以吸收99％以上的光线。这使得宝马 VBX6 是目前世界上最黑的黑色汽车，几乎完全消除了所有反光。理论上，如果一个物体不反射任何光线，本身又不发光，那么视觉上就是一个黑洞。</p>
</blockquote><br>7.<br>为什么说 Prometheus 是足以取代 Zabbix 的监控神器？<br><a href="https://www.infoq.cn/article/275NDkYNZRpcTIL2R8Ms" target="_blank" rel="external">https://www.infoq.cn/article/275NDkYNZRpcTIL2R8Ms</a><br>8.<br>PageRank、最小生成树：ML开发者应该了解的五种图算法<br><a href="https://www.jiqizhixin.com/articles/2019-09-09-5" target="_blank" rel="external">https://www.jiqizhixin.com/articles/2019-09-09-5</a><br>9.<br><a href="http://www.ruanyifeng.com/blog/2019/10/weekly-issue-76.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2019/10/weekly-issue-76.html</a><br>可以用正则表达式检测正则表达式吗？（英文）<br><a href="https://stackoverflow.com/questions/172303/is-there-a-regular-expression-to-detect-a-valid-regular-expression" target="_blank" rel="external">https://stackoverflow.com/questions/172303/is-there-a-regular-expression-to-detect-a-valid-regular-expression</a><br>傅里叶变换交互式入门<br><a href="http://www.jezzamon.com/fourier/zh-cn.html" target="_blank" rel="external">http://www.jezzamon.com/fourier/zh-cn.html</a><br><a href="https://dollarsanity.com/amazon-fba-selling-my-products/" target="_blank" rel="external">https://dollarsanity.com/amazon-fba-selling-my-products/</a><br>我如何一个人实现亚马逊上的100万美元销售额？（英文）一个美国大学生讲述，他如何通过代理中国产品，没有雇佣任何人，一个人在亚马逊上年销售额达到100万美元。<br><a href="https://bpmn.io/toolkit/bpmn-js/" target="_blank" rel="external">https://bpmn.io/toolkit/bpmn-js/</a><br>BPMN-JS,一个在线绘制业务流程图的开源工具<br>10.<br>基于 Javassist 和 Javaagent 实现动态切面<br><a href="https://www.cnblogs.com/chiangchou/p/javassist.html" target="_blank" rel="external">https://www.cnblogs.com/chiangchou/p/javassist.html</a><br>实战结合的介绍，涉及接口比较全<br>11.<br>一个有趣的思考：两个椭圆片能粘合成一个立体吗？<br><a href="https://spaces.ac.cn/archives/6818" target="_blank" rel="external">https://spaces.ac.cn/archives/6818</a><br>12.<br>看到提问现代GC为什么会出现 STW，许多人知道但是讲的原因没到点上，这里提一下：<br>需要Stop The World是因为，比如JAVA，无论是引用计数还是可达性分析，在GC中分析对象的引用关系时，为了保证分析结果的准确性，需要通过停顿所有JVM执行线程，保证引用关系此时不再动态变化.<br>看起来像全局加锁, 虚拟机编译会标记一些位置，表示当执行到该位置时是可以进行GC的，称之 Safepoint</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.&lt;br&gt;&lt;a href=&quot;https://www.easyice.cn/archives/328&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.easyice.cn/archives/328&lt;/a&gt;&lt;br&gt;一次 JBD2进程导致磁盘 IO 高的分析解决过程&lt;br&gt;设计不合理，导致对 zk 执行大量写操作，导致io高。&lt;br&gt;临时措施：将 zk 的数据路径调整到系统盘，系统盘为 ssd&lt;br&gt;使用 sysdig+strace 工具&lt;br&gt;2.&lt;br&gt;软件架构被高估，清晰简单的设计被低估&lt;br&gt;&lt;a href=&quot;https://www.infoq.cn/article/NKLNc0HHtZNaviOX2VdV&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.infoq.cn/article/NKLNc0HHtZNaviOX2VdV&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="weeklyreading" scheme="http://thomaslau.github.io/tags/weeklyreading/"/>
    
  </entry>
  
  <entry>
    <title>如何在kafka-streams实现两次group操作</title>
    <link href="http://thomaslau.github.io/2019/09/13/2019-09-13-how_to_group_twice_in_kafkastreams/"/>
    <id>http://thomaslau.github.io/2019/09/13/2019-09-13-how_to_group_twice_in_kafkastreams/</id>
    <published>2019-09-13T13:00:10.000Z</published>
    <updated>2019-10-10T00:35:06.766Z</updated>
    
    <content type="html"><![CDATA[<p><strong>如何通过kafka-streams实现去重后再groupBy统计频率？</strong><br>使用Kafka-Streams做流计算的大家想必知道，它本身提供了 groupBy 操作可以方便我们做一些聚合计算，比如统计每分钟内每个人发出的消息数量，这个时候就可以 groupBy 用户的uid去，统计用户间互动消息频率就可以使用groupBy 用户uid和他的互动用户uid即可。<br>但如果现在需求是：如何统计每分钟和任一用户互动消息超过某频率的用户？<br><a id="more"></a><br>简化一下，如果，不考虑时间(Time Window)维度，上面需求简化成SQL就是类似如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*), uid <span class="keyword">from</span> (</div><div class="line">    <span class="keyword">select</span> uid,uid+fuid,</div><div class="line">    <span class="keyword">from</span> kafka_stream_A</div><div class="line">    <span class="keyword">group</span> <span class="keyword">by</span> uid+fuid</div><div class="line">) A <span class="keyword">group</span> <span class="keyword">by</span> A.uid <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="keyword">limit</span></div></pre></td></tr></table></figure></p>
<p>找了很久，发现是可以实现的，KS是可以groupByKey时进行aggregate操作的，groupByKey 本身其实也是通过aggregate实现的。<br>简单来说，就是通过 group by uid时候，构建一个 fuid的集合去保存这样的状态，然后再对状态进行聚合，即：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActionRecordAggregate</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> Set&lt;String&gt; users = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ActionRecord rec)</span> </span>&#123;</div><div class="line">    users.add(rec.getUser());</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> users.size();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">stream()</div><div class="line">.map((key, val) -&gt; KeyValue.pair(val.actionType, val))</div><div class="line">.groupByKey()</div><div class="line">.windowedBy(TimeWindows.of(<span class="number">60</span>*<span class="number">1000</span>))</div><div class="line">.aggregate(</div><div class="line">  ActionRecordAggregate::<span class="keyword">new</span>,</div><div class="line">  (key, value, agg) -&gt; agg.add(value),</div><div class="line">  Materialized</div><div class="line">      .&lt;String, ActionRecordAggregate, WindowStore&lt;Bytes, <span class="keyword">byte</span>[]&gt;&gt;as(<span class="string">"actionTypeLookup"</span>)</div><div class="line">      .withValueSerde(getSerdeForActionRecordAggregate())</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>上面这个例子是stackoverflow上的一个问答，原文：<a href="https://stackoverflow.com/questions/51048125/apache-kafka-grouping-twice/51071663" target="_blank" rel="external">https://stackoverflow.com/questions/51048125/apache-kafka-grouping-twice/51071663</a></p>
<p>感兴趣可以试下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamJobDemo</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(StreamJobDemo.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> ONE_MINUTES_in_millis = TimeUnit.MINUTES.toMillis(<span class="number">1</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> ignored_MINUTES_in_millis = TimeUnit.MINUTES.toMillis(<span class="number">500000</span>);</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter dateformat = DateTimeFormatter.ofPattern(<span class="string">"MM-dd HH:mm:ss,SSS"</span>);   </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        String topic = <span class="string">"packet"</span>;</div><div class="line">        String msgKey = <span class="string">"InFromClient"</span>;</div><div class="line">        String group_A = <span class="string">"from"</span>;</div><div class="line">        String group_B = <span class="string">"fuid"</span>;<span class="comment">// "request_time";</span></div><div class="line">       </div><div class="line">        KStreamBuilder builder = <span class="keyword">new</span> KStreamBuilder();</div><div class="line">        KStream&lt;String, String&gt; textLines = builder.stream(topic);</div><div class="line">        KStream&lt;String, Map&lt;String, Object&gt;&gt; mapped_streams = textLines</div><div class="line">                .filter((k, v) -&gt; msgKey.equalsIgnoreCase(k)).mapValues(value -&gt; getValFromJsonQuietly(value));</div><div class="line"></div><div class="line">        mapped_streams.map(<span class="keyword">new</span> KeyValueMapper&lt;String, Map&lt;String, Object&gt;, KeyValue&lt;String, String&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> KeyValue&lt;String, String&gt; <span class="title">apply</span><span class="params">(String key, Map&lt;String, Object&gt; value)</span> </span>&#123;</div><div class="line">                String lineKey = getOrDefault(value, group_A);</div><div class="line">                lineKey = lineKey.replaceAll(<span class="string">"@.*"</span>, <span class="string">""</span>);</div><div class="line">                String mid = getOrDefault(value, group_B);</div><div class="line">                log.info(<span class="string">"source: key-&#123;&#125;-&gt;&#123;&#125;."</span>, lineKey, mid);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> KeyValue&lt;String, String&gt;(lineKey, mid);</div><div class="line">            &#125;</div><div class="line">        &#125;).groupByKey().aggregate(<span class="keyword">new</span> Initializer&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="keyword">new</span> Aggregator&lt;String, String, String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(String aggKey, String value, String aggregate)</span> </span>&#123;</div><div class="line">                <span class="comment">// use Set instead? Serdes.String()</span></div><div class="line">                log.info(<span class="string">"aggr: &#123;&#125;-&#123;&#125;-&#123;&#125;."</span>, aggKey, aggregate, value);</div><div class="line">                <span class="keyword">if</span> (!aggregate.contains(value + <span class="string">";"</span>)) &#123;</div><div class="line">                    aggregate = aggregate + value + <span class="string">";"</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> aggregate;</div><div class="line">            &#125;</div><div class="line">        &#125;, TimeWindows.of(ONE_MINUTES_in_millis).until(ONE_MINUTES_in_millis), Serdes.String(), <span class="string">"cnt"</span>)</div><div class="line">        .toStream().filter((key, value) -&gt; &#123;</div><div class="line">                    log.info(<span class="string">"filter: key-&#123;&#125;-&#123;&#125;"</span>, key, value);</div><div class="line">                    <span class="keyword">return</span> value != <span class="keyword">null</span> &amp;&amp; key.window().end() &gt; System.currentTimeMillis() - ignored_MINUTES_in_millis;</div><div class="line">                &#125;).mapValues(<span class="keyword">new</span> ValueMapper&lt;String, Integer&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> value.split(<span class="string">";"</span>).length;</div><div class="line">                    &#125;</div><div class="line">        &#125;).filter((k,v)-&gt;v.intValue() &gt; <span class="number">2</span>).foreach((key, count) -&gt; &#123;</div><div class="line">                log.info(<span class="string">"grouped: date-&#123;&#125;, key-&#123;&#125;, cnt-&#123;&#125;"</span>,</div><div class="line">                        dateformat.format(LocalDateTime.ofInstant(Instant.ofEpochMilli(key.window().end()), ZoneId.systemDefault())),</div><div class="line">                        key.key(), count);</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        KafkaStreams streams = <span class="keyword">new</span> KafkaStreams(builder,</div><div class="line">                <span class="keyword">new</span> StreamsConfig(ImmutableMap.&lt;String, String&gt;builder()</div><div class="line">                        .put(<span class="string">"application.id"</span>, <span class="string">"nearby-rate"</span>)</div><div class="line">                        .put(<span class="string">"bootstrap.servers"</span>, <span class="string">"10.136.24.103:9091"</span>)</div><div class="line">                        .put(<span class="string">"commit.interval.ms"</span>, <span class="string">"20000"</span>)</div><div class="line">                        .put(<span class="string">"timestamp.extractor"</span>, RQTimeStampExtra.class.getName())</div><div class="line">                        .put(KEY_SERDE_CLASS_CONFIG, Serdes.StringSerde.class.getName())</div><div class="line">                        .put(VALUE_SERDE_CLASS_CONFIG, Serdes.StringSerde.class.getName())</div><div class="line">                        .put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, <span class="string">"latest"</span>).build()));</div><div class="line">        streams.start();</div><div class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread(streams::close));</div><div class="line">        <span class="comment">// return streams;</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">getValFromJsonQuietly</span><span class="params">(String info)</span> </span>&#123;</div><div class="line">        Map&lt;String, Object&gt; kvInfo = Jacksons.parse(info, <span class="keyword">new</span> TypeReference&lt;Map&lt;String, Object&gt;&gt;() &#123;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != kvInfo) &#123;</div><div class="line">            <span class="keyword">return</span> kvInfo;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> Maps.newHashMap();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getOrDefault</span><span class="params">(Map&lt;String, ?&gt; kvInfo, String key)</span> </span>&#123;</div><div class="line">        String default_key = <span class="string">"-1"</span>;</div><div class="line">        Object obj = kvInfo.get(key);</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">null</span> == obj) ? default_key : obj.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;如何通过kafka-streams实现去重后再groupBy统计频率？&lt;/strong&gt;&lt;br&gt;使用Kafka-Streams做流计算的大家想必知道，它本身提供了 groupBy 操作可以方便我们做一些聚合计算，比如统计每分钟内每个人发出的消息数量，这个时候就可以 groupBy 用户的uid去，统计用户间互动消息频率就可以使用groupBy 用户uid和他的互动用户uid即可。&lt;br&gt;但如果现在需求是：如何统计每分钟和任一用户互动消息超过某频率的用户？&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="kafka" scheme="http://thomaslau.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>卡马克是最快的开根号方法吗</title>
    <link href="http://thomaslau.github.io/2019/09/07/2019-09-07-on_carmac_and_java_jit/"/>
    <id>http://thomaslau.github.io/2019/09/07/2019-09-07-on_carmac_and_java_jit/</id>
    <published>2019-09-07T13:00:10.000Z</published>
    <updated>2019-09-07T18:13:06.805Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><i><strong>intro1</strong>：卡马克算法时最快的开根号方式吗？C/Java语言本身是怎么实现开根号的？</i><br><i><strong>intro2</strong>: java的内置sqrt和c的内置sqrt哪个更快？Java的编译/JIT优化和GCC的编译优化是否有不足之处？</i><br><i><strong>intro3</strong>: java的C2优化效果一定比C1效果好吗(对性能而言)？</i></p>
</blockquote>
<h2 id="问题或现象"><a href="#问题或现象" class="headerlink" title="问题或现象"></a>问题或现象</h2><p>这是最近看一位博主解Leet Code题想到的，原题简化一下是：给一个正整数(32位int)开根号后得到x，再对x取整返回。<br>博文的解法是使用二分查找，Java代码实现，不过这里想对该题再讨论几点<br>1）二分查找也可以优化下，建立一个简单的范围表，再二分查找，某几个国产IP库查询也是该做法(因为比BTree省太多内存)。<br>2）其实还可以用 牛顿切线法 ，每个ACMer入门练手时都会碰到的算法。<br>3）因为本题目只是要求返回正整数，那么如果我在 牛顿切分法阈值判断的时候，再加一个条件，判断本轮的整数部分和上一轮的整数部分是否相等，会不会更快？<br>4）开根号怎能少了卡马克算法，要知道在关于开根号方法中祭出卡马克算法，也就基本意味着本次交谈该结束了，但是卡马克是最快的方法吗？<br><a id="more"></a><br>所以下文中我写了几行代码来简单验证下(C/Java版)</p>
<h2 id="先了解下牛顿切分法是什么："><a href="#先了解下牛顿切分法是什么：" class="headerlink" title="先了解下牛顿切分法是什么："></a>先了解下牛顿切分法是什么：</h2><p>许多<a href="https://www.matongxue.com/madocs/205.html#/madoc" target="_blank" rel="external">网站链接</a>有介绍，这里简单描述下，<i>中学课本里的二次方程求根公式正式提出距今不过1000年多，高次方程求根公式知道高斯/阿贝尔/伽罗华才告一段落，在此之前物理学家们怎么做的呢？牛顿提出了牛顿迭代法，但这是在实/复数域上求解方程的近似根，思想就是通过直线逼近曲线(世纪更早的我国数学家刘徽也提出该思想并求出圆周率近似值)，只不过那时候没有系统的考虑连续和收敛的问题。</i><br><strong>牛顿切分转化为牛顿迭代就是比如对方程 f(n) =&gt; x(n+1)=F(x(n))转换，也就是从当前态计算出下一个状态，这是适合人们手工去计算的，更是非常适合计算机代码和执行。</strong><br>我们把上述 f(n) 用于开根号情况，也就是求方程 X^2-c=0 的解，借助于大学里的泰勒展开，我们可以得到：</p>
<pre><code>X(n+1) = ( X(n) + C/X(n) )/2
</code></pre><p>当X(n+1)与X(n) 差值足够小的时候，我们就认为 X(n+1) 接近于真实解了。<br>至于卡马克算法讨论需要更多篇幅，网上有更多介绍。简单来说是基于牛顿迭代使用一个“魔数”免于多次迭代近似对单精度数字求根。</p>
<h2 id="下面代码是C实现。"><a href="#下面代码是C实现。" class="headerlink" title="下面代码是C实现。"></a>下面代码是C实现。</h2><p>其中：<br>1) sqrt_newton：牛顿迭代，sqrt_newton_int int比较的牛顿迭代，InvSqrt 卡马克算法开根号<br>2) 在main函数里，我使用简单的for循环来统计耗时，暂不考虑精度以及其他问题，且先相信只要循环次数大，耗时差距大，就可以得出足够可信的结论。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">double</span> FLT_MIN = <span class="number">1e-7</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">sqrt_newton</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(x &lt;= <span class="number">0</span>)  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">double</span> res, lastres;</div><div class="line">    res = x;    <span class="comment">//初始值，可以为任意非0的值</span></div><div class="line">    <span class="keyword">do</span>&#123;</div><div class="line">        lastres = res;</div><div class="line">        res = (res + x/res)/<span class="number">2</span>;</div><div class="line">    &#125;<span class="keyword">while</span>(<span class="built_in">fabs</span>(lastres-res) &gt; FLT_MIN);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">sqrt_newton_int</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(x &lt;= <span class="number">0</span>)  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">double</span> res, lastres;</div><div class="line">    res = x;</div><div class="line">    <span class="keyword">int</span> last = <span class="number">0</span>;</div><div class="line">    <span class="keyword">do</span>&#123;</div><div class="line">        lastres = res;</div><div class="line">        res = (res + x/res)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> cur = (<span class="keyword">int</span>)res;</div><div class="line">        <span class="keyword">if</span> (last == cur)&#123;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        last = cur;</div><div class="line">    &#125;<span class="keyword">while</span>(<span class="built_in">fabs</span>(lastres-res) &gt; FLT_MIN);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">float</span> <span class="title">InvSqrt</span><span class="params">(<span class="keyword">float</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">float</span> xhalf = <span class="number">0.5f</span> * x;</div><div class="line">    <span class="keyword">int</span> i = *(<span class="keyword">int</span>*)&amp;x;</div><div class="line">    i = <span class="number">0x5f375a86</span> - (i&gt;&gt;<span class="number">1</span>);</div><div class="line">    x = *(<span class="keyword">float</span>*)&amp;i;</div><div class="line">    x = x*(<span class="number">1.5f</span>-xhalf*x*x);</div><div class="line">    x = x*(<span class="number">1.5f</span>-xhalf*x*x);</div><div class="line">    x = x*(<span class="number">1.5f</span>-xhalf*x*x);</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>/x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</div><div class="line">    <span class="keyword">clock_t</span> begin, end;</div><div class="line">    <span class="keyword">int</span> num = atoi(argv[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">double</span> res1=<span class="number">0</span>,res2=<span class="number">0</span>,res4=<span class="number">0</span>;</div><div class="line">    <span class="keyword">float</span> res3=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">float</span> num_f;</div><div class="line">    <span class="keyword">int</span> loopcnts = <span class="number">1000000</span>;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">sizeof</span>(argv)&gt;<span class="number">2</span>)&#123;</div><div class="line">        loopcnts = atoi(argv[<span class="number">2</span>]);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    begin = clock();</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; loopcnts; i++)&#123;</div><div class="line">        res1+=sqrt_newton_int(num+i);</div><div class="line">        res2+=sqrt_newton(num+i);</div><div class="line">        res3+=InvSqrt(num+i);</div><div class="line">        res4+=<span class="built_in">sqrt</span>(num+i);</div><div class="line">    &#125;</div><div class="line">    end = clock();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"hot %f\t:%f,%f,%f,%f\n"</span>, (<span class="keyword">double</span>)(end-begin),res1,res2,res3,res4);</div><div class="line"></div><div class="line">    begin = clock();</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; loopcnts; i++)</div><div class="line">        res1 = sqrt_newton(num);</div><div class="line">    end = clock();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">" newton_cos(%d) = %f, \t\tcost: %f\n"</span>, num, res1, (<span class="keyword">double</span>)(end-begin));</div><div class="line"> </div><div class="line">    begin = clock();</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; loopcnts; i++)</div><div class="line">        res2 = sqrt_newton_int(num);</div><div class="line">    end = clock();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"newton_int(%d) = %f, \t\tcost: %f\n"</span>, num, res2, (<span class="keyword">double</span>)(end-begin));</div><div class="line"> </div><div class="line">    num_f=<span class="number">1.0f</span>*num;</div><div class="line">    begin = clock();</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; loopcnts; i++)</div><div class="line">        res3 = InvSqrt(num_f);</div><div class="line">    end = clock();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">" InvSqrt(%d) = %f, \t\tcost: %f\n"</span>, num, res3, (<span class="keyword">double</span>)(end-begin));</div><div class="line"> </div><div class="line">    begin = clock();</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; loopcnts; i++)</div><div class="line">        res4 = <span class="built_in">sqrt</span>(num);</div><div class="line">    end = clock();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"sys sqrt(%d) = %f, \t\tcost: %f\n"</span>, num, res4, (<span class="keyword">double</span>)(end-begin));</div><div class="line">    <span class="comment">// printf("res:%f, %f, %f, %f", res1,res2,res3,res4);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因int范围限制，故每轮采取循环1亿次，多运行几次，发现输出下面结果<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">➜  Test gcc quic_newton.c -o quic_newton     </div><div class="line">➜  Test ./quic_newton 2855 100000000   </div><div class="line">hot 40405059.000000 :666695110416.069336,666695110197.906128,274877906944.000000,666695110197.906128</div><div class="line"> newton_cos(2855) = 53.432200,    cost: 11803758.000000</div><div class="line">newton_int(2855) = 53.432201,     cost: 10048574.000000</div><div class="line"> InvSqrt(2855) = 53.432198,     cost: 967581.000000</div><div class="line">sys sqrt(2855) = 53.432200,     cost: 614861.000000</div><div class="line">➜  Test</div><div class="line">➜  Test gcc -O3  quic_newton.c -o quic_newton</div><div class="line">➜  Test ./quic_newton 2855 100000000         </div><div class="line">hot 14997438.000000 :666695110416.069336,666695110197.906128,274877906944.000000,666695110197.906128</div><div class="line"> newton_cos(2855) = 53.432200,    cost: 3292126.000000</div><div class="line">newton_int(2855) = 53.432201,     cost: 2845886.000000</div><div class="line"> InvSqrt(2855) = 53.432198,     cost: 1.000000</div><div class="line">sys sqrt(2855) = 53.432200,     cost: 0.000000</div><div class="line">...</div><div class="line">➜  Test gcc -O1  quic_newton.c -o quic_newton</div><div class="line">➜  Test ./quic_newton 2855 100000000         </div><div class="line">hot 19265085.000000 :666695110416.069336,666695110197.906128,274877906944.000000,666695110197.906128</div><div class="line"> newton_cos(2855) = 53.432200,    cost: 1.000000</div><div class="line">newton_int(2855) = 53.432201,     cost: 0.000000</div><div class="line"> InvSqrt(2855) = 53.432198,     cost: 0.000000</div><div class="line">sys sqrt(2855) = 53.432200,     cost: 0.000000</div><div class="line">➜  Test</div></pre></td></tr></table></figure></p>
<p>1) 忽略上述InvSqrt float数值不正确的情况，这里是为了避免类型转换，减少对结果的影响。<br>2) 虽有for循环，以及类型/加操作，但如果测试下来耗时是一半，那有理由相信性能其实是大于一倍的。<br>3) 可发现第一次编译后，运行几次，那段卡马克效果都不如使用C系统库的sqrt函数，相差0.5倍左右，不过已经比牛顿迭代少一个数量级了。<br>4) 当开启 -O3 优化的时候，出现 耗时为1，这是GCC编译优化的缘故，也可看到优化后调用牛顿迭代耗时下降。<br>5) 但如果看 hot 的总耗时，还是可见-O3 效果优于 -O1 优化的。<br>6) 开启 -O1 优化时候，看到耗时都为1。 因为优化实际上相当只运行最后一次循环结果，这点看汇编代码可以看到。<strong>不过这里有个问题是 单是对于main函数而言，-O3优化效果反而不如 -O1。</strong></p>
<p>所以为了避免上述问题，这里需要改进下代码:见<a href="/images/quic_newton.c">附件quic_newton.c</a><br>1) 上文中 res4 = sqrt(num); 都类似对应的改为 res4 += sqrt(num+i)格式<br>2) hot之后将 res1-4都置零一下。<br>3) int num 改为double num，并且相应printf语句里 %d改为%f。<br>（部分可能受制于发生隐式类型转换，不过因为已经是double/float，对于再加int性能消耗是可忽略，或可能通过 -O1优化掉。查计算机指令周期可知，相对于前三个计算方法这个时间影响也很小）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">➜  Test gcc quic_newton.c -o quic_newton</div><div class="line">➜  Test ./quic_newton 2500 100000000</div><div class="line">hot 35850465.000000 :666691578733.306519,666691578514.627563,274877906944.000000,666691578514.627686</div><div class="line"> newton_inl(2500.000000) = 666691578514.627563,     cost: 17829585.000000</div><div class="line"> newton_cos(2500.000000) = 666691578514.627563,     cost: 17944181.000000</div><div class="line">newton_int(2500.000000) = 666691578733.306519,    cost: 18475511.000000</div><div class="line"> InvSqrt(2500.000000) = 274877906944.000000,    cost: 3108139.000000</div><div class="line">sys sqrt(2500.000000) = 666691578514.627686,    cost: 252962.000000</div><div class="line">➜  Test gcc -O3 quic_newton.c -o quic_newton</div><div class="line">➜  Test ./quic_newton 2500 100000000       </div><div class="line">hot 15424798.000000 :666691578733.306519,666691578514.627563,274877906944.000000,666691578514.627686</div><div class="line"> newton_inl(2500.000000) = 666691578514.627563,     cost: 7050614.000000</div><div class="line"> newton_cos(2500.000000) = 666691578514.627563,     cost: 7113696.000000</div><div class="line">newton_int(2500.000000) = 666691578733.306519,    cost: 7668225.000000</div><div class="line"> InvSqrt(2500.000000) = 274877906944.000000,    cost: 417802.000000</div><div class="line">sys sqrt(2500.000000) = 666691578514.627686,    cost: 168760.000000</div><div class="line">➜  Test ./quic_newton 2500 100000000</div><div class="line">hot 15394188.000000 :666691578733.306519,666691578514.627563,274877906944.000000,666691578514.627686</div><div class="line"> newton_inl(2500.000000) = 666691578514.627563,     cost: 7063698.000000</div><div class="line"> newton_cos(2500.000000) = 666691578514.627563,     cost: 7111073.000000</div><div class="line">newton_int(2500.000000) = 666691578733.306519,    cost: 7663540.000000</div><div class="line"> InvSqrt(2500.000000) = 274877906944.000000,    cost: 416777.000000</div><div class="line">sys sqrt(2500.000000) = 666691578514.627686,    cost: 167816.000000</div><div class="line">➜  Test</div></pre></td></tr></table></figure>
<p>请注意上述命令执行时的参数和输出，可以看到InvSqrt接近一个数量级的提升，sys sqrt 40%提升。这里的优化显然是减少了循环体内的指令。<br>比如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">begin = clock();</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; loopcnts; i++)</div><div class="line">    res4 += <span class="built_in">sqrt</span>(num+i);</div><div class="line">end = clock();</div></pre></td></tr></table></figure></p>
<p>对比一下 -O0和-O1关键部分<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"># -O0</div><div class="line">  callq _clock</div><div class="line">  <span class="keyword">movq</span>  %rax, -<span class="number">24</span>(%rbp)</div><div class="line">  movl  <span class="number">$0</span>, -<span class="number">72</span>(%rbp)</div><div class="line"><span class="symbol">LBB3_24:</span>                                ## =&gt;This Inner <span class="keyword">Loop</span> Header: Depth=<span class="number">1</span></div><div class="line">  movl  -<span class="number">72</span>(%rbp), %eax</div><div class="line">  cmpl  -<span class="number">80</span>(%rbp), %eax</div><div class="line">  <span class="keyword">jge</span> LBB3_27</div><div class="line">## %bb<span class="meta">.25</span>:                              ##   <span class="keyword">in</span> <span class="keyword">Loop</span>: Header=BB3_24 Depth=<span class="number">1</span></div><div class="line">  <span class="keyword">movsd</span> -<span class="number">40</span>(%rbp), %xmm0        ## <span class="built_in">xmm0</span> = mem[<span class="number">0</span>],<span class="meta">zero</span></div><div class="line">  movl  -<span class="number">72</span>(%rbp), %eax</div><div class="line">  cvtsi2sdl %eax, %xmm1</div><div class="line">  <span class="keyword">addsd</span> %xmm1, %xmm0</div><div class="line">  <span class="keyword">sqrtsd</span>  %xmm0, %xmm0</div><div class="line">  <span class="keyword">addsd</span> -<span class="number">64</span>(%rbp), %xmm0</div><div class="line">  <span class="keyword">movsd</span> %xmm0, -<span class="number">64</span>(%rbp)</div><div class="line">## %bb<span class="meta">.26</span>:                              ##   <span class="keyword">in</span> <span class="keyword">Loop</span>: Header=BB3_24 Depth=<span class="number">1</span></div><div class="line">  movl  -<span class="number">72</span>(%rbp), %eax</div><div class="line">  addl  <span class="number">$1</span>, %eax</div><div class="line">  movl  %eax, -<span class="number">72</span>(%rbp)</div><div class="line">  <span class="keyword">jmp</span> LBB3_24</div><div class="line"><span class="symbol">LBB3_27:</span></div><div class="line">  callq _clock</div><div class="line"></div><div class="line"></div><div class="line">#-O1</div><div class="line">  callq _clock</div><div class="line">  <span class="keyword">movsd</span> -<span class="number">48</span>(%rbp), %xmm3        ## <span class="number">8</span>-<span class="built_in">byte</span> Reload</div><div class="line">                                        ## <span class="built_in">xmm3</span> = mem[<span class="number">0</span>],<span class="meta">zero</span></div><div class="line">  <span class="keyword">movq</span>  %rax, %r14</div><div class="line">  testl %r15d, %r15d</div><div class="line">  <span class="keyword">xorpd</span> %xmm4, %xmm4</div><div class="line">  <span class="keyword">jle</span> LBB3_22</div><div class="line">## %bb<span class="meta">.20</span>:</div><div class="line">  <span class="keyword">xorpd</span> %xmm0, %xmm0</div><div class="line">  <span class="keyword">movsd</span> LCPI3_0(%rip), %xmm1    ## <span class="built_in">xmm1</span> = mem[<span class="number">0</span>],<span class="meta">zero</span></div><div class="line">  <span class="keyword">xorpd</span> %xmm4, %xmm4</div><div class="line"><span class="meta">  .p2align</span>  <span class="number">4</span>, <span class="number">0x90</span></div><div class="line"><span class="symbol">LBB3_21:</span>                                ## =&gt;This Inner <span class="keyword">Loop</span> Header: Depth=<span class="number">1</span></div><div class="line">  <span class="keyword">movapd</span>  %xmm3, %xmm2</div><div class="line">  <span class="keyword">addsd</span> %xmm0, %xmm2</div><div class="line">  <span class="keyword">sqrtsd</span>  %xmm2, %xmm2</div><div class="line">  <span class="keyword">addsd</span> %xmm2, %xmm4</div><div class="line">  <span class="keyword">addsd</span> %xmm1, %xmm0</div><div class="line">  decl  %r15d</div><div class="line">  <span class="keyword">jne</span> LBB3_21</div><div class="line"><span class="symbol">LBB3_22:</span></div><div class="line">  <span class="keyword">movsd</span> %xmm4, -<span class="number">40</span>(%rbp)        ## <span class="number">8</span>-<span class="built_in">byte</span> Spill</div><div class="line">  callq _clock</div></pre></td></tr></table></figure></p>
<p>-O1 优化掉了一个int转浮点型，而且还巧妙的通过自增的方式减少了指令。即优化后相当于<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> initial=<span class="number">2500f</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">10.</span>.<span class="number">.0</span>;i&gt;<span class="number">0</span>;i--)&#123;</div><div class="line">  <span class="built_in">sqrt</span>(initial);</div><div class="line">  initial=initial+<span class="number">1.0f</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面这个优化有趣，我在后面的Java版代码里也会讨论下这一点。</p>
<p>需要说明一点，改进后的quic_newton.c耗时统计，跟你添加的gcc参数相关(O1/3支持参数多样来控制你的优化)，当然，也跟你的机器，系统，硬件性能相关。比如我在一台旧的intel xeon+centos5上编译后运行，InvSqrt也在4.1秒左右，sys sqrt在1.8秒了，是mac机结果十倍了，这个时候是看不到 -O3和-O1效果的差异的。<br>至此，要说的其实就是，现代计算机(无论intel/amd)浮点处理器大多支持开根号指令，基于硬件的，虽然可能硬件(arm/fpga)不同他们的实现或有区别，比如x86架构该指令就是基于牛顿迭代实现的，因为精度可控。不是所有的处理器都这么干。<br>不过intel系列最初是基于此提供FSQRT指令，后来提供了更快的指令，SQRTSS (对于双精度是 SQRTSD) 。如果算上支持4个浮点数那就更快了。</p>
<p>好了，写这些，就是希望记得有人问最快的开根号代码，切勿上来就撸一个卡马克算法。</p>
<p>不过也有硬件指令(RSQRTSS)是基于卡马克近似算法，性能据说比上述指令快，但是精度就略差了(小于六千分之一),而且仅限单精度。<a href="https://www.felixcloutier.com/x86/rsqrtss" target="_blank" rel="external">RSQRTSS</a></p>
<pre><code>sqrtss gives a correctly rounded result.  rsqrtss gives an approximation to the reciprocal, accurate to about 11 bits.
</code></pre><p>如果你对这方面了解更多，欢迎指教 mail: aXRob21hc2xhdUBxcS5jb20=<br><blockquote><p>需要指出上面c代码测试结果会因平台而异，比如在Intel(R) Xeon某型号 + gcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-18)上就没有sqrt的性能优化，而是call指令调用，导致-O1编译没能够优化到常量(但是 循环跑Invsqrt 则优化到常量时间了)。</p>
</blockquote></p>
<p>同样的，上述测试的是比较的趋势，数值不作为参考，毕竟还可以有比ANSI C 的sqrt更快的选择，比如第三方(fdlibm)优化过的或者含有fpu判断的 __ieee754_sqrt之类函数。<br>但如果你是C和汇编语言高手的话，在Intel平台，你可以直接调用xmmintrin.h库提供的 _mm_rsqrt_ss/_mm_rsqrt<em>sd 之类的函数实现模拟调用汇编开根号\</em>_m128d _mm_sqrt<em>pd(__m128d a)，甚至借助 \</em>_m128d 同时能给四个double数值开根号的特性实现四线程并行，这些就比ANSI C内置的sqrt更快了。</p>
<h2 id="下面来看看Java里效果怎么样"><a href="#下面来看看Java里效果怎么样" class="headerlink" title="下面来看看Java里效果怎么样"></a>下面来看看Java里效果怎么样</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// JAVA 1</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathFunc</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sqrt_</span><span class="params">(<span class="keyword">double</span> t, Double precise)</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> x0 = t, x1, differ;</div><div class="line">        <span class="keyword">double</span> prec = <span class="number">1e-7</span>;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            x1 = (x0/<span class="number">2</span> + t/(<span class="number">2</span>*x0));</div><div class="line">            differ = x1 * x1 - t;</div><div class="line">            <span class="keyword">if</span> (differ &lt; prec &amp;&amp; differ &gt; -prec) &#123;</div><div class="line">                <span class="keyword">return</span> x1;</div><div class="line">            &#125;</div><div class="line">            x0 = x1;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sqrt_INT</span><span class="params">(<span class="keyword">double</span> t, Double precise)</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> x0 = t, x1, differ;</div><div class="line">        <span class="keyword">double</span> prec = <span class="number">1e-7</span>;</div><div class="line">        <span class="keyword">int</span> last = (<span class="keyword">int</span>)x0;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            x1 = (x0/<span class="number">2</span> + t/(<span class="number">2</span>*x0));</div><div class="line">            differ = x1 * x1 - t;</div><div class="line">            <span class="keyword">if</span> ((differ &lt;= prec &amp;&amp; differ &gt;= -prec)) &#123;</div><div class="line">                <span class="keyword">return</span> x1;</div><div class="line">            &#125;</div><div class="line">            x0 = x1;</div><div class="line">            <span class="keyword">int</span> cur = (<span class="keyword">int</span>)x0;</div><div class="line">            <span class="keyword">if</span> (cur == last) &#123;</div><div class="line">                <span class="keyword">return</span> cur;</div><div class="line">            &#125;</div><div class="line">            last = cur;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</div><div class="line">            sqrt_(<span class="number">230</span>, <span class="keyword">null</span>);</div><div class="line">            sqrt_INT(<span class="number">230</span>, <span class="keyword">null</span>);</div><div class="line">            Math.sqrt(<span class="number">230000</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">double</span> MM = <span class="number">2855</span>;<span class="comment">//230000</span></div><div class="line">        <span class="keyword">double</span> s1=<span class="number">0</span>,s2=<span class="number">0</span>,s3=<span class="number">0</span>;</div><div class="line">        <span class="keyword">long</span> start = System.nanoTime();</div><div class="line">        <span class="keyword">int</span> NN = <span class="number">1_0000_0000</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NN; i++) &#123;</div><div class="line">            s1 += sqrt_(MM, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> start2 = System.nanoTime();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NN; i++) &#123;</div><div class="line">            s2+= sqrt_INT(MM, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> start3 = System.nanoTime();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NN; i++) &#123;</div><div class="line">            s3+= Math.sqrt(MM+i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> start4 = System.nanoTime();</div><div class="line">        System.out.println(String.format(<span class="string">"%s-%s-%s"</span>, (start2-start)/<span class="number">1e3</span>, (start3-start2)/<span class="number">1e3</span>, (start4-start3)/<span class="number">1e3</span>));</div><div class="line">        System.out.println(String.format(<span class="string">"%s-%s-%s"</span>, s1,s2,s3));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上文问题3，这里解答下：<br>如果纯粹从理论上讲，通过判断减少循环次数，则耗时应该减少，但实际上并不这样，<strong>因为double强转int也是耗时的操作，当这个耗时足以弥补减少循环的耗时时，才会得到更少的耗时</strong>。可以简单修改 MM 来验证下，实际上MM=2500/100 则确实耗时更少，MM=2837耗时则几乎相等，MM=2839/2840/2850则耗时多。<br>因为接近平方数 INT版本收敛快。<br>上面验证较简单，就不展开。不过从这段代码，让我们看一点有趣的发现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// JAVA 2</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoSqrt</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">double</span> MM = <span class="number">2855</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> NN = <span class="number">1_0000_0000</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">double</span> s3 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">long</span> start3 = <span class="number">0</span>, start4 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">double</span> j = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">            s3 = <span class="number">0</span>;j=<span class="number">0</span>;</div><div class="line">            <span class="keyword">long</span> d = D();</div><div class="line">            System.out.println(<span class="string">"D:"</span> + s3 + <span class="string">"\t"</span> + d / <span class="number">1e3</span>);</div><div class="line">            s3 = <span class="number">0</span>;j=<span class="number">0</span>;</div><div class="line">            <span class="keyword">long</span> dd = DD();</div><div class="line">            System.out.println(<span class="string">"DD:"</span> + s3 + <span class="string">"\t"</span> + dd / <span class="number">1e3</span>);</div><div class="line">            s3 = <span class="number">0</span>;</div><div class="line">            <span class="keyword">long</span> di = DI();</div><div class="line">            System.out.println(<span class="string">"DI:"</span> + s3 + <span class="string">"\t"</span> + di / <span class="number">1e3</span>);</div><div class="line">        &#125;</div><div class="line">       </div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">D</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//int s3=0;</span></div><div class="line">        <span class="keyword">long</span> start3 = System.nanoTime();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NN; i++) &#123;</div><div class="line">            s3 += Math.sqrt(MM);<span class="comment">//0.1;//</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> start4 = System.nanoTime();</div><div class="line">        <span class="keyword">return</span> start4 - start3;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">DD</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> start3 = System.nanoTime();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NN; i++) &#123;</div><div class="line">            s3 += Math.sqrt(MM + j++);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> start4 = System.nanoTime();</div><div class="line">        <span class="keyword">return</span> start4 - start3;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">DI</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> start3 = System.nanoTime();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NN; i++) &#123;</div><div class="line">            s3 += Math.sqrt(MM + i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> start4 = System.nanoTime();</div><div class="line">        <span class="keyword">return</span> start4 - start3;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意上面main函数里，我把每个方法都跑了一百次，并且每个方法内部还有1亿次循环。<br><strong>我在这里新写一个JAVA类，不仅仅是方便JAVA/JVM/汇编代码，还是为了引出下文发现的三个问题。</strong><br>每个函数都赋值给静态变量(该方法作用域外)s3，是为了避免逃逸变量的编译优化，这个简单就不详述。<br>不过，让我们先看 D() 这个方法，含逃逸变量，即可能会被JIT优化的情况<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">D</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> s3=<span class="number">0</span>;</div><div class="line">    <span class="keyword">long</span> start3 = System.nanoTime();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NN; i++) &#123;</div><div class="line">        s3 += Math.sqrt(MM);<span class="comment">//0.1;//i;//0.2;//</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">long</span> start4 = System.nanoTime();</div><div class="line">    <span class="keyword">return</span> start4 - start3;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上述代码的 D() 在外层循环跑两轮之后就会发现 D() 耗时几乎为零了。<br>单单看JVM code可能看不出来<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> <span class="number">0</span>: iconst_0       </div><div class="line"> <span class="number">1</span>: istore_0       </div><div class="line"> <span class="number">2</span>: invokestatic    #<span class="number">20</span>  // Method java/lang/System.nanoTime:()J</div><div class="line"> <span class="number">5</span>: lstore_1       </div><div class="line"> <span class="number">6</span>: iconst_0       </div><div class="line"> <span class="number">7</span>: istore_3       </div><div class="line"> <span class="number">8</span>: iload_3         </div><div class="line"> <span class="number">9</span>: getstatic       #<span class="number">21</span>  // Field NN:I</div><div class="line"><span class="number">12</span>: if_icmpge       <span class="number">25</span>   </div><div class="line"><span class="number">15</span>: iload_0         </div><div class="line"><span class="number">16</span>: iload_3         </div><div class="line"><span class="number">17</span>: iadd           </div><div class="line"><span class="number">18</span>: istore_0       </div><div class="line"><span class="number">19</span>: iinc            <span class="number">3</span>, <span class="number">1</span></div><div class="line"><span class="number">22</span>: goto            <span class="number">8</span>   </div><div class="line"><span class="number">25</span>: invokestatic    #<span class="number">20</span>  // Method java/lang/System.nanoTime:()J</div><div class="line"><span class="number">28</span>: lstore_3       </div><div class="line"><span class="number">29</span>: lload_3         </div><div class="line"><span class="number">30</span>: lload_1         </div><div class="line"><span class="number">31</span>: lsub           </div><div class="line"><span class="number">32</span>: lreturn</div></pre></td></tr></table></figure></p>
<p>我们看看 C2优化之后的汇编代码<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">....</div><div class="line"><span class="number">0x000000011408c5d6</span>: callq *%r10  <span class="comment">;*invokestatic nanoTime</span></div><div class="line">                                 <span class="comment">; - TwoSqrt::D@2 (line 25)</span></div><div class="line"><span class="number">0x000000011408c5d9</span>: <span class="keyword">mov</span> %rax,%rbx</div><div class="line"><span class="number">0x000000011408c5dc</span>: movabs <span class="number">$0</span>x10728ec10,%r10</div><div class="line"><span class="number">0x000000011408c5e6</span>: callq *%r10  <span class="comment">;*invokestatic nanoTime</span></div><div class="line">                                 <span class="comment">; - TwoSqrt::D@25 (line 29)</span></div><div class="line"><span class="number">0x000000011408c5e9</span>: <span class="keyword">sub</span> %rbx,%rax  <span class="comment">;*lsub</span></div><div class="line">                                   <span class="comment">; - TwoSqrt::D@31 (line 30)</span></div><div class="line">....</div></pre></td></tr></table></figure></p>
<p>可以看到for循环其实优化掉了，所以上述改一下，return s3; 这样循环显然是不会消除优化掉的。<br>好了，我们再改一下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">D</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// double s3=0;</span></div><div class="line">    <span class="keyword">long</span> start3 = System.nanoTime();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NN; i++) &#123;</div><div class="line">        s3 += i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">long</span> start4 = System.nanoTime();</div><div class="line">    <span class="keyword">return</span> start4 - start3;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>即使用全局变量 s3以及 改为 s3+=i，那么耗时会是常量还是跟for循环次数有关？<br>更多的，如果这里改为 s3+=0.1 或者 s3+=1；又会怎样？<br>实际上三者耗时不一样，但都不是几纳秒，即这个时间不是常量，和循环次数有关，也就是说，<strong>即便是 C2优化后，循环依旧。</strong><br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="number">0x000000011a2f1130</span>: <span class="keyword">vaddsd</span> %xmm1,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000011a2f1134</span>: <span class="keyword">mov</span>    %r11d,%r8d</div><div class="line"><span class="number">0x000000011a2f1137</span>: <span class="keyword">add</span>    <span class="number">$0</span>xd,%r8d</div><div class="line"><span class="number">0x000000011a2f113b</span>: <span class="keyword">mov</span>    %r11d,%r9d</div><div class="line"><span class="number">0x000000011a2f113e</span>: <span class="keyword">add</span>    <span class="number">$0</span>xe,%r9d</div><div class="line"><span class="number">0x000000011a2f1142</span>: <span class="keyword">vcvtsi2sd</span> %r8d,%xmm3,%xmm3</div><div class="line"><span class="number">0x000000011a2f1147</span>: <span class="keyword">vcvtsi2sd</span> %r9d,%xmm4,%xmm4</div><div class="line"><span class="number">0x000000011a2f114c</span>: <span class="keyword">mov</span>    %r11d,%r8d</div><div class="line"><span class="number">0x000000011a2f114f</span>: <span class="keyword">add</span>    <span class="number">$0</span>xc,%r8d</div><div class="line"><span class="number">0x000000011a2f1153</span>: <span class="keyword">mov</span>    %r11d,%r9d</div><div class="line"><span class="number">0x000000011a2f1156</span>: <span class="keyword">add</span>    <span class="number">$0</span>xb,%r9d</div><div class="line"><span class="number">0x000000011a2f115a</span>: <span class="keyword">vcvtsi2sd</span> %r8d,%xmm5,%xmm5</div><div class="line"><span class="number">0x000000011a2f115f</span>: <span class="keyword">vcvtsi2sd</span> %r9d,%xmm6,%xmm6</div><div class="line"><span class="number">0x000000011a2f1164</span>: <span class="keyword">mov</span>    %r11d,%r8d</div><div class="line"><span class="number">0x000000011a2f1167</span>: <span class="keyword">add</span>    <span class="number">$0</span>xa,%r8d</div><div class="line"><span class="number">0x000000011a2f116b</span>: <span class="keyword">mov</span>    %r11d,%r9d</div><div class="line"><span class="number">0x000000011a2f116e</span>: <span class="keyword">add</span>    <span class="number">$0</span>x8,%r9d</div><div class="line"><span class="number">0x000000011a2f1172</span>: <span class="keyword">vcvtsi2sd</span> %r8d,%xmm7,%xmm7</div><div class="line"><span class="number">0x000000011a2f1177</span>: <span class="keyword">vcvtsi2sd</span> %r9d,%xmm8,%xmm8</div><div class="line"><span class="number">0x000000011a2f117c</span>: <span class="keyword">mov</span>    %r11d,%r8d</div><div class="line"><span class="number">0x000000011a2f117f</span>: <span class="keyword">add</span>    <span class="number">$0</span>x7,%r8d</div><div class="line"><span class="number">0x000000011a2f1183</span>: <span class="keyword">mov</span>    %r11d,%r9d</div><div class="line"><span class="number">0x000000011a2f1186</span>: <span class="keyword">add</span>    <span class="number">$0</span>x6,%r9d</div><div class="line"><span class="number">0x000000011a2f118a</span>: <span class="keyword">vcvtsi2sd</span> %r8d,%xmm9,%xmm9</div><div class="line"><span class="number">0x000000011a2f118f</span>: <span class="keyword">vcvtsi2sd</span> %r9d,%xmm10,%xmm10</div><div class="line"><span class="number">0x000000011a2f1194</span>: <span class="keyword">mov</span>    %r11d,%r8d</div><div class="line"><span class="number">0x000000011a2f1197</span>: <span class="keyword">add</span>    <span class="number">$0</span>x5,%r8d</div><div class="line"><span class="number">0x000000011a2f119b</span>: <span class="keyword">mov</span>    %r11d,%r9d</div><div class="line"><span class="number">0x000000011a2f119e</span>: <span class="keyword">add</span>    <span class="number">$0</span>x4,%r9d</div><div class="line"><span class="number">0x000000011a2f11a2</span>: <span class="keyword">vcvtsi2sd</span> %r8d,%xmm11,%xmm11</div><div class="line"><span class="number">0x000000011a2f11a7</span>: <span class="keyword">vcvtsi2sd</span> %r9d,%xmm12,%xmm12</div><div class="line"><span class="number">0x000000011a2f11ac</span>: <span class="keyword">mov</span>    %r11d,%r8d</div><div class="line"><span class="number">0x000000011a2f11af</span>: <span class="keyword">add</span>    <span class="number">$0</span>x3,%r8d</div><div class="line"><span class="number">0x000000011a2f11b3</span>: <span class="keyword">mov</span>    %r11d,%r9d</div><div class="line"><span class="number">0x000000011a2f11b6</span>: <span class="keyword">add</span>    <span class="number">$0</span>x2,%r9d</div><div class="line"><span class="number">0x000000011a2f11ba</span>: <span class="keyword">vcvtsi2sd</span> %r8d,%xmm13,%xmm13</div><div class="line"><span class="number">0x000000011a2f11bf</span>: <span class="keyword">vcvtsi2sd</span> %r9d,%xmm1,%xmm1</div><div class="line"><span class="number">0x000000011a2f11c4</span>: <span class="keyword">mov</span>    %r11d,%r8d</div><div class="line"><span class="number">0x000000011a2f11c7</span>: <span class="keyword">add</span>    <span class="number">$0</span>xf,%r8d</div><div class="line"><span class="number">0x000000011a2f11cb</span>: <span class="keyword">mov</span>    %r11d,%r9d</div><div class="line"><span class="number">0x000000011a2f11ce</span>: <span class="keyword">inc</span>    %r9d</div><div class="line"><span class="number">0x000000011a2f11d1</span>: <span class="keyword">vcvtsi2sd</span> %r8d,%xmm14,%xmm14</div><div class="line"><span class="number">0x000000011a2f11d6</span>: <span class="keyword">vcvtsi2sd</span> %r9d,%xmm2,%xmm2</div><div class="line"><span class="number">0x000000011a2f11db</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm2,%xmm0</div><div class="line"><span class="number">0x000000011a2f11df</span>: <span class="keyword">vaddsd</span> %xmm1,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000011a2f11e3</span>: <span class="keyword">vaddsd</span> %xmm13,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000011a2f11e8</span>: <span class="keyword">vaddsd</span> %xmm12,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000011a2f11ed</span>: <span class="keyword">vaddsd</span> %xmm11,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000011a2f11f2</span>: <span class="keyword">vaddsd</span> %xmm10,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000011a2f11f7</span>: <span class="keyword">vaddsd</span> %xmm9,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000011a2f11fc</span>: <span class="keyword">vaddsd</span> %xmm8,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000011a2f1201</span>: <span class="keyword">mov</span>    %r11d,%r8d</div><div class="line"><span class="number">0x000000011a2f1204</span>: <span class="keyword">add</span>    <span class="number">$0</span>x9,%r8d</div><div class="line"><span class="number">0x000000011a2f1208</span>: <span class="keyword">vcvtsi2sd</span> %r8d,%xmm1,%xmm1</div><div class="line"><span class="number">0x000000011a2f120d</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm1,%xmm0</div><div class="line"><span class="number">0x000000011a2f1211</span>: <span class="keyword">vaddsd</span> %xmm7,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000011a2f1215</span>: <span class="keyword">vaddsd</span> %xmm6,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000011a2f1219</span>: <span class="keyword">vaddsd</span> %xmm5,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000011a2f121d</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm3,%xmm0</div><div class="line"><span class="number">0x000000011a2f1221</span>: <span class="keyword">vaddsd</span> %xmm4,%xmm0,%xmm0  <span class="comment">;*dadd</span></div><div class="line">                                              <span class="comment">; - TT3::D@18 (line 27)</span></div><div class="line"></div><div class="line"><span class="number">0x000000011a2f1225</span>: <span class="keyword">vmovsd</span> %xmm0,<span class="number">0x70</span>(%rdx)   <span class="comment">;*putstatic s3</span></div><div class="line">                                              <span class="comment">; - TT3::D@19 (line 27)</span></div><div class="line"></div><div class="line"><span class="number">0x000000011a2f122a</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm14,%xmm1  <span class="comment">;*dadd</span></div><div class="line">                                              <span class="comment">; - TT3::D@18 (line 27)</span></div><div class="line"></div><div class="line"><span class="number">0x000000011a2f122e</span>: <span class="keyword">vmovsd</span> %xmm1,<span class="number">0x70</span>(%rdx)   <span class="comment">;*putstatic s3</span></div><div class="line">                                              <span class="comment">; - TT3::D@19 (line 27)</span></div><div class="line"></div><div class="line"><span class="number">0x000000011a2f1233</span>: <span class="keyword">add</span>    <span class="number">$0</span>x10,%r11d        <span class="comment">;*iinc</span></div><div class="line">                                              <span class="comment">; - TT3::D@22 (line 26)</span></div><div class="line"></div><div class="line"><span class="number">0x000000011a2f1237</span>: <span class="keyword">vcvtsi2sd</span> %r11d,%xmm0,%xmm0  <span class="comment">;*i2d</span></div><div class="line">                                              <span class="comment">; - TT3::D@17 (line 27)</span></div><div class="line"></div><div class="line"><span class="number">0x000000011a2f123c</span>: <span class="keyword">cmp</span>    %ecx,%r11d</div><div class="line"><span class="number">0x000000011a2f123f</span>: <span class="keyword">jl</span>     <span class="number">0x000000011a2f1130</span>  <span class="comment">;*if_icmpge</span></div><div class="line">                                              <span class="comment">; - TT3::D@10 (line 26)</span></div></pre></td></tr></table></figure></p>
<p>上面就是 s3 += i 版的 D() C2优化后的代码，即循环确实存在的。<br><strong>GCC会怎么优化呢？实际上，C还是有点不同的地方：C这里优化后耗时为常量。</strong><br>以上文C代码为例：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">begin = clock();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopcnts; i++)</div><div class="line">  res += i;</div><div class="line">end = clock();</div><div class="line"><span class="built_in">printf</span>(<span class="string">"asm(%f) sumd = %ld, \t\tcost: %f\n"</span>, MM, res, (<span class="keyword">double</span>)(end-begin));</div></pre></td></tr></table></figure></p>
<p>比如在gcc -O3 时，当 res为long类型时[JAVA版long跟double都不会有这个优化]，耗时为恒定的时间约4ns，因为此时GCC编译器优化为:<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">leal  -<span class="number">1</span>(%r15), %eax</div><div class="line">leal  -<span class="number">2</span>(%r15), %ebx</div><div class="line">imulq %rax, %rbx</div><div class="line">shrq  %rbx</div></pre></td></tr></table></figure></p>
<p>即 n*M/2 直接得到结果了，而不用再跑完循环了。<br>但是当 res为double类型时，却是需要跑for循环了，即：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">LBB0_17:</span>                                ## =&gt;This Inner <span class="keyword">Loop</span> Header: Depth=<span class="number">1</span></div><div class="line">  <span class="keyword">xorps</span> %xmm0, %xmm0</div><div class="line">  cvtsi2sdl %ecx, %xmm0</div><div class="line">  leal  <span class="number">1</span>(%rcx), %esi</div><div class="line">  <span class="keyword">xorps</span> %xmm1, %xmm1</div><div class="line">  cvtsi2sdl %esi, %xmm1</div><div class="line">  <span class="keyword">addsd</span> %xmm3, %xmm0</div><div class="line">  leal  <span class="number">2</span>(%rcx), %esi</div><div class="line">  <span class="keyword">xorps</span> %xmm2, %xmm2</div><div class="line">  cvtsi2sdl %esi, %xmm2</div><div class="line">  <span class="keyword">addsd</span> %xmm0, %xmm1</div><div class="line">  leal  <span class="number">3</span>(%rcx), %esi</div><div class="line">  <span class="keyword">xorps</span> %xmm0, %xmm0</div><div class="line">  cvtsi2sdl %esi, %xmm0</div><div class="line">  <span class="keyword">addsd</span> %xmm1, %xmm2</div><div class="line">  leal  <span class="number">4</span>(%rcx), %esi</div><div class="line">  <span class="keyword">xorps</span> %xmm1, %xmm1</div><div class="line">  cvtsi2sdl %esi, %xmm1</div><div class="line">  <span class="keyword">addsd</span> %xmm2, %xmm0</div><div class="line">  leal  <span class="number">5</span>(%rcx), %esi</div><div class="line">  <span class="keyword">xorps</span> %xmm2, %xmm2</div><div class="line">  cvtsi2sdl %esi, %xmm2</div><div class="line">  <span class="keyword">addsd</span> %xmm0, %xmm1</div><div class="line">  leal  <span class="number">6</span>(%rcx), %esi</div><div class="line">  <span class="keyword">xorps</span> %xmm0, %xmm0</div><div class="line">  cvtsi2sdl %esi, %xmm0</div><div class="line">  <span class="keyword">addsd</span> %xmm1, %xmm2</div><div class="line">  leal  <span class="number">7</span>(%rcx), %esi</div><div class="line">  <span class="keyword">xorps</span> %xmm3, %xmm3</div><div class="line">  cvtsi2sdl %esi, %xmm3</div><div class="line">  <span class="keyword">addsd</span> %xmm2, %xmm0</div><div class="line">  <span class="keyword">addsd</span> %xmm0, %xmm3</div><div class="line">  addl  <span class="number">$8</span>, %ecxa</div><div class="line">  cmpl  %ecx, %edx</div><div class="line">  <span class="keyword">jne</span> LBB0_17</div><div class="line">## %bb<span class="meta">.6</span>:</div><div class="line">  testl %eax, %eax</div><div class="line">  <span class="keyword">je</span>  LBB0_9</div></pre></td></tr></table></figure></p>
<p>这里插一句，如果你怀疑上文测试是否足够准确，那可以验证下这段代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">begin = clock();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopcnts; i++)</div><div class="line">  res += i;</div><div class="line">end = clock();</div><div class="line"><span class="built_in">printf</span>(<span class="string">"asm(%f) sumd = %f, \t\tcost: %f\n"</span>, MM, res, (<span class="keyword">double</span>)(end-begin));</div><div class="line">res=<span class="number">0</span>;</div><div class="line">begin = clock();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopcnts; i++)</div><div class="line">  res += <span class="built_in">sqrt</span>(MM+i);</div><div class="line">end = clock();</div><div class="line"><span class="built_in">printf</span>(<span class="string">"asm(%f) sums = %f, \t\tcost: %f\n"</span>, MM, res, (<span class="keyword">double</span>)(end-begin));</div></pre></td></tr></table></figure></p>
<p>在我的Mac机器上前者耗时约为后者1/5以内，足以论证之前C的测试结果，说明sqrt指令比手写的卡马克开根号性能提升是大于40%。<br><blockquote><p>1.<br>java -XX:TieredStopAtLevel=4 TwoSqrt<br>使用上面指令可以指定JIT优化级别<br>使用下面命令看lebel级别：<br>java -XX:+PrintFlagsFinal -version | grep CompileThreshold<br>level 0 - interpreter<br>level 1 - C1 with full optimization (no profiling)<br>level 2 - C1 with invocation and backedge counters<br>level 3 - C1 with full profiling (level 2 + MDO)<br>level 4 - C2<br>2.<br>java -XX:TieredStopAtLevel=1 -XX:+UnlockDiagnosticVMOptions -XX:CompileCommand=’print,<em>DL.D</em>‘ DL<br>使用上面命令可以输出指定方法JIT后的ASM代码<br>3.<br>如何查看java的JIT信息，网上可自行搜索教程。</p>
</blockquote><br>好了，让我们切回刚才的JAVA代码。<br>再次对TwoSqrt.java <a href="/images/TwoSqrt.java">做个改动</a>，添加了DL，即跟DD一样只是double换成了 long，运行几次，我们可看到跑出来的数据：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">DD :6.666951101979061e+11 176899.189</div><div class="line">DI :6.666951101979061e+11 672762.318</div><div class="line">DL :6.666951101979061e+11 211739.138</div><div class="line">DIJ:6.666951101979061e+11 292870.325</div><div class="line">II :6.666695084696677e+11 228337.677</div><div class="line">------------</div><div class="line">DD :6.666951101979061e+11 171914.117</div><div class="line">DI :6.666951101979061e+11 732866.289</div><div class="line">DL :6.666951101979061e+11 220012.218</div><div class="line">DIJ:6.666951101979061e+11 405955.404</div><div class="line">II :6.666695084696677e+11 223352.986</div><div class="line">------------</div><div class="line">DD :6.666951101979061e+11 168237.792</div><div class="line">DI :6.666951101979061e+11 254137.578</div><div class="line">DL :6.666951101979061e+11 450223.373</div><div class="line">DIJ:6.666951101979061e+11 265043.075</div><div class="line">II :6.666695084696677e+11 255281.007</div><div class="line">------------</div><div class="line">DD :6.666951101979061e+11 169216.409</div><div class="line">DI :6.666951101979061e+11 258624.100</div><div class="line">DL :6.666951101979061e+11 443366.215</div><div class="line">DIJ:6.666951101979061e+11 265902.974</div><div class="line">II :6.666695084696677e+11 255865.587</div><div class="line">....</div></pre></td></tr></table></figure></p>
<p>这个结果和我用JMH测试下来接近:<a href="/images/JMHBnhSqrt.java">JMHBnhSqrt.java</a><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Benchmark                Mode  Cnt          Score           Error  Units</div><div class="line">JMHBnhSqrt.benchLoopDD   avgt    3  170126363.572 ±  18897173.028  ns/op</div><div class="line">JMHBnhSqrt.benchLoopDI   avgt    3  304366448.848 ±  10242902.502  ns/op</div><div class="line">JMHBnhSqrt.benchLoopDIJ  avgt    3  380274911.025 ± 311415636.755  ns/op</div><div class="line">JMHBnhSqrt.benchLoopII   avgt    3  270527877.936 ±  68992367.132  ns/op</div><div class="line">JMHBnhSqrt.sqrt          avgt    3          1.482 ±         0.059  ns/op</div></pre></td></tr></table></figure></p>
<p>其中：<br>benchLoopDD: sumkk += Math.sqrt(MM + kk++);  // kk为double，0开始，++<br>benchLoopDI: sumkk += Math.sqrt(MM + i);     // i为for循环的i，0开始，++<br>benchLoopDIJ:sumjj += Math.sqrt(MM + jj++);  // jj为int，0开始，++<br>benchLoopII: sumii += Math.sqrt(285 + ii++); // ii为int，0开始，++</p>
<p>1) 需要指出的是，这里其实benchmark的是for循环+sqrt函数的代价，而不仅仅是sqrt的代价了，所以如果你注释掉循环来用JMH benchmark的话再除以循环次数得到的值不一样了(因为for循环下编译优化的缘故)。<br>2) 似乎 JMH得到的 DI/DIJ性能结果和上面2次后的数据有点出入，可能是 对JMH使用掌握的还不够深入，也可能是JMH本身原因，立个flag后面再写篇JMH的文章讨论此问题。<br>3) 总之应该相信JMH测试标准的准确性，但是不要过分迷信JMH的优化，尤其在自己不太确定的影响性能的配置上。</p>
<p>源码中DNO和D因编译优化不再细说了，我们看看几个：<br>1) Java版的DD的耗时已经非常接近之前C代码测出来的sqrt指令耗时–167888000纳秒，差距千分之一以内了。<br>2) 我们看到 DI 的耗时经历了从600多毫秒到稳定在260毫秒左右，DIJ也类似–这是C2的优化。<br>3) 尽管有上面的优化，但是耗时还是大于 DD 很多，30%多了，而他们区别只不过是被加数是double/int的区别，这是什么原因呢？<br>4) DL的耗时，比较奇怪，C1优化耗时(前两轮循环)还在 211739138纳秒左右，但是第三轮之后竟然到了 450223373纳秒。<br><strong>上述问题3，在C版本是无此区别的，也就是说，无论如何解释优化的原因，这里都可看出来，Java的C2对DI的优化(int类型的循环体)不如 GCC 编译器，后者可以做到 DI和DD同样的耗时。</strong><br><strong>上述问题4，我们是不是可以得到结论，C2的优化效果(性能) 未必比 C1 好？</strong><br>后两个问题，我在下一篇技术文里再讨论。</p>
<p>其他：<br>DNO/D的常量消除，上文写了，这里不重复，但看下java相关代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如对于：</span></div><div class="line"><span class="keyword">double</span> ss=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++)</div><div class="line">    ss += sqrt(<span class="number">230000</span>);</div></pre></td></tr></table></figure></p>
<p>实际上，GCC -C1就能把 sqrt(MM) 优化成常量了：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">_main:</span>                                  ## @main</div><div class="line">...</div><div class="line">    movl    <span class="number">$1000000</span>, %eax          ## imm = <span class="number">0xF4240</span></div><div class="line">    <span class="keyword">movsd</span>   LCPI0_0(%rip), %xmm1    ## <span class="built_in">xmm1</span> = mem[<span class="number">0</span>],<span class="meta">zero</span></div><div class="line"><span class="meta">    .p2align</span>        <span class="number">4</span>, <span class="number">0x90</span></div><div class="line"><span class="symbol">LBB0_1:</span>                                 ## =&gt;This Inner <span class="keyword">Loop</span> Header: Depth=<span class="number">1</span></div><div class="line">    <span class="keyword">addsd</span>   %xmm1, %xmm0</div><div class="line">    decl    %eax</div><div class="line">    <span class="keyword">jne</span>     LBB0_1</div></pre></td></tr></table></figure></p>
<p>LCPI0_0(%rip)就是 double 479.58315233127195<br>相比之下，JAVA的JVM code和C1都不会把sqrt(230000)优化成常量，C2则会优化。如java 版 C1优化的循环体内调用的还是下面这句：</p>
<pre><code>0x0000000110f7c229: vsqrtsd %xmm1,%xmm1,%xmm1  ;*invokestatic sqrt ; - TwoSqrt::D@19 (line 46)
</code></pre><p>java 版 C2优化的循环体内调用的还是下面这句：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="symbol"> L0002:</span> <span class="keyword">vaddsd</span> -<span class="number">0x138</span>(%rip),%xmm0,%xmm0  # <span class="number">0x0000000110f84480</span> <span class="comment">;*dadd ; - TwoSqrt::D@22 (line 46) ;</span></div><div class="line"><span class="number">0x0000000110f845b8</span>: <span class="keyword">vmovsd</span> %xmm0,<span class="number">0x70</span>(%r10)  <span class="comment">;*putstatic s3 ; - TwoSqrt::D@23 (line 46)</span></div><div class="line"><span class="number">0x0000000110f845be</span>: <span class="keyword">inc</span> %ecx  <span class="comment">;*iinc ; - TwoSqrt::D@26 (line 45)</span></div><div class="line"><span class="number">0x0000000110f845c0</span>: <span class="keyword">cmp</span> %r8d,%ecx</div><div class="line"><span class="number">0x0000000110f845c3</span>: <span class="keyword">jl</span> L0002  <span class="comment">;*if_icmpge ; - TwoSqrt::D@10 (line 45)</span></div></pre></td></tr></table></figure></p>
<p>就是说循环的相加根号后的数值已经不存在sqrt指令了。即，C2优化和GCC达到同样效果了。</p>
<p>上述也可见，DD和DI耗时在优化前差距还是很明显的，C2优化后差距减少了些。<br>此外，对于for循环，编译器/Java也有优化，比如for循环步长由 1 变为16(add $0x10,%ecx)为一个批次，减少了跳转指令的使用。<br>JAVA C2 针对DD优化采用了和GCC一样的思路，代码在下面可以看到，不过似乎有点区别是JAVA这里16个寄存器都用上了，而C用了四个，看起来不如C优化的那么紧凑。<br>这里贴一下C2之后代码，看看能不能发现什么。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">             L0000:</span> <span class="keyword">vaddsd</span> -<span class="number">0xd8</span>(%rip),%xmm1,%xmm2  # <span class="number">0x000000010feed180</span></div><div class="line">                                                    <span class="comment">;   &#123;section_word&#125;</span></div><div class="line"><span class="number">0x000000010feed258</span>: <span class="keyword">vaddsd</span> -<span class="number">0xe0</span>(%rip),%xmm2,%xmm1  # <span class="number">0x000000010feed180</span></div><div class="line">                                                    <span class="comment">;*dadd</span></div><div class="line">                                                    <span class="comment">; - TwoSqrt::DD@26 (line 64)</span></div><div class="line">                                                    <span class="comment">;   &#123;section_word&#125;</span></div><div class="line"><span class="number">0x000000010feed260</span>: <span class="keyword">vaddsd</span> -<span class="number">0xe0</span>(%rip),%xmm2,%xmm2  # <span class="number">0x000000010feed188</span></div><div class="line">                                                    <span class="comment">;   &#123;section_word&#125;</span></div><div class="line"><span class="number">0x000000010feed268</span>: <span class="keyword">vaddsd</span> -<span class="number">0xe8</span>(%rip),%xmm1,%xmm5  # <span class="number">0x000000010feed188</span></div><div class="line">                                                    <span class="comment">;   &#123;section_word&#125;</span></div><div class="line"><span class="number">0x000000010feed270</span>: <span class="keyword">vsqrtsd</span> %xmm2,%xmm3,%xmm3</div><div class="line"><span class="number">0x000000010feed274</span>: <span class="keyword">vsqrtsd</span> %xmm5,%xmm2,%xmm2  <span class="comment">;*invokestatic sqrt</span></div><div class="line">                                               <span class="comment">; - TwoSqrt::DD@29 (line 64)</span></div><div class="line"><span class="symbol">             L0001:</span> <span class="keyword">vaddsd</span> %xmm4,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000010feed27c</span>: <span class="keyword">vaddsd</span> -<span class="number">0x104</span>(%rip),%xmm1,%xmm1  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed284</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm3,%xmm0</div><div class="line"><span class="number">0x000000010feed288</span>: <span class="keyword">vaddsd</span> -<span class="number">0x108</span>(%rip),%xmm1,%xmm3  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed290</span>: <span class="keyword">vaddsd</span> %xmm2,%xmm0,%xmm4</div><div class="line"><span class="number">0x000000010feed294</span>: <span class="keyword">vaddsd</span> -<span class="number">0x11c</span>(%rip),%xmm1,%xmm0  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed29c</span>: <span class="keyword">vaddsd</span> -<span class="number">0x124</span>(%rip),%xmm0,%xmm1  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed2a4</span>: <span class="keyword">vaddsd</span> -<span class="number">0x124</span>(%rip),%xmm0,%xmm2  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed2ac</span>: <span class="keyword">vaddsd</span> -<span class="number">0x12c</span>(%rip),%xmm1,%xmm5  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed2b4</span>: <span class="keyword">vaddsd</span> -<span class="number">0x13c</span>(%rip),%xmm1,%xmm0  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed2bc</span>: <span class="keyword">vaddsd</span> -<span class="number">0x144</span>(%rip),%xmm0,%xmm1  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed2c4</span>: <span class="keyword">vaddsd</span> -<span class="number">0x144</span>(%rip),%xmm0,%xmm6  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed2cc</span>: <span class="keyword">vaddsd</span> -<span class="number">0x14c</span>(%rip),%xmm1,%xmm7  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed2d4</span>: <span class="keyword">vaddsd</span> -<span class="number">0x15c</span>(%rip),%xmm1,%xmm0  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed2dc</span>: <span class="keyword">vaddsd</span> -<span class="number">0x164</span>(%rip),%xmm0,%xmm1  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed2e4</span>: <span class="keyword">vaddsd</span> -<span class="number">0x164</span>(%rip),%xmm0,%xmm8  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed2ec</span>: <span class="keyword">vaddsd</span> -<span class="number">0x16c</span>(%rip),%xmm1,%xmm9  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed2f4</span>: <span class="keyword">vaddsd</span> -<span class="number">0x17c</span>(%rip),%xmm1,%xmm0  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed2fc</span>: <span class="keyword">vaddsd</span> -<span class="number">0x184</span>(%rip),%xmm0,%xmm1  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed304</span>: <span class="keyword">vaddsd</span> -<span class="number">0x184</span>(%rip),%xmm0,%xmm10  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed30c</span>: <span class="keyword">vaddsd</span> -<span class="number">0x18c</span>(%rip),%xmm1,%xmm11  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed314</span>: <span class="keyword">vaddsd</span> -<span class="number">0x19c</span>(%rip),%xmm1,%xmm0  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed31c</span>: <span class="keyword">vaddsd</span> -<span class="number">0x1a4</span>(%rip),%xmm0,%xmm1  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed324</span>: <span class="keyword">vaddsd</span> -<span class="number">0x1a4</span>(%rip),%xmm0,%xmm12  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed32c</span>: <span class="keyword">vaddsd</span> -<span class="number">0x1ac</span>(%rip),%xmm1,%xmm13  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed334</span>: <span class="keyword">vaddsd</span> -<span class="number">0x1bc</span>(%rip),%xmm1,%xmm0  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed33c</span>: <span class="keyword">vaddsd</span> -<span class="number">0x1c4</span>(%rip),%xmm0,%xmm1  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed344</span>: <span class="keyword">vaddsd</span> -<span class="number">0x1c4</span>(%rip),%xmm0,%xmm0  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed34c</span>: <span class="keyword">vaddsd</span> -<span class="number">0x1cc</span>(%rip),%xmm1,%xmm14  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed354</span>: <span class="keyword">vaddsd</span> -<span class="number">0x1dc</span>(%rip),%xmm1,%xmm1  # <span class="number">0x000000010feed180</span></div><div class="line">                                                     <span class="comment">;*dadd</span></div><div class="line">                                                     <span class="comment">; - TwoSqrt::DD@26 (line 64)</span></div><div class="line">                                                     <span class="comment">;   &#123;section_word&#125;</span></div><div class="line"><span class="number">0x000000010feed35c</span>: <span class="keyword">vaddsd</span> -<span class="number">0x1dc</span>(%rip),%xmm1,%xmm15  # <span class="number">0x000000010feed188</span></div><div class="line">                                                      <span class="comment">;   &#123;section_word&#125;</span></div><div class="line"><span class="number">0x000000010feed364</span>: <span class="keyword">vsqrtsd</span> %xmm3,%xmm3,%xmm3</div><div class="line"><span class="number">0x000000010feed368</span>: <span class="keyword">vaddsd</span> %xmm4,%xmm3,%xmm3</div><div class="line"><span class="number">0x000000010feed36c</span>: <span class="keyword">vsqrtsd</span> %xmm15,%xmm4,%xmm4  <span class="comment">;*invokestatic sqrt</span></div><div class="line">                                                <span class="comment">; - TwoSqrt::DD@29 (line 64)</span></div><div class="line"><span class="number">0x000000010feed371</span>: <span class="keyword">vsqrtsd</span> %xmm14,%xmm14,%xmm14</div><div class="line"><span class="number">0x000000010feed376</span>: <span class="keyword">vsqrtsd</span> %xmm0,%xmm15,%xmm15</div><div class="line"><span class="number">0x000000010feed37a</span>: <span class="keyword">vsqrtsd</span> %xmm13,%xmm13,%xmm13</div><div class="line"><span class="number">0x000000010feed37f</span>: <span class="keyword">vsqrtsd</span> %xmm12,%xmm12,%xmm12</div><div class="line"><span class="number">0x000000010feed384</span>: <span class="keyword">vsqrtsd</span> %xmm11,%xmm11,%xmm11</div><div class="line"><span class="number">0x000000010feed389</span>: <span class="keyword">vsqrtsd</span> %xmm10,%xmm10,%xmm10</div><div class="line"><span class="number">0x000000010feed38e</span>: <span class="keyword">vsqrtsd</span> %xmm9,%xmm9,%xmm9</div><div class="line"><span class="number">0x000000010feed393</span>: <span class="keyword">vsqrtsd</span> %xmm8,%xmm8,%xmm8</div><div class="line"><span class="number">0x000000010feed398</span>: <span class="keyword">vsqrtsd</span> %xmm7,%xmm7,%xmm7</div><div class="line"><span class="number">0x000000010feed39c</span>: <span class="keyword">vsqrtsd</span> %xmm6,%xmm6,%xmm6</div><div class="line"><span class="number">0x000000010feed3a0</span>: <span class="keyword">vsqrtsd</span> %xmm5,%xmm5,%xmm5</div><div class="line"><span class="number">0x000000010feed3a4</span>: <span class="keyword">vsqrtsd</span> %xmm2,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000010feed3a8</span>: <span class="keyword">vaddsd</span> %xmm3,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000010feed3ac</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm5,%xmm0</div><div class="line"><span class="number">0x000000010feed3b0</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm6,%xmm0</div><div class="line"><span class="number">0x000000010feed3b4</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm7,%xmm0</div><div class="line"><span class="number">0x000000010feed3b8</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm8,%xmm0</div><div class="line"><span class="number">0x000000010feed3bc</span>: <span class="keyword">vaddsd</span> %xmm9,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000010feed3c1</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm10,%xmm0</div><div class="line"><span class="number">0x000000010feed3c5</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm11,%xmm0</div><div class="line"><span class="number">0x000000010feed3c9</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm12,%xmm0</div><div class="line"><span class="number">0x000000010feed3cd</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm13,%xmm0</div><div class="line"><span class="number">0x000000010feed3d1</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm15,%xmm0  <span class="comment">;*dadd</span></div><div class="line">                                               <span class="comment">; - TwoSqrt::DD@32 (line 64)</span></div><div class="line"><span class="number">0x000000010feed3d5</span>: <span class="keyword">vmovsd</span> %xmm0,<span class="number">0x70</span>(%r10)  <span class="comment">;*putstatic s3</span></div><div class="line">                                             <span class="comment">; - TwoSqrt::DD@33 (line 64)</span></div><div class="line"><span class="number">0x000000010feed3db</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm14,%xmm0  <span class="comment">;*dadd</span></div><div class="line">                                               <span class="comment">; - TwoSqrt::DD@32 (line 64)</span></div><div class="line"><span class="number">0x000000010feed3df</span>: <span class="keyword">vmovsd</span> %xmm0,<span class="number">0x70</span>(%r10)  <span class="comment">;*putstatic s3</span></div><div class="line">                                             <span class="comment">; - TwoSqrt::DD@33 (line 64)</span></div><div class="line"><span class="number">0x000000010feed3e5</span>: <span class="keyword">add</span> <span class="number">$0</span>x10,%ecx  <span class="comment">;*iinc</span></div><div class="line">                                    <span class="comment">; - TwoSqrt::DD@36 (line 63)</span></div><div class="line"><span class="number">0x000000010feed3e8</span>: <span class="keyword">cmp</span> %r9d,%ecx</div><div class="line"><span class="number">0x000000010feed3eb</span>: <span class="keyword">jl</span> L0000  <span class="comment">;*if_icmpge</span></div><div class="line">                              <span class="comment">; - TwoSqrt::DD@14 (line 63)</span></div><div class="line"><span class="symbol">             L0002:</span> <span class="keyword">cmp</span> %r8d,%ecx</div><div class="line"><span class="number">0x000000010feed3f4</span>: <span class="keyword">jge</span> L0004</div><div class="line"><span class="number">0x000000010feed3f6</span>: <span class="keyword">xchg</span> %ax,%ax  <span class="comment">;*getstatic s3</span></div><div class="line">                                  <span class="comment">; - TwoSqrt::DD@17 (line 64)</span></div></pre></td></tr></table></figure></p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>硬件：MacBook Pro 2017<br>JAVA Version:<br>java version “1.8.0_221”<br>Java(TM) SE Runtime Environment (build 1.8.0_221-b11)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)</p>
<blockquote><p>outro1： 篇幅限制，后面两个问题留到下一篇技术文里解答了。<br>outro2： 8月初开始准备写，中间因太忙，放下一段时间，可能内容不是连贯的，欢迎反馈。</p>
</blockquote>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol>
<li><a href="https://www.jianshu.com/p/dcd73888ac3a" target="_blank" rel="external">牛顿迭代法求开方根</a></li>
<li><a href="https://www.matongxue.com/madocs/205.html#/madoc" target="_blank" rel="external">如何通俗易懂地讲解牛顿迭代法</a></li>
<li><a href="https://www.codeproject.com/Articles/69941/Best-Square-Root-Method-Algorithm-Function-Precisi" target="_blank" rel="external">Best-Square-Root-Method</a></li>
<li><a href="https://www.felixcloutier.com/x86/rsqrtss" target="_blank" rel="external">RSQRTSS — Compute Reciprocal of Square Root of Scalar Single-Precision Floating-Point Value
</a></li>
<li><a href="https://software.intel.com/zh-cn/forums/intel-isa-extensions/topic/780640" target="_blank" rel="external">performance implications of using vmovups and vmovapd</a></li>
<li><a href="https://software.intel.com/sites/default/files/managed/9e/bc/64-ia-32-architectures-optimization-manual.pdf" target="_blank" rel="external">Intel指令周期</a></li>
<li>To my father. [1955-2019.08.23]</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;i&gt;&lt;strong&gt;intro1&lt;/strong&gt;：卡马克算法时最快的开根号方式吗？C/Java语言本身是怎么实现开根号的？&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro2&lt;/strong&gt;: java的内置sqrt和c的内置sqrt哪个更快？Java的编译/JIT优化和GCC的编译优化是否有不足之处？&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro3&lt;/strong&gt;: java的C2优化效果一定比C1效果好吗(对性能而言)？&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题或现象&quot;&gt;&lt;a href=&quot;#问题或现象&quot; class=&quot;headerlink&quot; title=&quot;问题或现象&quot;&gt;&lt;/a&gt;问题或现象&lt;/h2&gt;&lt;p&gt;这是最近看一位博主解Leet Code题想到的，原题简化一下是：给一个正整数(32位int)开根号后得到x，再对x取整返回。&lt;br&gt;博文的解法是使用二分查找，Java代码实现，不过这里想对该题再讨论几点&lt;br&gt;1）二分查找也可以优化下，建立一个简单的范围表，再二分查找，某几个国产IP库查询也是该做法(因为比BTree省太多内存)。&lt;br&gt;2）其实还可以用 牛顿切线法 ，每个ACMer入门练手时都会碰到的算法。&lt;br&gt;3）因为本题目只是要求返回正整数，那么如果我在 牛顿切分法阈值判断的时候，再加一个条件，判断本轮的整数部分和上一轮的整数部分是否相等，会不会更快？&lt;br&gt;4）开根号怎能少了卡马克算法，要知道在关于开根号方法中祭出卡马克算法，也就基本意味着本次交谈该结束了，但是卡马克是最快的方法吗？&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="JIT" scheme="http://thomaslau.github.io/tags/JIT/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch[曾]在布尔类型字段设计上犯的错</title>
    <link href="http://thomaslau.github.io/2019/08/17/2019-08-17-on_elasticsearch_boolean_field/"/>
    <id>http://thomaslau.github.io/2019/08/17/2019-08-17-on_elasticsearch_boolean_field/</id>
    <published>2019-08-17T05:29:10.000Z</published>
    <updated>2019-08-17T17:17:38.362Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><i><strong>intro</strong>: 对于布尔类型字段的处理，Elasticsearch 曾犯了一个错，直到数年后 发布6.0版本才修正过来，这个设计或多或少会遇到，只是没留意，但是查询的时候结果还是让人困惑的。</i></p>
</blockquote>
<h2 id="问题或现象"><a href="#问题或现象" class="headerlink" title="问题或现象"></a>问题或现象</h2><p>前几天刚到公司，同事抛出一个问题，就是发现前一天某个搜索查询条件没有结果，但是第二天却出来结果，不过这个出来的结果是不对的，即搜索result=90时，出现了result=91的结果。<br>于是给我发了链接，我点过去就是下图这样子：<br><a id="more"></a><br><img src="/images/elasticsearch_err.png" width="100%"><br>由于忙于其他问题，所以随口回复了让他使用 result.keyword=90 查询，显然满足条件了。不过一会儿对方又问了个问题“这个字段和其他有什么特殊吗，为什么就要用keyword”，我想了想，的确是个问题，这类索引没有使用特别的分词也没有用特制的打分策略，确实不应该匹配的。<br>但是为什么呢？</p>
<h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><p>好在Elasticsearch(以下可能简称es)提供了一些辅查询相关的助接口，如分词有疑问可使用_analyze理解,打分有疑问可使用_explain, 应早在1.7版本前已经存在了，虽然es的版本有段时间跳跃。<br>当我们无法理解一个document为什么会被匹配时，就可以试试用explain查询那条记录，看看es为何会匹配，于是有下面结果(我简化了下查询)：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line">[java@xx~]$ curl -s <span class="string">'10.135.20.38:9200/aa-2019.08.14/result/AWyQ2s_MQk_27Wzfh6IY/_explain?pretty&amp;q=uid:4537633042845696%20%20AND%20result:90'</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"_index"</span> : <span class="string">"aa-2019.08.14"</span>,</div><div class="line">  <span class="string">"_type"</span> : <span class="string">"result"</span>,</div><div class="line">  <span class="string">"_id"</span> : <span class="string">"AWyQ2s_MQk_27Wzfh6IY"</span>,</div><div class="line">  <span class="string">"matched"</span> : <span class="literal">true</span>,</div><div class="line">  <span class="string">"explanation"</span> : &#123;</div><div class="line">    <span class="string">"value"</span> : 1.0068661,</div><div class="line">    <span class="string">"description"</span> : <span class="string">"sum of:"</span>,</div><div class="line">    <span class="string">"details"</span> : [</div><div class="line">      &#123;</div><div class="line">        <span class="string">"value"</span> : 1.0068661,</div><div class="line">        <span class="string">"description"</span> : <span class="string">"sum of:"</span>,</div><div class="line">        <span class="string">"details"</span> : [</div><div class="line">          &#123;</div><div class="line">            <span class="string">"value"</span> : 1.0,</div><div class="line">            <span class="string">"description"</span> : <span class="string">"uid:[4537633042845696 TO 4537633042845696], product of:"</span>,</div><div class="line">            <span class="string">"details"</span> : [</div><div class="line">              &#123;</div><div class="line">                <span class="string">"value"</span> : 1.0,</div><div class="line">                <span class="string">"description"</span> : <span class="string">"boost"</span>,</div><div class="line">                <span class="string">"details"</span> : [ ]</div><div class="line">              &#125;,</div><div class="line">              &#123;</div><div class="line">                <span class="string">"value"</span> : 1.0,</div><div class="line">                <span class="string">"description"</span> : <span class="string">"queryNorm"</span>,</div><div class="line">                <span class="string">"details"</span> : [ ]</div><div class="line">              &#125;</div><div class="line">            ]</div><div class="line">          &#125;,</div><div class="line">          &#123;</div><div class="line">            <span class="string">"value"</span> : 0.006866124,</div><div class="line">            <span class="string">"description"</span> : <span class="string">"weight(result:T in 59188) [PerFieldSimilarity], result of:"</span>,</div><div class="line">            <span class="string">"details"</span> : [</div><div class="line">              &#123;</div><div class="line">                <span class="string">"value"</span> : 0.006866124,</div><div class="line">                <span class="string">"description"</span> : <span class="string">"score(doc=59188,freq=1.0 = termFreq=1.0\n), product of:"</span>,</div><div class="line">                <span class="string">"details"</span> : [</div><div class="line">                  &#123;</div><div class="line">                    <span class="string">"value"</span> : 0.006866124,</div><div class="line">                    <span class="string">"description"</span> : <span class="string">"idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:"</span>,</div><div class="line">                    <span class="string">"details"</span> : [</div><div class="line">                      &#123;</div><div class="line">                        <span class="string">"value"</span> : 1.7270076E7,</div><div class="line">                        <span class="string">"description"</span> : <span class="string">"docFreq"</span>,</div><div class="line">                        <span class="string">"details"</span> : [ ]</div><div class="line">                      &#125;,</div><div class="line">                      &#123;</div><div class="line">                        <span class="string">"value"</span> : 1.738906E7,</div><div class="line">                        <span class="string">"description"</span> : <span class="string">"docCount"</span>,</div><div class="line">                        <span class="string">"details"</span> : [ ]</div><div class="line">                      &#125;</div><div class="line">                    ]</div><div class="line">                  &#125;,</div><div class="line">                  &#123;</div><div class="line">                    <span class="string">"value"</span> : 1.0,</div><div class="line">                    <span class="string">"description"</span> : <span class="string">"tfNorm, computed as (freq * (k1 + 1)) / (freq + k1) from:"</span>,</div><div class="line">                    <span class="string">"details"</span> : [</div><div class="line">                      &#123;</div><div class="line">                        <span class="string">"value"</span> : 1.0,</div><div class="line">                        <span class="string">"description"</span> : <span class="string">"termFreq=1.0"</span>,</div><div class="line">                        <span class="string">"details"</span> : [ ]</div><div class="line">                      &#125;,</div><div class="line">                      &#123;</div><div class="line">                        <span class="string">"value"</span> : 1.2,</div><div class="line">                        <span class="string">"description"</span> : <span class="string">"parameter k1"</span>,</div><div class="line">                        <span class="string">"details"</span> : [ ]</div><div class="line">                      &#125;,</div><div class="line">                      &#123;</div><div class="line">                        <span class="string">"value"</span> : 0.0,</div><div class="line">                        <span class="string">"description"</span> : <span class="string">"parameter b (norms omitted for field)"</span>,</div><div class="line">                        <span class="string">"details"</span> : [ ]</div><div class="line">                      &#125;</div><div class="line">                    ]</div><div class="line">                  &#125;</div><div class="line">                ]</div><div class="line">              &#125;</div><div class="line">            ]</div><div class="line">          &#125;</div><div class="line">        ]</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="string">"value"</span> : 0.0,</div><div class="line">        <span class="string">"description"</span> : <span class="string">"match on required clause, product of:"</span>,</div><div class="line">        <span class="string">"details"</span> : [</div><div class="line">          &#123;</div><div class="line">            <span class="string">"value"</span> : 0.0,</div><div class="line">            <span class="string">"description"</span> : <span class="string">"# clause"</span>,</div><div class="line">            <span class="string">"details"</span> : [ ]</div><div class="line">          &#125;,</div><div class="line">          &#123;</div><div class="line">            <span class="string">"value"</span> : 1.0,</div><div class="line">            <span class="string">"description"</span> : <span class="string">"_type:result, product of:"</span>,</div><div class="line">            <span class="string">"details"</span> : [</div><div class="line">              &#123;</div><div class="line">                <span class="string">"value"</span> : 1.0,</div><div class="line">                <span class="string">"description"</span> : <span class="string">"boost"</span>,</div><div class="line">                <span class="string">"details"</span> : [ ]</div><div class="line">              &#125;,</div><div class="line">              &#123;</div><div class="line">                <span class="string">"value"</span> : 1.0,</div><div class="line">                <span class="string">"description"</span> : <span class="string">"queryNorm"</span>,</div><div class="line">                <span class="string">"details"</span> : [ ]</div><div class="line">              &#125;</div><div class="line">            ]</div><div class="line">          &#125;</div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们期待的得分是0，即应该有一条是不满足的条件，但上述结果返回的还是得分1.0068661，匹配了，explain接口值得后面再写文章讨论下，这里不展开，如果这里你看不出什么，可以试试下面。</p>
<p>可以再查询下 昨日今日，即aa-2019.08.13/14的mapping配置，于是我得到了这样的结果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 2019.08.13</span></div><div class="line"><span class="string">"result"</span> : &#123;</div><div class="line">  <span class="string">"type"</span> : <span class="string">"boolean"</span></div><div class="line">&#125;,</div><div class="line"><span class="comment"># 2019.08.14</span></div><div class="line"><span class="string">"result"</span> : &#123;</div><div class="line">  <span class="string">"type"</span> : <span class="string">"text"</span>,</div><div class="line">  <span class="string">"fields"</span> : &#123;</div><div class="line">    <span class="string">"keyword"</span> : &#123;</div><div class="line">      <span class="string">"type"</span> : <span class="string">"keyword"</span>,</div><div class="line">      <span class="string">"ignore_above"</span> : 256</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>系统的索引是一天创建一个当天日期后缀的索引，没有特别对字段的mapping配置。<br>那么结论也就出来了，08.13那天的索引里，result类型是boolean，所以当查询条件 result为90或91的时候，他们都是都会被解析为true，也就是匹配索引里的boolean类型的字段的那条记录，所以搜索 result=90时，result=91也就出现在结果里了。</p>
<h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><p>解决方法不难，有几种。<br>先看根原因，由于写es会根据字段 biz=A 聚合到同一索引下，多个服务又会共用 biz=A 的属性，并且由于他们可能使用了同名的字段 act，但是(act在各个服务里的)类型是不同的，比如上文result 有的是boolean，有的是String类型，所以每天凌晨第一条数据(先发出事件的服务)决定该字段在当天该索引的类型了。<br>所以，根本的办法是要求各应用规范统一。<br>但也可以在这里修改es不修改服务，统一设置该类索引的mapping，强制将该字段弱化为 string 类型，这样实现elasticsearch层面的统一。</p>
<h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><p>我好奇的是，这是es的bug吗？<br>于是尝试下载最新版的Elasticsearch，发现该问题已经不存在的了<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  elasticsearch-7.2.1 curl -XPOST -H<span class="string">"Content-Type:application/json"</span> <span class="string">'http://127.0.0.1:9200/people/doc/1'</span> -d<span class="string">'&#123;"name":"hello","man":false&#125;'</span></div><div class="line">&#123;<span class="string">"_index"</span>:<span class="string">"people"</span>,<span class="string">"_type"</span>:<span class="string">"doc"</span>,<span class="string">"_id"</span>:<span class="string">"1"</span>,<span class="string">"_version"</span>:1,<span class="string">"result"</span>:<span class="string">"created"</span>,<span class="string">"_shards"</span>:&#123;<span class="string">"total"</span>:2,<span class="string">"successful"</span>:1,<span class="string">"failed"</span>:0&#125;,<span class="string">"_seq_no"</span>:0,<span class="string">"_primary_term"</span>:1&#125;</div><div class="line">➜  elasticsearch-7.2.1 curl -XPOST -H<span class="string">"Content-Type:application/json"</span> <span class="string">'http://127.0.0.1:9200/people/doc/2'</span> -d<span class="string">'&#123;"name":"hello","man":93&#125;'</span>   </div><div class="line">&#123;<span class="string">"error"</span>:&#123;<span class="string">"root_cause"</span>:[&#123;<span class="string">"type"</span>:<span class="string">"mapper_parsing_exception"</span>,<span class="string">"reason"</span>:<span class="string">"failed to parse field [man] of type [boolean] in document with id '2'"</span>&#125;],<span class="string">"type"</span>:<span class="string">"mapper_parsing_exception"</span>,<span class="string">"reason"</span>:<span class="string">"failed to parse field [man] of type [boolean] in document with id '2'"</span>,<span class="string">"caused_by"</span>:&#123;<span class="string">"type"</span>:<span class="string">"json_parse_exception"</span>,<span class="string">"reason"</span>:<span class="string">"Current token (VALUE_NUMBER_INT) not of boolean type\n at [Source: org.elasticsearch.common.bytes.BytesReference<span class="variable">$MarkSupportingStreamInputWrapper</span>@4bc234e3; line: 1, column: 25]"</span>&#125;&#125;,<span class="string">"status"</span>:400&#125;</div></pre></td></tr></table></figure></p>
<p>这里报了个json解析异常，这看起来有点有趣。<br>我们知道elasticsearch底层其实也用到Jackson的jsonparser去解析json类型内容的，于是我看了下7.2.1的Jackson-core这个jar包，确实升级了个版本。<br><strong>那么这个bug是谁解决的呢？是Elasticsearch团队解决的，还是他们不经意间升级Jackson组件解决的？</strong><br>后者有趣，是软件开发里的信任链问题了。<br>如果对Jackson了解的话，或许已经有答案了，不过我还是希望可以通过搜索到相关主题，更快速些。<br>遗憾的是通过elasticsearch/boolean/BooleanFieldMapper/number等关键字N种组合尝试都没有找到相关主题。</p>
<p>于是我猜测了几个可能的改动文件，就先从 BooleanFieldMapper.java 开始，从github的历史版本里查找，至少二分法查找能找到在哪个版本里有git变更吧。(需要说明的是elasticsearch源码比较能折腾，7.0后代码组织结构大变更，从之前的core分到server目录，module变更等)。巧合的是打开6.0版本就发现BooleanFieldMapper.java的历史变更记录里有一个主题关于 <a href="https://github.com/elastic/elasticsearch/pull/22200" target="_blank" rel="external"> <strong>strict boolean</strong> </a>，点开发现和我的问题很相似。<br>看了下，虽然主题下帖子较多，但是互动人数不多，看评论似乎还未意识到这是个很明显的“看起来合理”的错误，而不是喜好问题。</p>
<h2 id="More-1"><a href="#More-1" class="headerlink" title="More"></a>More</h2><p>该PR涉及几个改动，这里列下和本文问题最相关的改动点(以下讨论时基于<strong>JsonXContentParser</strong>)：<br>1）es的解析原理中，对于document的解析是在org.elasticsearch.index.mapper.DocumentParser里通过 parseObjectOrField 方法完成对各个字段的解析的(index/store是后续逻辑了，无关本文)。<br>2）parseObjectOrField将解析代理给 org.elasticsearch.index.mapper.FieldMapper, 由于我们已经知道该字段是boolean类型的，所以就是通过 BooleanFieldMapper 解析的，对应的入口就是在org.elasticsearch.index.mapper.BooleanFieldMapper.parseCreateField 方法内处理field的。<br>3）5.2.2和 7.2.1 在处理boolean类型field的区别就是下面代码所示：<br>Elasticsearch 5.2.2 的部分代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// boolean org.elasticsearch.common.xcontent.support.AbstractXContentParser.booleanValue() throws IOException</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">booleanValue</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    Token token = currentToken();</div><div class="line">    <span class="keyword">if</span> (token == Token.VALUE_NUMBER) &#123;</div><div class="line">        <span class="keyword">return</span> intValue() != <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (token == Token.VALUE_STRING) &#123;</div><div class="line">        <span class="keyword">return</span> Booleans.parseBoolean(textCharacters(), textOffset(), textLength(), <span class="keyword">false</span> <span class="comment">/* irrelevant */</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> doBooleanValue();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//boolean org.elasticsearch.common.Booleans.parseBoolean(char[] text, int offset, int length, boolean defaultValue)</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Returns &lt;code&gt;false&lt;/code&gt; if text is in &lt;tt&gt;false&lt;/tt&gt;, &lt;tt&gt;0&lt;/tt&gt;, &lt;tt&gt;off&lt;/tt&gt;, &lt;tt&gt;no&lt;/tt&gt;; else, true</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">parseBoolean</span><span class="params">(<span class="keyword">char</span>[] text, <span class="keyword">int</span> offset, <span class="keyword">int</span> length, <span class="keyword">boolean</span> defaultValue)</span> </span>&#123;</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> the leniency here is very dangerous: a simple typo will be misinterpreted and the user won't know.</span></div><div class="line">    <span class="comment">// We should remove it and cutover to https://github.com/rmuir/booleanparser</span></div><div class="line">    <span class="keyword">if</span> (text == <span class="keyword">null</span> || length == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> defaultValue;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (length == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> text[offset] != <span class="string">'0'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (length == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> !(text[offset] == <span class="string">'n'</span> &amp;&amp; text[offset + <span class="number">1</span>] == <span class="string">'o'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (length == <span class="number">3</span>) &#123;</div><div class="line">        <span class="keyword">return</span> !(text[offset] == <span class="string">'o'</span> &amp;&amp; text[offset + <span class="number">1</span>] == <span class="string">'f'</span> &amp;&amp; text[offset + <span class="number">2</span>] == <span class="string">'f'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (length == <span class="number">5</span>) &#123;</div><div class="line">        <span class="keyword">return</span> !(text[offset] == <span class="string">'f'</span> &amp;&amp; text[offset + <span class="number">1</span>] == <span class="string">'a'</span> &amp;&amp; text[offset + <span class="number">2</span>] == <span class="string">'l'</span> &amp;&amp; text[offset + <span class="number">3</span>] == <span class="string">'s'</span> &amp;&amp; text[offset + <span class="number">4</span>] == <span class="string">'e'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Elasticsearch 7.2.1 的部分代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// boolean org.elasticsearch.common.xcontent.support.AbstractXContentParser.booleanValue() throws IOException</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">booleanValue</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    Token token = currentToken();</div><div class="line">    <span class="keyword">if</span> (token == Token.VALUE_STRING) &#123;</div><div class="line">        <span class="keyword">return</span> Booleans.parseBoolean(textCharacters(), textOffset(), textLength(), <span class="keyword">false</span> <span class="comment">/* irrelevant */</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> doBooleanValue();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//boolean org.elasticsearch.common.Booleans.parseBoolean(char[] text, int offset, int length, boolean defaultValue)</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Parses a char[] representation of a boolean value to &lt;code&gt;boolean&lt;/code&gt;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> &lt;code&gt;true&lt;/code&gt; iff the sequence of chars is "true", &lt;code&gt;false&lt;/code&gt; iff the sequence of chars is "false" or the</div><div class="line"> * provided default value iff either text is &lt;code&gt;null&lt;/code&gt; or length == 0.</div><div class="line"> * <span class="doctag">@throws</span> IllegalArgumentException if the string cannot be parsed to boolean.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">parseBoolean</span><span class="params">(<span class="keyword">char</span>[] text, <span class="keyword">int</span> offset, <span class="keyword">int</span> length, <span class="keyword">boolean</span> defaultValue)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (text == <span class="keyword">null</span> || length == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> defaultValue;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> parseBoolean(<span class="keyword">new</span> String(text, offset, length));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">...</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Parses a string representation of a boolean value to &lt;code&gt;boolean&lt;/code&gt;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> &lt;code&gt;true&lt;/code&gt; iff the provided value is "true". &lt;code&gt;false&lt;/code&gt; iff the provided value is "false".</div><div class="line"> * <span class="doctag">@throws</span> IllegalArgumentException if the string cannot be parsed to boolean.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">parseBoolean</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (isFalse(value)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (isTrue(value)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Failed to parse value ["</span> + value + <span class="string">"] as only [true] or [false] are allowed."</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>区别在于 7.2.1中对boolean的解析去掉了 token == Token.VALUE_NUMBER 部分的逻辑(<strong>同时对0/1作为布尔类型也不再支持了</strong>)，而是先判断 VALUE_STRING 这种情况，通过 parseBoolean 处理， <strong>即仅支持“true/false/null”，其他任何都是报 IllegalArgumentException(包括不支持on/off/True/False/yes/no)</strong> ，此外的就交给 doBooleanValue 处理了，即通过Jackson的 JsonParser.getBooleanValue处理。这里其实只是对Jackson有些依赖的。</p>
<pre><code>需要指出是对于True/False是另外一处代码，但最终和 JsonParser.getBooleanValue 类似。
</code></pre><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref:"></a>Ref:</h2><ol>
<li><a href="https://github.com/elastic/elasticsearch/pull/22200" target="_blank" rel="external">Make boolean conversion strict #22200</a></li>
<li><a href="https://github.com/elastic/elasticsearch/pull/22200/commits/b5d642bbadfee6d8a3f7219bf2fb0d20aa63f2fd" target="_blank" rel="external">Elasticsearch#22200/commits</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;i&gt;&lt;strong&gt;intro&lt;/strong&gt;: 对于布尔类型字段的处理，Elasticsearch 曾犯了一个错，直到数年后 发布6.0版本才修正过来，这个设计或多或少会遇到，只是没留意，但是查询的时候结果还是让人困惑的。&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题或现象&quot;&gt;&lt;a href=&quot;#问题或现象&quot; class=&quot;headerlink&quot; title=&quot;问题或现象&quot;&gt;&lt;/a&gt;问题或现象&lt;/h2&gt;&lt;p&gt;前几天刚到公司，同事抛出一个问题，就是发现前一天某个搜索查询条件没有结果，但是第二天却出来结果，不过这个出来的结果是不对的，即搜索result=90时，出现了result=91的结果。&lt;br&gt;于是给我发了链接，我点过去就是下图这样子：&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="Elasticsearch" scheme="http://thomaslau.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>日志传输工具Logstash使用中遇到的几个问题(1)</title>
    <link href="http://thomaslau.github.io/2019/08/14/2019-08-14-on_logstash_quiz1/"/>
    <id>http://thomaslau.github.io/2019/08/14/2019-08-14-on_logstash_quiz1/</id>
    <published>2019-08-14T15:15:07.000Z</published>
    <updated>2019-08-15T00:01:41.651Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><i><strong>intro</strong>：去年记录的logstash几个问题，因为涉及较多且杂乱，主题并不是那么清晰，今天整理时候发现写起来太长了，所以打算分成2-4篇文章，几个小块逐个讨论。</i></p>
</blockquote>
<p><strong>系统概况</strong>：<br>1）各服务产生事件(日志)另有一套Event机制支持，本文讨论的是如何跨数据中心(机房)传输。<br>2）普适性的，适合各语言实现的设计，故基于文件传输，即服务在本地产生滚动的日志，组件去 <strong>tail</strong> 文件的方式，将这些数据 <strong>即时</strong> 传输至另一个机房的Kafka。<br>3）logstash是5.6.4版本，kafka版本 0.10.0.1版本问题（再高版本的logstash 就不支持该版本的Kafka了）<br>4）logstash的input是滚动的日志文件，即tail_mode，output为kafka，无解析，插件开启了metric，queue 为 persistent，即文件模式，硬件为磁盘。<br>5）文件系统为ext4，系统inode是重用的。<br>6）本文贴出配置或数据已做脱敏处理，如有疑问请忽略。</p>
<p><strong>本文先讨论遇到的两个问题</strong><br>1）即便是 kill -15， logstash重启后会丢失数据<br>2）性能问题，可能消息大小会有影响，但观察下来logstash上传速率上限在 1.2万条/秒.</p>
<a id="more"></a>
<h2 id="logstash的配置"><a href="#logstash的配置" class="headerlink" title="logstash的配置"></a>logstash的配置</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    file &#123;</div><div class="line">      path =&gt; ["/data/xxx-*.csv"]</div><div class="line">      start_position =&gt; "beginning"</div><div class="line">      type =&gt; "xyz"</div><div class="line">      sincedb_write_interval =&gt; "1"</div><div class="line">      sincedb_path =&gt; ".sincedbxxx"</div><div class="line">      discover_interval =&gt; "1"</div><div class="line">      tags =&gt; "xxx"</div><div class="line">    &#125;</div><div class="line">    file &#123;</div><div class="line">      path =&gt; ["/data/yyy-*.csv"]</div><div class="line">      start_position =&gt; "beginning"</div><div class="line">      type =&gt; "xyz"</div><div class="line">      sincedb_write_interval =&gt; "1"</div><div class="line">      sincedb_path =&gt; ".sincedbyyy"</div><div class="line">      discover_interval =&gt; "1"</div><div class="line">      tags =&gt; "yyy"</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">filter &#123;</div><div class="line">  mutate &#123;</div><div class="line">    gsub =&gt; [</div><div class="line">      "message","[\\\\]&#123;2,&#125;n","",</div><div class="line">      "message","[\\\\]&#123;2,&#125;r",""</div><div class="line">      ]</div><div class="line">  &#125;</div><div class="line">  metrics &#123;</div><div class="line">     meter =&gt; "events@%&#123;[type]&#125;@%&#123;[path]&#125;"</div><div class="line">     meter =&gt; "events@%&#123;[type]&#125;@sum"</div><div class="line">     ...</div><div class="line">     clear_interval =&gt; 86401</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">  if "metric" in [tags] &#123;</div><div class="line">    stdout &#123; codec =&gt; rubydebug &#125;</div><div class="line">    ...</div><div class="line">  &#125; else &#123;</div><div class="line">      kafka &#123;</div><div class="line">        ...</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="先看问题1–重启后会丢失数据"><a href="#先看问题1–重启后会丢失数据" class="headerlink" title="先看问题1–重启后会丢失数据"></a>先看问题1–重启后会丢失数据</h2><p>导致原因是 <strong>系统inode重用</strong>，通常在高请求的机器上，文件系统都会选择重用inode，那么logstash重启时加载的.sincedb文件里的inode，很可能就是上一次其他文件上报文件的位移记录，不是本文件的，从而导致丢数据。<br>举例来说：<br>因为sincedb记录了inode和inode对应文件的位移，logstash重启时候会加载这些inode和位移，当inode可重用的，就会产生一个问题：<br>假设我们的日志文件是滚动的，比如一小时一个文件，<br>假设之前inode有一条历史记录 “111222 20460”，表示inode=111222对应的文件file-2018030403 的位移是 20460(字节)，即表示上次111222对应文件读到20460这个字节处，但是，其实这时侯 111222 这个inode因为重用，对应的文件已经是 file-2018030503，且其大小是 1020460 字节了。<br>当我们重启时，logstash会加载111222这个inode对应的进度，即重启后 file-2018030503 这个文件其实是从 20460 字节处开始读取并上报，而不是配置的 从0即文件开头开始上报。<br>这就导致在上报 file-2018030503 这个文件时丢失了 20460 个字节(对于行读取还会另做处理)。</p>
<p><i><strong>理解上面后，你可能会疑问，既然 重启 + inode重 用会丢失数据，那么 为什么平时上报滚动的日志文件没有丢失，没有出现上面的情况？</strong></i></p>
<p>这个原因就在于，logstash 在判断新的变更时，会比较inode对应新文件的大小和记录中的文件大小，<strong>小于记录值则将记录值清零</strong>：<br><blockquote><p>1）logstash未重启，内存中记录一条 “111222 20460” 这条记录<br>2）当 111222 这个inode对应文件 file-2018030503 新建时，filewatch插件会检测到 111222 这个inode 的文件大小为0<br>3）0小于20460，则logstash 会将 内存中 “111222 20460” 这条记录更新为 “111222 0”，这个0就是配置中的 from beginning。</p>
</blockquote><br>这样新inode是被正确定位的，故文件不会出现数据丢失。<br>这是bug吗？或者说，可否避免这个问题？<br>可以的，<strong>升级下 logstash-input-file 即可</strong>。5.6.4版本里对应的机制底层实际是由 filewatch插件实现，新版 logstash-input-file 4.1.10 已经将filewatch并入logstash-input-file，<strong>并且新版本有个特性：<br>.sincedb多了几列，有文件路径(filepath)和时间戳列，加载sincedb文件同时也会加载路径，这样，当检测到该inode有数据产生时，除了和低版本一样会对比inode外，还增加了一种判断</strong>，即：</p>
<p><i><strong>inode相等时，会判断filepath是否相等，如否则认为是新的文件。</strong></i></p>
<p>故重启时不会再因inode重用问题导致丢数据了。<br>这里是代码分析，比较长，如果不敢兴趣，可略过。<br>入口在watch.rb里<br>    attr_reader :discoverer, :watched_files_collection</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div></pre></td><td class="code"><pre><div class="line">----</div><div class="line">processor在tail_mode-&gt;processor.rb</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_all_states</span><span class="params">(watched_files)</span></span></div><div class="line">      process_closed(watched_files)</div><div class="line">      <span class="keyword">return</span> <span class="keyword">if</span> watch.quit?</div><div class="line">      process_ignored(watched_files)</div><div class="line">      <span class="keyword">return</span> <span class="keyword">if</span> watch.quit?</div><div class="line">      process_delayed_delete(watched_files)</div><div class="line">      <span class="keyword">return</span> <span class="keyword">if</span> watch.quit?</div><div class="line">      process_restat_for_watched_and_active(watched_files)</div><div class="line">      <span class="keyword">return</span> <span class="keyword">if</span> watch.quit?</div><div class="line">      process_rotation_in_progress(watched_files)</div><div class="line">      <span class="keyword">return</span> <span class="keyword">if</span> watch.quit?</div><div class="line">      process_watched(watched_files)</div><div class="line">      <span class="keyword">return</span> <span class="keyword">if</span> watch.quit?</div><div class="line">      process_active(watched_files)</div><div class="line">    <span class="keyword">end</span></div><div class="line">    。。。</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_watched</span><span class="params">(watched_files)</span></span></div><div class="line">      logger.trace(<span class="string">"Watched processing"</span>)</div><div class="line">      to_take = @settings.max_active - watched_files.count&#123;<span class="params">|wf|</span> wf.active?&#125;</div><div class="line">      <span class="keyword">if</span> to_take &gt; <span class="number">0</span></div><div class="line">        watched_files.select &#123;<span class="params">|wf|</span> wf.watched?&#125;.take(to_take).each <span class="keyword">do</span> <span class="params">|watched_file|</span></div><div class="line">          watched_file.activate</div><div class="line">          <span class="keyword">if</span> watched_file.initial?</div><div class="line">            create_initial(watched_file)</div><div class="line">          <span class="keyword">else</span></div><div class="line">            create(watched_file)</div><div class="line">          <span class="keyword">end</span></div><div class="line">          <span class="keyword">break</span> <span class="keyword">if</span> watch.quit?</div><div class="line">        <span class="keyword">end</span></div><div class="line">      <span class="keyword">else</span></div><div class="line">        now = Time.now.to_i</div><div class="line">        <span class="keyword">if</span> (now - watch.lastwarn_max_files) &gt; MAX_FILES_WARN_INTERVAL</div><div class="line">          waiting = watched_files.size - @settings.max_active</div><div class="line">          logger.warn(@settings.max_warn_msg + <span class="string">", files yet to open: <span class="subst">#&#123;waiting&#125;</span>"</span>)</div><div class="line">          watch.lastwarn_max_files = now</div><div class="line">        <span class="keyword">end</span></div><div class="line">      <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    。。。</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_initial</span><span class="params">(watched_file)</span></span></div><div class="line">      @create_initial.handle(watched_file)</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">------discove 入口</div><div class="line">discover.rb</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">discover_any_files</span><span class="params">(path, ongoing)</span></span></div><div class="line">  fileset = Dir.glob(path).select&#123;<span class="params">|f|</span> File.file?(f)&#125;</div><div class="line">  logger.trace(<span class="string">"discover_files"</span>,  <span class="string">"count"</span> =&gt; fileset.size)</div><div class="line">  logger.warn(<span class="string">"discover_files"</span>,  <span class="string">"count"</span> =&gt; fileset.size)</div><div class="line">  fileset.each <span class="keyword">do</span> <span class="params">|file|</span></div><div class="line">    pathname = Pathname.new(file)</div><div class="line">    new_discovery = <span class="literal">false</span></div><div class="line">    watched_file = @watched_files_collection.watched_file_by_path(file)</div><div class="line">    <span class="keyword">if</span> watched_file.<span class="literal">nil</span>?</div><div class="line">      <span class="keyword">begin</span></div><div class="line">        path_stat = PathStatClass.new(pathname)</div><div class="line">      <span class="keyword">rescue</span> Errno::ENOENT</div><div class="line">        <span class="keyword">next</span></div><div class="line">      <span class="keyword">end</span></div><div class="line">      watched_file = WatchedFile.new(pathname, path_stat, @settings)</div><div class="line">      new_discovery = <span class="literal">true</span></div><div class="line">      logger.info(<span class="string">"discover_files handling:"</span>, <span class="string">"new:"</span>=&gt; new_discovery, <span class="string">"watched_file:"</span> =&gt; watched_file.details)</div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="comment"># if it already unwatched or its excluded then we can skip</span></div><div class="line">    <span class="keyword">next</span> <span class="keyword">if</span> watched_file.unwatched? <span class="params">||</span> can_exclude?(watched_file, new_discovery)</div><div class="line">    logger.trace(<span class="string">"discover_files handling:"</span>, <span class="string">"new discovery"</span>=&gt; new_discovery, <span class="string">"watched_file details"</span> =&gt; watched_file.details)</div><div class="line">    <span class="keyword">if</span> new_discovery</div><div class="line">      watched_file.initial_completed <span class="keyword">if</span> ongoing</div><div class="line">      <span class="comment"># initially when the sincedb collection is filled with records from the persistence file</span></div><div class="line">      <span class="comment"># each value is not associated with a watched file</span></div><div class="line">      <span class="comment"># a sincedb_value can be:</span></div><div class="line">      <span class="comment">#   unassociated</span></div><div class="line">      <span class="comment">#   associated with this watched_file</span></div><div class="line">      <span class="comment">#   associated with a different watched_file</span></div><div class="line">      <span class="keyword">if</span> @sincedb_collection.associate(watched_file)</div><div class="line">        <span class="keyword">if</span> watched_file.file_ignorable?</div><div class="line">          logger.trace(<span class="string">"Discoverer discover_files: <span class="subst">#&#123;file&#125;</span>: skipping because it was last modified more than <span class="subst">#&#123;@settings.ignore_older&#125;</span> seconds ago"</span>)</div><div class="line">          logger.info(<span class="string">"Discoverer discover_files: <span class="subst">#&#123;file&#125;</span>: skipping because it was last modified more than <span class="subst">#&#123;@settings.ignore_older&#125;</span> seconds ago"</span>)</div><div class="line">          <span class="comment"># on discovery ignorable watched_files are put into the ignored state and that</span></div><div class="line">          <span class="comment"># updates the size from the internal stat</span></div><div class="line">          <span class="comment"># so the existing contents are not read.</span></div><div class="line">          <span class="comment"># because, normally, a newly discovered file will</span></div><div class="line">          <span class="comment"># have a watched_file size of zero</span></div><div class="line">          <span class="comment"># they are still added to the collection so we know they are there for the next periodic discovery</span></div><div class="line">          watched_file.ignore_as_unread</div><div class="line">        <span class="keyword">end</span></div><div class="line">        <span class="comment"># now add the discovered file to the watched_files collection and adjust the sincedb collections</span></div><div class="line">        @watched_files_collection.add(watched_file)</div><div class="line">      <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="comment"># at this point the watched file is created, is in the db but not yet opened or being processed</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">------最终发现重命名的inode文件调用是在 tail_mode-&gt;handlers-&gt;base.rb</div><div class="line">base.rb</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(watched_file)</span></span></div><div class="line">  logger.trace(<span class="string">"handling: <span class="subst">#&#123;watched_file.filename&#125;</span>"</span>)</div><div class="line">  logger.info(<span class="string">"handling: <span class="subst">#&#123;watched_file.filename&#125;</span>"</span>)</div><div class="line">  <span class="keyword">unless</span> watched_file.has_listener?</div><div class="line">    watched_file.set_listener(@observer)</div><div class="line">  <span class="keyword">end</span></div><div class="line">  handle_specifically(watched_file)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_new_value_sincedb_collection</span><span class="params">(watched_file)</span></span></div><div class="line">  sincedb_value = get_new_value_specifically(watched_file)</div><div class="line">  logger.trace(<span class="string">"add_new_value_sincedb_collection"</span>, <span class="string">"position"</span> =&gt; sincedb_value.position, <span class="string">"watched_file details"</span> =&gt; watched_file.details)</div><div class="line">  sincedb_collection.set(watched_file.sincedb_key, sincedb_value)</div><div class="line">  sincedb_value</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_new_value_specifically</span><span class="params">(watched_file)</span></span></div><div class="line">  position = watched_file.position_for_new_sincedb_value</div><div class="line">  value = SincedbValue.new(position)</div><div class="line">  value.set_watched_file(watched_file)</div><div class="line">  watched_file.update_bytes_read(position)</div><div class="line">  value</div><div class="line"><span class="keyword">end</span></div><div class="line">---&gt;</div><div class="line">creat_initial.rb</div><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">FileWatch</span> <span class="title">module</span> <span class="title">TailMode</span> <span class="title">module</span> <span class="title">Handlers</span></span></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">CreateInitial</span> &lt; Base</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_specifically</span><span class="params">(watched_file)</span></span></div><div class="line">      <span class="keyword">if</span> open_file(watched_file)</div><div class="line">        logger.trace(<span class="string">"handle_specifically opened file handle: <span class="subst">#&#123;watched_file.file.fileno&#125;</span>, path: <span class="subst">#&#123;watched_file.filename&#125;</span>"</span>)</div><div class="line">        logger.info(<span class="string">"handle_specifically opened file handle: <span class="subst">#&#123;watched_file.file.fileno&#125;</span>, path: <span class="subst">#&#123;watched_file.filename&#125;</span>"</span>)</div><div class="line">        add_or_update_sincedb_collection(watched_file)</div><div class="line">      <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_existing_specifically</span><span class="params">(watched_file, sincedb_value)</span></span></div><div class="line">      position = watched_file.last_stat_size</div><div class="line">      <span class="keyword">if</span> @settings.start_new_files_at == <span class="symbol">:beginning</span></div><div class="line">        position = <span class="number">0</span></div><div class="line">      <span class="keyword">end</span></div><div class="line">      logger.trace(<span class="string">"update_existing_specifically - <span class="subst">#&#123;watched_file.path&#125;</span>: seeking to <span class="subst">#&#123;position&#125;</span>"</span>)</div><div class="line">      logger.info(<span class="string">"update_existing_specifically - <span class="subst">#&#123;watched_file.path&#125;</span>: seeking to <span class="subst">#&#123;position&#125;</span>"</span>)</div><div class="line">      watched_file.update_bytes_read(position)</div><div class="line">      sincedb_value.update_position(position)</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span> <span class="keyword">end</span> <span class="keyword">end</span></div><div class="line">---&gt;</div><div class="line">base.rb</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_or_update_sincedb_collection</span><span class="params">(watched_file)</span></span></div><div class="line">  sincedb_value = @sincedb_collection.find(watched_file)</div><div class="line">  <span class="keyword">if</span> sincedb_value.<span class="literal">nil</span>?</div><div class="line">    sincedb_value = add_new_value_sincedb_collection(watched_file)</div><div class="line">    watched_file.initial_completed</div><div class="line">  <span class="keyword">elsif</span> sincedb_value.watched_file == watched_file</div><div class="line">    update_existing_sincedb_collection_value(watched_file, sincedb_value)</div><div class="line">    watched_file.initial_completed</div><div class="line">  <span class="keyword">else</span></div><div class="line">    msg = <span class="string">"add_or_update_sincedb_collection: found sincedb record"</span></div><div class="line">    logger.trace(msg,</div><div class="line">      <span class="string">"sincedb key"</span> =&gt; watched_file.sincedb_key,</div><div class="line">      <span class="string">"sincedb value"</span> =&gt; sincedb_value</div><div class="line">    )</div><div class="line">    <span class="comment"># detected a rotation, Discoverer can't handle this because this watched file is not a new discovery.</span></div><div class="line">    <span class="comment"># we must handle it here, by transferring state and have the sincedb value track this watched file</span></div><div class="line">    <span class="comment"># rotate_as_file and rotate_from will switch the sincedb key to the inode that the path is now pointing to</span></div><div class="line">    <span class="comment"># and pickup the sincedb_value from before.</span></div><div class="line">    msg = <span class="string">"add_or_update_sincedb_collection: the found sincedb_value has a watched_file - this is a rename, switching inode to this watched file"</span></div><div class="line">    logger.trace(msg)</div><div class="line">    existing_watched_file = sincedb_value.watched_file</div><div class="line">    <span class="keyword">if</span> existing_watched_file.<span class="literal">nil</span>?</div><div class="line">      sincedb_value.set_watched_file(watched_file)</div><div class="line">      logger.trace(<span class="string">"add_or_update_sincedb_collection: switching as new file"</span>)</div><div class="line">      watched_file.rotate_as_file</div><div class="line">      watched_file.update_bytes_read(sincedb_value.position)</div><div class="line">    <span class="keyword">else</span></div><div class="line">      sincedb_value.set_watched_file(watched_file)</div><div class="line">      logger.trace(<span class="string">"add_or_update_sincedb_collection: switching from..."</span>, <span class="string">"watched_file details"</span> =&gt; watched_file.details)</div><div class="line">      watched_file.rotate_from(existing_watched_file)</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">  sincedb_value</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">watched_file.rb--&gt;</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">position_for_new_sincedb_value</span></span></div><div class="line">  <span class="keyword">if</span> @initial</div><div class="line">    <span class="comment"># this file was found in first discovery</span></div><div class="line">    @settings.start_new_files_at == <span class="symbol">:beginning</span> ? <span class="number">0</span> : last_stat_size</div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="comment"># always start at the beginning if found after first discovery</span></div><div class="line">    <span class="number">0</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>logstash-input-file 4.1.10 类似代码有所改进，可找到对应逻辑，总结来说是：<br><blockquote><ol>
<li>watch.rb的discovery机制，扫描当前目录下文件，并：<br>1）如果存在sincedb的key，且文件名相等，且size相等，则放入watched_files 并且设置state为ignored，且sincedb[key]=size<br>2）如果存在sincedb的key，但文件名不相等，则从sincedb中删除该key，但放入watched_files 并且设置state为watched<br>3）其他…</li>
<li>tail_mode-&gt;processor.rb定期 process_all_states中当处理到 process_watched 时，<br>发现该文件，设置 watched_file.activate，并调用 create_initial，create_initial正是<br>Handlers::CreateInitial.new(self, sincedb_collection, observer, @settings)类，<br>则handle方法就是 tail_mode-&gt;handlers-&gt;base.rb的hadle方法，即creat_initial.rb -&gt; handle_specifically 方法<br>handle_specifically调用base.rb的add_or_update_sincedb_collection<br>即最终调用 sincedb_value = add_new_value_sincedb_collection(watched_file)<br>add_new_value_sincedb_collection通过 get_new_value_specifically 获取到sincedb_value，即当前文件offset(get_new_value_specifically的逻辑如下，若配置beginning则为0，否则为last stat 的size)</li>
</ol>
<p>上述完成后，则会进行下一步的process_active，active就是通过监控文件的 @size 是否大于 @bytes_read，来判断文件当前是否在grown</p>
</blockquote></p>
<p>需要指出的是，升级 logstash-input-file 重启前，最好手动修改下 .sincedb文件，否则直到 .sincedb文件里的相关行inode都拥有 filepath 这一列，还是会出现上述丢失情况的。</p>
<p><strong>更多思考</strong>：<br>inode相等，logstash是根据filepath解决重用问题，如果同名新文件或位置变更，应该依旧会导致数据遗失或重复问题。<br>其实这里也可以根据文件的创建时间来判断，但不能解决系统时钟回退问题，即只能处理正向时间。</p>
<h2 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h2><p>一开始以为是跨数据中心 9ms的网络延迟或kafka参数配置导致写kafka性能不高，这个不难优化，但已排除，并非该原因。<br>实际测试同网段kafka性能瓶颈依旧维持1.2万/s。<br>排查过程比较冗长，这里不详述，简单记下结论：</p>
<pre><code>瓶颈在 config/logstash.yml里配置的queue.type: persisted，即使用了持久化的Ack队列。
</code></pre><p>测试机器为本人mac机器，硬盘为SSD/8G内存，如果使用 memory模式，性能可至少在3.6万/秒。<br>但这里为避丢数据，所以优化时不能作改动，其次是把 input 一分为二，性能略提升，在生产机器上至少可达 2.0万条/秒，提升约50%+。<br><strong>更多：如果是SSD，即本人开发机上测试，但input是可以到2.8万/秒，双input可到4万/秒</strong></p>
<p>起初认为增加配置中的 worker threads 数量可以改进性能，但其实不是，因为 worker threads 仅是针对pipeline的多线程，处理的是事件，这里的瓶颈在input和Ackqueue的交互，不过我没找到对应多线程处理input的配置参数，【如果你有发现或了解，感谢邮件给 aXRob21hc2xhdUBxcS5jb20= (base64)】，所以拆分为两个input，确实起到优化效果。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>后续几篇文章，还会分析 logstash 使用过程遇到的一个莫名罢机的问题，以及 传输数据完整性保障的问题，并会分析下 logstash的 WrappedSynchronousQueue/WrappedAckedQueue机制，也会分析一下怎么解决传输Kafka失败不丢数据的问题。</p>
<p>大概说下，虽然logstash那个queue叫做持久化且ACK的queue，听起来像是支持传输失败会重试从而保证数据完整不丢失。<br>但其实不是，但这个ACK甚至都不是针对一次完整性传输的ACK，即 这个ACK机制和 Flume的 Source-Channel-Sink之间的Transaction机制一样，即便是flume支持的持久化的File channel，这个Transaction也只是针对 Source和Channel(Channel和sink)之间传输(或者说 传递)这个动作是transactional的，而不是保证数据一定被传输成功，即事务是针对 传递 这个动作，而不是 传输 整个过程。这点和大多数人理解的新版kafka支持exactly once概念基本是不对的一样。</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>1，或许你或者很多文章认为开发一款普适的日志即时上报工具应该不难，本人一开始也这么认为，即便是只要求支持本地文件读取并推送至kafka。<br>但希望了解logstash使用运行原理后，你可以取消这种想法，除非你有比logstash团队更多的时间。<br>2，或许你可以搜索到网上许多比较几大流行日志上报开源工具的优劣分析，考虑到每个人的开发语言/习惯/经历不同，甚至还有基于容器的上报机制，去推荐用哪个，并不是合适的行为。<br>但几乎可以肯定的是，logstash 相比其他实现，最大(或者唯一)的劣势就是logstash 时JRuby语言写的。<br>3，如果非要建议，最好就是选择一个，把其中的坑和不足都踩一遍(除非该组件不再维护了)，了解了存在的问题后，才能判断使用哪个好。<br>4，除非必须，尽量不要使用logstash解析数据，重复三遍！首先是性能不可控，更重要是解析异常不可控，毕竟对于非Ruby系的开发者来说有点困难。<br>所以我建议尽量留给上下游去处理，仅把logstash做为纯无结构的数据传输工具，尽管其解析插件很丰富。<br>但若对数据异常并不是很敏感，使用Logstash插件解析不影响。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;i&gt;&lt;strong&gt;intro&lt;/strong&gt;：去年记录的logstash几个问题，因为涉及较多且杂乱，主题并不是那么清晰，今天整理时候发现写起来太长了，所以打算分成2-4篇文章，几个小块逐个讨论。&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;系统概况&lt;/strong&gt;：&lt;br&gt;1）各服务产生事件(日志)另有一套Event机制支持，本文讨论的是如何跨数据中心(机房)传输。&lt;br&gt;2）普适性的，适合各语言实现的设计，故基于文件传输，即服务在本地产生滚动的日志，组件去 &lt;strong&gt;tail&lt;/strong&gt; 文件的方式，将这些数据 &lt;strong&gt;即时&lt;/strong&gt; 传输至另一个机房的Kafka。&lt;br&gt;3）logstash是5.6.4版本，kafka版本 0.10.0.1版本问题（再高版本的logstash 就不支持该版本的Kafka了）&lt;br&gt;4）logstash的input是滚动的日志文件，即tail_mode，output为kafka，无解析，插件开启了metric，queue 为 persistent，即文件模式，硬件为磁盘。&lt;br&gt;5）文件系统为ext4，系统inode是重用的。&lt;br&gt;6）本文贴出配置或数据已做脱敏处理，如有疑问请忽略。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文先讨论遇到的两个问题&lt;/strong&gt;&lt;br&gt;1）即便是 kill -15， logstash重启后会丢失数据&lt;br&gt;2）性能问题，可能消息大小会有影响，但观察下来logstash上传速率上限在 1.2万条/秒.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="Tools" scheme="http://thomaslau.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Mac电脑效能神器 Hammerspoon 入门和几个改善</title>
    <link href="http://thomaslau.github.io/2019/08/11/2019-08-11-on_hammerspoon/"/>
    <id>http://thomaslau.github.io/2019/08/11/2019-08-11-on_hammerspoon/</id>
    <published>2019-08-10T17:09:07.000Z</published>
    <updated>2019-08-12T17:12:06.864Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><i><strong>intro1</strong>: 你是否为在Mac电脑上切换不同的应用时也需要切换输入法而觉得恼怒？比如刚在微信中文下聊天，这时转向命令行工具，打了一半才发现是中文，不得不再重新输入？</i><br><i><strong>intro2</strong>: 如果你恰巧还是一名 hacker，是否苦于为了某些系统改进而搜索一堆 Applescript最后发现实现不了你要的功能。</i><br><i><strong>intro3</strong>: 这是去年写的短文，一直没时间(懒)再深入完善，今天修改了些，但也只做了简单的入门和介绍</i></p>
</blockquote>
<h2 id="Hammerspoon"><a href="#Hammerspoon" class="headerlink" title="Hammerspoon"></a>Hammerspoon</h2><p>最近升级了Mac系统，发现之前的hammerspoon有个脚本耗电偏高，该脚本就是实现打开 Terminal/iTerm2(命令行)/Spotlight等可以将输入法自动切换到拼音输入法，打开Chrome/Firefox等可以自动切换中文输入法。<br><a id="more"></a><br><blockquote><p>如果你还不了解Hammerspoon是什么，可以参考下面几个链接：</p>
<ol>
<li><a href="https://sspai.com/post/53992" target="_blank" rel="external">免费又强大的 macOS 自动化工具，Hammerspoon 可以让你少买很多 App</a></li>
<li><a href="https://www.v2ex.com/amp/t/553241" target="_blank" rel="external">推荐一个 MacOS 上用了就无法自拔的神器Hammerspoon</a></li>
<li><a href="https://juejin.im/entry/59737e16f265da6c317de185" target="_blank" rel="external">打造 macOS 的生产力环境 - Hammerspoon</a></li>
</ol>
</blockquote><br>最开始是在某论坛看到的一段脚本实现输入法自动切换，大概功能就是绑定 Alt+Tab快捷键，切换时就切换了输入法，很早期了。最近刚好想到 Hammerspoon 除了事件机制，窗口焦点事件，于是想想是否有这类机制的实现。</p>
<p>于是我尝试用 “Hammerspoon + 窗口事件” 搜索了一番，找到了几篇文章。实际上不看文章，只是看代码的话也并不难，就在 Hammerspoon.app的Contents/Resources/extensions/hs/window目录下，可以看到下图：<br><img src="/images/hammerspoon1.png" width="100%"></p>
<p>在这里，订阅 <strong>hs.window.filter.windowCreated</strong>，<strong>hs.window.filter.windowFocused</strong> 事件一般可以满足上述输入法自动切换的需求了。</p>
<p>但是应该怎样把上述联系起来，编码实现功能？我并不算是个深入了解 Hammerspoon 的用户，所以首先求助其文档，幸亏他的文档写的好又详细，<a href="http://www.hammerspoon.org/docs/hs.window.filter.html" target="_blank" rel="external">在这里hs.window.filter</a></p>
<p>上面帮助文档罗列描述很清楚，如果留意上面提到的 hs/window/filter.lua 的代码，我们还可以发现这段注释：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--- A *default windowfilter* (not to be confused with the default filter *within* a windowfilter) is provided as convenience;</span></div><div class="line"><span class="comment">--- it excludes some known apps and windows that are transient in nature, therefore unlikely to be "interesting" for e.g. window management.</span></div><div class="line"><span class="comment">--- `hs.window.filter.new()` (with no arguments) returns a copy of the default windowfilter that you can further tailor to your needs - see `hs.window.filter.default` and `hs.window.filter.new()` for more information.</span></div><div class="line"></div><div class="line"><span class="comment">---</span></div><div class="line"><span class="comment">--- -- set the exact scope of what you're interested in - see hs.window.filter:setAppFilter()</span></div><div class="line"><span class="comment">--- wf_terminal = wf.new&#123;'Terminal','iTerm2'&#125; -- all visible terminal windows</span></div><div class="line"><span class="comment">--- wf_timewaster = wf.new(false):setAppFilter('Safari',&#123;allowTitles='reddit'&#125;) -- any Safari windows with "reddit" anywhere in the title</span></div><div class="line"><span class="comment">--- wf_leftscreen = wf.new&#123;override=&#123;visible=true,fullscreen=false,allowScreens='-1,0',currentSpace=true&#125;&#125;</span></div><div class="line"><span class="comment">--- -- all visible and non-fullscreen windows that are on the screen to the left of the primary screen in the current Space</span></div><div class="line"><span class="comment">--- wf_editors_righthalf = wf.new&#123;'TextEdit','Sublime Text','BBEdit'&#125;:setRegions(hs.screen.primaryScreen():fromUnitRect'0.5,0/1,1')</span></div><div class="line"><span class="comment">--- -- text editor windows that are on the right half of the primary screen</span></div><div class="line"><span class="comment">--- wf_bigwindows = wf.new(function(w)return w:frame().area&gt;3000000 end) -- only very large windows</span></div><div class="line"><span class="comment">--- wf_notif = wf.new&#123;['Notification Center']=&#123;allowRoles='AXNotificationCenterAlert'&#125;&#125; -- notification center alerts</span></div><div class="line"><span class="comment">---</span></div><div class="line"><span class="comment">--- -- subscribe to events</span></div><div class="line"><span class="comment">--- wf_terminal:subscribe(wf.windowFocused,some_fn) -- run a function whenever a terminal window is focused</span></div><div class="line"><span class="comment">--- wf_timewaster:subscribe(wf.hasWindow,startAnnoyingMe):subscribe(wf.hasNoWindows,stopAnnoyingMe) -- fight procrastination :)</span></div><div class="line"><span class="comment">---</span></div></pre></td></tr></table></figure>
<p>这个注释是不是非常地清晰，看完后代码就出来了呢？<br><i><strong>是的！</strong></i><br>下面就是一个完整可运行的代码，直接拷贝到自己的 ~/.hammerspoon/init.lua  – Finally那段注释上面就可以运行了。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">-----------------------mine start-----------------------------</span></div><div class="line"><span class="comment">-- ADD by Thomas</span></div><div class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">Chinese</span><span class="params">()</span></span></div><div class="line">  hs.console.printStyledtext(<span class="string">"chinese"</span>)</div><div class="line">  hs.keycodes.currentSourceID(<span class="string">"com.apple.inputmethod.SCIM.ITABC"</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">English</span><span class="params">()</span></span></div><div class="line">  hs.console.printStyledtext(hs.keycodes.currentSourceID())</div><div class="line">  hs.keycodes.currentSourceID(<span class="string">"com.apple.keylayout.ABC"</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">hs.console.printStyledtext(<span class="string">"inputM:"</span> + hs.keycodes.currentSourceID())</div><div class="line"></div><div class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">set_app_input_method</span><span class="params">(app_name, set_input_method_function, event)</span></span></div><div class="line">  event = event <span class="keyword">or</span> hs.window.filter.windowFocused</div><div class="line">  hs.window.filter.new(app_name)</div><div class="line">    :subscribe(event, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> set_input_method_function() <span class="keyword">end</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">set_app_input_method(<span class="string">'Hammerspoon'</span>, English, hs.window.filter.windowCreated)</div><div class="line">set_app_input_method(<span class="string">'Spotlight'</span>, English, hs.window.filter.windowCreated)</div><div class="line"><span class="comment">-- set_app_input_method('Emacs', English)</span></div><div class="line">set_app_input_method(<span class="string">'Slack'</span>, English)</div><div class="line">set_app_input_method(<span class="string">'Terminal'</span>, English)</div><div class="line">set_app_input_method(<span class="string">'iTerm2'</span>, English)</div><div class="line">set_app_input_method(<span class="string">'Google Chrome'</span>, English)</div><div class="line">set_app_input_method(<span class="string">'WeChat'</span>, Chinese)</div><div class="line"><span class="comment">-----------------------mine end-----------------------------</span></div></pre></td></tr></table></figure>
<p>其中：</p>
<ol>
<li>“com.apple.inputmethod.SCIM.ITABC”/“com.apple.keylayout.ABC”就是我的电脑上在用的中英文输入法，<br>如果你不知道自己使用的输入法的名称可以切换对应输入法，打开 Hammerspoon 控制台，点击 Hammerspoon的 reload config，就会在Hammerspoon 控制台看到inputM 一段，就是你的输入法，替换上面对应名字即可。</li>
<li>如果有自己的应用需要，可以追加 set_app_input_method。</li>
</ol>
<h2 id="Bing-必应桌面的改进"><a href="#Bing-必应桌面的改进" class="headerlink" title="Bing 必应桌面的改进"></a>Bing 必应桌面的改进</h2><p>使用 awesome-hammerspoon.git 下的Bing脚本，可以自动更新自己的桌面壁纸和必应官方同步，但是我发现有几个问题：<br>1）不支持多桌面。现在大多数工作环境都是两个或多个显示器，使用该脚本，发现只有一个桌面壁纸更新了。<br>原因在于 hammerspoon 默认更新的是mainScreen，它还有一个primaryScreen甚至allScreens区别，所以这里需要改一下。<br>2）下载的壁纸没有保存下来<br>3）桌面壁纸在大陆其实用的是 bing 国内版搜索的壁纸，想使用更适合做背景的国外版壁纸该怎么办？<br>只需要在请求链接的时候加一个 ENSEARCH=BENVER=1 的cookie就可以了。</p>
<p>上面问题的解决方法：<br>修改.hammerspoon/Spoons/BingDaily.spoon/init.lua文件，将下面代码中 +开头的代码行替换-开头的源代码行即可：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">-        <span class="keyword">local</span> localpath = <span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">"HOME"</span>) .. <span class="string">"/.Trash/"</span> .. hs.http.urlParts(obj.full_url).lastPathComponent</div><div class="line">-        hs.screen.mainScreen():desktopImageURL(<span class="string">"file://"</span> .. localpath)</div><div class="line">+        <span class="keyword">local</span> localpath = <span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">"HOME"</span>) .. <span class="string">"/Public/bing/"</span> .. hs.http.urlParts(obj.full_url).queryItems[<span class="number">1</span>].id</div><div class="line">+        hs.console.printStyledtext(<span class="string">"desktopIMG:"</span> .. localpath)</div><div class="line">+        hs.screen.primaryScreen():desktopImageURL(<span class="string">"file://"</span> .. localpath)</div><div class="line">+        <span class="keyword">local</span> scs=hs.screen.allScreens()</div><div class="line">+        <span class="keyword">local</span> count = <span class="number">0</span></div><div class="line">+        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">pairs</span>(scs) <span class="keyword">do</span> count = count + <span class="number">1</span> <span class="keyword">end</span></div><div class="line">+        hs.console.printStyledtext(<span class="string">"table.size: "</span> .. count)</div><div class="line">+        <span class="keyword">for</span> i=<span class="number">1</span>,#scs <span class="keyword">do</span> scs[i]:desktopImageURL(<span class="string">"file://"</span> .. localpath) <span class="keyword">end</span></div><div class="line"></div><div class="line"></div><div class="line">-    <span class="keyword">local</span> user_agent_str = <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/603.2.4 (KHTML, like Gecko) Version/10.1.1 Safari/603.2.4"</span></div><div class="line">+    <span class="keyword">local</span> user_agent_str = <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"</span></div><div class="line">-    hs.http.asyncGet(json_req_url, &#123;[<span class="string">"User-Agent"</span>]=user_agent_str&#125;, <span class="function"><span class="keyword">function</span><span class="params">(stat,body,header)</span></span></div><div class="line">+    hs.http.asyncGet(json_req_url, &#123;[<span class="string">"User-Agent"</span>]=user_agent_str,[<span class="string">"cookie"</span>]=<span class="string">"ENSEARCH=BENVER=1"</span>&#125;, <span class="function"><span class="keyword">function</span><span class="params">(stat,body,header)</span></span></div><div class="line"></div><div class="line">-                    <span class="keyword">local</span> localpath = <span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">"HOME"</span>) .. <span class="string">"/.Trash/"</span> .. hs.http.urlParts(obj.full_url).lastPathComponent</div><div class="line">+                    <span class="keyword">local</span> localpath = <span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">"HOME"</span>) .. <span class="string">"/Public/bing/"</span> .. hs.http.urlParts(obj.full_url).queryItems[<span class="number">1</span>].id</div></pre></td></tr></table></figure>
<h2 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h2><p>在.hammerspoon/Spoons 文件夹下修改canlendar/aclokck的分布位置/大小/用色都较简单直白，就不列代码了。</p>
<p>最后，主要是对 Hammerspoon 扩展支持的功能还没深入了解过，希望有时间可以再做点开发，根据个人使用来看可添加的效率脚本太多了.</p>
<h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><p>上面链接可见 Hammerspoon 是什么以及怎么用，可以重复下，非常简单：</p>
<p>1) 到官网下载并安装 <a href="https://github.com/Hammerspoon/hammerspoon/releases/latest" target="_blank" rel="external">Hammerspoon</a><br>2）最好给 Hammerspoon 授权，点击 “Enable Accessbility”<br><img src="/images/hammerspoon2.png" width="80%"><br>3）如果你是开发者，可以运行：</p>
<pre><code>git clone https://github.com/ashfinal/awesome-hammerspoon.git   .hammerspoon
</code></pre><p>否则可直接下载 并保存到你的home文件夹下 的 .hammerspoon目录。</p>
<p>实际上述2步完成就是可用了，但只提供基本功能，如有需求可以自己写脚本了。不过感谢强大的开源文化，许多网友就开源了许多自己写的脚本，一开始可以用 3 步里的脚本合集，应该是早且权威的。</p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ol>
<li><a href="https://www.v2ex.com/amp/t/553241" target="_blank" rel="external">推荐一个 MacOS 上用了就无法自拔的神器Hammerspoon</a></li>
<li><a href="https://sspai.com/post/53992" target="_blank" rel="external">免费又强大的 macOS 自动化工具，Hammerspoon 可以让你少买很多 App</a></li>
<li><a href="https://yiming.dev/blog/2017/08/09/use-hammerspoon-to-auto-switch-input-methods/" target="_blank" rel="external">Use Hammerspoon to auto switch input methods
</a></li>
<li><a href="https://juejin.im/entry/59737e16f265da6c317de185" target="_blank" rel="external">打造 macOS 的生产力环境 - Hammerspoon</a></li>
<li><a href="http://www.hammerspoon.org/docs/hs.window.filter.html" target="_blank" rel="external">docs » hs.window.filter</a></li>
<li><a href="https://emacs-china.org/t/topic/6348/20" target="_blank" rel="external">Emacs China </a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;i&gt;&lt;strong&gt;intro1&lt;/strong&gt;: 你是否为在Mac电脑上切换不同的应用时也需要切换输入法而觉得恼怒？比如刚在微信中文下聊天，这时转向命令行工具，打了一半才发现是中文，不得不再重新输入？&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro2&lt;/strong&gt;: 如果你恰巧还是一名 hacker，是否苦于为了某些系统改进而搜索一堆 Applescript最后发现实现不了你要的功能。&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro3&lt;/strong&gt;: 这是去年写的短文，一直没时间(懒)再深入完善，今天修改了些，但也只做了简单的入门和介绍&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Hammerspoon&quot;&gt;&lt;a href=&quot;#Hammerspoon&quot; class=&quot;headerlink&quot; title=&quot;Hammerspoon&quot;&gt;&lt;/a&gt;Hammerspoon&lt;/h2&gt;&lt;p&gt;最近升级了Mac系统，发现之前的hammerspoon有个脚本耗电偏高，该脚本就是实现打开 Terminal/iTerm2(命令行)/Spotlight等可以将输入法自动切换到拼音输入法，打开Chrome/Firefox等可以自动切换中文输入法。&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="Tools" scheme="http://thomaslau.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch删除特殊字符索引</title>
    <link href="http://thomaslau.github.io/2019/08/07/2019-08-07-Deleting_ElasticSearch_unicode/"/>
    <id>http://thomaslau.github.io/2019/08/07/2019-08-07-Deleting_ElasticSearch_unicode/</id>
    <published>2019-08-06T17:09:07.000Z</published>
    <updated>2019-08-08T17:15:08.972Z</updated>
    
    <content type="html"><![CDATA[<p>长话短说，查看生产环境Elasticsearch (5.6版本) 时，发现一些如下有着非ascii码的索引</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">red zhangxin-xxx-༠༠༣༡.༠༣.༢༢</div><div class="line">red zhangxin-xxx-༠༠༣༡.༠༣.༢༣</div><div class="line">red zhangxin-xxx-༠༠༣༡.༠༣.༢༤</div><div class="line">red zhangxin-xxx-༠༠༣༡.༠༤.༡༢</div><div class="line">red zhangxin-xxx-༠༠༣༡.༠༤.༡༧</div><div class="line">red zh날炷gxꆀ鍀ᒶ⒐ጆ䬯ꀳ20₨炠.021</div></pre></td></tr></table></figure>
<p>上面是某系统因为历史缘故，使用用户的数据创建索引了，因暂时无法推动其做修改，于是需要考虑用脚本定时删除。<br><a id="more"></a><br>如果你对过程不感兴趣，可以考虑跳到 总结2 直接看方法。<br><i>题外话：上述看起来是藏文，用了bing/sogou翻译，识别为北欧语言(为：我的天呐)，看起来不一样而且不像，不过用google翻译像日期格式(为:0031.03.22)倒是接近。</i>i&gt;</p>
<p>不过，如果直接用 curl -XDELETE ‘10.135.20.38:9200/zhangxin-xxx-༠༠༣༡.༠༣.༢༢’ 会提示索引不存在，因为需要转义。<br>而且，ES也不存在POST方式删除索引的方法，索引需要修改为：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">curl -XDELETE 10.135.20.38:9200/zhangxin-xxx-%e0%bc%a0%e0%bc%a0%e0%bc%a3%e0%bc%a1.%e0%bc%a0%e0%bc%a3.%e0%bc%a2%e0%bc%a2</div><div class="line">curl -XDELETE 10.135.20.38:9200/zhangxin-xxx-%e0%bc%a0%e0%bc%a0%e0%bc%a3%e0%bc%a1.%e0%bc%a0%e0%bc%a3.%e0%bc%a2%e0%bc%a3</div><div class="line">curl -XDELETE 10.135.20.38:9200/zhangxin-xxx-%e0%bc%a0%e0%bc%a0%e0%bc%a3%e0%bc%a1.%e0%bc%a0%e0%bc%a3.%e0%bc%a2%e0%bc%a4</div><div class="line">curl -XDELETE 10.135.20.38:9200/zhangxin-xxx-%e0%bc%a0%e0%bc%a0%e0%bc%a3%e0%bc%a1.%e0%bc%a0%e0%bc%a4.%e0%bc%a1%e0%bc%a2</div><div class="line">curl -XDELETE 10.135.20.38:9200/zhangxin-xxx-%e0%bc%a0%e0%bc%a0%e0%bc%a3%e0%bc%a1.%e0%bc%a0%e0%bc%a4.%e0%bc%a1%e0%bc%a7</div><div class="line">curl -XDELETE 10.135.20.38:9200/zhangxin-xxx-%e0%bc%a0%e0%bc%a0%e0%bc%a3%e0%bc%a1.%e0%bc%a0%e0%bc%a4.%e0%bc%a1%e0%bc%a8</div><div class="line">curl -XDELETE <span class="string">'10.135.20.38:9200/zh%EB%82%A0%E7%82%B7gx%EA%86%80%00%E9%8D%80%E1%92%B6%E2%92%90%E1%8C%86%01%00%E4%AC%AF%EA%80%B3%32%30%E2%82%A8%E7%82%A0%2E%30%1A%00%32%31'</span></div></pre></td></tr></table></figure>
<p>方式删除，这里索引可以使用逗号分隔拼凑起来，不过为了脚本方便就一行一条了。</p>
<p>那么怎么去定位这些非正常字符的索引呢？</p>
<pre><code>curl -s 10.135.20.38:9200/_cat/indices?v|grep -P &apos;[\xB0\xA1-\xF7\xFE]+&apos;
</code></pre><p>上面索引就是用该行grep出来，不过按上述删完后，发现‘zh날炷gxꆀ鍀ᒶ⒐ጆ䬯ꀳ20₨炠.021’ 这个索引还在。</p>
<p>这让我有点不知所措，直到我把grep出来的结果保存，并用16进制模式查看时，才发现，原来是自己手动从服务器拷贝该索引时把部分不可string化的字符拷贝丢了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">curl -s 10.135.20.38:9200/_cat/indices?v|grep -P &apos;[\xB0\xA1-\xF7\xFE]+&apos;</div><div class="line">green  open   zh날炷gxꆀ鍀ᒶ⒐ጆ䬯ꀳ20₨炠.021          tfpRU2KeRCG6yBWhYq5J2w   5   1          1            0      9.2kb          4.6kb</div><div class="line"></div><div class="line"># 将上述结果打开vi十六进制模式，部分如下</div><div class="line">                                            7a68  green  open   zh</div><div class="line">0000010: eb82 a0e7 82b7 6778 ea86 8000 e98d 80e1  ......gx........</div><div class="line">0000020: 92b6 e292 90e1 8c86 0100 e4ac afea 80b3  ................</div><div class="line">0000030: 3230 e282 a8e7 82a0 2e30 1a00 3231       20.......0..21</div></pre></td></tr></table></figure></p>
<p>可以看到通过字符串拷贝时丢失，还是老老实实写脚本实现删除吧。</p>
<p>总结1</p>
<p>如下是完整实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># 首先是之前通过curl命令进行 urlencode 编码的函数</div><div class="line">function urlencode() &#123;</div><div class="line">    local data</div><div class="line">    if [[ $# != 1 ]]; then</div><div class="line">        echo &quot;Usage: $0 str&quot;</div><div class="line">        return 1</div><div class="line">    fi</div><div class="line">    data=&quot;$(curl -s -o /dev/null -w %&#123;url_effective&#125; --get --data-urlencode &quot;$1&quot; &quot;&quot;)&quot;</div><div class="line">    # if [[ $? == 0 ]]; then</div><div class="line">    echo &quot;$&#123;data##/?&#125;&quot;</div><div class="line">    # fi</div><div class="line">    return 0</div><div class="line">&#125;</div><div class="line">function callDel()&#123;</div><div class="line">    indx=$(urlencode $1)</div><div class="line">    curl -s -XDELETE 10.135.20.38:9200/$indx</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其次合起来完整的脚本就是<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -s 10.135.20.38:9200/_cat/indices?v|grep -P <span class="string">'[\xB0\xA1-\xF7\xFE]+'</span>| \ </div><div class="line">    awk <span class="string">'&#123;print $3&#125;'</span>|xargs -I@ -P4 bash -c <span class="string">"<span class="variable">$(declare -f urlencode; declare -f callDel)</span> ; callDel @ ; echo @ "</span></div></pre></td></tr></table></figure></p>
<p><i>题外话：起先怀疑这个urlencode有误，后来使用 python -c “import urllib;print urllib.quote(raw_input())” &lt;&lt;&lt; “zhangxin-xxx-༢༥༦༢.༠༤.༠༡” 也是如此。</i></p>
<p>总结2</p>
<p>上述方法可以完美运行，但是觉得有点麻烦，实现的不是非常的 Elasticsearch。</p>
<p>无意翻看了下 Elasticsearch 的索引匹配支持，显然索引匹配是不支持正则表达式的，但是支持通配符，include，excluse，具体代码可以看 Elasticsearch 的 IndexNameExpressionResolver 实现，在innerResolve 会判断是否支持。有个exclude模式是支持的。<br>即，也可以用这种方式去删除：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XDELETE <span class="string">'10.135.20.38:9200/zhangxin-xxx-*,-zhangxin-xxx-2019.07.*'</span></div></pre></td></tr></table></figure></p>
<p>这句就表示删除 zhangxin-xxx- 除 zhangxin-xxx-2019.07- 开头的索引。</p>
<p>不过这个方案不如上面的通用，但是非常简单且清晰易懂。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;长话短说，查看生产环境Elasticsearch (5.6版本) 时，发现一些如下有着非ascii码的索引&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;red zhangxin-xxx-༠༠༣༡.༠༣.༢༢&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;red zhangxin-xxx-༠༠༣༡.༠༣.༢༣&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;red zhangxin-xxx-༠༠༣༡.༠༣.༢༤&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;red zhangxin-xxx-༠༠༣༡.༠༤.༡༢&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;red zhangxin-xxx-༠༠༣༡.༠༤.༡༧&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;red zh날炷gxꆀ鍀ᒶ⒐ጆ䬯ꀳ20₨炠.021&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面是某系统因为历史缘故，使用用户的数据创建索引了，因暂时无法推动其做修改，于是需要考虑用脚本定时删除。&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="Tools" scheme="http://thomaslau.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>python 2.6.6 SimpleHTTPServer耗时的bug</title>
    <link href="http://thomaslau.github.io/2019/05/30/2019-05-30-python%202.6.6%20SimpleHTTPServer%E8%80%97%E6%97%B6%E7%9A%84bug/"/>
    <id>http://thomaslau.github.io/2019/05/30/2019-05-30-python 2.6.6 SimpleHTTPServer耗时的bug/</id>
    <published>2019-05-29T17:09:07.000Z</published>
    <updated>2019-08-08T16:58:03.156Z</updated>
    
    <content type="html"><![CDATA[<p>之前因为时间紧迫的缘故，在公司的CentOS 7 机器上部署一个快速实现的数据收集工具，考虑到避免其他语言发布和变更起来麻烦，于是就用 python+bash 实现。</p>
<p>服务端就是最简单不引入任何python包的SimpleHTTPServer+Handler实现的。</p>
<p>偶然一次看日志发现本来应该在三分钟内完成的一个同步/上报循环结果未能如期完成，每个请求看起来相隔十秒左右，最后定位下来是python2.6.6的问题。<br><a id="more"></a><br>简单起见，我用下面重现一下： 10.135.20.45上开了一个进程</p>
<p>   python -m SimpleHTTPServer 12888</p>
<p>在另外一台机器上</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[java@10-135-20-62 ~]$ cat curl-format.txt</div><div class="line">time_namelookup: %&#123;time_namelookup&#125;\n</div><div class="line">time_connect: %&#123;time_connect&#125;\n</div><div class="line">time_appconnect: %&#123;time_appconnect&#125;\n</div><div class="line">time_redirect: %&#123;time_redirect&#125;\n</div><div class="line">time_pretransfer: %&#123;time_pretransfer&#125;\n</div><div class="line">time_starttransfer: %&#123;time_starttransfer&#125;\n</div><div class="line">----------time_total: %&#123;time_total&#125;\n</div><div class="line">[java@10-135-20-62 ~]$ curl -w <span class="string">"@curl-format.txt"</span> -o /dev/null -s -L <span class="string">"10.135.20.45:12888"</span></div><div class="line">time_namelookup: 0.000</div><div class="line">time_connect: 0.000</div><div class="line">time_appconnect: 0.000</div><div class="line">time_redirect: 0.000</div><div class="line">time_pretransfer: 0.000</div><div class="line">time_starttransfer: 10.013</div><div class="line">----------time_total: 10.013</div></pre></td></tr></table></figure>
<p>这里两个问题：<br>1）一个简单的GET请求耗时10秒，10秒看起来像是服务器设置的超时时间。<br>2）而且10秒都花费在 starttransfer</p>
<p>如何定位问题？显然逐步打点耗时是可以的，但是如果用搜索引擎更快，我在python社区上找到一个提问，作者遇到同样现象，但是pytohn2.7以后就没有问题。</p>
<p>有个回答说是 pytohn解析header时候\r\n的问题，也有说是socket未close问题，我看了下代码，不像。</p>
<p>不过这个提问给了我思路，于是我比较了python 2.6/2.7各自的SimpleHTTPServer.py文件。<br>考虑到linux版本众多且你可能也记不住，友情提示一个定位该文件的方法：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[java@10-135-20-62 ~]$ python --version</div><div class="line">Python 2.6.6</div><div class="line">[java@10-135-20-62 ~]$ python -c <span class="string">'import sys; print sys.path'</span></div><div class="line">[<span class="string">''</span>, <span class="string">'/usr/lib64/python26.zip'</span>, <span class="string">'/usr/lib64/python2.6'</span>, <span class="string">'/usr/lib64/python2.6/plat-linux2'</span>, <span class="string">'/usr/lib64/python2.6/lib-tk'</span>, <span class="string">'/usr/lib64/python2.6/lib-old'</span>, <span class="string">'/usr/lib64/python2.6/lib-dynload'</span>, <span class="string">'/usr/lib64/python2.6/site-packages'</span>, <span class="string">'/usr/lib64/python2.6/site-packages/gtk-2.0'</span>, <span class="string">'/usr/lib/python2.6/site-packages'</span>, <span class="string">'/usr/lib/python2.6/site-packages/setuptools-0.6c11-py2.6.egg-info'</span>]</div></pre></td></tr></table></figure>
<p>一般就在 /usr/lib64/python2.6/ 下面了。<br>不过2.6/2.7的SimpleHTTPServer.py没有明显差异，继续再比对他们的父类：BaseHTTPServer.py<br>下图简单列下不同点。</p>
<p><img src="/images/python2.6_1.png" width="100%"><br><img src="/images/python2.6_2.png" width="100%"><br><img src="/images/python2.6_3.png" width="100%"></p>
<p>时间问题，直接上答案，问题就出在log_message里，python原意只是记录response的相关结果，但没想到会成为耗时的元凶：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">def address_string(self):</div><div class="line">    &quot;&quot;&quot;Return the client address formatted for logging.</div><div class="line">    This version looks up the full hostname using gethostbyaddr(),</div><div class="line">    and tries to find a name that contains at least one dot.</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    host, port = self.client_address[:2]</div><div class="line">    return socket.getfqdn(host)</div></pre></td></tr></table></figure></p>
<p>我在该机器上跑一下，发现却是是耗费10秒</p>
<pre><code>time python -c &apos;import socket; print socket.getfqdn()&apos;
</code></pre><p>python 2.7 之后就改过来了，不再适用 address_string，所以在现代服务器上不会出现上述问题。</p>
<p>getfqdn为什么会耗时呢？这和pyhon hostname 解析实现相关，后续可分享一下。</p>
<p>以上简单记录遇到的问题，读者可留意。解决方法其实可以替换python的BaseHTTPServer.py，也可以自己拷贝出来一份修改，但说到底不如正规的方案去实现。</p>
<p>后记：</p>
<p>getfqdn 底层调用的就是 socket.gethostbyaddr() – map an IP number or hostname to DNS info<br>(生产环境配置 域名/反向域名解析服务)<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[java@10-135-20-62 ~]$ time python -c <span class="string">'import socket; print socket.gethostbyaddr("10.135.20.62")'</span></div><div class="line">(<span class="string">'localhost'</span>, [<span class="string">'localhost.localdomain'</span>, <span class="string">'localhost4'</span>, <span class="string">'localhost4.localdomain4'</span>], [<span class="string">'10.135.20.62'</span>])</div><div class="line"></div><div class="line">real    0m0.019s</div><div class="line">user    0m0.014s</div><div class="line">sys 0m0.004s</div><div class="line">[java@10-135-20-62 ~]$ time python -c <span class="string">'import socket; print socket.gethostbyaddr("10.135.20.39")'</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;string&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">socket.herror: [Errno 2] Host name lookup failure</div><div class="line"></div><div class="line">real    0m10.033s</div><div class="line">user    0m0.018s</div><div class="line">sys 0m0.004s</div></pre></td></tr></table></figure></p>
<p>另 <a href="/images/socket.py">socket.py</a><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[java@10-135-20-62 ~]$ python -c <span class="string">'import _socket;print(_socket.__file__)'</span></div><div class="line">/usr/lib64/python2.6/lib-dynload/_socketmodule.so</div><div class="line">[java@10-135-20-62 ~]$ nm -D /usr/lib64/python2.6/lib-dynload/_socketmodule.so</div><div class="line">[java@10-135-20-62 ~]$ objdump -tT /usr/lib64/python2.6/lib-dynload/_socketmodule.so</div><div class="line">...</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前因为时间紧迫的缘故，在公司的CentOS 7 机器上部署一个快速实现的数据收集工具，考虑到避免其他语言发布和变更起来麻烦，于是就用 python+bash 实现。&lt;/p&gt;
&lt;p&gt;服务端就是最简单不引入任何python包的SimpleHTTPServer+Handler实现的。&lt;/p&gt;
&lt;p&gt;偶然一次看日志发现本来应该在三分钟内完成的一个同步/上报循环结果未能如期完成，每个请求看起来相隔十秒左右，最后定位下来是python2.6.6的问题。&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="Python" scheme="http://thomaslau.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Many Links 0130</title>
    <link href="http://thomaslau.github.io/2019/01/30/2019-01-30-many_links_0130/"/>
    <id>http://thomaslau.github.io/2019/01/30/2019-01-30-many_links_0130/</id>
    <published>2019-01-29T17:09:07.000Z</published>
    <updated>2019-07-24T15:59:11.841Z</updated>
    
    <content type="html"><![CDATA[<p>1.<br>Running Envoy as an Edge Proxy at eBay: Replacing Hardware Load Balancers with a Software Solution<br><a href="https://www.infoq.com/news/2018/12/envoycon-ebay-edge" target="_blank" rel="external">https://www.infoq.com/news/2018/12/envoycon-ebay-edge</a><br>eBay的Envoy实践。</p>
<p>2.<br>Spring源码探究：容器<br><a href="https://www.jianshu.com/p/4a82770fd188" target="_blank" rel="external">https://www.jianshu.com/p/4a82770fd188</a><br>你遇到过定义了一个拦截器/bean，在controller层的代码生效，而service层没生效？<br>这篇文章做了解读。虽然问题是适合Spring初学者，但是作者解释的还是清晰的，而且不过分深入，适合初步了解Spring。<br><a id="more"></a><br><blockquote><p>当上门这句话放在springmvc.xml中时，名为”printTimeProcessor”的bean会存在于Springmvc容器，那么Spring容器是无法获取它的。而Service层恰巧是存在于Spring容器中，所以”printTimeProcessor”切面对Service层不起作用。而Controller层本身存在于Springmvc容器，所以Controller层可以正常工作。而当它放在spring.xml中时，”printTimeProcessor”是存在于Spring容器中，Springmvc容器是Spring容器的子容器，子容器可以获取到父容器的bean，所以Controller层与Service层都能获取到该bean，所有都能正常使用它</p>
</blockquote><br>这里可能有点混乱，把“Springmvc容器”当作Web容器(WebApplicationContext),“Spring容器”当作App容器(ApplicationContext)。<br>作者的源码可能和文中有些出入，但是其中原理探索是值得一看的。</p>
<p>3.<br>MIT Tech Review JANUARY/FEBRUARY 2019  The China issue<br>其他几篇需要订阅阅读<br><a href="https://www.technologyreview.com/magazine/2019/01/" target="_blank" rel="external">https://www.technologyreview.com/magazine/2019/01/</a><br>数字统计不知真假，看起来是个强国啊，这几年的的科技发展迅猛<br><blockquote><p>China’s tech giants want to go global. Just one thing might stand in their way.<br>China’s losing its taste for nuclear power. That’s bad news.<br>The man turning China into a quantum superpower<br>China has never had a real chip industry. Making AI chips could change that.<br>Aboard the giant sand-sucking ships that China uses to reshape the world<br>China’s losing its taste for nuclear power. That’s bad<br>China’s giant transmission grid could be the key to cutting climate emissions<br>The man turning China into a quantum superpower<br>Years before CRISPR babies, this man was the first to edit human embryos<br>Science vs. the state: a family saga at the Caltech of China<br>How Google took on China—and lost<br>The Reunion: a new science-fiction story about surveillance in China<br>The US and China aren’t in a “cold war,” so stop calling it that<br>How China got a head start in fintech, and why the West won’t catch up</p>
</blockquote></p>
<p>4.<br>《从0开始学架构》–笔记<br><a href="https://coderbee.net/index.php/framework/20180918/1655" target="_blank" rel="external">https://coderbee.net/index.php/framework/20180918/1655</a></p>
<p>5.<br>微服务消息传递协议简介<br><a href="http://mushiming.top/mushblog/archives/890" target="_blank" rel="external">http://mushiming.top/mushblog/archives/890</a><br><blockquote><p>那么，微服务架构如何处理分布式独立进程中的通信？一些交叉的方式：<br>同步协议<br>异步协议<br>单接收器<br>多个接收器<br>如何避免同步依赖？<br>复制和传播将有助于回避同步性问题。通过复制，您可以将数据存储在多个站点（如服务器）中。这极大地提高了数据的可用性并减少了不一致性。通过传播，您可以将数据从服务器推送到客户端，这对于本地访问方案非常有用。</p>
<p>如果复制和传播不是当前路由，您还可以跨微服务复制数据。这与每个微服务的域模型边界密切配合。在处理域模型边界时，您需要关注业务功能的范围，并在服务之间创建可理解且有意义的分离。如果实现有意义的分离，这也将有助于提高数据和迭代的可伸缩性和域驱动选择。</p>
</blockquote></p>
<p>6.<br>How Much of the Internet Is Fake? Turns Out, a Lot of It, Actually.<br><a href="http://nymag.com/intelligencer/2018/12/how-much-of-the-internet-is-fake.html" target="_blank" rel="external">http://nymag.com/intelligencer/2018/12/how-much-of-the-internet-is-fake.html</a><br>长文，作者论述了现实中存在的 Fake，听起来一种Fake致死的感觉，在这个当今离开手机离开互联网寸步难行的时代。<br>但作者是在耸人听闻吗：<br><blockquote><p>Where does that leave us? I’m not sure the solution is to seek out some pre-Inversion authenticity — to red-pill ourselves back to “reality.” What’s gone from the internet, after all, isn’t “truth,” but trust: the sense that the people and things we encounter are what they represent themselves to be. Years of metrics-driven growth, lucrative manipulative systems, and unregulated platform marketplaces, have created an environment where it makes more sense to be fake online — to be disingenuous and cynical, to lie and cheat, to misrepresent and distort — than it does to be real. Fixing that would require cultural and political reform in Silicon Valley and around the world, but it’s our only choice. Otherwise we’ll all end up on the bot internet of fake people, fake clicks, fake sites, and fake computers, where the only real thing is the ads.</p>
</blockquote></p>
<p>7.<br>中美贸易摩擦加关税商品<br><a href="http://blog.fens.me/china-trade-merchandise/" target="_blank" rel="external">http://blog.fens.me/china-trade-merchandise/</a></p>
<p>8.<br>2018年JAVA回顾<br>JVM Calendar: Java in 2018<br><a href="https://dzone.com/articles/java-advent-java-in-2018" target="_blank" rel="external">https://dzone.com/articles/java-advent-java-in-2018</a></p>
<p>9.<br>下面的主要来自ruanyf本期(和其它)的分享,偷个懒，直接引用部分，有兴趣请移步原文：<br><a href="http://www.ruanyifeng.com/blog/2018/12/weekly-issue-37.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2018/12/weekly-issue-37.html</a></p>
<p><a href="https://github.com/sdmg15/Best-websites-a-programmer-should-visit" target="_blank" rel="external">https://github.com/sdmg15/Best-websites-a-programmer-should-visit</a><br>该仓库收集对程序员有用的网址，包含问题查找、技术新闻、技术博客、开源社区、英文提升、新奇的玩意儿、视频教程、在线工具等数十个方向的内容。（@qiurenbo 投稿）</p>
<p><a href="https://tus.io/" target="_blank" rel="external">https://tus.io/</a><br>文件上传到一半突然断了，往往只能重新上传。tus 是一个允许断点上传的轻量级协议，可以从中断的地方继续上传。官方提供开源的客户端和服务端实现。</p>
<p><a href="https://github.com/jabcode/jabcode" target="_blank" rel="external">https://github.com/jabcode/jabcode</a><br>JAB 码是彩色二维码方案，可以比黑白二维码写入多得多的信息。</p>
<p>Linux 内核揭密（中文）<br><a href="https://xinqiu.gitbooks.io/linux-insides-cn/content/index.html" target="_blank" rel="external">https://xinqiu.gitbooks.io/linux-insides-cn/content/index.html</a><br>本书是《Linux inside》一书的中译，介绍 Linux 内核知识，从计算机通电讲起，需要 C 语言和汇编语言的知识。（@imilano 投稿）<br><a href="https://github.com/0xAX/linux-insides" target="_blank" rel="external">https://github.com/0xAX/linux-insides</a></p>
<p><a href="http://incompleteideas.net/book/the-book.html" target="_blank" rel="external">http://incompleteideas.net/book/the-book.html</a><br>《Reinforcement Learning: An Introduction》，2018年出版的新书，作者开源了。</p>
<p><a href="https://swtch.com/~rsc/regexp/regexp4.html" target="_blank" rel="external">https://swtch.com/~rsc/regexp/regexp4.html</a><br>谷歌代码搜索的作者，介绍搜索的算法原理。</p>
<p><a href="https://www.vulture.com/2018/10/the-making-of-rockstar-games-red-dead-redemption-2.html" target="_blank" rel="external">https://www.vulture.com/2018/10/the-making-of-rockstar-games-red-dead-redemption-2.html</a><br>这篇长篇报道介绍 RockStar 游戏公司和它开发的游戏《Red Dead Redemption 2》。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.&lt;br&gt;Running Envoy as an Edge Proxy at eBay: Replacing Hardware Load Balancers with a Software Solution&lt;br&gt;&lt;a href=&quot;https://www.infoq.com/news/2018/12/envoycon-ebay-edge&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.infoq.com/news/2018/12/envoycon-ebay-edge&lt;/a&gt;&lt;br&gt;eBay的Envoy实践。&lt;/p&gt;
&lt;p&gt;2.&lt;br&gt;Spring源码探究：容器&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/4a82770fd188&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.jianshu.com/p/4a82770fd188&lt;/a&gt;&lt;br&gt;你遇到过定义了一个拦截器/bean，在controller层的代码生效，而service层没生效？&lt;br&gt;这篇文章做了解读。虽然问题是适合Spring初学者，但是作者解释的还是清晰的，而且不过分深入，适合初步了解Spring。&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="weeklyreading" scheme="http://thomaslau.github.io/tags/weeklyreading/"/>
    
  </entry>
  
  <entry>
    <title>Many Links 1119</title>
    <link href="http://thomaslau.github.io/2018/11/19/2018-11-19-many_links_1119%20copy/"/>
    <id>http://thomaslau.github.io/2018/11/19/2018-11-19-many_links_1119 copy/</id>
    <published>2018-11-18T17:09:07.000Z</published>
    <updated>2018-11-20T17:41:17.906Z</updated>
    
    <content type="html"><![CDATA[<p>1.<br>NIPS不更名，我就撤资：赞助商加入联合抗议行列<br><a href="https://www.jiqizhixin.com/articles/2018-11-02-12" target="_blank" rel="external">https://www.jiqizhixin.com/articles/2018-11-02-12</a><br>不过后来还是改名字了 <a href="https://www.jiqizhixin.com/articles/2018-11-17" target="_blank" rel="external">NeurIPS</a><br>以后看文章要找对地方啊。<br>2.<br>GitHub Incident Analysis Shows How to Improve Service Reliability<br><a href="https://www.infoq.com/news/2018/11/github-incident-analysis" target="_blank" rel="external">https://www.infoq.com/news/2018/11/github-incident-analysis</a><br>GitHub服务中断24小时11分钟事故分析报告<br><a href="https://mp.weixin.qq.com/s/fFv1ASElHsVNEPPkP53qAQ" target="_blank" rel="external">https://mp.weixin.qq.com/s/fFv1ASElHsVNEPPkP53qAQ</a><br>了解下：<br><blockquote><p>GitHub 拥有多个 MySQL 集群，大小从几百 GB 到 5TB 不等，每个集群最多有几十个只读副本来存储非 Git 元数据，因此我们的应用程序可以提供拉取请求和问题管理、身份验证管理、后台处理协调等原始 Git 对象存储之外的其他功能。应用程序不同部分的数据通过功能分片存储在各种集群中。<br>为了大规模提高性能，应用程序将数据直接写入每个集群的主数据库，但在绝大多数情况下将读取请求委派给副本服务器。我们使用 Orchestrator 来管理 MySQL 集群拓扑和处理自动故障转移。Orchestrator 以 Raft 的共识算法为基础，可以实现应用程序无法支持的拓扑，因此必须十分小心让 Orchestrator 配置与应用程序的期望保持一致。</p>
</blockquote><br>3.<br>Java应用性能调优之调优准备<br><a href="http://www.rowkey.me/blog/2018/10/31/profile-ready/" target="_blank" rel="external">http://www.rowkey.me/blog/2018/10/31/profile-ready/</a><br>基本涵盖常见注意点，可以保存文章随时查阅。<br>总结简单记住几个命令：<br><a id="more"></a><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dmesg丨tail</div><div class="line">vmstat 1</div><div class="line">mpstat -P ALL 1</div><div class="line">free -m</div><div class="line">sar -n DEV 1</div><div class="line">top</div></pre></td></tr></table></figure></p>
<p>4.<br>1年将30PB数据迁移到Spark，eBay的经验有何可借鉴之处？<br><a href="http://www.infoq.com/cn/articles/ebay-30pb-spark" target="_blank" rel="external">http://www.infoq.com/cn/articles/ebay-30pb-spark</a><br>文章似乎404了，不过infoq上站内搜索还是可以搜索到，似乎没讲啥，但可以了解下这件事：<br><blockquote><p>eBay 使用 Teradata 已经有二十年的历史，这个数仓系统中积累了 60PB 数据和上万张核心表，他们支撑着 eBay 最核心的商务逻辑和站点功能。从今年开始，eBay 开始将这个庞大的数仓由 Teradata 向 Spark 做迁移，使用 eBay 自己开发的工具，迁移过程中 90% 的工作都可以由自动化完成。与此同时，研究人员通过优化 Spark 框架，节省了一半的内存。<br>…<br>eBay 第一期迁移的数仓就有 30PB 之大，包括 5000 张的目标表、20000 张的临时表和 50000 个作业。经过估算，如果是手动迁移，大概需要 1000 个人月，相当于 50 个数据工程师，专职做迁移也需要两年， 这是非常大的开销。所以 必须做自动化迁移。<br>…<br>尽管团队已经预先为大型数据仓库迁移可能会面临的问题设计了应对方案，但在真正启动数据仓库迁移后，依然遇到了很多挑战。俞育才给我们举了几个例子：<br>1)“大规模数据下的正确性验证。我们可能会直观地认为，双跑验证就可以了。尽管理论上是这样，实际情况往往会复杂很多。首先，数据源是不断变化的，目标表依赖的任何一张源表数据发生了变化，结果就会不一致。所以，双跑的时间点很重要。其次，即使数据源固定，跑多次结果未必是一致的。比如，在 Spark 中有个 UDF，可以给返回每一行加上个 ID。但实际上，这并不是一个幂等操作，因为 Shuffle 不保证每次返回行的顺序，所以每次编上 ID 都是不一样的。对于这样的列，我们就不能做比较。类似这样的问题还有很多，都需要特别注意。<br>2)非标准流程作业的迁移。在老的 Teradata 数仓中，大约有 10-15% 的作业并不是按照标准流程创建的，这些作业无法做自动化迁移，或者自动化的成本很高。所以，在初期做规划的时候，要尽可能收集到足够的信息，把他们都标识出来，然后尽早地联系相应的开发，或者修改作业，或者做手动迁移。<br>3)开源软件的企业级特性的支持。一些企业级软件提供的易用功能，现在的 Spark、Hadoop 还没有提供。比如：监控和调试信息还不是很完善，排错起来不是那么方便；对分析师来说，他们也缺乏一个好的 IDE 帮助他们做开发。这并不全是 Spark 的问题，我们自己开发了很多外围的组件来帮助改善这些问题。</p>
</blockquote><br>5.<br>一文看懂Pinterest如何构建时间序列数据库系统Goku<br><a href="http://www.infoq.com/cn/articles/how-pinterest-build-goku" target="_blank" rel="external">http://www.infoq.com/cn/articles/how-pinterest-build-goku</a><br><blockquote><p>虽然 OpenTSDB 在功能上运行良好，但其性能随着 Pinterest 的增长而降低，导致运营开销（例如严重的 GC 问题和 HBase 经常崩溃）。为了解决这个问题，Pinterest 开发了自己的内部时间序列数据库——Goku，其中包含用 C ++ 编写的 OpenTSDB 兼容 API，以支持高效的数据提取和成本昂贵的时间序列查询。<br>时间序列数据<br>Goku 遵循 OpenTSDB 的时间序列数据模型。时间序列由一个键和一系列时间数字数据点组成。key = metric name + 一组标记键值对<br>时间序列查询<br>除了开始时间和结束时间之外，每个查询都由以下部分或全部组成：度量标准名称、过滤器、聚合器、降采样器、速率选项。<br>…<br>Goku 解决了 OpenTSDB 中的许多限制，包括：<br>1）不必要的扫描：Goku 用倒排索引引擎取代了 OpenTSDB 的低效扫描。<br>2）数据大小：OpenTSDB 中的数据点是 20 字节。Pinterest 采用 Gorilla 压缩来实现 12 倍压缩。<br>3）单机聚合：OpenTSDB 将数据读取到一个服务器上并进行聚合，而 Goku 的新查询引擎是将计算迁移到更接近存储层的位置，该存储层在叶节点上进行并行处理，然后在根节点上聚合部分结果。<br>4）序列化：OpenTSDB 使用 JSON，当有太多数据点要返回时，JSON 会很慢；Goku 使用 thrift 二进制代替。<br>…<br>存储引擎<br>Goku 在内存存储引擎中使用了 Facebook Gorilla 来存储过去 24 小时内的最新数据。<br>分片和路由<br>我们使用两层分片策略。首先，我们对度量名称进行散列，以确定某一时间序列属于哪个分片组。我们在度量名称 + 标记键值集上进行散列，以确定时间序列在所在组中的哪个分片。此策略可确保数据在分片之间保持平衡。同时，由于每个查询仅进入一个组，因此扇出保持较低水平，以减少网络开销和尾部延迟。另外，我们可以独立地扩展每个分片组。<br>…<br>查询引擎<br>a)倒排索引<br>b)聚合<br>从存储引擎检索数据后，开始进行聚合和构建最终结果的步骤。<br>Pinterest 最初尝试了 OpenTSDB 的内置查询引擎。结果发现，由于所有原始数据都需要在网络上运行，性能会严重下降，而且这些短期对象也会导致很多 GC。<br>因此，Pinterest 在 Goku 中复制了 OpenTSDB 的聚合层，并尽可能地早地进行计算，以尽量减少线上的数据。</p>
<p>下一步：<br>a)基于磁盘的长期数据存储<br>Goku 最终将支持超过一天时间数据的查询。对于像一年这样的时长查询，Pinterest 将不会过分强调一秒钟内发生的事情，而是关注整体趋势。因此，Pinterest 将进行降采样和压缩，把以小时计的 bucket 合并为更长期的时长，从而减小数据量并提高查询性能。<br>b)复制<br>目前，Pinterest 有两个 goku 集群进行双行写入。此设置提高了可用性：当一个集群中存在问题时，可以轻松地将流量切换到另一个集群。但是，由于这两个集群是独立的，因此很难确保数据的一致性。例如，如果写入一个集群成功而另一个未成功时，则数据写入失败，数据由此变得不一致。另一个缺点是故障转移总是在集群层面发生。为此，Pinterest 正在开发基于日志的集群内复制，以支持主从分片。这将提高读取可用性，保持数据一致性，并支持分片级的故障转移。</p>
</blockquote><br>6.<br>Alternative code styles<br><a href="https://swalladge.id.au/archives/2018/10/15/alternative-code-styles/" target="_blank" rel="external">https://swalladge.id.au/archives/2018/10/15/alternative-code-styles/</a></p>
<p>算是搞笑文章吧，标准之外的选择，大开眼界了，特别是 斐波那契缩进的风格：<br>知名如<br>PEP8 for Python<br>Linux kernel coding style for C<br>Airbnb JavaScript Style Guide<br><blockquote><p>Ok, so there are also plenty of infoadm ation, history, tools, etc. for popular styles. Enough on them. Let’s look at some lesser known alternatives!<br><em>Bournegol</em><br>Let’s begin with the most (im)famous alternate code styles! Bournegol is the C coding style used by Steven Bourne in the sh source code. It makes C look more like Algol, which some would argue has a nicer syntax. Below is a snippet from main.c (source):<br>DISCLAIMER: use the styles that follow at your own risk.<br><em>Poetry</em><br>Code can be an art form. While function is generally put before form in code, it doesn’t hurt to break the trend and produce source code that is in itself beautiful.<br><em>Fibonacci indentation</em><br>Indentation has always been a hot topic. Tabs or spaces? Two, four, or even eight spaces? Let’s add a new option! Welcome to Fibonacci indentation.</p>
</blockquote><br>7.<br>关于Kafka broker IO的讨论，huxihx写的，非常不错，建议可以收藏看一看<br><a href="http://www.cnblogs.com/huxi2b/p/9860192.html" target="_blank" rel="external">http://www.cnblogs.com/huxi2b/p/9860192.html</a><br><blockquote><p>Apache Kafka是大量使用磁盘和页缓存(page cache)的，特别是对page cache的应用被视为是Kafka实现高吞吐量的重要因素之一。实际场景中用户调整page cache的手段并不太多，更多的还是通过管理好broker端的IO来间接影响page cache从而实现高吞吐量。我们今天就来讨论一下broker端的各种IO操作。<br>…<br>开始之前，还是简单介绍一下page cache：page cache是内核使用的最主要的磁盘缓存(disk cache)之一——实际上Linux中还有其他类型的磁盘缓存，如dentry cache、inode cache等。通常情况下Linux内核在读写磁盘时都会访问page cache。当用户进程打算读取磁盘上文件的数据时，内核会首先查看待读取数据所在的page是否在page cache中，如果存在自然命中page cache，直接返回数据即可，避免了物理磁盘读操作；反之内核会向page cache添加一个新的page并发起物理磁盘读操作将数据从磁盘读取到新加page中，之后再返回给用户进程。Linux内核总是会将系统中所有的空闲内存全部当做page cache来用，而page cache中的所有page数据将一直保存在page cache中直到内核根据特定的算法替换掉它们中的某些page——一个比较朴素的算法就是LRU。同样地，在写入page数据到磁盘之前，内核也会检查对应的page是否在page cache中，如果不存在则添加新page并将待写入数据填充到该page中，此时真正的磁盘写还尚未开始，通常都是隔几秒之后才真正写入到底层块设备上——即这是一个延迟写入操作。理论上来说，在这几秒之内的间隔中，用户进程甚至还允许修改这些待写入的数据——当然对于Kafka而言，它的写入操作本质上是append-only的，故没有这样的使用场景。</p>
</blockquote><br>8.<br>Linux Kernel 4.9 中的 BBR 算法与之前的 TCP 拥塞控制相比有什么优势？<br><a href="https://www.zhihu.com/question/53559433/answer/519062524?group_id=1039303887626481665" target="_blank" rel="external">https://www.zhihu.com/question/53559433/answer/519062524?group_id=1039303887626481665</a><br><blockquote><p>BBR是基于什么的拥塞控制？根据论文，是基于拥塞的拥塞控制（Congestion-based Congestion Control），但是看起来感觉不好理解。根据我的理解，我更倾向于称它为 基于带宽延迟的拥塞控制（BDP-based Congestion Control）。因为，BBR总是在测量最小RTT（10s内），最大Bandwidth（10 Round Trips），并且尽量控制输出到网络的数据包（in-flight）靠近 BDP（without buffer），这样既能保证带宽利用率，又能避免Bufferbloat问题。</p>
</blockquote><br>9.<br>Kafka副本管理—— 为何去掉replica.lag.max.messages参数<br><a href="https://www.cnblogs.com/huxi2b/p/5903354.html" target="_blank" rel="external">https://www.cnblogs.com/huxi2b/p/5903354.html</a><br><blockquote><p>今天查看Kafka 0.10.0的官方文档，发现了这样一句话：Configuration parameter replica.lag.max.messages was removed. Partition leaders will no longer consider the number of lagging messages when deciding which replicas are in sync. 即replica.lag.max.messages参数被正式地移除了，现在topic每个分区的leader副本都不再使用这个参数作为判断follower副本同步状态的依据。看到之后顿觉十分好奇于是抽出半天时间仔细研究了一下，终于弄明白了移除该参数的原因，特此记录一下。</p>
<p>首先我们来看一下这个参数本来的含义： If a replica falls more than this many messages behind the leader, the leader will remove the follower from ISR and treat it as dead. 即如果某个副本落后leader副本的消息数超过了这个值，那么leader副本就会把该follower副本从ISR中移除</p>
<p>为什么取消这个参数，改用：replica.lag.time.max.ms<br>简单来说，根据这个参数，当producer发送速度假设超快，那么容易不断地被踢出ISR然后重新加回ISR，造成了与leader不同步、再同步、又不同步、再次同步的情况发生，超慢时，又未必能察觉到。</p>
</blockquote><br>10.<br>Stuff The Internet Says On Scalability For October 19th, 2018<br><a href="http://highscalability.com/blog/2018/10/19/stuff-the-internet-says-on-scalability-for-october-19th-2018.html" target="_blank" rel="external">http://highscalability.com/blog/2018/10/19/stuff-the-internet-says-on-scalability-for-october-19th-2018.html</a><br><blockquote><p>dweis: I’m an actual author of Protocol Buffers :) I think Sandy’s analysis would benefit from considering why Protocol Buffers behave the way they do rather than outright attacking the design because it doesn’t appear to make sense from a PL-centric perspective. As with all software systems, there are a number of competing constraints that have been weighed that have led to compromises.<br>atombender: I don’t think GraphQL is over-hyped at all. Maybe it’s flawed, but the design is absolutely on the right traack. GraphQL completely changes how you work with APIs in a front end.</p>
<p>Ted Kaminski: The present state of asynchronous I/O on Linux is a giant, flaming garbage fire. A big part of the reason concurrency and parallelism are so conflated is that we get many purely synchronous API calls from the operating system (not just Linux), and to get around this inherent lack of concurrency in API design, we must resort to the parallelism of threads.<br>Dan Houser: The polishing, rewrites, and reedits Rockstar does are immense. “We were working 100-hour weeks” several times in 2018, Dan says. The finished game includes 300,000 animations, 500,000 lines of dialogue, and many more lines of code. Even for each RDR2 trailer and TV commercial, “we probably made 70 versions, but the editors may make several hundred. Sam and I will both make both make lots of suggestions, as will other members of the team.”</p>
<p>@andy_pavlo: Transactions are hard. Distributed transactions are harder. Distributed transactions over the WAN are final boss hardness. I’m all for new DBMSs but people should tread carefully.</p>
</blockquote><br>11.<br>Arthas使用指南<br><a href="https://segmentfault.com/a/1190000014618329" target="_blank" rel="external">https://segmentfault.com/a/1190000014618329</a></p>
<p>12.<br>FEX 技术周刊 - 2018/11/05<br><a href="http://fex.baidu.com/blog/2018/11/fex-weekly-05/" target="_blank" rel="external">http://fex.baidu.com/blog/2018/11/fex-weekly-05/</a><br><blockquote><p>富文本编辑器的技术演进之路<br><a href="https://mp.weixin.qq.com/s?__biz=MzU0Nzk1MTg5OA==&amp;mid=2247484137&amp;;idx=1&amp;sn=8dc25f8de7d359549520c9f198721408" target="_blank" rel="external">https://mp.weixin.qq.com/s?__biz=MzU0Nzk1MTg5OA==&amp;mid=2247484137&amp;;idx=1&amp;sn=8dc25f8de7d359549520c9f198721408</a><br>浏览器提供了两个原生特性：contenteditable、document.execCommand()，contenteditable 特性，可以指定某一容器变成可编辑器区域，即用户可以在容器内直接输入内容，或者删减内容。execCommand API，可以对选中的某一段结构体，执行一个命令，譬如赋予黑体格式。基于以上，可以做出最简单的富文本编辑器。原来富文本编辑器是这么简单？当然不止如此简单！另附：[译]为数字优先新闻编辑室开发文本编辑器.<br>Atag - Web Components 最佳实践<br><a href="http://taobaofed.org/blog/2018/10/31/a-tag/" target="_blank" rel="external">http://taobaofed.org/blog/2018/10/31/a-tag/</a><br>过去一段时间，我一直在使用 Web Components 构建淘宝小程序的 基础组件 Atag。这篇文章的目的，是希望总结在 Atag 开发阶段中使用 Web Components 的经验，避免大家踩坑。另附：October 2018: A Big Month for Web Components.<br>蚂蚁金服移动开发平台mPaaS<br><a href="https://juejin.im/post/5bd81cf2f265da0ab674096c" target="_blank" rel="external">https://juejin.im/post/5bd81cf2f265da0ab674096c</a><br>Android 拆分项目的方案</p>
</blockquote></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.&lt;br&gt;NIPS不更名，我就撤资：赞助商加入联合抗议行列&lt;br&gt;&lt;a href=&quot;https://www.jiqizhixin.com/articles/2018-11-02-12&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.jiqizhixin.com/articles/2018-11-02-12&lt;/a&gt;&lt;br&gt;不过后来还是改名字了 &lt;a href=&quot;https://www.jiqizhixin.com/articles/2018-11-17&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NeurIPS&lt;/a&gt;&lt;br&gt;以后看文章要找对地方啊。&lt;br&gt;2.&lt;br&gt;GitHub Incident Analysis Shows How to Improve Service Reliability&lt;br&gt;&lt;a href=&quot;https://www.infoq.com/news/2018/11/github-incident-analysis&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.infoq.com/news/2018/11/github-incident-analysis&lt;/a&gt;&lt;br&gt;GitHub服务中断24小时11分钟事故分析报告&lt;br&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/fFv1ASElHsVNEPPkP53qAQ&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://mp.weixin.qq.com/s/fFv1ASElHsVNEPPkP53qAQ&lt;/a&gt;&lt;br&gt;了解下：&lt;br&gt;&lt;blockquote&gt;&lt;p&gt;GitHub 拥有多个 MySQL 集群，大小从几百 GB 到 5TB 不等，每个集群最多有几十个只读副本来存储非 Git 元数据，因此我们的应用程序可以提供拉取请求和问题管理、身份验证管理、后台处理协调等原始 Git 对象存储之外的其他功能。应用程序不同部分的数据通过功能分片存储在各种集群中。&lt;br&gt;为了大规模提高性能，应用程序将数据直接写入每个集群的主数据库，但在绝大多数情况下将读取请求委派给副本服务器。我们使用 Orchestrator 来管理 MySQL 集群拓扑和处理自动故障转移。Orchestrator 以 Raft 的共识算法为基础，可以实现应用程序无法支持的拓扑，因此必须十分小心让 Orchestrator 配置与应用程序的期望保持一致。&lt;/p&gt;
&lt;/blockquote&gt;&lt;br&gt;3.&lt;br&gt;Java应用性能调优之调优准备&lt;br&gt;&lt;a href=&quot;http://www.rowkey.me/blog/2018/10/31/profile-ready/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.rowkey.me/blog/2018/10/31/profile-ready/&lt;/a&gt;&lt;br&gt;基本涵盖常见注意点，可以保存文章随时查阅。&lt;br&gt;总结简单记住几个命令：&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="weeklyreading" scheme="http://thomaslau.github.io/tags/weeklyreading/"/>
    
  </entry>
  
  <entry>
    <title>Many Links 1025</title>
    <link href="http://thomaslau.github.io/2018/10/25/2018-10-25-many_links_1025/"/>
    <id>http://thomaslau.github.io/2018/10/25/2018-10-25-many_links_1025/</id>
    <published>2018-10-24T17:09:07.000Z</published>
    <updated>2018-10-26T01:05:27.911Z</updated>
    
    <content type="html"><![CDATA[<p>1.<br>stop using infinite scroll<br><a href="https://logrocket.com/blog/infinite-scroll/" target="_blank" rel="external">https://logrocket.com/blog/infinite-scroll/</a><br>对无限滚动屏的吐槽，说起来可多了。</p>
<p>2.<br>微软加入开放创新网络，旨在保护Linux和开源<br><a href="http://www.infoq.com/cn/news/2018/10/microsoft-oin" target="_blank" rel="external">http://www.infoq.com/cn/news/2018/10/microsoft-oin</a><br>微软是专利大企业，曾经用专利起诉著名企业，这次“拥抱Linux”，甚至打出了恶心的“ heart Linux”标语，至于未来如何，拭目以待。</p>
<p>3.<br>An HTTP proxy for Elasticsearch, Solr (etc.) to prevent a 100% full disk situation.<br><a href="https://github.com/flaxsearch/harahachibu" target="_blank" rel="external">https://github.com/flaxsearch/harahachibu</a><br><a id="more"></a><br>4.<br>网易乐得技术团队：Redis配置模板及持久化解决方案 –<br><a href="http://tech.lede.com/2017/11/14/rd/server/redistemplate/" target="_blank" rel="external">http://tech.lede.com/2017/11/14/rd/server/redistemplate/</a></p>
<p>5.<br>Writing system software: code comments.<br><a href="http://antirez.com/news/124" target="_blank" rel="external">http://antirez.com/news/124</a><br><blockquote><p>During my research I identified nine types of comments:</p>
<ul>
<li>Function comments</li>
<li>Design comments</li>
<li>Why comments</li>
<li>Teacher comments</li>
<li>Checklist comments</li>
<li>Guide comments</li>
<li>Trivial comments</li>
<li>Debt comments</li>
<li>Backup comments</li>
</ul>
<h1 id="Comments-as-an-analysis-tool"><a href="#Comments-as-an-analysis-tool" class="headerlink" title="Comments as an analysis tool."></a>Comments as an analysis tool.</h1><p>Comments are rubber duck debugging on steroids, except you are not talking with a rubber duck, but with the future reader of the code, which is more intimidating than a rubber duck, and can use Twitter. So in the process you really try to understand if what you are stating <em>is acceptable</em>, honorable, good enough. And if it is not, you make your homework, and come up with something more decent.</p>
<p>It is the same process that happens while writing documentation: the writer attempts to provide the gist of what a given piece of code does, what are the guarantees, the side effects. This is often a bug hunting opportunity. It is very easy while describing something to find that it has holes… You can’t really describe it all because you are not sure about a given behavior: such behavior is just emerging from complexity, at random. You really don’t want that, so you go back and fix it all. I find this a splendid reason to write comments.</p>
<h1 id="Writing-good-comments-is-harder-than-writing-good-code"><a href="#Writing-good-comments-is-harder-than-writing-good-code" class="headerlink" title="Writing good comments is harder than writing good code"></a>Writing good comments is harder than writing good code</h1><p>You may think that writing comments is a lesser noble form of work. After all you <em>can code</em>! However consider this: code is a set of statement and function calls, or whatever your programming paradigm is. Sometimes such statements do not make much sense, honestly, if the code is not good. Comments require always to have some design process ongoing, and to understand the code you are writing in a deeper sense. On top of that, in order to write good comments, you have to develop your writing skills. The same writing skills will assist you writing emails, documentation, design documents, blog posts, and commit messages.</p>
<p>I write code because I have an urgent sense to share and communicate more than anything else. Comments coadiuvate the code, assist it, describe our efforts, and after all I love writing them as much as I love writing code itself.</p>
</blockquote></p>
<p>5.<br>盖茨和朋友眼里的 Paul Allen<br>What I loved about Paul Allen<br><a href="https://www.gatesnotes.com/About-Bill-Gates/Remembering-Paul-Allen" target="_blank" rel="external">https://www.gatesnotes.com/About-Bill-Gates/Remembering-Paul-Allen</a><br>Remembering my friend and first business partner.<br><a href="https://www.cringely.com/2018/10/16/remembering-paul-allen/" target="_blank" rel="external">https://www.cringely.com/2018/10/16/remembering-paul-allen/</a></p>
<p>6.<br>班克斯的碎纸机本应该毁掉整幅《气球女孩》<br><a href="https://techcrunch.cn/2018/10/19/banksys-rigged-art-frame-was-supposed-to-shred-the-whole-thing/" target="_blank" rel="external">https://techcrunch.cn/2018/10/19/banksys-rigged-art-frame-was-supposed-to-shred-the-whole-thing/</a><br>文中的油管链接也是很有趣的，揭示碎纸机的制作，之前实验是成功的<br><blockquote><p>在万物互联的未来，我们还能够去真正“拥有”什么东西吗？班克斯（Banksy）在 本月早些时候 的行为艺术给出的回答是不能，当时他的一件作品在伦敦苏富比拍卖行进行拍卖。<br>…<br>视频的末尾展示了整幅画作被切碎的镜头，之后打出字幕：“在彩排中，每次都能成功……”。</p>
</blockquote><br>赞赏这种反艺术的行为，看看最近 AI制作的一幅画佳士得拍卖出300万价格</p>
<p>7.<br>知乎redis实践<br><a href="https://zhuanlan.zhihu.com/p/44441938" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/44441938</a><br>想不到在用的是 redis + tweamproxy</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.&lt;br&gt;stop using infinite scroll&lt;br&gt;&lt;a href=&quot;https://logrocket.com/blog/infinite-scroll/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://logrocket.com/blog/infinite-scroll/&lt;/a&gt;&lt;br&gt;对无限滚动屏的吐槽，说起来可多了。&lt;/p&gt;
&lt;p&gt;2.&lt;br&gt;微软加入开放创新网络，旨在保护Linux和开源&lt;br&gt;&lt;a href=&quot;http://www.infoq.com/cn/news/2018/10/microsoft-oin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.infoq.com/cn/news/2018/10/microsoft-oin&lt;/a&gt;&lt;br&gt;微软是专利大企业，曾经用专利起诉著名企业，这次“拥抱Linux”，甚至打出了恶心的“ heart Linux”标语，至于未来如何，拭目以待。&lt;/p&gt;
&lt;p&gt;3.&lt;br&gt;An HTTP proxy for Elasticsearch, Solr (etc.) to prevent a 100% full disk situation.&lt;br&gt;&lt;a href=&quot;https://github.com/flaxsearch/harahachibu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/flaxsearch/harahachibu&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="weeklyreading" scheme="http://thomaslau.github.io/tags/weeklyreading/"/>
    
  </entry>
  
  <entry>
    <title>Many Links 0803</title>
    <link href="http://thomaslau.github.io/2018/08/03/2018-08-03-many_links_0803/"/>
    <id>http://thomaslau.github.io/2018/08/03/2018-08-03-many_links_0803/</id>
    <published>2018-08-02T17:09:07.000Z</published>
    <updated>2018-08-02T17:30:06.087Z</updated>
    
    <content type="html"><![CDATA[<p>1.<br>继续 SCALA TIMES 上的分享<br><a href="https://mailchi.mp/softwaremill/scala-times-issue-2607957" target="_blank" rel="external">https://mailchi.mp/softwaremill/scala-times-issue-2607957</a><br><a href="https://manuel.bernhardt.io/2018/07/20/akka-anti-patterns-java-serialization/" target="_blank" rel="external">Akka anti-patterns: Java serialization</a><br><a href="https://mostafa-asg.github.io/post/practical-scala-cats-applicative-functor/" target="_blank" rel="external">Practical Cats: Functor and Applicative</a><br><a href="https://kubuszok.com/2018/implicits-type-classes-and-extension-methods-part-4/" target="_blank" rel="external">Implicits, type classes, and extension methods, part 4: understanding implicits</a><br><a href="http://lampwww.epfl.ch/~doeraene/thesis/" target="_blank" rel="external">Cross-Platform Language Design</a><br>2.<br>Be Nice And Write Stable Code<br><a href="http://technosophos.com/2018/07/04/be-nice-and-write-stable-code.html" target="_blank" rel="external">http://technosophos.com/2018/07/04/be-nice-and-write-stable-code.html</a><br><a id="more"></a><br><blockquote><p>Versions and SemVer<br>In software, we use version numbers to signal that something has changed. Version numbering schemes go from dead simple (integers that increment with every release, or date stamps) to surprisingly complex (1.0~pre3+dfsg-0.1+b2, 2.1.1+git20160721~8efc468-2, and 1.2.0+LibO5.2.7-1+deb9u4 are a few versions spotted in the wild).</p>
<p>But when it comes to software version numbers, the current leader in version numbering schemes is SemVer (or Semantic Versioning). Don’t be fooled, though! Many people claim to know how SemVer works, but have never read the specification. Since this is a critical piece of what we are about to talk about, here is a summary of the spec:</p>
<p>Version numbers take the form X.Y.Z, sometimes augmented with additional pre-release and build information: X.Y.Z-AAA#BBB. And each of those fields means something well defined and specific.</p>
<p>X is the major number. Changes in this indicate breaking changes to the API (and/or behavior).<br>Y is the minor number. Changes to this number indicate that new features were added, but that no APIs are broken as a result.<br>Z is the patch version. Changes to this indicate that internal changes were made, but that no changes (even compatible changes) were made to the API.<br>These three are the important ones for us. Again, I suggest taking 15 minutes to read the entire spec.</p>
<p>Countless projects use a format that looks like SemVer, but many of them ignore the semantics behind the version number. Often, it seems that version numbers are incremented by “gut feel” instead of any consistent semantic: “This feels like a minor version update.”</p>
</blockquote><br>3.<br>lucene中的PackedInts源码解读-1<br><a href="http://suichangkele.iteye.com/blog/2427364" target="_blank" rel="external">http://suichangkele.iteye.com/blog/2427364</a><br>4.<br>【译】 追踪同步分片副本<br><a href="https://www.easyice.cn/archives/243" target="_blank" rel="external">https://www.easyice.cn/archives/243</a><br><a href="https://www.easyice.cn/archives/283" target="_blank" rel="external">https://www.easyice.cn/archives/283</a><br>5.<br>Lucene 基础理论<br><a href="http://www.blogjava.net/hoojo/archive/2012/09/06/387140.html" target="_blank" rel="external">http://www.blogjava.net/hoojo/archive/2012/09/06/387140.html</a><br><a href="https://github.com/kakawait/cas-security-spring-boot-starter" target="_blank" rel="external">https://github.com/kakawait/cas-security-spring-boot-starter</a><br>6.<br>几个名词解释：<br><a href="https://en.wikipedia.org/wiki/High-availability_cluster" target="_blank" rel="external">https://en.wikipedia.org/wiki/High-availability_cluster</a><br><blockquote><p>Node configurations<br>Active/active — Traffic intended for the failed node is either passed onto an existing node or load balanced across the remaining nodes. This is usually only possible when the nodes use a homogeneous software configuration.<br>Active/passive — Provides a fully redundant instance of each node, which is only brought online when its associated primary node fails.[2] This configuration typically requires the most extra hardware.<br>N+1 — Provides a single extra node that is brought online to take over the role of the node that has failed. In the case of heterogeneous software configuration on each primary node, the extra node must be universally capable of assuming any of the roles of the primary nodes it is responsible for. This normally refers to clusters that have multiple services running simultaneously; in the single service case, this degenerates to active/passive.<br>N+M — In cases where a single cluster is managing many services, having only one dedicated failover node might not offer sufficient redundancy. In such cases, more than one (M) standby servers are included and available. The number of standby servers is a tradeoff between cost and reliability requirements.<br>N-to-1 — Allows the failover standby node to become the active one temporarily, until the original node can be restored or brought back online, at which point the services or instances must be failed-back to it in order to restore high availability.<br>N-to-N — A combination of active/active and N+M clusters, N to N clusters redistribute the services, instances or connections from the failed node among the remaining active nodes, thus eliminating (as with active/active) the need for a ‘standby’ node, but introducing a need for extra capacity on all active nodes.</p>
</blockquote><br>双机热备特指基于高可用系统中的两台服务器的热备（或高可用），因两机高可用在国内使用较多，故得名双机热备，双机高可用按工作中的切换方式分为：主-备方式（Active-Standby方式）和双主机方式（Active-Active方式）<br><i>active-active</i><br>很好理解, 用两个完全一样的server, 然后用一个load balancer进行请求的调度.<br><i>active-passive</i><br>active-passive也是两个服务器节点, 但是绝大多数时间是active的那个(或者说primary)进行服务, 当primary服务器出问题, 就使用另一个passive服务器作为备用.<br>7.<br>Why I don’t use JSON ASTs<br><a href="https://www.reddit.com/r/scala/comments/933s2s/why_i_dont_use_json_asts/" target="_blank" rel="external">https://www.reddit.com/r/scala/comments/933s2s/why_i_dont_use_json_asts/</a><br>lihaoyi给出的答案，可参考<br><blockquote><p>If you use uJson, you don’t need to choose:<br>1.Just need case classes? Read/write directly to case classes<br>2.Need an AST? Read/write directly to the AST<br>3.Specifically want some other AST that’s not the uJson AST? You can read/write directly to the circe/play-json/etc. ASTs too<br>4.Don’t need case classes or an AST, and just want to pretty-print JSON? Read/write directly String -&gt; String<br>5.Don’t need any output at all, and just want to parse+validate your JSON? You can do that too.</p>
<p>ASTs are a thing you sometimes want, but they don’t need to be in the critical path if you want some other thing. If you want one, great, if you want something else, a visitor-based library like uJson can give you that something else directly and without fuss.</p>
</blockquote><br>8.<br><a href="https://www.wired.co.uk/article/human-faeces-poo-as-fertiliser" target="_blank" rel="external">https://www.wired.co.uk/article/human-faeces-poo-as-fertiliser</a><br>9.<br>ActivityPub<br><a href="https://activitypub.rocks/" target="_blank" rel="external">https://activitypub.rocks/</a><br>ActivityPub is a decentralized social networking protocol based on the ActivityStreams 2.0 data format. ActivityPub is an official W3C recommended standard published by the W3C Social Web Working Group. It provides a client to server API for creating, updating and deleting content, as well as a federated server to server API for delivering notifications and subscribing to content.<br>附：ActivityPub could be the future<br>10.<br><a href="https://mp.weixin.qq.com/s?__biz=MzAwODY4OTk2Mg==&amp;mid=2652046740&amp;;idx=1&amp;sn=2b01ecd64c516d59f38253f723bcebda" target="_blank" rel="external">https://mp.weixin.qq.com/s?__biz=MzAwODY4OTk2Mg==&amp;mid=2652046740&amp;;idx=1&amp;sn=2b01ecd64c516d59f38253f723bcebda</a><br>PageSpeed Insights (PSI) 是 Google 在全球范围内应用最广的开发者工具之一。PSI 2.0 版本在2018年1月9日发布并且取得了巨大的成功。为了更好地帮助中国地区的开发者并构建一个良好的网页生态环境，今天，我们很高兴地宣布 PSI 在developers.google.cn/speed/pagespeed/insights/ 上线啦！<br>11.<br>传闻阉割版Google要归来了<br>首个独家<br><a href="https://theintercept.com/2018/08/01/google-china-search-engine-censorship/" target="_blank" rel="external">https://theintercept.com/2018/08/01/google-china-search-engine-censorship/</a><br><a href="https://www.theguardian.com/world/2018/aug/02/google-working-on-censored-search-engine-for-china" target="_blank" rel="external">https://www.theguardian.com/world/2018/aug/02/google-working-on-censored-search-engine-for-china</a><br>oschina的大约译文<br><a href="https://www.oschina.net/news/98571/google-china-search-engine-censored-report" target="_blank" rel="external">https://www.oschina.net/news/98571/google-china-search-engine-censored-report</a><br>毫无意外的，相信google会在这位任期内归来，比我预估还是快了点<br>虽然国外面临同行/国会质疑，但是，还是觉得Pichai的回复感人：<br>12.<br>Kafka 2.0重磅发布，新特性独家解读<br><a href="http://www.infoq.com/cn/news/2018/08/kafka2.0-new-features" target="_blank" rel="external">http://www.infoq.com/cn/news/2018/08/kafka2.0-new-features</a><br><blockquote><p>增强在线可进化性<br>因此我们从很早以前开始注意保证在线升级的方便性，在这一次的 2.0.0 版本中，更多相关的属性被加了进来，比如 KIP-268、KIP-279、KIP-283 等等。<br>KIP-268：简化 Kafka Streams 升级过程<br>Kafka Streams 利用 Consumer Rebalance 协议里面的元数据字符串编码诸如任务分配、全局查询、版本升级相关的信息。然而，当编码版本本身改变的时候，就需要进行离线升级。比如之前从 0.10.0 版本向更高级的版本升级的时候，用户就需要将所有的 Streams 程序下线，换上新的 Kafka 版本号，然后在全部重启。<br>KIP-268 利用 version prob 可以使得旧版本的任务分配者告知其他高版本的成员暂时使用旧版本的 Rebalance 元数据编码，这样就可以让用户依然能够通过 rolling bounce 在线升级 Kafka Streams 的版本。而当所有参与的成员全部升级完毕之后，最后一次 rebalance 会自动切换回新版本的元数据编码。<br>KIP-279：修补多次 Kafka 分区主本迁移时的日志分歧问题<br>在升级 Kafka 版本或者做定期系统维护的时候，用户往往需要进行连续的多次 Kafka 分区迁移。在这次发布中我们修补了一个在此过程中可能会出现的一个会导致日志分歧发生的边缘情况。具体方案就是将此前版本中已经加入的主本 epoch 信息扩散到 OffsetForLeaderEpochResponse。如此所有主副本就可以清晰知道自己到底处于当前分区备份的哪一个阶段，从而杜绝因为消息不对等而可能导致的日志分歧。<br>KIP-283：降低信息格式向下转换时的内存消耗<br>在一个多客户端组群的环境下，客户端与服务器端的版本不匹配是常见现象。早在 0.10.0 版本中，Kafka 已经加入了允许不同版本客户端与服务器交互的功能，即高版本的 Kafka 客户端依然可以与低版本的服务器进行数据传导，反之亦然。然而当低版本的消费者客户端和高版本的服务器进行交互时，服务器有时需要将数据向下转换（format down-conversion）成为低版本客户端可以认知的格式后才能发回给消费者。向下转换有两个缺点：<br>丢失了 Kafka 数据零拷贝（zero-copy）的性能优势；<br>向下转换需要额外的大量内存，在极端情况下甚至会导致内存溢出。<br>前者无法避免，但是后者依然可以改进：在即将发布的 2.0 版本中，我们使用了一种新的基于分块（chunking）的向下转换算法，使得需要同时占据的内存需求大幅缩减。这使得高低版本的客户端与服务器之间的交互变得更加有效。<br>在 2.0.0 版本中，我们进一步加强了 Kafka 的可监控性，包括添加了很多系统静态属性以及动态健康指标，比如 KIP-223、KIP-237、KIP-272 等等。<br>KIP-223：加入消费者客户端的领先指标<br>KIP-237：加入更多 Kafka 控制器的健康指标<br>更全面的数据安全支持<br>在 2.0.0 版本里面，我们对此提供了一系列的改进，比如更细粒度的更细粒度的前缀通配符访问控制（KIP-290、KIP-227），支持 SASL/OAUTHBEARER（KIP-255），将委托令牌扩展到管理客户端（KIP-249），等等。<br>KIP-290、KIP-227：细粒度前缀通配符访问控制<br>更多见： <a href="https://www.apache.org/dist/kafka/2.0.0/RELEASE_NOTES.html" target="_blank" rel="external">https://www.apache.org/dist/kafka/2.0.0/RELEASE_NOTES.html</a></p>
</blockquote><br>13.<br>Service Mesh是什么？至今到位的总结<br><a href="http://blog.brucefeng.info/post/what-is-service-mesh" target="_blank" rel="external">http://blog.brucefeng.info/post/what-is-service-mesh</a><br><blockquote><p>Service Mesh能做什么<br>服务发现<br>动态路由<br>负载均衡<br>请求熔断<br>安全通讯<br>多语言支持<br>多协议支持<br>Metric和链路追踪<br>重试<br>2 为什么有微服务了还要Service Mesh<br>但微服务存在以下问题：<br>多语言支持<br>微服务在开始之初就承诺了一个重要的特性，就是不同的微服务可以采用不同的变成语言实现，服务与服务之间通过协议通信。<br>但要实现多语言支持面临很多困难，所以现在大部分公司都是通过统一编程语言来实现。即使部分实现了多语言的微服务，需要美中语言都实现相同的功能服务框架，导致微服务SDK很重，需要实现服务注册发现，服务路由、负载均衡、服务鉴权、服务降级、服务限流等，成本极高。<br>对业务代码侵入<br>业务项目实现微服务需要引入微服务SDK，并进行少量的开发，这些开发是和业务项目耦合的。<br>这种侵入，导致微服务SDK在升级过程中极其痛苦，甚至为因为SDK而导致线上事故，由此带来的升级维护成本较大<br>在我所在的公司，每次进行SDK升级时，都需要公司强制执行，升级过程中又会牵涉到与其他开源组件不兼容的情况，上线后也需要花时间灰度观察。整个公司这样做，其成本可想而知。<br>学习成本高<br>服务注册发现，服务路由、负载均衡、服务鉴权、服务降级、服务限流 这些功能几乎都可以独立成一个项目，实际上很多开源项目也是这样做的。每个组件的学习及熟悉成本都会很大，而业务开发首要面对的问题是业务支持，而不是花较大的精力在基础组件的学习使用上。</p>
</blockquote><br>14.<br><a href="https://www.theatlantic.com/science/archive/2018/08/nasa-culture-optimism-james-webb/566558/?utm_source=feed" target="_blank" rel="external">https://www.theatlantic.com/science/archive/2018/08/nasa-culture-optimism-james-webb/566558/?utm_source=feed</a><br>近年似乎遭受了不少的质疑，作者从NASA最近推迟了自己的一项计划探讨NASA正在经历的一种过于乐观的文化氛围。<br>以下搜狗翻译：<br><blockquote><p>然而，将美国人送上月球的乐观心态并没有改变。2012年的报告称:“当被问及定义‘项目成功’时，我们采访的几乎所有项目经理都回答说，如果一个项目达到了技术性能目标，它就是成功的。”。“没有一个经理提到控制成本和进度增长是衡量成功的重要标准。此外，所有人都说他们的项目是成功的，尽管许多人经历了不利的成本和进度结果。”<br>马丁说NASA的员工称这种认知失调为“哈勃心理学”。“哈勃太空望远镜在1990年到达太空时并没有立即获得成功。这台望远镜研制的时间比承诺的要长得多，超出了预算，发射时主镜出现了一个缺陷，需要多次维修和保养。但是今天，哈勃被认为是国家财富，它混乱的开端已经被人们遗忘。<br>马丁说:“只要你带回——就哈勃望远镜而言——漂亮的照片，你所有的成本超支和日程延误都会被原谅。”。“因为重要的是科学到底是什么，而不是你是如何到达那里的，你是多么的混乱、预算过多还是日程安排过度。这可能有点夸张，但这是一种心态:如果你带回漂亮的照片，所有的罪过都会被原谅。”<br>这是韦伯团队似乎寄希望于的结果。项目官员一遍又一遍地说，韦伯值得等待，因为成本已经上升，终点线已经越来越远。他们希望这种回报会掩盖这个过程的痛苦。<br>研究表明，大多数人都是乐观主义者。在工作环境中，乐观可能是一种激励力量。《消极思维的积极力量》一书的作者、韦尔斯利学院心理学教授朱莉·诺尔姆说:“人们喜欢乐观而不是悲观。”该书认为，对一些人来说，乐观是一种无效的策略。“他们很有信心认为一切都会成功，因此这可以激发他们的积极性。这可能会导致人们尝试一些他们可能不会尝试的东西，因为他们非常积极，肯定会成功。”<br>在团体中，特别是那些致力于共同目标的团体中，乐观的思维可能具有传染性。伦敦大学学院研究人脑乐观倾向的神经科学家塔利·沙洛特说:“如果你让一群人参与一个项目，每个人都有一点偏见——人们的偏见相当温和，只是高估了积极的一点，低估了消极的一点——你把他们放在一起，偏见就会变得更大。”。</p>
</blockquote><br>15.<br><a href="http://www.sciencemag.org/news/2018/07/beyond-silicon-15-billion-us-program-aims-spur-new-types-computer-chips" target="_blank" rel="external">http://www.sciencemag.org/news/2018/07/beyond-silicon-15-billion-us-program-aims-spur-new-types-computer-chips</a><br><blockquote><p>Silicon computer chips have been on a roll for half a century, getting ever more powerful. But the pace of innovation is slowing.<br>Today the U.S. military’s Defense Advanced Research Projects Agency(DARPA) announced dozens of new grants totaling \$75 million in a program that aims to reinvigorate the chip industry with basic research into new designs and materials, such as carbon nanotubes.<br>Over the next few years, the DARPA program, which supports both academic and industry scientists, will grow to $300 million per year up to a total of $1.5 billion over 5 years.</p>
</blockquote><br>16.<br><a href="http://www.discoverdev.io/archive/2018-08-01.html" target="_blank" rel="external">http://www.discoverdev.io/archive/2018-08-01.html</a><br><a href="http://www.discoverdev.io/archive/2018-08-02.html" target="_blank" rel="external">http://www.discoverdev.io/archive/2018-08-02.html</a><br><a href="http://www.discoverdev.io/archive/2018-08-03.html" target="_blank" rel="external">http://www.discoverdev.io/archive/2018-08-03.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.&lt;br&gt;继续 SCALA TIMES 上的分享&lt;br&gt;&lt;a href=&quot;https://mailchi.mp/softwaremill/scala-times-issue-2607957&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://mailchi.mp/softwaremill/scala-times-issue-2607957&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://manuel.bernhardt.io/2018/07/20/akka-anti-patterns-java-serialization/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Akka anti-patterns: Java serialization&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://mostafa-asg.github.io/post/practical-scala-cats-applicative-functor/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Practical Cats: Functor and Applicative&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://kubuszok.com/2018/implicits-type-classes-and-extension-methods-part-4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Implicits, type classes, and extension methods, part 4: understanding implicits&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://lampwww.epfl.ch/~doeraene/thesis/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cross-Platform Language Design&lt;/a&gt;&lt;br&gt;2.&lt;br&gt;Be Nice And Write Stable Code&lt;br&gt;&lt;a href=&quot;http://technosophos.com/2018/07/04/be-nice-and-write-stable-code.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://technosophos.com/2018/07/04/be-nice-and-write-stable-code.html&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="weeklyreading" scheme="http://thomaslau.github.io/tags/weeklyreading/"/>
    
  </entry>
  
  <entry>
    <title>Spring + Hikari的一个SQLFeatureNotSupportedException问题</title>
    <link href="http://thomaslau.github.io/2018/07/06/2018-07-06-a-ridiculous-Ex-of-Hikari/"/>
    <id>http://thomaslau.github.io/2018/07/06/2018-07-06-a-ridiculous-Ex-of-Hikari/</id>
    <published>2018-07-05T17:09:07.000Z</published>
    <updated>2018-07-05T17:00:55.712Z</updated>
    
    <content type="html"><![CDATA[<p>1.<br><i>题记：</i><br>遇到个使用Spring xml方式配置Hikari，因为一个Bean的命名原因导致爆出 SQLFeatureNotSupportedException，追溯原因过程其实很简单，但是找到问题所在确实浪费不少时间。<br>2.<br>先看源码。<br>由于某些原因，只能使用 Spring XML方式配置 Hikari的 datasource，我自己使用jdk 1.7版本，不过粗看了下适用1.8+的Hikari代码，应该也是存在这个问题的。<br><a id="more"></a><br>参考Hikari官方的参数配置，如果在你的xml里这么配置 Hikari的 datasource<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.zaxxer.hikari.HikariDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maximumPoolSize"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minimumIdle"</span> <span class="attr">value</span>=<span class="string">"2"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;property name="dataSource" &gt; &lt;null/&gt;&lt;/property&gt; --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionTestQuery"</span> <span class="attr">value</span>=<span class="string">"select 1 "</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSourceProperties"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"cachePrepStmts"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"prepStmtCacheSize"</span>&gt;</span>250<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"prepStmtCacheSqlLimit"</span>&gt;</span>2048<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"useServerPrepStmts"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>那么，当你的程序运行到到从该dataSource取connection时候，很可能会遇到下面这样的异常：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Caused by: java.sql.SQLFeatureNotSupportedException</div><div class="line">    at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:119)</div><div class="line">    at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:341)</div><div class="line">    at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:193)</div><div class="line">    at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:428)</div><div class="line">    at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:499)</div><div class="line">    at com.zaxxer.hikari.pool.HikariPool.&lt;init&gt;(HikariPool.java:112)</div><div class="line">    at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:97)</div><div class="line">    at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:111)</div><div class="line">    at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:77)</div><div class="line">    ... 7 more</div></pre></td></tr></table></figure></p>
<p>即这个dataSource不能使用。<br>我先说一下解决办法：<br>这个异常其实是 id=”dataSource”/ref=”dataSource” 导致的，如果改一下名字，任何非 dataSource的名字，就会神奇的发现，程序正常运行了。<br>3.<br>原因呢？<br>看 <a href="https://github.com/brettwooldridge/HikariCP/blob/dev/src/main/java/com/zaxxer/hikari/HikariDataSource.java##L133" target="_blank" rel="external">HikariDataSource.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** &#123;<span class="doctag">@inheritDoc</span>&#125; */</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">(String username, String password)</span> <span class="keyword">throws</span> SQLException</span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> SQLFeatureNotSupportedException();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>发现这里并没有错，的的确确该抛异常了，所以，正常的 getConnection()不是在这个类/方法里。<br>实际上，正常是在 Hikari的 <a href="https://github.com/brettwooldridge/HikariCP/blob/dev/src/main/java/com/zaxxer/hikari/util/DriverDataSource.java#L123" target="_blank" rel="external">DriverDataSource</a> 这个类里<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">return</span> driver.connect(jdbcUrl, driverProperties);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">(String username, String password)</span> <span class="keyword">throws</span> SQLException</span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">return</span> getConnection();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>那么是什么导致 DataSource使用了错误的实现类？<br>从HikariDataSource构造函数入口，到 getConnection 看起，追踪到 -&gt; <a href="https://github.com/brettwooldridge/HikariCP/blob/dev/src/main/java/com/zaxxer/hikari/pool/HikariPool.java#L106" target="_blank" rel="external">HikariPool(this)</a> -&gt; <a href="https://github.com/brettwooldridge/HikariCP/blob/dev/src/main/java/com/zaxxer/hikari/pool/PoolBase.java#L88" target="_blank" rel="external">PoolBase(final HikariConfig config)</a> -&gt; <a href="https://github.com/brettwooldridge/HikariCP/blob/dev/src/main/java/com/zaxxer/hikari/pool/PoolBase.java#L323" target="_blank" rel="external">initializeDataSource()</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initializeDataSource</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">final</span> String jdbcUrl = config.getJdbcUrl();</div><div class="line">   <span class="keyword">final</span> String username = config.getUsername();</div><div class="line">   <span class="keyword">final</span> String password = config.getPassword();</div><div class="line">   <span class="keyword">final</span> String dsClassName = config.getDataSourceClassName();</div><div class="line">   <span class="keyword">final</span> String driverClassName = config.getDriverClassName();</div><div class="line">   <span class="keyword">final</span> Properties dataSourceProperties = config.getDataSourceProperties();</div><div class="line"></div><div class="line">   DataSource dataSource = config.getDataSource();</div><div class="line">   <span class="keyword">if</span> (dsClassName != <span class="keyword">null</span> &amp;&amp; dataSource == <span class="keyword">null</span>) &#123;</div><div class="line">      dataSource = createInstance(dsClassName, DataSource.class);</div><div class="line">      PropertyElf.setTargetFromProperties(dataSource, dataSourceProperties);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (jdbcUrl != <span class="keyword">null</span> &amp;&amp; dataSource == <span class="keyword">null</span>) &#123;</div><div class="line">      dataSource = <span class="keyword">new</span> DriverDataSource(jdbcUrl, driverClassName, dataSourceProperties, username, password);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (dataSource != <span class="keyword">null</span>) &#123;</div><div class="line">      setLoginTimeout(dataSource);</div><div class="line">      createNetworkTimeoutExecutor(dataSource, dsClassName, jdbcUrl);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">this</span>.dataSource = dataSource;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里似乎看起来正常，但是，如果我们仔细看 DataSource dataSource = config.getDataSource()，也就是说 HikariConfig 其实有 get/setDataSource属性<br>再看看我们xml里定义的bean，bean id=”dataSource” class=”com.zaxxer.hikari.HikariDataSource”<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HikariDataSource</span> <span class="keyword">extends</span> <span class="title">HikariConfig</span> <span class="keyword">implements</span> <span class="title">DataSource</span>, <span class="title">Closeable</span></span>&#123;</div><div class="line">    ....</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HikariConfig</span> <span class="keyword">implements</span> <span class="title">HikariConfigMXBean</span></span></div><div class="line">&#123;</div><div class="line">   ...</div><div class="line">   <span class="keyword">private</span> DataSource dataSource;</div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Set a &#123;<span class="doctag">@link</span> DataSource&#125; for the pool to explicitly wrap.  This setter is not</div><div class="line">    * available through property file based initialization.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> dataSource a specific &#123;<span class="doctag">@link</span> DataSource&#125; to be wrapped by the pool</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span></span></div><div class="line">   &#123;</div><div class="line">      <span class="keyword">this</span>.dataSource = dataSource;</div><div class="line">   &#125;</div><div class="line">   ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>发现没有，HikariDataSource 其实还有一个 setDataSource 属性，即我们xml里定义的 id=”dataSource” 其实还是会将自己注入给自己的！<br>这也就是为什么上文中 initializeDataSource 方法里，最终实例化的不是 DriverDataSource 而是自己。</p>
<p>所以，改一个名字就可以了。</p>
<hr>
<p>4.<br>关于 SpringBoot<br>这令我好奇，默认支持使用Hikari作为datasource的SpringBoot是怎么实例化HikariDataSource？会有上述问题吗？<br>这部分代码在<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration</div><div class="line">    <span class="meta">@ConditionalOnClass</span>(HikariDataSource.class)</div><div class="line">        <span class="meta">@ConditionalOnProperty</span>(name = <span class="string">"spring.datasource.type"</span>, havingValue = <span class="string">"com.zaxxer.hikari.HikariDataSource"</span>, matchIfMissing = <span class="keyword">true</span>)</div><div class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Hikari</span> <span class="keyword">extends</span> <span class="title">DataSourceConfiguration</span> </span>&#123;</div><div class="line">            <span class="meta">@Bean</span></div><div class="line">            <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.hikari"</span>)</div><div class="line">            <span class="function"><span class="keyword">public</span> HikariDataSource <span class="title">dataSource</span><span class="params">(DataSourceProperties properties)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> createDataSource(properties, HikariDataSource.class);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration</div><div class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">createDataSource</span><span class="params">(DataSourceProperties properties,</span></span></div><div class="line">            Class&lt;? extends DataSource&gt; type) &#123;</div><div class="line">        <span class="keyword">return</span> (T) properties.initializeDataSourceBuilder().type(type).build();</div><div class="line">    &#125;</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>不深入了，看下去，反射生成，并且未设置datasource属性，即实际是没有这个问题的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.&lt;br&gt;&lt;i&gt;题记：&lt;/i&gt;&lt;br&gt;遇到个使用Spring xml方式配置Hikari，因为一个Bean的命名原因导致爆出 SQLFeatureNotSupportedException，追溯原因过程其实很简单，但是找到问题所在确实浪费不少时间。&lt;br&gt;2.&lt;br&gt;先看源码。&lt;br&gt;由于某些原因，只能使用 Spring XML方式配置 Hikari的 datasource，我自己使用jdk 1.7版本，不过粗看了下适用1.8+的Hikari代码，应该也是存在这个问题的。&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="weeklyreading" scheme="http://thomaslau.github.io/tags/weeklyreading/"/>
    
  </entry>
  
  <entry>
    <title>Many Links 0705</title>
    <link href="http://thomaslau.github.io/2018/07/05/2018-07-05-many_links_0705/"/>
    <id>http://thomaslau.github.io/2018/07/05/2018-07-05-many_links_0705/</id>
    <published>2018-07-04T17:09:07.000Z</published>
    <updated>2018-07-04T17:40:04.495Z</updated>
    
    <content type="html"><![CDATA[<p>1.<br>首先推荐来自今天的 <a href="https://wanqu.co/issues/1205?s=/issues" target="_blank" rel="external">湾区日报</a><br>从最初坚持每天5篇分享至今已经1205期了，点赞作者.<br>  1)<a href="https://wanqu.co/a/6700/2018-07-04-who-has-the-best-business-model-and-its-not-google-or-facebook.html?s=/issues/1205" target="_blank" rel="external">最好的商业模式</a>, 微软、苹果、Netflix：花钱的用户是用产品的人；谷歌与FB：花钱的是广告商，用产品的人免费；Amazon、腾讯、阿里：小比例的超级用户花大钱，间接让整个生态变得更好。哪种商业模式好？<br>  2)Firefox + Pocket：打造更好的文章推荐引擎。恐怕很多人不知道Pocket已经被Mozilla收购了。如果你有使用Firefox，打开一个空白新窗口就会看到Pocket推荐的文章，这是根据你使用Firefox的本地浏览记录推荐的。<br>2.<br>Microsoft: The Early Days: <a href="http://www.memecentral.com/mylife.htm" target="_blank" rel="external">http://www.memecentral.com/mylife.htm</a><br>这篇也是湾日的推荐。<br>1981年，作者和其老板Charles Simonyi从计算机人机交互界面发展先驱的施乐走出，经同事即3Com创始人的建议，一起成为微软第77位员工，当时微软刚要开始做应用程序，开始山寨Mac上的电子表格，后来开始做“长得像电子表格的字处理系统”，也就是Word。<br>Word，成为了之后数年的Revenue Bomb， 难怪当年求伯君把自己关在张旋龙（金山创始人，张小龙的哥哥，不是八卦里的微信张小龙）为他在深圳包的一个房间里，日夜兼程写出了字处理系统WPS， 不过当初目标据说是为了超越当时尚火WordStar，WordStar兼容DOS，不过90年后被MS Word超越。<br>求伯君后来吐露，虽然WPS每年收入数千万（1993年前后），但是自己只是个给老板打工的。<br><a id="more"></a><br>3.<br>接 2.<br>文中提到的Charles Simonyi，中文译作 查尔斯·西蒙尼，微软 Word/Excel 开发的Leader，安迪·格鲁夫的老乡，曾经微软首席架构师，高智囊团的核心，所见即所得（What you see is What you get）的发明人。<br>不仅上述实际产出，图形用户界面等，查尔斯·西蒙尼还给微软带去了:<br>1）开发应用软件的经验，当时MS不具备的系统层之上的软件应用经验。<br>2）关于程序员生产力的理论，被Gates称为“软件工厂”理论，也是数年后逃离微软的人吐槽的金字塔层级理论。<br>我曾在学校图书馆角落里看过一本介绍VB之父Alan Cooper的书，里面提到了西蒙尼非比寻常的兴趣:<br>事实上，<a href="https://zh.wikipedia.org/wiki/%E5%A4%AA%E7%A9%BA%E6%B8%B8%E5%AE%A2" target="_blank" rel="external">历史上前6位太空游客</a>，两位就是曾从事程序员的职业，其他四位或是电子计算机相关专业或是创建计算机相关的公司/投资。最让国内程序员熟悉的可能就是一位生于南非的IT界的企业家，马克·沙特尔沃思，Canonical公司创立者，Canonical就是组织创造了Ubuntu的公司，所以到了第二年10月份，知道Ubuntu组织免费提供 Ubuntu系统光盘，那个使用google还可以畅行无阻的时代，我就申请了一个32位的系统盘，珍藏着。<br>4.<br>the hidden costs of touchscreens<br><a href="https://medium.com/@caseorganic/why-do-we-keep-building-cars-with-touchscreens-alt-the-hidden-lives-of-touchscreens-55faf92799bf" target="_blank" rel="external">https://medium.com/@caseorganic/why-do-we-keep-building-cars-with-touchscreens-alt-the-hidden-lives-of-touchscreens-55faf92799bf</a><br>触摸屏真的方便了人们的操作了吗？不是所有场景都提高效率的，有的收银台的POS机变成平板电脑，收银员效率下降不少，得眼睛看屏幕才能操作。<br>我似乎理解了为什么这么多年过去了，国内许多大商场依旧是没有触摸屏的收银台，但更可能的原因是IBM的小型机及其系统确实太昂贵了。<br>其实，我确实更喜欢现在国内一些新型零售的触摸自助结账系统，不用排队，更免去了被花式插队带来的愤怒。<br>但这么做，似乎也淘汰了一批收银员，而这些人中，许多可能是出来打点工，给家庭减少财务负担的，还未到退休年纪或刚到大城市尚未着落的女性。<br>5.<br>The Story Behind How Pocket Hit 20M Users with 20 People<br><a href="http://firstround.com/review/the-story-behind-how-pocket-hit-20m-users-with-20-people" target="_blank" rel="external">http://firstround.com/review/the-story-behind-how-pocket-hit-20m-users-with-20-people</a><br>创立八年，而前四年都是一个人在单打独斗<br>记得13年就在使用pocket，不过那时确实困惑了“read it later”和packet是哪个好久？完全没想到居然是一个人在运营<br>6.<br>大概上个月爆出的 新版JDK += 操作符的副作用<br>很详细的：JDK 9/10/11: Side Effects from += on Java String<br><a href="http://marxsoftware.blogspot.com/2018/06/JDK-8204322.html" target="_blank" rel="external">http://marxsoftware.blogspot.com/2018/06/JDK-8204322.html</a><br><a href="https://stackoverflow.com/questions/50683786/why-does-arrayidx-a-increase-idx-once-in-java-8-but-twice-in-java-9-and-1" target="_blank" rel="external">https://stackoverflow.com/questions/50683786/why-does-arrayidx-a-increase-idx-once-in-java-8-but-twice-in-java-9-and-1</a><br><a href="https://bugs.openjdk.java.net/browse/JDK-8204322" target="_blank" rel="external">https://bugs.openjdk.java.net/browse/JDK-8204322</a><br><a href="http://mail.openjdk.java.net/pipermail/compiler-dev/2018-June/011997.html" target="_blank" rel="external">http://mail.openjdk.java.net/pipermail/compiler-dev/2018-June/011997.html</a><br>7.<br>是否遇到过 “javax.net.ssl.SSLException: Received fatal alert: protocol_version”的异常？<br>实际上这是JDK1.7默认支持的TLS版本导致的异常，JDK1.7+ 默认支持的TLS版本不是TLSv1.2<br><a href="https://scnuwang.github.io/2017/10/11/JDK1.7%E9%BB%98%E8%AE%A4%E6%94%AF%E6%8C%81%E7%9A%84TLS%E7%89%88%E6%9C%AC%E5%AF%BC%E8%87%B4%E5%BC%82%E5%B8%B8/" target="_blank" rel="external">https://scnuwang.github.io/2017/10/11/JDK1.7%E9%BB%98%E8%AE%A4%E6%94%AF%E6%8C%81%E7%9A%84TLS%E7%89%88%E6%9C%AC%E5%AF%BC%E8%87%B4%E5%BC%82%E5%B8%B8/</a><br>查看JDK1.7+ 支持的协议<br><a href="http://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#SSLContext" target="_blank" rel="external">http://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#SSLContext</a><br>解决方案：在发送请求前设置系统属性：System.setProperty(“https.protocols”, “TLSv1.2”);<br><a href="https://stackoverflow.com/questions/9749339/does-tomcat-support-tls-v1-2" target="_blank" rel="external">https://stackoverflow.com/questions/9749339/does-tomcat-support-tls-v1-2</a><br>8.<br><a href="http://jaminzhang.github.io/os/Linux-IO-Monitoring-and-Deep-Analysis/" target="_blank" rel="external">http://jaminzhang.github.io/os/Linux-IO-Monitoring-and-Deep-Analysis/</a><br>Linux IO 监控与深入分析<br>作者总结的很详细，才知道原来原生的还有这么多命令可用，这些命令还可以这么用。<br><blockquote><p><i><strong>1) 系统级 IO 监控</strong></i>:  iostat -xdm 1<br>如果 %iowait 的值过高，表示磁盘存在 I/O 瓶颈。<br>如果 %util 接近 100%，说明产生的 I/O 请求太多，I/O 系统已经满负荷，该磁盘可能存在瓶颈。<br>如果 svctm 比较接近 await，说明 I/O 几乎没有等待时间；<br>如果 await 远大于 svctm，说明 I/O 队列太长，I/O 响应太慢，则需要进行必要优化。<br>如果 avgqu-sz 比较大，也表示有大量 IO 在等待。<br><i><strong>2) 进程级 IO 监控</strong></i>    iotop 和 pidstat<br>pidstat -d 1<br>pidstat -u -r -d -t 1<br>可以回答系统级 IO 监控不能回答的 2 个问题<br>距离业务层相对较近(例如，可以统计进程的读写量)<br>但是也没有办法跟业务层的 read, write 联系在一起，同时颗粒度较粗，没有办法告诉你，当前进程读写了哪些文件？耗时？大小？<br><i><strong>3) 业务级 IO 监控</strong></i>    ioprofile<br>ioprofile 命令本质上是 lsof + strace ioprofile 可以回答你以下三个问题:<br>当前进程某时间内,在业务层面读写了哪些文件(read, write)？<br>读写次数是多少？(read, write 的调用次数)<br>读写数据量多少？(read, write 的 byte 数)<br>注: ioprofile 仅支持多线程程序,对单线程程序不支持. 对于单线程程序的 IO 业务级分析，strace 足以。<br>总结： ioprofile 本质上是 strace，因此可以看到 read，write 的调用轨迹，可以做业务层的 IO 分析(mmap 方式无能为力)<br><i><strong>4) 文件级 IO 监控</strong></i><br>文件级 IO 监控可以配合/补充”业务级和进程级” IO 分析<br>文件级 IO 分析，主要针对单个文件，回答当前哪些进程正在对某个文件进行读写操作<br>lsof 或者 ls /proc/pid/fd<br>inodewatch.stp<br>lsof 告诉你当前文件由哪些进程打开</p>
</blockquote><br>9.<br>jdk11比10包含哪些特性？<br><a href="https://www.oschina.net/news/97145/jdk-11-jep-332?from=20180617" target="_blank" rel="external">https://www.oschina.net/news/97145/jdk-11-jep-332?from=20180617</a><br>列出了相关JEP，可以点击原文查看，原文含详细链接<br><blockquote><p>JDK 11 已确定了 15 个 JEP，下面是完整的列表：<br>181: 基于嵌套的访问控制(Nest-Based Access Control)<br>309: 动态类文件常量(Dynamic Class-File Constants)<br>315: 改进 Aarch64 Intrinsics(Improve Aarch64 Intrinsics)<br>318: Epsilon — 一个无操作的垃圾收集器(Epsilon: A No-Op Garbage Collector)<br>320: 删除 Java EE 和 CORBA 模块(Remove the Java EE and CORBA Modules)<br>321: HTTP Client (Standard)<br>323: 用于 Lambda 参数的局部变量语法(Local-Variable Syntax for Lambda Parameters)<br>324: Curve25519 和 Curve448 算法的密钥协议(Key Agreement with Curve25519 and Curve448)<br>327: Unicode 10<br>328: Flight Recorder<br>329: ChaCha20 和 Poly1305 加密算法(ChaCha20 and Poly1305 Cryptographic Algorithms)<br>330: 启动单一文件的源代码程序(Launch Single-File Source-Code Programs)<br>331: Low-Overhead Heap Profiling<br>333: 处于试验阶段的可伸缩低延迟垃圾收集器 ZGC: A Scalable Low-Latency Garbage Collector (Experimental)<br>336: 弃用 Pack200 工具和 API(Deprecate the Pack200 Tools and API)</p>
</blockquote><br>10.<br>Kafka 源码解析之 Consumer 如何加入一个 Group（六）<br><a href="http://matt33.com/2017/10/22/consumer-join-group/" target="_blank" rel="external">http://matt33.com/2017/10/22/consumer-join-group/</a><br>推荐看作者总结的 Kafka 源码解析 系列<br>11.<br>数据库事务隔离标准分析<br><a href="https://zhuanlan.zhihu.com/p/38214642" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/38214642</a><br>一直记不住的数据库隔离级别：<br><blockquote><p>本文首先介绍了ANSI基于“异象”的隔离级别标准，并分析了其狭义和广义的描述；然后介绍了基于锁的隔离级别标准，与ANSI隔离级别进行了比较；最后分析快照隔离级别，在ANSI隔离级别标准基础上，提出了两种新的“异象”，得出快照隔离在几种标准隔离级别特性中的位置。<br>ANSI SQL-92标准(<a href="http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt)将数据库并发事务间的隔离性行为划分为3种&quot;异象(phenomena)&quot;，从低到高的自然语言定义依次为：" target="_blank" rel="external">http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt)将数据库并发事务间的隔离性行为划分为3种&quot;异象(phenomena)&quot;，从低到高的自然语言定义依次为：</a><br><i><strong>P1 脏读 (“Dirty read”)</strong></i>: SQL-transaction T1 modifies a row. SQL- transaction T2 then reads that row before T1 performs a COMMIT. If T1 then performs a ROLLBACK, T2 will have read a row that was never committed and that may thus be considered to have never existed.<br><i><strong>P2 不可重复读 (“Non-repeatable read”)</strong></i>: SQL-transaction T1 reads a row. SQL- transaction T2 then modifies or deletes that row and performs a COMMIT. If T1 then attempts to reread the row, it may receive the modified value or discover that the row has been deleted.<br><i><strong>P3 幻读 (“Phantom”)</strong></i>: SQL-transaction T1 reads the set of rows N that satisfy some <search condition="">. SQL-transaction T2 then executes SQL-statements that generate one or more rows that satisfy the <search condition=""> used by SQL-transaction T1. If SQL-transaction T1 then repeats the initial read with the same <search condition="">, it obtains a different collection of rows.<br><i><strong>P1/P2/P3的形式化描述</strong></i><br>根据标准文档的定义，可以将这三种异象使用形式化语言描述如下，称为A1/A2/A3（其中w1[x]表示事务1写入记录x，r1表示事务1读取记录x，c1表示事务1提交，a1表示事务1回滚，r1[P]表示事务1按照谓词P的条件读取若干条记录，w1[y in P]表示事务1写入记录y满足谓词P的条件）：</search></search></search></p>
<p>A1 脏读：w1[x] … r2[x] … (a1 and c2 in any order)<br>A2 不可重复读：r1[x] … w2[x] … c2 … r1[x] … c1<br>A3 幻读：r1[P] … w2[y in P] … c2 … r1[P] … c1<br>上述A1/A2/A3形式化描述，根据标准定义的P1/P2/P3异象的自然语言描述转化而来，但是ANSI标准定义的异象只针对了单个记录或谓词描述，对于多条记录需满足业务一致性的场景并未能覆盖（比如两个账户间转账要求余额总和不变），举例如下：<br>H1：r1[x=50]w1[x=10] r2[x=10]r2[y=50] c2 r1[y=50]w1[y=90] c1<br>事务1执行账户x向账户y转账40，事务2读取到了进行到了一半的事务1（Read Uncommitted），破坏了余额总和的一致性<br>因为事务1并未回滚，H1的行为并不符合A1的形式化定义<br>H2：r1[x=50] r2[x=50]w2[x=10]r2[y=50]w2[y=90] c2 r1[y=90] c1<br>事务2执行账户x向账户y转账40，事务1在事务2提交前后读取到了破坏余额总和一致性的数据（Unrepeatable Read）<br>因为事务1并未重复读取记录x，H2的行为并不符合A2的形式化定义<br>H3：r1[P] w2[insert y to P] r2[z] w2[z] c2 r1[z] c1<br>事务2增加新雇员并更新雇员总数z，事务1在事务2提交前后读取到了破坏雇员列表与雇员总数的一致性的数据（Phantom）<br>因为事务1并未重复读取谓词P指定的数据集合，H3的行为并不符合A3的形式化定义.<br>因为要增强对上述H1/H2/H3异象的约束，论文将A1/A2/A3的形式化描述称为“狭义的描述(strict interpretations)”，然后增加了“广义的描述(broad interpretation)”，去除了strict interpretations中对事务提交、回滚和数据读取范围的约束，只保留事务之间读写的时序关系，即事务之间只要包含如下时序的操作，即可能产生包含H1/H2/H3在内的异象，如下：<br>P1 脏读：w1[x] … r2[x] … ((c1 or a1) and (c2 or a2) in any order)<br>P2 不可重复读：r1[x] … w2[x] … ((c1 or a1) and (c2 or a2) in any order)<br>P3 幻读：r1[P] … w2[y in P] … ((c1 or a1) and (c2 or a2) in any order)<br>在上述形式化描述下，禁止P1即可禁止H1，禁止P1/P2即可禁止H2，禁止P1/P2/P3即可禁止H3。至此，ANSI标准隔离级别定义的三种异象，可以被扩展为适用范围更广的的P1/P2/P3的形式化定义，这种隔离级别定义被论文称之为“phenomena-based”，即基于“异象”的隔离级别定义。</p>
</blockquote><br>可以惨考这篇文章，实例分析，加深印象<br>《A Critique of ANSI SQL Isolation Levels》论文实验<br><a href="https://zhuanlan.zhihu.com/p/38334464" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/38334464</a><br>12.<br>国内Elasticsearch早期布道者 Medcl 的新书计划：Elastic 搜索开发实战<br><a href="https://elastic-search-in-action.medcl.com/0.1_abstract.html" target="_blank" rel="external">https://elastic-search-in-action.medcl.com/0.1_abstract.html</a><br>13.<br>很不错的功能: Kafka 1.1新功能：数据的路径间迁移<br><a href="http://www.cnblogs.com/huxi2b/p/9214592.html" target="_blank" rel="external">http://www.cnblogs.com/huxi2b/p/9214592.html</a><br>14.<br>JDK 11中将会加入令人惊叹的ZGC(不到2毫秒)<br><a href="http://openjdk.java.net/jeps/333" target="_blank" rel="external">http://openjdk.java.net/jeps/333</a><br><a href="https://zhuanlan.zhihu.com/p/38348775?group_id=993277353635659776" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/38348775?group_id=993277353635659776</a><br>15.<br><a href="http://vmlens.com/articles/3_tips_volatile_fields/" target="_blank" rel="external">http://vmlens.com/articles/3_tips_volatile_fields/</a><br>艺海拾贝：3 Tips for volatile fields in java<br><blockquote><p>Volatile fields are one of built-in mechanism to write multi-threaded java.<br>Volatile variables are not cached in registers or in caches where they are hidden from other processors, so a read of a volatile variable always returns the most recent write by any thread. … The visibility effects of volatile variables extend beyond the value of the volatile variable itself. When thread A writes to a volatile variable and subsequently thread B reads that same variable, the values of all variables that were visible to A prior to writing to the variable become visible to B after reading the volatile variable.<br>— Java Concurrency in Practice - Brian Goetz, et al.<br>1) Use volatile fields when writes do not depend on its current value.<br>2) Use volatile fields for reading and locks for writing<br>3) Use with JDK 9 VarHandle for atomic operations.</p>
</blockquote><br>16.<br>来点轻松的：<br>计算机领域有哪些经典的典故或笑话？<br><a href="https://www.zhihu.com/question/20034686" target="_blank" rel="external">https://www.zhihu.com/question/20034686</a><br>看到一个有趣的链接：<br>RegEx match open tags except XHTML self-contained tags<br><a href="https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags" target="_blank" rel="external">https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags</a><br>第一个高赞答案分析了一堆理由，然后作者大概是 苦正则表达式匹配 html久已，还故意留了一段 血腥字体 的示例<br>可怜的 stackoverflow 编辑 或许是苦于“Please do not flag it for our attention”特意加了一段 网页显示没问题，原文就是这样 的声明。<br>开头还加了一段 lock 讨论的声明，太多讨论无关主题<br><i><strong>向 stackoverflow 对技术对社区质量负责任的态度致敬。</strong></i></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.&lt;br&gt;首先推荐来自今天的 &lt;a href=&quot;https://wanqu.co/issues/1205?s=/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;湾区日报&lt;/a&gt;&lt;br&gt;从最初坚持每天5篇分享至今已经1205期了，点赞作者.&lt;br&gt;  1)&lt;a href=&quot;https://wanqu.co/a/6700/2018-07-04-who-has-the-best-business-model-and-its-not-google-or-facebook.html?s=/issues/1205&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;最好的商业模式&lt;/a&gt;, 微软、苹果、Netflix：花钱的用户是用产品的人；谷歌与FB：花钱的是广告商，用产品的人免费；Amazon、腾讯、阿里：小比例的超级用户花大钱，间接让整个生态变得更好。哪种商业模式好？&lt;br&gt;  2)Firefox + Pocket：打造更好的文章推荐引擎。恐怕很多人不知道Pocket已经被Mozilla收购了。如果你有使用Firefox，打开一个空白新窗口就会看到Pocket推荐的文章，这是根据你使用Firefox的本地浏览记录推荐的。&lt;br&gt;2.&lt;br&gt;Microsoft: The Early Days: &lt;a href=&quot;http://www.memecentral.com/mylife.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.memecentral.com/mylife.htm&lt;/a&gt;&lt;br&gt;这篇也是湾日的推荐。&lt;br&gt;1981年，作者和其老板Charles Simonyi从计算机人机交互界面发展先驱的施乐走出，经同事即3Com创始人的建议，一起成为微软第77位员工，当时微软刚要开始做应用程序，开始山寨Mac上的电子表格，后来开始做“长得像电子表格的字处理系统”，也就是Word。&lt;br&gt;Word，成为了之后数年的Revenue Bomb， 难怪当年求伯君把自己关在张旋龙（金山创始人，张小龙的哥哥，不是八卦里的微信张小龙）为他在深圳包的一个房间里，日夜兼程写出了字处理系统WPS， 不过当初目标据说是为了超越当时尚火WordStar，WordStar兼容DOS，不过90年后被MS Word超越。&lt;br&gt;求伯君后来吐露，虽然WPS每年收入数千万（1993年前后），但是自己只是个给老板打工的。&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="weeklyreading" scheme="http://thomaslau.github.io/tags/weeklyreading/"/>
    
  </entry>
  
  <entry>
    <title>Many Links 0619</title>
    <link href="http://thomaslau.github.io/2018/06/19/2018-06-19-many_links_0619/"/>
    <id>http://thomaslau.github.io/2018/06/19/2018-06-19-many_links_0619/</id>
    <published>2018-06-18T16:09:07.000Z</published>
    <updated>2018-06-19T17:41:12.915Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>NON-Tech</em></strong><br>1.<br>看这篇文章，体会下感受下生在互联网时代，20世纪形成的政治体制正在变得“古老”的路上。<br>毕竟，现在有多少人会觉得 马基雅弗利的政治“智慧”没有过时？<br>道德危机的起源 The Making of a Moral Crisis<br>“many-chambered heart of the internet”(不知怎么翻译) 如何将特朗普政府的家庭分离政策变为另一种丑闻<br><a href="https://www.theatlantic.com/technology/archive/2018/06/the-making-of-a-moral-problem/563114/" target="_blank" rel="external">https://www.theatlantic.com/technology/archive/2018/06/the-making-of-a-moral-problem/563114/</a><br><a href="https://translate.google.com/translate?sl=auto&amp;tl=zh-CN&amp;js=y&amp;;prev=_t&amp;;hl=zh-CN&amp;ie=UTF-8&amp;u=https%3A%2F%2Fwww.theatlantic.com%2Ftechnology%2Farchive%2F2018%2F06%2Fthe-making-of-a-moral-problem%2F563114%2F&amp;edit-text=&amp;authuser=0" target="_blank" rel="external">如果没时间可以速读谷歌翻译出来的中文</a>，下面是我从google翻译里摘抄部分<br><a id="more"></a><br><blockquote><p>像劳拉布什所说的那样，2岁以下的孩子已经从父母那里被带走，转移到“二十世纪二战日本美国拘禁营”的“令人毛骨悚然的”设施。 家庭正在分居。 孩子们正在笼子里的金属箔毯下睡觉。<br>这个故事受到如此多关注的主要原因很简单：这太可怕了。 当然， 大多数显示哭泣孩子的图像或者听到他们录音的孩子 的美国选民都呼吁为他们的父母提供强烈的消极反应。<br>但在当今分裂和陌生的媒体环境中，更难以回答的问题是如此多的人最终看到这些图像并听到这些故事。 毕竟，这可能是美国边界上最臭名昭着的不公正，但这不是第一次。<br>…<br>美国人喜欢相信透明度，就像路易斯·布兰代斯法官曾经说的那样，“阳光据说是最好的消毒剂”。但是阳光不再仅仅来自报纸头版或电视广播塔。 这是Facebook视频和模因，微博风暴和病毒图片。 虽然这并不是说这个故事只是从互联网的角落冒出来的。 移民局和调查记者已经上了一年多。 参议员卡马拉哈里斯在12月首次谈到这件事。 但直到5月底才成为该国最大的新闻。 怎么样？<br>…<br>但是没有任何来自边界的报道可以说明发生了什么。 有不祥的报道，但不是真实的人的考验故事。<br>然后在纽约时报上刊登了4月20日的一则重磅炸弹 。 Caitlin Dickerson写道：“自从10月份以来，已有超过700名儿童被成人自称为父母，其中包括100多名4岁以下的儿童。 现在是米里安。<br>…<br>然后，在5月15日的听证会上，参议员哈里斯向国土安全部负责人Kirstjen Nielsen提出了父母分居的答案，这在政治 出版物上引发了另一阵新闻报道。 最终，他们的交流将被NowThisPolitics打包成一个病毒视频，该视频在Facebook上分享超过7.7万次，但直到5月28日才会发布。<br>与此同时，亚利桑那共和国专栏作家EJ Montini突显了1,500名儿童的故事， 此后他的作品被“今日美国”杂志联合播出。这似乎是引发正义狂热的比赛。<br>…<br>当威斯康星州议会候选人凯茜迈耶斯将其发布到她的Facebook上时，这篇评论文章开始通过Reddit的r /政治渗透，然后通过自由世界起飞。 在Twitter上，前美国检察官Preet Bharara在Twitter上发表推文称：“在美国，边境婴幼儿的父母强行分离出什么更可耻的东西？ 然后，失去这些孩子的踪迹？“它有8万个喜欢和超过26,000转推。<br>…<br>然而，值得注意的是，随着新闻周期通过互联网的众多心脏，它没有推动这个国家的分化。 事实上，已经出现了一个很大的共识： 三分之二的美国人不希望家庭分离继续下去 ，包括各种性别，种族，年龄和教育水平的多数群体。 所有的故事，推文，视频和照片的累积力量都是向心力的，让这个国家更接近一起。<br>这基本上是技术人员的梦想，最终在边界儿童的噩梦中找到了现实。</p>
</blockquote><br>后记：<br>看到互联网，国外是Facebook/Twitter，在舆论上的“星火燎原”的力量，相比纸媒时代。相比下一开始就注重舆论监管/管控的政府，可谓未雨绸缪，技改一筹。<br>看看半互联网一代，原住民一代是如何在网络时代产生作用。<br>然而，需要反问的是，这些病毒式传播或迅速发酵的转发/评论/点赞/观点，有多少是经得起推敲和深度思考的？<br>2.<br>同样分享另一篇文章，也是跟Internet相关的，是twitter上，对Micrsoft口诛笔伐 过程被作者写的很精彩：<br>帮川普作恶，微软被围攻<br><a href="https://mp.weixin.qq.com/s/9NgFiBtD-FBWymiIbZ-q4A" target="_blank" rel="external">https://mp.weixin.qq.com/s/9NgFiBtD-FBWymiIbZ-q4A</a><br><blockquote><p>微软避锅大法<br>特朗普有甩锅大法，微软有避锅大法。他们表示坚决要和ICE的这些作为划清界限，但网友们依然不肯放过：<br>今年年初，你们可不是这么说的。<br>今年1月，微软Azure全球基础设施负责人Tom Keane在官方博客上发文，宣布微软Azure云服务拿下了美国空军和ICE的合同。博客中说，Azure会帮ICE处理敏感的未分类数据，还会帮他们运用深度学习来加速人脸识别和身份验证等。<br>ICE“正在为国土安全和公共安全部署革命性技术，我们很骄傲，可以用作为我们关键任务的云服务来支持这些工作。”Keane在一月的博客中态度很是明确：proud。<br>5月从Google离职的William Fitzgerald转发这条Twitter时，直接揪住这个“骄傲”质问微软CEO萨蒂亚·纳德拉（Satya Nadella）：从妻离子散中赚钱，你骄傲？<br>随后，微软把博客里关于ICE的部分给删掉了。<br>这种欲盖弥彰的举动，引起了群众更大的反弹，也吸引媒体的兴趣。BuzzFeed、彭博社等多家媒体都报道了这一事件，也向微软询问了抹去信息的原因。<br>于是，这篇博客没过多久又恢复了原样。<br>微软的解释是：有个员工看见社交媒体上的评论之后暂时删除了博客内容，这是个错误行为，我们发现就把博客改回来了。<br>现在，微软对ICE的这些作为表示“惊诧”，还迫切希望这一部门改变政策，敦促国会通过保障儿童不再与家庭分离的法规，但丝毫没有表现出要退出项目不再续约的意思。<br>据彭博政府数据显示，微软和ICE的合同金额是1914万美元。</p>
</blockquote><br>3.<br><a href="https://www.theatlantic.com/technology/archive/2018/06/shops-arent-for-shopping-anymore/563054/" target="_blank" rel="external">Shops Aren’t for Shopping Anymore</a><br>Retail stores used to be places to buy things. Smartphones changed that, and retailers are struggling to invent new reasons, and methods, for shopping.<br>零售店曾经是购买物品的地方。 智能手机改变了这种状况，零售商正在努力发明新的理由和方法，以便购物。<br>这是不同于国内高新零售的玩法，国内像阿里/京东做的零售店，其实主题甚至内容不过依旧都是零售，体验似乎也只在虚拟换装/支付便利性等，就像在盒马基本上就是吃吃吃而已，看看看食物而已。<br>但文中所描绘的改变显然更进一步些。<br>4.<br>HBaseConWest2018演讲 - HBase Practice In XiaoMi<br><a href="http://openinx.github.io/2018/06/18/hbaseconwest2018/" target="_blank" rel="external">http://openinx.github.io/2018/06/18/hbaseconwest2018/</a><br><blockquote><p>HBaseConWest2018于6.18日在美国加州圣何塞举办，本次会议由Hortonworks承办。每年去美国硅谷参加HBaseConWest已经算是小米HBase团队的惯例了，一方面小米团队在HBase社区的影响力有目共睹，目前已经培养了7位HBase Committer，其中有2位HBase PMC；另外一方面，小米内部也很乐意对外去分享公司一年所做的工作，相当于把一年的工作（包括内部的实践以及社区贡献）做一个年度总结分享给大家。<br>所以，2018年我们也很积极的提交了演讲议题(HBase Practice In XiaoMi)，并花了很多精力整理总结，内部还做过3次英文试讲。但遗憾的是，今年中美关系比较紧张，美国签证没有如期办下来</p>
</blockquote><br>5.<br>A Century in Wordclouds<br>想法很好，只可惜我对文中的结果存疑，但想法真的很好。<br><a href="https://towardsdatascience.com/a-century-in-wordclouds-72be5f5ca391" target="_blank" rel="external">https://towardsdatascience.com/a-century-in-wordclouds-72be5f5ca391</a></p>
<p>###Tech</p>
<p>6.<br>使用JITWatch查看JVM的JIT编译代码<br><a href="https://liuzhengyang.github.io/2017/07/27/jitwatch/" target="_blank" rel="external">https://liuzhengyang.github.io/2017/07/27/jitwatch/</a><br>7.<br>OpenJDK commiter 的正确社交礼仪<br>不过从视频看，听众似乎不多<br><a href="https://www.youtube.com/watch?v=mMvXcZV-2ZY" target="_blank" rel="external">https://www.youtube.com/watch?v=mMvXcZV-2ZY</a><br>另一篇关于OpenJDK的<br>AdoptOpenJDK: Enhancing OpenJDK’s “build, test, contribute” pipeline<br><a href="https://www.youtube.com/watch?v=d9HnAQAcfjQ" target="_blank" rel="external">https://www.youtube.com/watch?v=d9HnAQAcfjQ</a><br>8.<br>Cloud Native Java, part deux, with Josh Long<br>话唠龙之春，看看开头对 cloud java的推崇；<br><a href="https://www.youtube.com/watch?v=GW656IAU5ZE" target="_blank" rel="external">https://www.youtube.com/watch?v=GW656IAU5ZE</a><br>9.<br><a href="http://highscalability.com/blog/2018/6/15/stuff-the-internet-says-on-scalability-for-june-15th-2018.html" target="_blank" rel="external">http://highscalability.com/blog/2018/6/15/stuff-the-internet-says-on-scalability-for-june-15th-2018.html</a><br>@taotetek: The goal of an observability team is not to collect logs, metrics or traces. It is to build a culture of engineering based on facts and feedback, and then spread that culture within the broader organization.<br>有点道理，鱼渔的观点<br>@tiffanycli: Reminder: When you give your DNA data to companies like <a href="http://Ancestry.com" target="_blank" rel="external">http://Ancestry.com</a>  or 23andMe, you give up not only your own genetic privacy, but that of your entire family. (It’s in the terms &amp; conditions.)<br>匹夫无罪，基因其罪<br>10.<br>一文读懂 Spark 和 Spark Streaming<br><a href="https://ericfu.me/apache-spark-in-nutshell/" target="_blank" rel="external">https://ericfu.me/apache-spark-in-nutshell/</a><br>一般来说，想做到 fault-tolerance 只有两个方案：要么存储到外部（例如 HDFS），要么拷贝到多个副本。Spark 大胆地提出了第三种——重算一遍。但是之所以能做到这一点，是依赖于一个额外的假设：所有计算过程都是确定性的（deterministic）。Spark 借鉴了函数式编程思想，提出了 RDD（Resilient Distributed Datasets），译作“弹性分布式数据集”。<br>11.<br>很不错的分享：从头开始写一个日志采集Agent<br>日志采集中的关键技术分析<br><a href="http://jm.taobao.org/2018/06/13/%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E4%B8%AD%E7%9A%84%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/" target="_blank" rel="external">http://jm.taobao.org/2018/06/13/%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E4%B8%AD%E7%9A%84%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/</a><br>这里贴出一部分，非常建议去看原文，相信会有更多收获<br><blockquote><p>如何发现一个文件?<br>定时去轮询下目录或许是个不错的方法，但是轮询的周期太长会导致不够实时，太短又会耗CPU，你也不希望你的采集Agent被人吐槽占用太多CPU吧。Linux内核给我们提供了高效的Inotify的机制，由内核来监测一个目录下文件的变化，然后通过事件的方式通知用户。但是别高兴的太早，Inotify并没有我们想的那么好，它存在一些问题，首先并不是所有的文件系统都支持Inotify，此外它不支持递归的目录监测<br>基于轮询的方式其优点就是保证不会漏掉文件，除非文件系统发生了bug，通过增大轮询的周期可以避免浪费CPU、但是实时性不够。Inotify虽然很高效，实时性很好但是不能保证100%不丢事件。因此通过结合轮询和Inotify后可以相互取长补短。<br>点位文件高可用<br>点位文件? 对就是通过点位文件来记录文件名和对应的采集位置。那如何保证这个点位文件可以可靠的写入呢? 因为可能在文件写入的那一刻机器Crash了导致点位数据丢掉或者数据错乱了。要解决这个问题就需要保证文件写入要么成功，要么失败，绝对不能出现写了一半的情况。Linux内核给我们提供了原子的rename。一个文件可以原子的rename成另外一个文件，利用这个特性可以保证点位文件的高可用。假设我们已经存在一份点位文件叫做offset，每一秒我们去更新这个点位文件，将采集的位置实时的记录在里面，整个更新的过程如下：<br>将点位数据写入到磁盘的offset.bak文件中<br>fdatasync确保数据写入到磁盘<br>通过rename系统调用将offset.bak更名为offset<br>通过这个手段可以保证在任何时刻点位文件都是正常的，因为每次写入都会先确保写入到临时文件是成功的，然后原子的进行替换。这样就保证了offset文件总是可用的。在极端场景下会导致1秒内的点位没有及时更新，日志采集Agent启动后会再次采集这1秒内的数据进行重发，这基本上满足需求了。</p>
<p>但是点位文件中记录了文件名和对应的采集位置这会带来另外一个问题，如果在进程Crash的过程中，文件被重命名了该怎么办?<br>Linux内核提供了inode可以作为文件的标识信息，而且保证同一时刻Inode是不会重复的，这样就可以解决上面的问题，在点位文件中记录文件的inode和采集的位置即可。日志采集Agent启动后通过文件发现找到要采集的文件，通过获取Inode然后从点位文件中查找对应的采集位置，最后接着后面继续采集即可。那么即使文件重命名了但是它的Inode不会变化，所以还是可以从点位文件中找到对应的采集位置。但是Inode有没有限制呢? 当然有，天下没有免费的午餐，不同的文件系统Inode会重复，一个机器可以安装多个文件系统，所以我们还需要通过dev(设备号)来进一步区分，所以点位文件中需要记录的就是dev、inode、offset三元组。到此为止我们的采集Agent可以正常的采集日志了，即使Crash了再次启动后仍然可以继续进行采集。但是突然有一天我们发现有两个文件居然是同一个Inode，Linux内核不是保证同一时刻不会重复的吗?难道是内核的bug?注意我用的是“同一时刻”，内核只能保证在同一时刻不会重复，这到底是什么意思呢? 这便是日志采集Agent中会遇到的一个比较大的技术挑战，如何准确的标识一个文件。</p>
<p>如何识别一个文件?<br>如何标识一个文件算是日志采集Agent中一个比较有挑战的技术问题了，我们先是通过文件名来识别，后来发现文件名并不可靠，而且还耗费资源，后来我们换成了dev+Inode，但是发现Inode只能保证同一时刻Inode不重复，那这句话到底是什么意思呢? 想象一下在T1时刻有一个文件Inode是1我们发现了并开始采集，一段时间后这个文件被删除了，Linux内核就会将这个Inode释放掉，新创建一个文件后Linux内核会将刚释放的Inode又分配给这个新文件。那么这个新文件被发现后会从点位文件中查询上次采集到哪了，结果就会找到之前的那个文件记录的点位了，导致新文件是从一个错误的位置进行采集。如果能给每一个文件打上一个唯一标识或许就可以解决这个问题，幸好Linux内核给文件系统提供了扩展属性xattr，我们可以给每一个文件生成唯一标识记录在点位文件中，如果文件被删除了，然后创建一个新的文件即使Inode相同，但是文件标识不一样，日志采集Agent就可以识别出来这是两个文件了</p>
<p>如何知道文件内容更新了?<br>Inotify可以解决这个问题、通过Inotify监控一个文件，那么只要这个文件有新增数据就会触发事件，得到事件后就可以继续采集了。但是这个方案存在一个问题就是在大量文件写入的场景会导致事件队列溢出，比如用户连续写入日志N次就会产生N个事件，其实对于日志采集Agent只要知道内容就更新就可以了，至于更新几次这个反而不重要， 因为每次采集其实都是持续读文件，直到EOF，只要用户是连续写日志，那么就会一直采集下去。另外Intofy能监控的文件数量也是有上限的。所以这里最简单通用的方案就是轮询去查询要采集文件的stat信息，发现文件内容有更新就采集，采集完成后再触发下一次的轮询，既简单又通用<br>如何安全的释放文件句柄?<br>Fluentd的处理方式就是将这部分的责任推给用户，让用户配置一个时间，文件删除后如果在指定的时间范围内没有数据新增就释放fd，其实这就是间接的甩锅行为了。这个时间配置的太小会造成丢数据的概率增大，这个时间配置的太大会导致fd和磁盘空间一直被占用造成短时间自由浪费的假象</p>
</blockquote><br>12.<br>阿里巴巴为什么不用 ZooKeeper 做服务发现？<br><a href="http://jm.taobao.org/2018/06/13/%E5%81%9A%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%EF%BC%9F/" target="_blank" rel="external">http://jm.taobao.org/2018/06/13/%E5%81%9A%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%EF%BC%9F/</a><br>作者其实讨论的是关于服务配置/服务发现/服务状态，这些当然目前也没听说有同时实现。。。<br>这里贴出一部分，非常建议去看原文，相信会有更多收获.<br><blockquote><p>注册中心是 CP 还是 AP 系统?<br>CAP 和 BASE 理论相信读者都已经耳熟能详，其业已成了指导分布式系统及互联网应用构建的关键原则之一，在此不再赘述其理论，我们直接进入对注册中心的数据一致性和可用性需求的分析:<br>数据一致性需求分析?<br>分区容忍及可用性需求分析?:<br>接下来我们看一下网络分区（Network Partition）情况下注册中心不可用对服务调用产生的影响，即 CAP 中的A不满足时带来的影响。<br>当机房3出现网络分区(Network Partitioned)的时候，即机房3在网络上成了孤岛，我们知道虽然整体 ZooKeeper 服务是可用的，但是节点ZK5是不可写的，因为联系不上 Leader。<br>也就是说，这时候机房3的应用服务 svcB 是不可以新部署，重新启动，扩容或者缩容的，但是站在网络和服务调用的角度看，机房3的 svcA 虽然无法调用机房1和机房2的 svcB,但是与机房3的svcB之间的网络明明是 OK 的啊，为什么不让我调用本机房的服务？<br>现在因为注册中心自身为了保脑裂(P)下的数据一致性（C）而放弃了可用性，导致了同机房的服务之间出现了无法调用，这是绝对不允许的！可以说在实践中，注册中心不能因为自身的任何原因破坏服务之间本身的可连通性，这是注册中心设计应该遵循的铁律！ 后面在注册中心客户端灾容上我们还会继续讨论。<br>同时我们再考虑一下这种情况下的数据不一致性，如果机房1，2，3之间都成了孤岛，那么如果每个机房的svcA都只拿到本机房的 svcB 的ip列表，也即在各机房svcB 的ip列表数据完全不一致，影响是什么？<br>其实没啥大影响，只是这种情况下，全都变成了同机房调用，我们在设计注册中心的时候，有时候甚至会主动利用这种注册中心的数据可以不一致性，来帮助应用主动做到同机房调用，从而优化服务调用链路 RT 的效果！<br>注册中心需要持久存储和事务日志么？<br>需要，也不需要。<br>我们知道 ZooKeeper 的 ZAB 协议对每一个写请求，会在每个ZooKeeper节点上保持写一个事务日志，同时再加上定期的将内存数据镜像（Snapshot）到磁盘来保证数据的一致性和持久性，以及宕机之后的数据可恢复，这是非常好的特性，但是我们要问，在服务发现场景中，其最核心的数据-实时的健康的服务的地址列表真的需要数据持久化么？<br>Service Health Check<br>使用 ZooKeeper 作为服务注册中心时，服务的健康检测常利用 ZooKeeper 的 Session 活性 Track机制 以及结合 Ephemeral ZNode的机制，简单而言，就是将服务的健康监测绑定在了 ZooKeeper 对于 Session 的健康监测上，或者说绑定在TCP长链接活性探测上了。<br>这在很多时候也会造成致命的问题，ZK 与服务提供者机器之间的TCP长链接活性探测正常的时候，该服务就是健康的么？答案当然是否定的！注册中心应该提供更丰富的健康监测方案，服务的健康与否的逻辑应该开放给服务提供方自己定义，而不是一刀切搞成了 TCP 活性检测！<br>我们在阿里巴巴内部应用接入 ZooKeeper 时，有一个《ZooKeeper 应用接入必知必会》的 WIKI，其中关于异常处理有过如下的论述:<br>…</p>
</blockquote><br>13.<br>如上，不错的zookeeper踩坑分享<br>采用zookeeper的EPHEMERAL节点机制实现服务集群的陷阱<br><a href="https://yq.aliyun.com/articles/227260" target="_blank" rel="external">https://yq.aliyun.com/articles/227260</a><br><blockquote><p>1、不处理zk的连接状态变化事件导致zk客户端断开后与zk服务器集群没有重连。后果：连接丢失后EPHEMERAL节点会删除并且客户端watch丢失。<br>2、在synconnected事件中创建EPHEMERAL节点没有判断此节点是否已经存在，在已经存在的情况下没有判断是否应该删除重建，后果：EPHEMERAL节点丢失导致可用的服务器不在可用服务器列表中。<br>3、应用程序关闭时不主动关闭zk客户端，后果：导致可用服务器列表包含已经失效的服务器。<br>4、创建一个zk客户端时，zk客户端连接zk服务器是异步的，如果在连接还没有建立时就调用zk客户端会抛异常。<br>5、在zk的事件中执行长时间的业务<br>6、使用2.X版本的Curator时，ExponentialBackoffRetry的maxRetries参数设置的再大都会被限制到29：MAX_RETRIES_LIMIT。</p>
</blockquote><br>14.<br>很不错的总结<br>实时数据的可视化<br><a href="http://icodeit.org/2018/06/real-time-data-visualization/" target="_blank" rel="external">http://icodeit.org/2018/06/real-time-data-visualization/</a><br>15.<br>Theranos founder Elizabeth Holmes may be our first true feminist anti-hero<br><a href="https://work.qz.com/1285831/theranos-founder-elizabeth-holmes-may-be-our-first-true-feminist-anti-hero/" target="_blank" rel="external">https://work.qz.com/1285831/theranos-founder-elizabeth-holmes-may-be-our-first-true-feminist-anti-hero/</a><br>16.<br>How to prevent logback from outputting its own status at the start of every log?<br><a href="https://stackoverflow.com/questions/3257154/how-to-prevent-logback-from-outputting-its-own-status-at-the-start-of-every-log" target="_blank" rel="external">https://stackoverflow.com/questions/3257154/how-to-prevent-logback-from-outputting-its-own-status-at-the-start-of-every-log</a><br>如何让logback不输出自己的status信息，诸如在启动logback时的：“11:21:27,825 |-INFO in ch.qos.logback…”信息？<br><blockquote><p>If you have any configuration problems of level WARN or above, you will also get all status information logged to the console (including messages of level INFO). The best solution to this problem is to fix the problem (in your case replace the <layout> element with an <encoder> element).<br>If you for some reason cannot fix the problem, but want to remove the status-information from the console, you can instead configure an alternative StatusListener. Use the NopStatusListener to completely remove the status-information:</encoder></layout></p>
</blockquote><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">statusListener</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.status.NopStatusListener"</span> /&gt;</span></div><div class="line">  <span class="comment">&lt;!-- etc --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>17.<br><a href="https://blog.softwaremill.com/scalaz-8-io-vs-akka-typed-actors-vs-monix-part-1-5672657169e1" target="_blank" rel="external">https://blog.softwaremill.com/scalaz-8-io-vs-akka-typed-actors-vs-monix-part-1-5672657169e1</a><br>18.<br>Meet the New Logstash Java Execution Engine<br><a href="https://www.elastic.co/blog/meet-the-new-logstash-java-execution-engine" target="_blank" rel="external">https://www.elastic.co/blog/meet-the-new-logstash-java-execution-engine</a><br>新版Logstash采用Java Execution Engine，大大提升性能<br>19.<br><a href="http://arganzheng.life/ai-infrastructures-from-big-data-to-deep-learning.html" target="_blank" rel="external">http://arganzheng.life/ai-infrastructures-from-big-data-to-deep-learning.html</a><br>20.<br>github上上周一个 pop 项目<br><a href="https://github.com/danistefanovic/build-your-own-x" target="_blank" rel="external">https://github.com/danistefanovic/build-your-own-x</a><br>21.<br><a href="https://github.com/pod4g/hiper" target="_blank" rel="external">https://github.com/pod4g/hiper</a><br>22.<br><a href="https://medium.com/observability/microservices-observability-26a8b7056bb4" target="_blank" rel="external">https://medium.com/observability/microservices-observability-26a8b7056bb4</a><br>23.<br><blockquote><p>From the Hotspot JVM source code, we can see the following GC roots types:</p>
</blockquote><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> RootType &#123; </div><div class="line">  universe = <span class="number">1</span>, </div><div class="line">  jni_handles           = <span class="number">2</span>, </div><div class="line">  threads               = <span class="number">3</span>, </div><div class="line">  object_synchronizer   = <span class="number">4</span>, </div><div class="line">  system_dictionary     = <span class="number">5</span>, </div><div class="line">  class_loader_data     = <span class="number">6</span>, </div><div class="line">  management            = <span class="number">7</span>, </div><div class="line">  jvmti                 = <span class="number">8</span>, </div><div class="line">  code_cache            = <span class="number">9</span> </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<blockquote><p>And from comment of source code, we can conclude the meaning of those roots:<br>Universe: is a name space holding known system classes and objects in the VM. The object heap is allocated and accessed through Universe, and various allocation support is provided.<br><i><strong>JNIHandles</strong></i>: JNI code<br><i><strong>Threads</strong></i>: live threads<br><i><strong>ObjectSynchronizer</strong></i>: monitor object<br><i><strong>Management</strong></i>: JVM used management class<br><i><strong>JvmtiExport</strong></i>: JVM tool interface, for debug &amp; profiling;<br><i><strong>SystemDictionary</strong></i>: Loaded classes are accessible through the SystemDictionary.<br><i><strong>ClassLoaderDataGraph</strong></i>: A class loader represents a linkset. Conceptually, a linkset identifies the complete transitive closure of resolved links that a dynamic linker can produce. A ClassLoaderData also encapsulates the allocation space, called a metaspace, used by the dynamic linker to allocate the runtime representation of all the types it defines.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;NON-Tech&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;1.&lt;br&gt;看这篇文章，体会下感受下生在互联网时代，20世纪形成的政治体制正在变得“古老”的路上。&lt;br&gt;毕竟，现在有多少人会觉得 马基雅弗利的政治“智慧”没有过时？&lt;br&gt;道德危机的起源 The Making of a Moral Crisis&lt;br&gt;“many-chambered heart of the internet”(不知怎么翻译) 如何将特朗普政府的家庭分离政策变为另一种丑闻&lt;br&gt;&lt;a href=&quot;https://www.theatlantic.com/technology/archive/2018/06/the-making-of-a-moral-problem/563114/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.theatlantic.com/technology/archive/2018/06/the-making-of-a-moral-problem/563114/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://translate.google.com/translate?sl=auto&amp;amp;tl=zh-CN&amp;amp;js=y&amp;amp;;prev=_t&amp;amp;;hl=zh-CN&amp;amp;ie=UTF-8&amp;amp;u=https%3A%2F%2Fwww.theatlantic.com%2Ftechnology%2Farchive%2F2018%2F06%2Fthe-making-of-a-moral-problem%2F563114%2F&amp;amp;edit-text=&amp;amp;authuser=0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如果没时间可以速读谷歌翻译出来的中文&lt;/a&gt;，下面是我从google翻译里摘抄部分&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="weeklyreading" scheme="http://thomaslau.github.io/tags/weeklyreading/"/>
    
  </entry>
  
</feed>
