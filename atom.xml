<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>e+Thomas</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://thomaslau.github.io/"/>
  <updated>2018-05-14T16:57:17.687Z</updated>
  <id>http://thomaslau.github.io/</id>
  
  <author>
    <name>Thomas Lau</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Many Links 0515</title>
    <link href="http://thomaslau.github.io/2018/05/15/2018-05-15-many_links_0515/"/>
    <id>http://thomaslau.github.io/2018/05/15/2018-05-15-many_links_0515/</id>
    <published>2018-05-14T16:09:07.000Z</published>
    <updated>2018-05-14T16:57:17.687Z</updated>
    
    <content type="html"><![CDATA[<p>依旧是老的链接分享：<br>1.<br>【算法】CTR预估中的贝叶斯平滑方法（一）<br><a href="https://blog.csdn.net/dengxing1234/article/details/77965536" target="_blank" rel="external">https://blog.csdn.net/dengxing1234/article/details/77965536</a><br>学习了：<br><blockquote><p>广告形式：互联网广告可以分为以下三种：<br>1）展示广告（display ad）<br>2）搜索广告（sponsored search ad）<br>3）上下文广告（contextual ad）<br>竞价模式：对于在线广告，主要有以下几种竞价模式：<br>1）pay-per-impression（按展示付费）：广告商按照广告被展示的次数付费，这是一种最普遍的竞价模型。缺点在于没有考虑投放广告的效果。<br>2）pay-per-action（按行为付费）：只有在广告产生了销售或者类似的一些转化时，广告商才付费。缺点在于追踪用户的交易行为相对比较困难。<br>3）pay-per-click（按用户点击付费）：根据用户是否会点击广告来付费。这时候就需要对广告的点击率（CTR）进行精确的预估。<br>遇到的困难：<br>由于数据的稀疏性，对广告进行CTR预估是比较具有挑战性的，预估出来的CTR的可靠性不高，且具有较大的方差。主要有以下两类场景：<br>1）当广告的展示次数较少的时候，对其直接进行CTR的统计计算会导致一个偏高的结果。比如某个广告只展示了1次，被点击了1次，则纯粹的统计CTR=1.0，这显然是过分高估了。<br>2）当广告的展示次数很大，但点击次数很少或几乎没有的时候，对其直接进行CTR的统计计算会导致一个偏低的结果。比如某个广告没有被点击过，则纯粹的统计CTR=0.0，这显然是过分低估了。</p>
</blockquote><br><a id="more"></a><br>2.<br>What we talk about when we talk about monads<br><a href="https://arxiv.org/pdf/1803.10195v1.pdf" target="_blank" rel="external">https://arxiv.org/pdf/1803.10195v1.pdf</a><br>作者Tomas Petricek，看似简介monad，但感觉是在探讨一种理解编程语言的思维/框架。<br>有时间可以用这篇短文打发一下：<br><blockquote><p>More generally, we present a framework for understanding programming concepts that considers them at three levels: formal, metaphorical and implementation. We base such observations on established results about the scientific method and mathematical entities – cognitive sciences suggest that the metaphors used when thinking about monads are more important than widely accepted, while philosophy of science explains how the research paradigm from which monads originate influences and restricts their use.<br>Finally, we provide evidence for why a broader philosophical, sociological look at programming concepts should be of interest for programmers. It lets us understand programming concepts better and, fundamentally, choose more appropriate abstractions as illustrated in a number of case studies that conclude the paper.</p>
</blockquote></p>
<p>3.<br>插件化、热补丁中绕不开的Proguard的坑<br><a href="https://tech.meituan.com/mt_proguard.html" target="_blank" rel="external">https://tech.meituan.com/mt_proguard.html</a><br>一直对proguard混淆感兴趣，可惜未深入看过，本文当入门似乎有点深，但是分析思路很好。<br><blockquote><p>ProGuard是2002年由比利时程序员Eric Lafortune发布的一款优秀的开源代码优化、混淆工具，适用于Java和Android应用，目标是让程序更小，运行更快，在Java界处于垄断地位。<br>主要分为三个模块：Shrinker（压缩器）、Optimizer（优化器）、Obfuscator（混淆器）、Retrace（堆栈反混淆）。<br>Shrinker 通过引用标记算法，将没用到的代码移除掉。<br>Optimizer 通过复杂的算法（Partial Evaluation &amp;Peephole optimization，这部分算法我们不再展开介绍）对字节码进行优化，代码优化会使部分代码块的结构出现变动。<br>Obfuscator 通过一个混淆名称发生器产生a、b、c的毫无意义名称来替换原来正常的名称，增加逆向的难度。<br>Retrace 经过ProGuard处理后的字节码运行的堆栈已经跟没有处理之前的不一样了，除了出现名称上的变化还伴随着逻辑上的变化，程序崩溃后，开发者需要借助Retrace将错误堆栈恢复为没有经过ProGuard处理的样子。<br>…<br>本文则主要介绍了Java优化&amp;混淆工具ProGuard的基本原理、ProGuard的几个模块之间的相互关系与影响、以及增量混淆使用-applymapping遇到部分方法映射错乱的Bug，Bug出现的原因以及修复方案。</p>
</blockquote></p>
<p>4.<br>全栈虚拟机GraalVM初体验<br><a href="http://mp.weixin.qq.com/s/XiQW3Sbv_jHUYK7aoXy_Rg" target="_blank" rel="external">http://mp.weixin.qq.com/s/XiQW3Sbv_jHUYK7aoXy_Rg</a><br>最近公众号/知乎/infoq系列关于GraalVM 引用/收藏也较多的一篇文章：<br><blockquote><p>js 运行在GraalVM之上的javascript命令行<br>node 跟普通的node一样，区别是运行在GraalVM之上<br>java 跟普通的java一样，区别是运行在GraalVM之上<br>lli 运行在GraalVM之上的llvm字节码执行器，C和C++代码会编译成llvm字节码，然后通过它来运行<br>native-image 预编译程序文件生成快速二进制文件，用于加速启动程序<br>gu 其它的语言像Python、Ruby和R的支持都是通过gu进行安装的</p>
</blockquote></p>
<p>5.<br>真空里有什么<br><a href="https://www.zhihu.com/question/21734569/answer/32903623" target="_blank" rel="external">https://www.zhihu.com/question/21734569/answer/32903623</a><br>一个不明觉厉的回答，事实上，要理解有些困难，传统物理真空就是没有任何物质的空间状态，但是这里我们要理解的真空并不是传统的定义。<br>一种很民科的解释是，现代科学无法自圆其说，尤其在实验和量子论共同推波助澜下，于是创造了答案里的概念。<br>可以搜一搜 赛先生 一篇普及真空里有什么的文章。<br>另一个有趣的问题<br>自然数之和为什么等于-1/12<br><a href="https://www.zhihu.com/question/22506418" target="_blank" rel="external">https://www.zhihu.com/question/22506418</a></p>
<p>6.<br>高性能数据库连接池的内幕<br><a href="https://yq.aliyun.com/articles/59497" target="_blank" rel="external">https://yq.aliyun.com/articles/59497</a><br>值得一看，一个数据库连接池需要考虑哪些基本问题，也包含几大知名连接池的简单对比，就不详细贴了。</p>
<p>7.<br>同6，这里推荐一个很好的实现，Springboot 2默认的连接池，HikariCP，这篇文章有更详细的对比<br>很鸡血的技术文章，也很有趣，不说了，去感受下作者浓浓的技术激情吧：<br><a href="http://blog.didispace.com/Springboot-2-0-HikariCP-default-reason/" target="_blank" rel="external">http://blog.didispace.com/Springboot-2-0-HikariCP-default-reason/</a></p>
<blockquote><p>HiKariCP是数据库连接池的一个后起之秀，号称性能最好，可以完美地PK掉其他连接池，是一个高性能的JDBC连接池，基于BoneCP做了不少的改进和优化。其作者还有另外一个开源作品——高性能的JSON解析器HikariJSON。<br>它，超快，快到连Spring Boot 2都宣布支持了。<br>代码体积更是少的可怜，130kb</p>
</blockquote>
<p>8.<br><a href="http://highscalability.com/blog/2018/4/27/stuff-the-internet-says-on-scalability-for-april-27th-2018.html" target="_blank" rel="external">http://highscalability.com/blog/2018/4/27/stuff-the-internet-says-on-scalability-for-april-27th-2018.html</a><br><blockquote><p>@kwchang: ‘The internet went from a democratizing free space to having power very centralized; crypto decentralization is a reaction to that’ - @starkness #Angels #cryptointro<br>Lynn Langit: To me, containers are the new VMs. All this frenzy about containers, and more specifically container management systems — look, somebody has to manage the things. I want to pay the cloud providers to do it so I don’t have to.<br>@kellabyte: Many-core servers are a huge problem. We have no idea how to write software to actually use the hardware properly. For example, in Go, there’s no IO library that can go faster than 10GbE.<br>Markus Winand: Don’t say relational database when referring to SQL databases. SQL is really more than just relational.<br>Catalin Cimpanu: A loud sound emitted by a fire suppression system has destroyed the hard drives of a Swedish data center, downing Nasdaq operations across Northern Europe.<br>@brendangregg: context switching &amp; CPU cache invalidations are both CPU utilization. I’d look for single-threaded/single-CPU bottlenecks first, then off-CPU analysis.</p>
</blockquote></p>
<p>9.<br><a href="http://blog.pragmaticengineer.com/distributed-architecture-concepts-i-have-learned-while-building-payments-systems/" target="_blank" rel="external">http://blog.pragmaticengineer.com/distributed-architecture-concepts-i-have-learned-while-building-payments-systems/</a><br>Uber工程师的一篇文章：<br><blockquote><p>SLA<br>Horizontal vs vertical scaling<br>Consistency<br>Data Durability<br>Message Persistence and Durability<br>Idempotency<br>Sharding and Quorum<br>The Actor Model<br>Reactive Architecture<br>Closing</p>
</blockquote><br>上述几点可考虑纳入设计考量点，不多评论了，作者自己总结：<br><blockquote><p>This write-up has been strictly focused on the planning and architecting of these systems. There is a whole lot of things to be said about building, deploying and migrating between high-load systems as well as operating them reliably. But all those topics are other posts.</p>
</blockquote></p>
<p>10.<br>关于ES shard分配/路由，看完这一篇就够了<br><a href="https://blog.csdn.net/iceman1952/article/details/79957290" target="_blank" rel="external">https://blog.csdn.net/iceman1952/article/details/79957290</a><br>这是一篇译文，原文（Every shard deserves a home）于2016-11-11发布在elastic官方博客，可以保存方便即时查阅。</p>
<p>11.<br><a href="http://hbasefly.com/2018/05/02/timeseries-database-7/" target="_blank" rel="external">http://hbasefly.com/2018/05/02/timeseries-database-7/</a><br>任何一个数据库系统内核关注的重点无非：数据在内存中如何存储、在文件中如何存储、索引结构如何存储、数据写入流程以及数据读取流程。关于InfluxDB存储内核，笔者在之前的文章中已经比较全面的介绍了数据的文件存储格式、倒排索引存储实现以及数据写入流程，本篇文章重点介绍InfluxDB中时序数据的读取流程</p>
<p>12.<br><a href="https://www.elastic.co/blog/composite-aggregations-elasticsearch-pizza-delivery-metrics" target="_blank" rel="external">https://www.elastic.co/blog/composite-aggregations-elasticsearch-pizza-delivery-metrics</a><br>Composite aggregations are a powerful new feature in Elasticsearch 6.1.  To show the full power of the feature, we’ll walk through creating an analytics service for Sliceline, a fictional pizza delivery company.<br>Composite aggregations allow us to:<br>Quickly paginate through aggregation results<br>Build new indices from aggregation results<br>Develop APIs backed by Elasticsearch aggregations with consistent response times for large result sets</p>
<p>13.<br>Turning a MacBook into a Touchscreen with $1 of Hardware<br><a href="https://www.anishathalye.com/2018/04/03/macbook-touchscreen/" target="_blank" rel="external">https://www.anishathalye.com/2018/04/03/macbook-touchscreen/</a><br>只需1美元，作者在自己的MacBook的摄像头前巧妙的加装了一面小镜子，反射到摄像头，捕捉手指对屏幕的触控，并使用视觉识别，将摄像头拍摄的画面转换为触控反馈。<br>见过很多实现触摸的办法，外接镜面，外接ipad，airbar，本文介绍方法可以说，不仅便宜，而且非常的hack了。<br>不过不知道触摸效果怎样。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;依旧是老的链接分享：&lt;br&gt;1.&lt;br&gt;【算法】CTR预估中的贝叶斯平滑方法（一）&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/dengxing1234/article/details/77965536&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.csdn.net/dengxing1234/article/details/77965536&lt;/a&gt;&lt;br&gt;学习了：&lt;br&gt;&lt;blockquote&gt;&lt;p&gt;广告形式：互联网广告可以分为以下三种：&lt;br&gt;1）展示广告（display ad）&lt;br&gt;2）搜索广告（sponsored search ad）&lt;br&gt;3）上下文广告（contextual ad）&lt;br&gt;竞价模式：对于在线广告，主要有以下几种竞价模式：&lt;br&gt;1）pay-per-impression（按展示付费）：广告商按照广告被展示的次数付费，这是一种最普遍的竞价模型。缺点在于没有考虑投放广告的效果。&lt;br&gt;2）pay-per-action（按行为付费）：只有在广告产生了销售或者类似的一些转化时，广告商才付费。缺点在于追踪用户的交易行为相对比较困难。&lt;br&gt;3）pay-per-click（按用户点击付费）：根据用户是否会点击广告来付费。这时候就需要对广告的点击率（CTR）进行精确的预估。&lt;br&gt;遇到的困难：&lt;br&gt;由于数据的稀疏性，对广告进行CTR预估是比较具有挑战性的，预估出来的CTR的可靠性不高，且具有较大的方差。主要有以下两类场景：&lt;br&gt;1）当广告的展示次数较少的时候，对其直接进行CTR的统计计算会导致一个偏高的结果。比如某个广告只展示了1次，被点击了1次，则纯粹的统计CTR=1.0，这显然是过分高估了。&lt;br&gt;2）当广告的展示次数很大，但点击次数很少或几乎没有的时候，对其直接进行CTR的统计计算会导致一个偏低的结果。比如某个广告没有被点击过，则纯粹的统计CTR=0.0，这显然是过分低估了。&lt;/p&gt;
&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="weeklyreading" scheme="http://thomaslau.github.io/tags/weeklyreading/"/>
    
  </entry>
  
  <entry>
    <title>Many Links 0513</title>
    <link href="http://thomaslau.github.io/2018/05/13/2018-05-13-many_links_0513/"/>
    <id>http://thomaslau.github.io/2018/05/13/2018-05-13-many_links_0513/</id>
    <published>2018-05-13T01:45:07.000Z</published>
    <updated>2018-05-14T16:40:35.671Z</updated>
    
    <content type="html"><![CDATA[<p>1.<br>论喝鸡汤，还是要认准大品牌。</p>
<p>超市里买鸡蛋还要看价格质量产地挑选，何况是鸡汤文？</p>
<p>记得曾经看过有人分享“苔花如米小，也学牡丹开”，初看时，还是很感动的，有种壁立千仞，迎风招展的味道。</p>
<p>说不出哪里的好，但又感觉哪里不对。</p>
<p>偶尔看到一句话，醒悟。</p>
<p>“一花一世界”</p>
<p><i>我这里拷贝一段话： “恒河沙等之恒河沙。一沙一世界国土中。所有众生。各具一心。则其心有若干种。如来以清净五眼。皆尽见而知之”。<i></i></i></p>
<p>是了，这里对比下，看出佛家的见识，几千年积累下来的，静坐卧行都在思禅思出来的见识。</p>
<p>前者有些小家子气，或许在一个年轻气盛嘴角红润的年龄段会感动肺腑，自信。</p>
<p>然而我更喜欢“一花一世界”，这种早已超越，甚至无须自信的意境，简直是大智慧。</p>
<p>就像一个曾经美国总统肯尼迪的一个故事：</p>
<p>肯尼迪去NASA访问，在洗手间碰到一位清洁工，或许是出于美国总统的义务，肯尼迪鼓舞到“感谢你把房间打扫得这样干净”，然而清洁工回答说：“不，总统先生，我不是在拖地板，我是在帮助我们登月。”<br><a id="more"></a><br>2.<br>早已接受了很多网络词汇，今天想起，为什么曾经会流行“屌丝/黑木耳”等，其实，每个时代有每个时代的词汇，犹如潘驴邓小闲。</p>
<p>其实，这些词汇和 “国民岳父”，“国民老公”，以及很早的“大众情人”反应的人群，没什么区别。</p>
<p>想引用《扎拉图斯特如是说》中一段，但想想，不如“仁者见仁智者见智”来的干脆。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.&lt;br&gt;论喝鸡汤，还是要认准大品牌。&lt;/p&gt;
&lt;p&gt;超市里买鸡蛋还要看价格质量产地挑选，何况是鸡汤文？&lt;/p&gt;
&lt;p&gt;记得曾经看过有人分享“苔花如米小，也学牡丹开”，初看时，还是很感动的，有种壁立千仞，迎风招展的味道。&lt;/p&gt;
&lt;p&gt;说不出哪里的好，但又感觉哪里不对。&lt;/p&gt;
&lt;p&gt;偶尔看到一句话，醒悟。&lt;/p&gt;
&lt;p&gt;“一花一世界”&lt;/p&gt;
&lt;p&gt;&lt;i&gt;我这里拷贝一段话： “恒河沙等之恒河沙。一沙一世界国土中。所有众生。各具一心。则其心有若干种。如来以清净五眼。皆尽见而知之”。&lt;i&gt;&lt;/i&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;是了，这里对比下，看出佛家的见识，几千年积累下来的，静坐卧行都在思禅思出来的见识。&lt;/p&gt;
&lt;p&gt;前者有些小家子气，或许在一个年轻气盛嘴角红润的年龄段会感动肺腑，自信。&lt;/p&gt;
&lt;p&gt;然而我更喜欢“一花一世界”，这种早已超越，甚至无须自信的意境，简直是大智慧。&lt;/p&gt;
&lt;p&gt;就像一个曾经美国总统肯尼迪的一个故事：&lt;/p&gt;
&lt;p&gt;肯尼迪去NASA访问，在洗手间碰到一位清洁工，或许是出于美国总统的义务，肯尼迪鼓舞到“感谢你把房间打扫得这样干净”，然而清洁工回答说：“不，总统先生，我不是在拖地板，我是在帮助我们登月。”&lt;br&gt;
    
    </summary>
    
    
      <category term="Thoughts" scheme="http://thomaslau.github.io/tags/Thoughts/"/>
    
  </entry>
  
  <entry>
    <title>Many Links 0509</title>
    <link href="http://thomaslau.github.io/2018/05/09/2018-05-09-many_links/"/>
    <id>http://thomaslau.github.io/2018/05/09/2018-05-09-many_links/</id>
    <published>2018-05-08T17:09:07.000Z</published>
    <updated>2018-05-14T16:50:42.774Z</updated>
    
    <content type="html"><![CDATA[<p>积攒许久链接，于是该用短文方式。改名 many links仿O’Reilly的Four Short Links.<br>1.<br><a href="https://github.com/zz85/kafka-streams-viz" target="_blank" rel="external">Kafka Streams Topology Visualizer</a><br>正如其自述“A tool helps visualizing stream topologies by generating nice looking diagrams from a kafka stream topology descriptions.”<br>如果你苦于向他人解释采用的kafka stream 数据处理逻辑，可以考虑该连接生成可视化图片展示，适合作为架构设计插图。<br>2.<br><a href="https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-101" target="_blank" rel="external">The world beyond batch: Streaming 101</a><br>老文章，流式数据处理101，正如文述“A high-level tour of modern data-processing concepts.”值得一看<br>不过文章显然着重是对几个“时间”的理解以及流的粒度探讨：<br>Event time vs. processing time<br>Data processing patterns<br>Bounded data/Unbounded data — batch<br>Fixed windows/Time-agnostic<br>Filtering/Inner-joins/Windowing<br>3.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">使用火焰图展示结果</div><div class="line">1、Flame Graph项目位于GitHub上：https://github.com/brendangregg/FlameGraph</div><div class="line">2、可以用git将其<span class="built_in">clone</span>下来：git <span class="built_in">clone</span> https://github.com/brendangregg/FlameGraph.git</div><div class="line"></div><div class="line">我们以perf为例，看一下flamegraph的使用方法：</div><div class="line">1、第一步</div><div class="line"><span class="variable">$sudo</span> perf record -e cpu-clock -g -p 28591</div><div class="line">Ctrl+c结束执行后，在当前目录下会生成采样数据perf.data.</div><div class="line">2、第二步</div><div class="line">用perf script工具对perf.data进行解析</div><div class="line">perf script -i perf.data &amp;&gt; perf.unfold</div><div class="line">3、第三步</div><div class="line">将perf.unfold中的符号进行折叠：</div><div class="line"><span class="comment">#./stackcollapse-perf.pl perf.unfold &amp;&gt; perf.folded</span></div><div class="line">4、最后生成svg图：</div><div class="line">./flamegraph.pl perf.folded &gt; perf.svg</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>4.<br><a href="https://mp.weixin.qq.com/s?__biz=MzIwMzg1ODcwMw==&amp;mid=2247487627&amp;;idx=1&amp;sn=34d437a1253bdf61857cf2ac513285ac" target="_blank" rel="external">金丝雀发布、滚动发布、蓝绿发布到底有什么差别？关键点是什么</a><br>杨波大神讲解各自区分，感觉总结还是蛮详细的.<br>摘要：<br><blockquote><p>下面是对发布策略的一些选型建议，供不同阶段公司参考：<br>1)蛮力发布一般是不建议采用的，除非是开发测试环境，用户体验不敏感的非关键应用，或者是创业期什么都缺时候的无奈之举。<br>2)如果暂时还不具备研发较复杂的滚动发布工具和配套智能 LB，则功能开关是一种不错的轻量级发布技术，投入相对较小的成本，可以让研发人员灵活定制发布逻辑。<br>3)金丝雀发布通过少量新版本服务器接收生产流量的方式去验证新版本，可以显著降低风险。金丝雀发布适用于大部分场景，一般成长型公司就可以采用。<br>4)对于达到一定业务体量的公司，考虑到用户体验对业务的关键性，则需要投入研发资源开发支持滚动式发布的工具和配套的智能 LB，实现自动化和零停机的发布。滚动式发布一般和金丝雀发布配合，先发一台金丝雀去验证流量，再按批次增量发布。<br>5)随着轻量级虚拟化（例如容器）的普及，双服务器组发布方式具有更快的发布和回退速度，是值得投入的高级发布技术。蓝绿部署仅适用于双服务器组，滚动式发布既可以在单服务器组上实现，也可以在双服务器组上实现。<br>6)对于涉及关键核心业务的新功能上线，采用 A/B 测试，可以显著降低发布风险，A/B 测试是唯一一种支持针对特定用户组进行生产测试的高级发布技术。当然 A/B 测试的投入不低，建议有一定研发能力的组织采用。<br>7)对于关键核心业务的迁移重构，为确保万无一失，最后的一个大招是影子测试，影子测试对生产流量和用户完全无影响。当然这个大招的投入成本和门槛都高，建议有足够业务体量和研发能力的组织投入。<br>8)上述的各种发布策略并不是非此即彼的，一个公司常常会综合采用多种发布技术作为互补，实现灵活的发布能力。例如主流的发布手段是金丝雀 + 滚动式发布，某些业务线可能根据业务场景需要采用功能开关发布，还有一些业务线则可能采用高级的 A/B 测试发布手段。</p>
</blockquote></p>
<p>附图：<br><img src="/images/blog/yangbo_on_release.png" alt="发布对比图"></p>
<p>5.<br><a href="https://zhuanlan.zhihu.com/p/35295839" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/35295839</a><br>6.<br><a href="http://blog.didispace.com/IntelliJ-IDEA-2018-1正式发布！什么？还能这么玩？/" target="_blank" rel="external">IntelliJ IDEA 2018.1正式发布</a><br>程序猿DD的：IDEA 2018.1 最新版本给我们带来哪些惊喜</p>
<ol>
<li>stream代码自动生成更智能</li>
<li>while循环优化</li>
<li>优化多余的资源关闭操作</li>
<li>字符串数组自动排序</li>
<li>拷贝构造函数完整性提示<br>…</li>
</ol>
<p>7.<br><a href="https://www.oreilly.com/ideas/four-short-links-2-april-2018" target="_blank" rel="external">https://www.oreilly.com/ideas/four-short-links-2-april-2018</a><br><blockquote><p>1，Valve\’s Networking Code – a basic transport layer for games. The features are: connection-oriented protocol (like TCP)…but message-oriented instead of stream-oriented; mix of reliable and unreliable messages; messages can be larger than underlying MTU, the protocol performs fragmentation and reassembly, and retransmission for reliable; bandwidth estimation based on TCP-friendly rate control (RFC 5348); encryption; AES per packet, Ed25519 crypto for key exchange and cert signatures; the details for shared key derivation and per-packet IV are based on Google QUIC; tools for simulating loss and detailed stats measurement.<br>2，gron – grep JSON from the command line.<br>3，The Problem With Voting – I don\’t agree with all of the analysis, but the proposed techniques are interesting. I did like the term \”lazy consensus\” where consensus is assumed to be the default state (i.e., “default to yes”). The underlying theory is that most proposals are not interesting enough to discuss. But if anyone does object, a consensus seeking process begins. (via Daniel Bachhuber)<br>4，pix2code – open source code that generates Android, iOS, and web source code for a UI from just a photo. It\’s not coming for your job any time soon (over 77% of accuracy), but it\’s still a nifty idea. (via Two Minute Papers)</p>
</blockquote></p>
<p>8.<br>看到有些blog页面有很酷的聊天式的组件留言<br><a href="https://cn.wordpress.org/plugins/collectchat/" target="_blank" rel="external">https://cn.wordpress.org/plugins/collectchat/</a><br><a href="http://www.phpwechat.com/" target="_blank" rel="external">http://www.phpwechat.com/</a></p>
<p>9.<br><a href="https://github.com/tomnomnom/gron/" target="_blank" rel="external">https://github.com/tomnomnom/gron/</a><br>命令行解析json，如其自述：<br>Make JSON greppable!<br>gron transforms JSON into discrete assignments to make it easier to grep for what you want and see the absolute ‘path’ to it. It eases the exploration of APIs that return large blobs of JSON but have terrible documentation.</p>
<p>10.<br><a href="https://www.elastic.co/blog/leveraging-elasticsearch-for-a-1000-percent-performance-boost" target="_blank" rel="external">Leveraging Elasticsearch for a 1,000% performance boost</a> 有点意外官博还会有类似文章，不过入门可以看看</p>
<p>11.<br>其实开头讲lamda背后的数学，从哲学的角度，引用数学家戏谑的定义：<br>One of my favorite definitions comes from Dr. Eugenia Cheng who says that Category Theory is the mathematics of mathematics.<br>Over the course of three months, I was fortunate enough to attend three awesome conferences: <a href="">Lambda World</a><a href="http://www.lambda.world/" target="_blank" rel="external">http://www.lambda.world/</a> in October, <a href="https://scala.io/" target="_blank" rel="external">ScalaIO</a> in November, and <a href="https://skillsmatter.com/conferences/8784-scala-exchange-2017" target="_blank" rel="external">Scala eXchange</a> in December<br><a href="https://www.47deg.com/blog/science-behind-functional-programming/" target="_blank" rel="external">https://www.47deg.com/blog/science-behind-functional-programming/</a><br><a href="http://www.lambdadays.org/lambdadays2018" target="_blank" rel="external">http://www.lambdadays.org/lambdadays2018</a><br><a href="http://www.lambdadays.org/static/upload/media/15197229996020philipwadlercategoriesfortheworkinghacker.pdf" target="_blank" rel="external">http://www.lambdadays.org/static/upload/media/15197229996020philipwadlercategoriesfortheworkinghacker.pdf</a><br><a href="https://bartoszmilewski.com/" target="_blank" rel="external">https://bartoszmilewski.com/</a><br><a href="https://danielasfregola.com/" target="_blank" rel="external">https://danielasfregola.com/</a><br><a href="http://homepages.inf.ed.ac.uk/wadler/" target="_blank" rel="external">http://homepages.inf.ed.ac.uk/wadler/</a><br><a href="http://eugeniacheng.com/" target="_blank" rel="external">http://eugeniacheng.com/</a></p>
<p>12.<br>理解 monoid，manad，Applicatives，functor， function<br><a href="http://www.ccs.neu.edu/home/dherman/research/tutorials/monads-for-schemers.txt" target="_blank" rel="external">http://www.ccs.neu.edu/home/dherman/research/tutorials/monads-for-schemers.txt</a><br><a href="http://dev.stephendiehl.com/hask/#monads" target="_blank" rel="external">http://dev.stephendiehl.com/hask/#monads</a><br><a href="https://www.zhihu.com/question/19635359" target="_blank" rel="external">https://www.zhihu.com/question/19635359</a><br><a href="http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html" target="_blank" rel="external">http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html</a><br>很好的几篇文章<br>13.<br><a href="http://www.infoq.com/cn/presentations/the-sre-system-under-the-international-environment-of-alibaba" target="_blank" rel="external">阿里巴巴国际环境下的SRE体系</a><br>14.<br><a href="http://www.infoq.com/cn/presentations/the-practice-of-intelligent-monitoring-and-fault-location-of-xiaojukeji" target="_blank" rel="external">滴滴出行海量数据场景下的智能监控与故障定位实践</a><br>15.<br><a href="https://github.com/ngs-doo/dsl-json" target="_blank" rel="external">DSL-JSON library</a></p>
<p>Fastest JVM (Java/Android/Scala/Kotlin) JSON library with advanced compile-time databinding support. Compatible with DSL Platform.<br>Java JSON library designed for performance. Built for invasive software composition with DSL Platform compiler.</p>
<p>16.<br>Elasticsearch 写入流程简介<br><a href="https://zhuanlan.zhihu.com/p/34875310?group_id=960576335035441152" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/34875310?group_id=960576335035441152</a><br>使用ElasticSearch的44条建议<br><a href="http://mp.weixin.qq.com/s/ER70p1edqkScx_DAMSsuVA" target="_blank" rel="external">http://mp.weixin.qq.com/s/ER70p1edqkScx_DAMSsuVA</a></p>
<p>17.<br>推荐看一看，阿里云分布式NoSQL开发王怀远的分享，不乏详细和深入，非常想大段拷贝粘贴此处。<br>Elasticsearch分布式一致性原理剖析(一)-节点篇<br><a href="https://zhuanlan.zhihu.com/p/34830403" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/34830403</a><br>讨论：ES集群构成,节点发现,Master选举,错误检测,集群扩缩容,与Zookeeper、raft等实现方式的比较<br>Elasticsearch分布式一致性原理剖析(二)-Meta篇<br><a href="https://zhuanlan.zhihu.com/p/35283785" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/35283785</a><br>讨论：Master如何管理集群，Meta组成、存储和恢复，ClusterState的更新流程，如何解决当前的一致性问题<br>Elasticsearch分布式一致性原理剖析(三)-Data篇<br><a href="https://zhuanlan.zhihu.com/p/35285514" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/35285514</a><br>讨论：问题背景，数据写入流程，PacificA算法，SequenceNumber、Checkpoint与故障恢复，ES与PacificA的比较.</p>
<p>18.<br>重新认识BM25相似性算法，看完文章就会理解shard分布如何影响搜索结果了<br>Elasticsearch官博的文章，深入浅出，似乎目前出到第三篇了，不过我第一篇还未看完。<br>In Elasticsearch 5.0, we switched to Okapi BM25 as our default similarity algorithm.<br>那么该算法除了计算相似性之外，如何影响结果得分？你知道吗，es shards的分布也会影响得分结果。<br>Understanding How Shards Affect Scoring<br><a href="https://www.elastic.co/blog/practical-bm25-part-1-how-shards-affect-relevance-scoring-in-elasticsearch" target="_blank" rel="external">https://www.elastic.co/blog/practical-bm25-part-1-how-shards-affect-relevance-scoring-in-elasticsearch</a><br><a href="https://www.elastic.co/blog/practical-bm25-part-2-the-bm25-algorithm-and-its-variables" target="_blank" rel="external">https://www.elastic.co/blog/practical-bm25-part-2-the-bm25-algorithm-and-its-variables</a></p>
<p>19.<br>一段一本正经的电影《The Maven》<br><a href="https://manuel.bernhardt.io/2018/04/19/quick-tour-build-tools-scala/" target="_blank" rel="external">https://manuel.bernhardt.io/2018/04/19/quick-tour-build-tools-scala/</a></p>
<p>20.<br>一个性能压测，许多组织在引用的 Kafka 0.10.x 压缩算法的选择<br><a href="http://blog.yaorenjie.com/2017/01/03/Kafka-0-10-Compression-Benchmark/" target="_blank" rel="external">http://blog.yaorenjie.com/2017/01/03/Kafka-0-10-Compression-Benchmark/</a></p>
<p>21.<br><a href="http://kriszhang.com/atomix/" target="_blank" rel="external">分布式一致性框架Atomix学习</a><br>论准确性，分布式一致性算法非Paxos莫属，但种种原因，如复杂到难以理解到大部分实现Paxos算法错误，故许多采用他的改进版本实现，比如Zookeeper、Google Chubby、RAFT等，本文就概览了RAFT的开源实现 Atomix。</p>
<p>22.<br><a href="https://blog.softwaremill.com/synchronous-or-asynchronous-and-why-wrestle-with-wrappers-2c5667eb7acf" target="_blank" rel="external">https://blog.softwaremill.com/synchronous-or-asynchronous-and-why-wrestle-with-wrappers-2c5667eb7acf</a><br>可以说是 java CompletableFuture经典探讨了<br>23.<br><a href="http://www.importnew.com/28653.html" target="_blank" rel="external">敲最少的键，编最多的码</a></p>
<p>24.<br><a href="https://www.kaggle.com/creepykoala/study-of-tree-and-forest-algorithms/notebook" target="_blank" rel="external">https://www.kaggle.com/creepykoala/study-of-tree-and-forest-algorithms/notebook</a></p>
<p>25.<br><a href="http://www.cnblogs.com/kingszelda/p/8886403.html" target="_blank" rel="external">http://www.cnblogs.com/kingszelda/p/8886403.html</a><br><blockquote><p>通过本文分析，可以得知HttpClient默认是有重试机制的，其重试策略是：<br>  1.只有发生IOExecetion时才会发生重试<br>  2.InterruptedIOException、UnknownHostException、ConnectException、SSLException，发生这4中异常不重试<br>  3.get方法可以重试3次，post方法在socket对应的输出流没有被write并flush成功时可以重试3次。<br>  4.读/写超时不进行重试<br>  5.socket传输中被重置或关闭会进行重试<br>  6.以及一些其他的IOException，暂时分析不出来。<br>5.1 我们的业务重试了吗？<br>  对于我们的场景应用中的get与post，可以总结为：<br>只有发生IOExecetion时才会发生重试<br>InterruptedIOException、UnknownHostException、ConnectException、SSLException，发生这4中异常不重试<br>get方法可以重试3次，post方法在socket对应的输出流没有被write并flush成功时可以重试3次。<br>  首先分析下不重试的异常：<br>InterruptedIOException，线程中断异常<br>UnknownHostException，找不到对应host<br>ConnectException，找到了host但是建立连接失败。<br>SSLException，https认证异常<br>  另外，我们还经常会提到两种超时，连接超时与读超时：<br>java.net.SocketTimeoutException: Read timed out<br>java.net.SocketTimeoutException: connect timed out<br>  这两种超时都是SocketTimeoutException，继承自InterruptedIOException，属于上面的第1种线程中断异常，不会进行重试。<br>5.2 哪些场景会进行重试？<br>  对于大多数系统而言，很多交互都是通过post的方式与第三方交互的。<br>  所以，我们需要知道有哪些情况HttpClient给我们进行了默认重试。<br>  我们关心的场景转化为，post请求在输出流进行write与flush的时候，会发生哪些除了InterruptedIOException、UnknownHostException、ConnectException、SSLException以外的IOExecetion。<br>  可能出问题的一步在于HttpClientConnection.flush()的一步，跟进去可以得知其操作的对象是一个SocketOutputStream,而这个类的flush是空实现，所以只需要看wirte方法即可。</p>
</blockquote></p>
<p>26.<br><a href="https://github.com/artix41/awesome-transfer-learning" target="_blank" rel="external">https://github.com/artix41/awesome-transfer-learning</a></p>
<p>27.<br>Java in containers_jdk10<br><a href="https://mjg123.github.io/2018/01/10/Java-in-containers-jdk10.html" target="_blank" rel="external">https://mjg123.github.io/2018/01/10/Java-in-containers-jdk10.html</a></p>
<p>28.<br><a href="https://code.facebook.com/posts/293371094514305/open-sourcing-racerd-fast-static-race-detection-at-scale" target="_blank" rel="external">https://code.facebook.com/posts/293371094514305/open-sourcing-racerd-fast-static-race-detection-at-scale</a></p>
<p>29.<br>Getting FIREd The tech workers who are engineering a mid-30s retirement<br>追求时间自由的工程师<br><a href="https://story.californiasunday.com/tech-retirees" target="_blank" rel="external">https://story.californiasunday.com/tech-retirees</a></p>
<p>30, 电信运营商劫持何时休<br><a href="http://www.52nlp.cn/%E7%94%B5%E4%BF%A1%E8%BF%90%E8%90%A5%E5%95%86%E5%8A%AB%E6%8C%81%E4%BD%95%E6%97%B6%E4%BC%91" target="_blank" rel="external">http://www.52nlp.cn/%E7%94%B5%E4%BF%A1%E8%BF%90%E8%90%A5%E5%95%86%E5%8A%AB%E6%8C%81%E4%BD%95%E6%97%B6%E4%BC%91</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;积攒许久链接，于是该用短文方式。改名 many links仿O’Reilly的Four Short Links.&lt;br&gt;1.&lt;br&gt;&lt;a href=&quot;https://github.com/zz85/kafka-streams-viz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kafka Streams Topology Visualizer&lt;/a&gt;&lt;br&gt;正如其自述“A tool helps visualizing stream topologies by generating nice looking diagrams from a kafka stream topology descriptions.”&lt;br&gt;如果你苦于向他人解释采用的kafka stream 数据处理逻辑，可以考虑该连接生成可视化图片展示，适合作为架构设计插图。&lt;br&gt;2.&lt;br&gt;&lt;a href=&quot;https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-101&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The world beyond batch: Streaming 101&lt;/a&gt;&lt;br&gt;老文章，流式数据处理101，正如文述“A high-level tour of modern data-processing concepts.”值得一看&lt;br&gt;不过文章显然着重是对几个“时间”的理解以及流的粒度探讨：&lt;br&gt;Event time vs. processing time&lt;br&gt;Data processing patterns&lt;br&gt;Bounded data/Unbounded data — batch&lt;br&gt;Fixed windows/Time-agnostic&lt;br&gt;Filtering/Inner-joins/Windowing&lt;br&gt;3.&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;使用火焰图展示结果&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1、Flame Graph项目位于GitHub上：https://github.com/brendangregg/FlameGraph&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2、可以用git将其&lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt;下来：git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/brendangregg/FlameGraph.git&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;我们以perf为例，看一下flamegraph的使用方法：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1、第一步&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$sudo&lt;/span&gt; perf record -e cpu-clock -g -p 28591&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Ctrl+c结束执行后，在当前目录下会生成采样数据perf.data.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2、第二步&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;用perf script工具对perf.data进行解析&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;perf script -i perf.data &amp;amp;&amp;gt; perf.unfold&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3、第三步&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;将perf.unfold中的符号进行折叠：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#./stackcollapse-perf.pl perf.unfold &amp;amp;&amp;gt; perf.folded&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4、最后生成svg图：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;./flamegraph.pl perf.folded &amp;gt; perf.svg&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="weeklyreading" scheme="http://thomaslau.github.io/tags/weeklyreading/"/>
    
  </entry>
  
  <entry>
    <title>风雨一年路</title>
    <link href="http://thomaslau.github.io/2018/05/03/2018-05-03-one_year_summarize/"/>
    <id>http://thomaslau.github.io/2018/05/03/2018-05-03-one_year_summarize/</id>
    <published>2018-05-02T16:09:07.000Z</published>
    <updated>2018-05-08T17:33:14.266Z</updated>
    
    <content type="html"><![CDATA[<p>不知不觉的，一年过去，这一年，家人身体安康，幸事。然而来者不可知也。<br><a id="more"></a><br><img src="/images/blog/201805031.png" alt="shanghai"></p>
<p><img src="/images/blog/201805032.jpg" alt="shanghai"></p>
<p><img src="/images/blog/201805033m.jpg" alt="shanghai"></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=22242344&auto=1&height=66"></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知不觉的，一年过去，这一年，家人身体安康，幸事。然而来者不可知也。&lt;br&gt;
    
    </summary>
    
    
      <category term="life" scheme="http://thomaslau.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Reading 180328</title>
    <link href="http://thomaslau.github.io/2018/03/28/2018-03-28-weekly_reading/"/>
    <id>http://thomaslau.github.io/2018/03/28/2018-03-28-weekly_reading/</id>
    <published>2018-03-27T16:09:07.000Z</published>
    <updated>2018-05-08T18:02:56.814Z</updated>
    
    <content type="html"><![CDATA[<p>下面是之前2-3个月积攒的文摘，清空一下，所以有些看起来可能是不够“新鲜”了。</p>
<p>1, Dubbo源代码分析九：优雅停机<br><a href="http://manzhizhen.iteye.com/blog/2404220" target="_blank" rel="external">http://manzhizhen.iteye.com/blog/2404220</a><br>这几天从dubbo-admin有机会看了一点dubbo代码，对上述shutdown方式，有了点体会。<br>可以说2.5.3版本 dubbo和dubbo-admin交互还是有多处bug的，比如可以对比 com.alibaba.dubbo.registry.integration.RegistryProtocol在2.5.3和2.5.8版本的实现（doChangeLocalExport/notify方法）。</p>
<p>3，python根据项目生成requirements.txt<br>查看一些python项目，很多并未采用requirements.txt方式，编译起来耗费时间，今天学到了可以用 pip freeze的方式：</p>
<pre><code>python项目中必须包含一个 requirements.txt 文件，用于记录所有依赖包及其精确的版本号。以便新环境部署。
在虚拟环境中使用pip生成：
(venv) $ pip freeze &gt;requirements.txt
这种方式配合virtualenv 才好使，否则把整个环境中的包都列出来了。
使用 pipreqs
这个工具的好处是可以通过对项目目录的扫描，自动发现使用了那些类库，自动生成依赖清单。
缺点是可能会有些偏差，需要检查并自己调整下。
# pip install pipreqs
# 使用方式也比较简单
pipreqs ./
</code></pre><a id="more"></a>
<p>3, JMX最佳实践与详解<br><a href="http://shift-alt-ctrl.iteye.com/blog/2404103" target="_blank" rel="external">http://shift-alt-ctrl.iteye.com/blog/2404103</a> 文中这里列举下Java已经内置的多个MXBean实现。</p>
<pre><code>1、BufferPoolMXBean：
   有关“direct”、“mapped” buffer的资源信息；如果Application为网络IO系统（比如Netty编程）、或者有大量文件操作，你应该考虑关注此MXBean。
2、ClassLoadingMXBean：
   有关JVM类加载相关的资源信息；如果Application为序列化相关的组件、脚本化集成组件、有较多代理类（包括动态加载，OSGI）等，你应该关注此MXBean。
3、GarbageCollectorMXBean：
   有关JVM GC相关的资源，包括GC时长、GC次数和相关内存状态。
4、MemoryPoolMXBean：
   有关JVM中“内存池”的相关资源信息，可以配合MemoryManagerMXBean一起使用。一个Application中可能有多个“内存池”实例，我们可以通过MemoryManagerMXBean获取内存池的列表，并查看此内存池的存量和GC相关信息。
5、OperatingSystemMXBean：
   有关操作系统的相关资源信息，比如CPU负载等。
6、PlatformManagedObject：
   内部接口，所有的JAVA平台有关的MXBean都扩展此接口，比如上述几个MXBean；通常应用程序不应该实现它。
7、RuntimeMXBean：
   有关runtime的信息，比如VM的参数、版本等。
8、ThreadMXBean：
   有关运行时线程状态的资源信息，比如“CPU高耗线程”、“死锁线程”等，可以帮助我们优化并发操作等。
</code></pre><p>实际很少用到MXBean来做一些metric/hanck技术，像Kafka也内置了一些MXBean，作为系统运行状态的参考，业界也有一些工具可以将这些MXBean打点至如grafana上展示。</p>
<p>4，暴力美学，“星星之火可以燎原”<br>记得，有诗人吟送道，大概类似，“我在春天种下希望的种子，秋天收获希望“的句子，或者类似句子。<br>但是，太祖的“星星之火可以燎原”，只是八个字，显然更有境界。</p>
<p>5， Latency Sensitive Microservices<br><a href="https://www.infoq.com/presentations/microservices-trading-system" target="_blank" rel="external">https://www.infoq.com/presentations/microservices-trading-system</a></p>
<p>6, 分布式数据库中间件TDDL、Amoeba、Cobar、MyCAT架构比较。文章简洁明了<br><a href="https://www.jianshu.com/p/ed54162d720c" target="_blank" rel="external">https://www.jianshu.com/p/ed54162d720c</a></p>
<p>7，Significant Software Development Developments of 2017<br>需要自备梯子。2017年几个重大软件研发事件备忘录，想不到去年发生这么多大事<br><a href="http://marxsoftware.blogspot.com/2017/12/big-news-2017.html" target="_blank" rel="external">http://marxsoftware.blogspot.com/2017/12/big-news-2017.html</a></p>
<p>8,踩坑无数，<a href="https://tech.meituan.com/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E7%9A%84%E6%BC%94%E8%BF%9B%E4%B8%8E%E8%AE%BE%E6%83%B3.html" target="_blank" rel="external">美团点评高可用数据库架构演进</a>，好文。<br><a href="https://tech.meituan.com/数据库高可用架构的演进与设想.html" target="_blank" rel="external">https://tech.meituan.com/数据库高可用架构的演进与设想.html</a><br>MMM（Master-Master replication manager for MySQL）-&gt; MHA（MySQL Master High Availability）-&gt; MHA+Zebra (DAL)</p>
<p>9, 如何设计一个DNS<br><a href="http://www.infoq.com/cn/articles/how-to-design-dns" target="_blank" rel="external">http://www.infoq.com/cn/articles/how-to-design-dns</a></p>
<p>10，2017双11核心技术揭秘—阿里数据库进入全网秒级实时监控时代 | 阿里中间件团队博客<br><a href="http://jm.taobao.org/2017/12/27/20172703/" target="_blank" rel="external">http://jm.taobao.org/2017/12/27/20172703/</a></p>
<p>11，Linux IO磁盘篇整理小记 - 朱小厮的博客 - CSDN博客<br>一篇磁盘性能简单分析的文章，可以收藏以备查询<br><a href="http://blog.csdn.net/u013256816/article/details/78945085" target="_blank" rel="external">http://blog.csdn.net/u013256816/article/details/78945085</a></p>
<p>12，Peter Norvig，大牛<br><a href="http://norvig.com/" target="_blank" rel="external">http://norvig.com/</a></p>
<p>13， Docker 公司已死 ！ | IT瘾<br><a href="http://itindex.net/detail/57847-docker-%E5%85%AC%E5%8F%B8" target="_blank" rel="external">http://itindex.net/detail/57847-docker-%E5%85%AC%E5%8F%B8</a><br>mac安装kubernetes并运行echoserver - 简书<br><a href="https://www.jianshu.com/p/a42eeb66a19c" target="_blank" rel="external">https://www.jianshu.com/p/a42eeb66a19c</a><br>很早之前看的，好像后来有文章反对，不过值得参考下。</p>
<p>14, uber 技术总结<br><a href="https://eng.uber.com/2017-highlights/" target="_blank" rel="external">https://eng.uber.com/2017-highlights/</a><br><a href="https://eng.uber.com/2017-open-source/" target="_blank" rel="external">https://eng.uber.com/2017-open-source/</a></p>
<p>15， Kafka#3：分布式设计 - 程序园<br><a href="http://www.voidcn.com/article/p-risahvbp-ez.html" target="_blank" rel="external">http://www.voidcn.com/article/p-risahvbp-ez.html</a></p>
<p>16，百亿访问量的监控平台如何炼成？ – 运维派<br><a href="http://www.yunweipai.com/archives/24462.html" target="_blank" rel="external">http://www.yunweipai.com/archives/24462.html</a></p>
<p>17，美团点评联盟广告场景化定向排序机制<br><a href="https://tech.meituan.com/targeting_agentscore.html" target="_blank" rel="external">https://tech.meituan.com/targeting_agentscore.html</a></p>
<p>18，加密数字货币和传统分布式系统共识机制 | 温国兵的随想录<br><a href="https://dbarobin.com/2017/12/27/blockchain-consensus/" target="_blank" rel="external">https://dbarobin.com/2017/12/27/blockchain-consensus/</a></p>
<p>19，Kafka 高性能吞吐揭秘 - 友盟博客 - SegmentFault<br><a href="https://segmentfault.com/a/1190000003985468" target="_blank" rel="external">https://segmentfault.com/a/1190000003985468</a><br>关于Kafka日志留存策略的讨论 - huxihx - 博客园<br><a href="http://www.cnblogs.com/huxi2b/p/8042099.html" target="_blank" rel="external">http://www.cnblogs.com/huxi2b/p/8042099.html</a></p>
<p>20 JVMTI 参考<br><a href="http://blog.caoxudong.info/blog/2017/12/07/jvmti_reference" target="_blank" rel="external">http://blog.caoxudong.info/blog/2017/12/07/jvmti_reference</a></p>
<p>21,<br>如果你使用kafka new-consumer API 即：__consumer_offset存储你的消费信息，当</p>
<p>kafka-client设置props.put(“auto.commit.interval.ms”, “3000”) </p>
<p>则，对于server端，不论client是否消费新的数据，都是每6秒提交offset，server都写入consumeroffset，server不会做去重判断的，也就是每个三秒都会提交offset到__consumer_offset这个topic存储数据</p>
<p>22，Intel meltdown &amp; spectre的几篇文章以及对spark/elasticsearch的影响，好消息。<br><a href="http://www.infoq.com/cn/news/2018/01/meltdown-spectre" target="_blank" rel="external">http://www.infoq.com/cn/news/2018/01/meltdown-spectre</a><br><a href="https://databricks.com/blog/2018/01/13/meltdown-and-spectre-performance-impact-on-big-data-workloads-in-the-cloud.html" target="_blank" rel="external">https://databricks.com/blog/2018/01/13/meltdown-and-spectre-performance-impact-on-big-data-workloads-in-the-cloud.html</a><br><a href="https://www.elastic.co/blog/performance-impact-of-meltdown-on-elasticsearch" target="_blank" rel="external">https://www.elastic.co/blog/performance-impact-of-meltdown-on-elasticsearch</a></p>
<p>23，新晋Java Champions，包括一位JVM（SUN/OpenJDK）专家，曾在infoq 网站/现场 听过，网站上视频，很值得一听。<br><a href="https://www.infoq.com/news/2018/01/JavaChampions2017" target="_blank" rel="external">https://www.infoq.com/news/2018/01/JavaChampions2017</a></p>
<p>24，简介听起来不错<br>经历400多天打磨，HSF的架构和性能有哪些新突破？<br><a href="http://jm.taobao.org/2018/01/16/post180116/" target="_blank" rel="external">http://jm.taobao.org/2018/01/16/post180116/</a></p>
<p>25，JSON-B和Yasson详解，新的JAVA EE API官方规范，以及Eclipse的实现 Yasson<br><a href="http://blog.csdn.net/chszs/article/details/79059116" target="_blank" rel="external">http://blog.csdn.net/chszs/article/details/79059116</a><br>转眼间，似乎已经定下来改名叫 Jakarta EE了</p>
<p>26，ElasticSearch如何支持深度分页<br><a href="http://arganzheng.life/deep-pagination-in-elasticsearch.html" target="_blank" rel="external">http://arganzheng.life/deep-pagination-in-elasticsearch.html</a></p>
<p>学习了，对于超过默认10000条的除了使用ES的 Scan and scroll API之外，文章还提供了官方的 Search After 机制，不过要在ES 5.0版本后。</p>
<pre><code>search_after使用方式上跟scroll很像，但是相对于scroll它是无状态的(stateless)，没有search context开销；
而且它是每次请求都实时计算的，所以也没有一致性问题（相反，有索引变化的话，每次排序顺序会变化呢）。
但是比起from+size方式，还是有同样的问题没法解决：就是只能顺序的翻页，不能随意跳页
</code></pre><p>27，Elasticsearch Performance Tuning Practice at eBay<br><a href="https://www.ebayinc.com/stories/blogs/tech/elasticsearch-performance-tuning-practice-at-ebay/" target="_blank" rel="external">https://www.ebayinc.com/stories/blogs/tech/elasticsearch-performance-tuning-practice-at-ebay/</a><br>具体不列举了，infoq还有翻译的，这里简单总结下：</p>
<pre><code>From our experience, if the index is smaller than 1G, it’s fine to set the shard number to 1. For most scenarios, we can leave the shard number as the default value 5, but if shard size exceeds 30GB, we should increase the shard number to split the index into more shards. The shard number cannot be changed once an index is created, but we can create a new index and use the reindex API to move data.
Increase refresh interval. As we mentioned in the tune indexing performance section, Elasticsearch creates new segment every time a refresh happens. Increasing the refresh interval would help reduce the segment count and reduce the IO cost for search. And, the cache would be invalid once a refresh happens and data is changed. Increasing the refresh interval can make Elasticsearch utilize cache more efficiently.
Use filter context instead of query context if possible. A query clause is used to answer “How well does this document match this clause?” A filter clause is used to answer “Does this document match this clause?” Elasticsearch only needs to answer “Yes” or “No.” It does not need to calculate a relevancy score for a filter clause, and the filter results can be cached. See Query and filter context for details. 
Node query cache. Node query cache only caches queries that are being used in a filter context. Unlike a query clause, a filter clause is a &quot;Yes&quot; or &quot;No&quot; question. Elasticsearch used a bit set mechanism to cache filter results, so that later queries with the same filter will be accelerated. Note that only segments that hold more than 10,000 documents (or 3% of the total documents, whichever is larger) will enable a query cache. For more details, see All about caching.
We can use the following request to check whether a node query cache is having an effect.
GET index_name/_stats?filter_path=indices.**.query_cache
Sort by _doc if you don’t care about the order in which documents are returned
</code></pre><p>28，最近打算kafka官方提个建议：consumeroffset设置为30个。<br>kafka默认consumeroffset设置为50个partition，50=5<em>5</em>2，这对于部署kafka机器除非5的倍数，否则不会均匀分布的，而对于kafka的partition分配策略 hash(group_id)%50，可能效果也是不理想的。而30=2<em>3</em>5，可选择性就多点，但hash(group_id)%30还要具体数据验证。</p>
<p>29, Spring Boot 2.0 New Features: Infrastructure Changes<br><a href="https://springuni.com/spring-boot-2-infrastructure-changes/" target="_blank" rel="external">https://springuni.com/spring-boot-2-infrastructure-changes/</a><br>值得了解下</p>
<p>30,<br>“Go out there and have huge dreams, then show up to work the next morning and relentlessly incrementally achieve them.”<br>~ from the book, How Google Works</p>
<p>31，<br><a href="https://www.elastic.co/blog/categorizing-non-english-log-messages-in-machine-learning-for-elasticsearch" target="_blank" rel="external">https://www.elastic.co/blog/categorizing-non-english-log-messages-in-machine-learning-for-elasticsearch</a></p>
<p>32，有趣，我已经想象到教主九泉下有知，会不会来一句“意不意外惊不惊喜?”<br><a href="https://www.theverge.com/2018/2/16/17020246/apple-park-headquarters-employees-injury-glass-doors-design" target="_blank" rel="external">https://www.theverge.com/2018/2/16/17020246/apple-park-headquarters-employees-injury-glass-doors-design</a></p>
<p>33，值得参考下<br><a href="https://rcoh.me/posts/cache-oblivious-datastructures/" target="_blank" rel="external">https://rcoh.me/posts/cache-oblivious-datastructures/</a></p>
<p>34，基于日志trace的智能故障定位系统 - 百度搜索运维团队技术负责人<br><a href="http://www.infoq.com/cn/presentations/intelligent-fault-location-system-based-on-log-trace" target="_blank" rel="external">http://www.infoq.com/cn/presentations/intelligent-fault-location-system-based-on-log-trace</a></p>
<p>35，语言设计，值得参考<br><a href="https://www.iravid.com/posts/slick-and-shapeless.html" target="_blank" rel="external">https://www.iravid.com/posts/slick-and-shapeless.html</a></p>
<p>36， Java版WAF实现<br><a href="https://www.yangguo.info/2018/01/11/Gateway/" target="_blank" rel="external">https://www.yangguo.info/2018/01/11/Gateway/</a><br>API网关的开源解决方案那么多，为什么我们却还要选择自研？<br><a href="https://github.com/chengdedeng/waf" target="_blank" rel="external">https://github.com/chengdedeng/waf</a></p>
<ul>
<li><a href="https://www.yangguo.info/2017/11/13/HttpProxy研发心得/" target="_blank" rel="external">https://www.yangguo.info/2017/11/13/HttpProxy研发心得/</a></li>
<li><a href="https://www.yangguo.info/2017/06/06/Java版WAF实现/" target="_blank" rel="external">https://www.yangguo.info/2017/06/06/Java版WAF实现/</a></li>
</ul>
<p>37，<br><a href="http://blog.llvm.org/2018/03/clang-is-now-used-to-build-chrome-for.html" target="_blank" rel="external">http://blog.llvm.org/2018/03/clang-is-now-used-to-build-chrome-for.html</a></p>
<p>38，批判的看待，而不是听风就是雨<br><a href="http://www.flax.co.uk/blog/2018/03/02/no-elastic-x-pack-not-going-open-source-according-elastic/" target="_blank" rel="external">http://www.flax.co.uk/blog/2018/03/02/no-elastic-x-pack-not-going-open-source-according-elastic/</a></p>
<p>39，杂文：<br>美团外卖原生广告推荐实践<br><a href="http://www.infoq.com/cn/presentations/the-recommended-practice-of-meituan-takeout-ad" target="_blank" rel="external">http://www.infoq.com/cn/presentations/the-recommended-practice-of-meituan-takeout-ad</a><br>阿里巴巴监控之路<br><a href="http://www.infoq.com/cn/presentations/the-road-of-monitoring-in-alibaba" target="_blank" rel="external">http://www.infoq.com/cn/presentations/the-road-of-monitoring-in-alibaba</a><br>阿里异地多活与同城双活的架构演进<br><a href="http://www.infoq.com/cn/presentations/the-structure-of-alibaba-double-living-in-the-same-city" target="_blank" rel="external">http://www.infoq.com/cn/presentations/the-structure-of-alibaba-double-living-in-the-same-city</a></p>
<p>40， Steve Jobs: Everything in this world… was created by people no smarter than you.<br><a href="http://muratbuffalo.blogspot.com/2018/02/think-before-you-code.html" target="_blank" rel="external">http://muratbuffalo.blogspot.com/2018/02/think-before-you-code.html</a></p>
<p>41，<br><a href="https://fosdem.org/2018/schedule/event/unix_evolution/" target="_blank" rel="external">https://fosdem.org/2018/schedule/event/unix_evolution/</a></p>
<p>42，kibana几个有趣使用<br><a href="https://logz.io/blog/kibana-hacks/" target="_blank" rel="external">https://logz.io/blog/kibana-hacks/</a></p>
<p>43， 快速定位生产故障问题-JVM进程CPU占用率高于100%<br><a href="http://blog.csdn.net/flysqrlboy/article/details/79314521" target="_blank" rel="external">http://blog.csdn.net/flysqrlboy/article/details/79314521</a><br>实施要点：<br>top -Hbp ‘pid’ 定位问题线程<br>jstack ‘pid’ | grep ‘thread_id’ 找出问题代码</p>
<p>44，<a href="http://blog.codefx.org/java/application-class-data-sharing/" target="_blank" rel="external">http://blog.codefx.org/java/application-class-data-sharing/</a></p>
<p>45，<br><a href="http://colobu.com/2018/03/12/Concurrency-Utilities-Enhancements-in-Java-8-Java-9/" target="_blank" rel="external">http://colobu.com/2018/03/12/Concurrency-Utilities-Enhancements-in-Java-8-Java-9/</a></p>
<p>46，来自stackoverflow的调查<br><a href="https://insights.stackoverflow.com/survey/2018/" target="_blank" rel="external">https://insights.stackoverflow.com/survey/2018/</a></p>
<p>47，Kubernetes的抗脆弱性<br><a href="http://www.infoq.com/cn/articles/antifragility-in-kubernetes" target="_blank" rel="external">http://www.infoq.com/cn/articles/antifragility-in-kubernetes</a></p>
<p>48，Java10来了，来看看它一同发布的全新JIT编译器<br><a href="https://mp.weixin.qq.com/s/fNDBX6pxw2Xa5afZpVaBEg" target="_blank" rel="external">https://mp.weixin.qq.com/s/fNDBX6pxw2Xa5afZpVaBEg</a><br><em>与interpreter，GC等JVM的其他子系统相比，JIT compiler并不依赖于诸如直接内存访问的底层语言特性。它可以看成一个输入Java bytecode输出二进制码的黑盒，其实现方式取决于开发者对开发效率，可维护性等的要求。Graal是一个以Java为主要编程语言，面向Java bytecode的编译器。与用C++实现的C1及C2相比，它的模块化更加明显，也更加容易维护。Graal既可以作为动态编译器，在运行时编译热点方法；亦可以作为静态编译器，实现AOT编译。在Java 10中，Graal作为试验性JIT compiler一同发布（JEP 317）。这篇文章将介绍Graal在动态编译上的应用。有关静态编译，可查阅JEP 295或Substrate VM</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面是之前2-3个月积攒的文摘，清空一下，所以有些看起来可能是不够“新鲜”了。&lt;/p&gt;
&lt;p&gt;1, Dubbo源代码分析九：优雅停机&lt;br&gt;&lt;a href=&quot;http://manzhizhen.iteye.com/blog/2404220&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://manzhizhen.iteye.com/blog/2404220&lt;/a&gt;&lt;br&gt;这几天从dubbo-admin有机会看了一点dubbo代码，对上述shutdown方式，有了点体会。&lt;br&gt;可以说2.5.3版本 dubbo和dubbo-admin交互还是有多处bug的，比如可以对比 com.alibaba.dubbo.registry.integration.RegistryProtocol在2.5.3和2.5.8版本的实现（doChangeLocalExport/notify方法）。&lt;/p&gt;
&lt;p&gt;3，python根据项目生成requirements.txt&lt;br&gt;查看一些python项目，很多并未采用requirements.txt方式，编译起来耗费时间，今天学到了可以用 pip freeze的方式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python项目中必须包含一个 requirements.txt 文件，用于记录所有依赖包及其精确的版本号。以便新环境部署。
在虚拟环境中使用pip生成：
(venv) $ pip freeze &amp;gt;requirements.txt
这种方式配合virtualenv 才好使，否则把整个环境中的包都列出来了。
使用 pipreqs
这个工具的好处是可以通过对项目目录的扫描，自动发现使用了那些类库，自动生成依赖清单。
缺点是可能会有些偏差，需要检查并自己调整下。
# pip install pipreqs
# 使用方式也比较简单
pipreqs ./
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="weeklyreading" scheme="http://thomaslau.github.io/tags/weeklyreading/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch几点体会</title>
    <link href="http://thomaslau.github.io/2018/03/25/2018-03-25-pearls_of_Elasticsearch/"/>
    <id>http://thomaslau.github.io/2018/03/25/2018-03-25-pearls_of_Elasticsearch/</id>
    <published>2018-03-25T07:12:07.000Z</published>
    <updated>2018-03-27T16:12:25.799Z</updated>
    
    <content type="html"><![CDATA[<p>很久没有写博客了，感觉快要生疏，今天简单写一点，记录发现的几个问题。</p>
<p>1，<br><strong> 在集群增加一个节点后，不要只看是否启动成功，一定要验证下是否加入集群 </strong><br>考虑到32G内存的官方推荐，很多人会选择同一物理机部署两个以上节点（&gt;128G内存），分配两个端口。比如9300/19300.<br>比如集群在 10.135.30.12:9200/9300 是一个master节点，之后拷贝配置新增如下一个节点：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cluster.name: elasts</div><div class="line">node.master: false</div><div class="line">node.data: true</div><div class="line">transport.tcp.port: 19300</div><div class="line">discovery.zen.ping.unicast.hosts: ["10.135.30.12"]</div></pre></td></tr></table></figure>
<p>会发现该节点启动成功，但是<strong><em>没有加入到elasts这个cluster里</em></strong>。 设置为debug级别再启动，不仔细看是发现不了问题的。<br><a id="more"></a><br>官方是这么解释：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Unicast discovery provides the following settings with the discovery.zen.ping.unicast.hosts:</div><div class="line">Either an array setting or a comma delimited setting. Each value should be <span class="keyword">in</span> the form of host:port or host (</div><div class="line"><span class="built_in">where</span> port defaults to the setting transport.profiles.default.port falling back to transport.tcp.port <span class="keyword">if</span> not <span class="built_in">set</span>). </div><div class="line">Note that IPv6 hosts must be bracketed. Defaults to 127.0.0.1, [::1]</div></pre></td></tr></table></figure>
<p>简单来讲就是上述节点默认使用配置里的 transport.tcp.port 这个端口做discover，而不是 9300.<br>所以建议配置 discovery.zen.ping.unicast.hosts 的时候一定配置端口（使用2.x之后的单播即可）</p>
<p>那么原文 “ort defaults to the setting transport.profiles.default.port falling back to transport.tcp.port if not set”是什么意思？<br>5.2.2代码为例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line">UnicastZenPing.java</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnicastZenPing</span> <span class="keyword">extends</span> <span class="title">AbstractComponent</span> <span class="keyword">implements</span> <span class="title">ZenPing</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_NAME = <span class="string">"internal:discovery/zen/unicast"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Setting&lt;List&lt;String&gt;&gt; DISCOVERY_ZEN_PING_UNICAST_HOSTS_SETTING =</div><div class="line">        Setting.listSetting(<span class="string">"discovery.zen.ping.unicast.hosts"</span>, emptyList(), Function.identity(),</div><div class="line">            Property.NodeScope);</div><div class="line">    ...</div><div class="line">        <span class="keyword">if</span> (DISCOVERY_ZEN_PING_UNICAST_HOSTS_SETTING.exists(settings)) &#123;</div><div class="line">            configuredHosts = DISCOVERY_ZEN_PING_UNICAST_HOSTS_SETTING.get(settings);</div><div class="line">            <span class="comment">// we only limit to 1 addresses, makes no sense to ping 100 ports</span></div><div class="line">            limitPortCounts = LIMIT_FOREIGN_PORTS_COUNT;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// if unicast hosts are not specified, fill with simple defaults on the local machine</span></div><div class="line">            configuredHosts = transportService.getLocalAddresses();</div><div class="line">            limitPortCounts = LIMIT_LOCAL_PORTS_COUNT;</div><div class="line">        &#125;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;DiscoveryNode&gt; <span class="title">resolveHostsLists</span><span class="params">(</span></span></div><div class="line">        ...</div><div class="line">        <span class="keyword">final</span> List&lt;String&gt; hosts,</div><div class="line">        ...) <span class="keyword">throws</span> InterruptedException &#123;</div><div class="line">        ...</div><div class="line">        <span class="comment">// create tasks to submit to the executor service; we will wait up to resolveTimeout for these tasks to complete</span></div><div class="line">        <span class="keyword">final</span> List&lt;Callable&lt;TransportAddress[]&gt;&gt; callables =</div><div class="line">            hosts.stream()</div><div class="line">                .map(hn -&gt; (Callable&lt;TransportAddress[]&gt;) () -&gt; transportService.addressesFromString(hn, limitPortCounts))</div><div class="line">                .collect(Collectors.toList());</div><div class="line">        <span class="keyword">final</span> List&lt;Future&lt;TransportAddress[]&gt;&gt; futures =</div><div class="line">            executorService.invokeAll(callables, resolveTimeout.nanos(), TimeUnit.NANOSECONDS);</div><div class="line">        <span class="keyword">final</span> List&lt;DiscoveryNode&gt; discoveryNodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="comment">// ExecutorService#invokeAll guarantees that the futures are returned in the iteration order of the tasks so we can associate the</span></div><div class="line">        <span class="comment">// hostname with the corresponding task by iterating together</span></div><div class="line">        <span class="keyword">final</span> Iterator&lt;String&gt; it = hosts.iterator();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> Future&lt;TransportAddress[]&gt; future : futures) &#123;</div><div class="line">            <span class="keyword">final</span> String hostname = it.next();</div><div class="line">            <span class="keyword">if</span> (!future.isCancelled()) &#123;</div><div class="line">                <span class="keyword">assert</span> future.isDone();</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">final</span> TransportAddress[] addresses = future.get();</div><div class="line">                    logger.trace(<span class="string">"resolved host [&#123;&#125;] to &#123;&#125;"</span>, hostname, addresses);</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> addressId = <span class="number">0</span>; addressId &lt; addresses.length; addressId++) &#123;</div><div class="line">                        discoveryNodes.add(</div><div class="line">                            <span class="keyword">new</span> DiscoveryNode(</div><div class="line">                                nodeId_prefix + hostname + <span class="string">"_"</span> + addressId + <span class="string">"#"</span>,</div><div class="line">                                addresses[addressId],</div><div class="line">                                emptyMap(),</div><div class="line">                                emptySet(),</div><div class="line">                                Version.CURRENT.minimumCompatibilityVersion()));</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> ExecutionException e) &#123;</div><div class="line">                    <span class="keyword">assert</span> e.getCause() != <span class="keyword">null</span>;</div><div class="line">                    <span class="keyword">final</span> String message = <span class="string">"failed to resolve host ["</span> + hostname + <span class="string">"]"</span>;</div><div class="line">                    logger.warn(message, e.getCause());</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                logger.warn(<span class="string">"timed out after [&#123;&#125;] resolving host [&#123;&#125;]"</span>, resolveTimeout, hostname);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> discoveryNodes;</div><div class="line">    &#125;</div><div class="line">...</div><div class="line"></div><div class="line">TransportService.java</div><div class="line">    <span class="keyword">public</span> TransportAddress[] addressesFromString(String address, <span class="keyword">int</span> perAddressLimit) <span class="keyword">throws</span> UnknownHostException &#123;</div><div class="line">        <span class="keyword">return</span> transport.addressesFromString(address, perAddressLimit);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">TcpTransport.java</div><div class="line">    <span class="keyword">public</span> TransportAddress[] addressesFromString(String address, <span class="keyword">int</span> perAddressLimit) <span class="keyword">throws</span> UnknownHostException &#123;</div><div class="line">        <span class="keyword">return</span> parse(address, settings.get(<span class="string">"transport.profiles.default.port"</span>, TransportSettings.PORT.get(settings)), perAddressLimit);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern BRACKET_PATTERN = Pattern.compile(<span class="string">"^\\[(.*:.*)\\](?::([\\d\\-]*))?$"</span>);</div><div class="line">    <span class="comment">/** parse a hostname+port range spec into its equivalent addresses */</span></div><div class="line">    <span class="keyword">static</span> TransportAddress[] parse(String hostPortString, String defaultPortRange, <span class="keyword">int</span> perAddressLimit) <span class="keyword">throws</span> UnknownHostException &#123;</div><div class="line">        Objects.requireNonNull(hostPortString);</div><div class="line">        String host;</div><div class="line">        String portString = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (hostPortString.startsWith(<span class="string">"["</span>)) &#123;</div><div class="line">            <span class="comment">// Parse a bracketed host, typically an IPv6 literal.</span></div><div class="line">            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString);</div><div class="line">            <span class="keyword">if</span> (!matcher.matches()) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid bracketed host/port range: "</span> + hostPortString);</div><div class="line">            &#125;</div><div class="line">            host = matcher.group(<span class="number">1</span>);</div><div class="line">            portString = matcher.group(<span class="number">2</span>);  <span class="comment">// could be null</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> colonPos = hostPortString.indexOf(<span class="string">':'</span>);</div><div class="line">            <span class="keyword">if</span> (colonPos &gt;= <span class="number">0</span> &amp;&amp; hostPortString.indexOf(<span class="string">':'</span>, colonPos + <span class="number">1</span>) == -<span class="number">1</span>) &#123;</div><div class="line">                <span class="comment">// Exactly 1 colon.  Split into host:port.</span></div><div class="line">                host = hostPortString.substring(<span class="number">0</span>, colonPos);</div><div class="line">                portString = hostPortString.substring(colonPos + <span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 0 or 2+ colons.  Bare hostname or IPv6 literal.</span></div><div class="line">                host = hostPortString;</div><div class="line">                <span class="comment">// 2+ colons and not bracketed: exception</span></div><div class="line">                <span class="keyword">if</span> (colonPos &gt;= <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"IPv6 addresses must be bracketed: "</span> + hostPortString);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// if port isn't specified, fill with the default</span></div><div class="line">        <span class="keyword">if</span> (portString == <span class="keyword">null</span> || portString.isEmpty()) &#123;</div><div class="line">            portString = defaultPortRange;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// generate address for each port in the range</span></div><div class="line">        Set&lt;InetAddress&gt; addresses = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(InetAddress.getAllByName(host)));</div><div class="line">        List&lt;TransportAddress&gt; transportAddresses = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">int</span>[] ports = <span class="keyword">new</span> PortsRange(portString).ports();</div><div class="line">        <span class="keyword">int</span> limit = Math.min(ports.length, perAddressLimit);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; limit; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (InetAddress address : addresses) &#123;</div><div class="line">                transportAddresses.add(<span class="keyword">new</span> InetSocketTransportAddress(address, ports[i]));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> transportAddresses.toArray(<span class="keyword">new</span> TransportAddress[transportAddresses.size()]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">TransportSettings.java</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Setting&lt;String&gt; PORT =</div><div class="line">        <span class="keyword">new</span> Setting&lt;&gt;(<span class="string">"transport.tcp.port"</span>, <span class="string">"9300-9400"</span>, Function.identity(), Property.NodeScope);</div></pre></td></tr></table></figure>
<p>也可看到，es这块debug的日志有所欠缺，如果把UnicastZenPing这个操作时候的实际的端口log下来，方便快速定位问题。</p>
<p>2,<br><strong> ES索引性能的优化 </strong><br>之前文章已推荐<a href="https://www.paypal-engineering.com/2016/08/10/powering-transactions-search-with-elastic-learnings-from-the-field/" target="_blank" rel="external">Ebay一篇文章</a>总结过将Elasticsearch优化到极致的技巧，这里就不再重复，来看点不一样的：<br>不过，这里也不会讨论，诸如 优化索引的 index.refresh_interval，优化segment的index.merge，甚至磁盘的索引均衡（扩分片/reroute）/replia数减少。更不会讨论诸如索引字段的分词/exclude/_all字段禁用/优化_source字段等。</p>
<p>来看下面三个参数：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">index.translog.durability: async</div><div class="line">index.translog.sync_interval: 90s</div><div class="line">index.translog.flush_threshold_size: 1024mb</div></pre></td></tr></table></figure>
<p>主要是 index.translog.durability，看文档 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.2/index-modules-translog.html" target="_blank" rel="external">Translog</a></p>
<p> <strong><em>Translog settingsedit</em></strong><br>The data in the transaction log is only persisted to disk when the translog is fsynced and committed. In the event of hardware failure, any data written since the previous translog commit will be lost.</p>
<p>By default, Elasticsearch fsyncs and commits the translog every 5 seconds if index.translog.durability is set to async or if set to request (default) at the end of every index, delete, update, or bulk request. In fact, Elasticsearch will only report success of an index, delete, update, or bulk request to the client after the transaction log has been successfully fsynced and committed on the primary and on every allocated replica.</p>
<p>The following dynamically updatable per-index settings control the behaviour of the transaction log:</p>
<ul>
<li><strong> index.translog.sync_interval </strong><br>How often the translog is fsynced to disk and committed, regardless of write operations. Defaults to 5s. Values less than 100ms are not allowed.</li>
<li><strong> index.translog.durability </strong><br>Whether or not to fsync and commit the translog after every index, delete, update, or bulk request. This setting accepts the following parameters:<ul>
<li>request<br>(default) fsync and commit after every request. In the event of hardware failure, all acknowledged writes will already have been committed to disk.</li>
<li>async<br>fsync and commit in the background every sync_interval. In the event of hardware failure, all acknowledged writes since the last automatic commit will be discarded.</li>
</ul>
</li>
</ul>
<p>即，为了保证数据不丢失，es translog默认的额持久化策略是 每次请求都会flush。这里暂不代码展开分析，如果应用允许少量的几率丢失数据，那么这里可以设置为异步，并且增加translog大小周期性的flush。</p>
<p>需要注意的是，index.translog.durability 并不是一个dynamic property，即，如果修改索引的该配置，可以删除重建，不过也可以先close该索引，更新setting后再open打开索引。</p>
<p>对于大量请求（每天索引数据量10+亿条，每日索引数据500+GB，1备份，保留5天数据，32CPU，128g内存，机械硬盘，四台实体机），上面的配置优化还是很明显的。</p>
<p>3，<br><strong> 这里简单列个5.x相比2.x的改变 </strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">curl -XPOST &apos;localhost:9200/_cluster/reroute&apos; -d &apos;&#123; </div><div class="line">  &quot;commands&quot; : [ </div><div class="line">      &#123; &quot;allocate_empty_primary&quot; : </div><div class="line">          &#123; &quot;index&quot; : &quot;INDEX&quot;, &quot;shard&quot; : 0, &quot;node&quot;: &quot;&lt;NODE_NAME&gt;&quot;&#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">&#125;&apos;</div><div class="line">curl -XPOST  localhost:9200/_cluster/reroute -d &apos;&#123;</div><div class="line">  &quot;commands&quot; : [ </div><div class="line">    &#123;</div><div class="line">        &quot;move&quot; :&#123;</div><div class="line">            &quot;index&quot; : &quot;za-2018.03.23&quot;, &quot;shard&quot; : 0, &quot;from_node&quot; : &quot;node-20.50&quot;, &quot;to_node&quot; : &quot;node-20.39&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure>
<ul>
<li>上述node均可用名字代替，而不必查询id</li>
<li>reroute的commands，相比细化了下，如 allocate_empty_primary，这在集群状态为red，分片数据确实并且不可恢复的时候还是有用的。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很久没有写博客了，感觉快要生疏，今天简单写一点，记录发现的几个问题。&lt;/p&gt;
&lt;p&gt;1，&lt;br&gt;&lt;strong&gt; 在集群增加一个节点后，不要只看是否启动成功，一定要验证下是否加入集群 &lt;/strong&gt;&lt;br&gt;考虑到32G内存的官方推荐，很多人会选择同一物理机部署两个以上节点（&amp;gt;128G内存），分配两个端口。比如9300/19300.&lt;br&gt;比如集群在 10.135.30.12:9200/9300 是一个master节点，之后拷贝配置新增如下一个节点：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cluster.name: elasts&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;node.master: false&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;node.data: true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;transport.tcp.port: 19300&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;discovery.zen.ping.unicast.hosts: [&quot;10.135.30.12&quot;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;会发现该节点启动成功，但是&lt;strong&gt;&lt;em&gt;没有加入到elasts这个cluster里&lt;/em&gt;&lt;/strong&gt;。 设置为debug级别再启动，不仔细看是发现不了问题的。&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="Elasticsearch" scheme="http://thomaslau.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Reading 170910</title>
    <link href="http://thomaslau.github.io/2017/09/10/2017-09-10-weekly_reading/"/>
    <id>http://thomaslau.github.io/2017/09/10/2017-09-10-weekly_reading/</id>
    <published>2017-09-10T15:29:07.000Z</published>
    <updated>2017-09-10T17:23:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>很久没有更新了，最近比较忙。<br>今天刚好是第33个教师节，怀念因吾逃课多次而气哭却依旧对我苦口婆心谆谆教诲到毕业的高二高三班主任。可惜花无重开日，人无再少年。当爱因斯坦霍金这些天才的头脑思考想象时间之箭逆向的时候，凡夫俗子只能哀叹滚滚长江东逝水，但将白发唱黄鸡？<br>所以，第一个链接附上：邓晓芒的<a href="http://mp.weixin.qq.com/s?timestamp=1505063081&amp;src=3&amp;ver=1&amp;signature=Kp1HJzKUfeq7wGa63hXCrde4tCeSDbO9Wdak7eBQqoGKE1BA*cI01Bjlx-Lsw9UNXfO8eyDCdX5iNjtKIjSizZijosJN*8kUz0weBrkuCygcRhN70SlFPgJDD6i5Z*X9rJdeH7xTToGslS7MIUfDpBKNiLgTLPhr2WTLWKwZOQ4=" target="_blank" rel="external">邓晓芒：我的恩师修斋先生</a><br><a id="more"></a><br>-1，<br>不知道何时知道邓晓芒，但是却是自他和刘小枫一段论战时候开始关注。之前因为刘小枫主编很多非常好的系列著作而青睐，至邓后，方知大师。<br>下面只附上链接，懒癌复发，提笔忘词，故草草了之了。</p>
<p>0，<br><a href="https://stackoverflow.com/questions/3222895/what-is-the-issue-with-the-runtime-discovery-algorithm-of-apache-commons-logging" target="_blank" rel="external">https://stackoverflow.com/questions/3222895/what-is-the-issue-with-the-runtime-discovery-algorithm-of-apache-commons-logging</a></p>
<p>1，You’re not a compiler!<br><a href="https://blog.frankel.ch/you-not-compiler/#gsc.tab=0" target="_blank" rel="external">https://blog.frankel.ch/you-not-compiler/#gsc.tab=0</a><br>2，<br>spring cloud 学习(8) - sleuth &amp; zipkin 调用链跟踪<br><a href="http://www.cnblogs.com/yjmyzz/p/spring-cloud-with-zipkin.html" target="_blank" rel="external">http://www.cnblogs.com/yjmyzz/p/spring-cloud-with-zipkin.html</a><br>3，<br>Dubbo源代码分析八：再说Provider线程池被EXHAUSTED<br><a href="http://manzhizhen.iteye.com/blog/2391177" target="_blank" rel="external">http://manzhizhen.iteye.com/blog/2391177</a><br>有没有道理<br>所以，为了减少在Provider线程池打满时整个系统雪崩的风险，建议将Dispatcher设置成message：<br>4，linux性能分析好文章，消除对load average的误解，以及更好的linux system kernel metrics<br><a href="http://www.brendangregg.com/blog/2017-08-08/linux-load-averages.html" target="_blank" rel="external">http://www.brendangregg.com/blog/2017-08-08/linux-load-averages.html</a></p>
<p>5，在推特上看到一条有感：考古的囚徒困境，在古遗址发现一个泥块做的骰子，科学计算年龄分析是4000年前。<br>但是，考古学家并不能证明，这是不是哪一个19世纪的盗墓贼开的玩笑，用4000年前当时的泥块磨出的骰子？</p>
<p>6，阿里巴巴机器学习系列课程<br><a href="http://blog.csdn.net/buptgshengod/article/details/77675909" target="_blank" rel="external">http://blog.csdn.net/buptgshengod/article/details/77675909</a></p>
<p>7，如何免费的让网站启用HTTPS<br><a href="https://coolshell.cn/articles/18094.html" target="_blank" rel="external">https://coolshell.cn/articles/18094.html</a></p>
<p>8，美团点评数据平台融合实践<br><a href="https://tech.meituan.com/dataplat_coalesce.html" target="_blank" rel="external">https://tech.meituan.com/dataplat_coalesce.html</a></p>
<p>9，基于Raft分布式一致性协议实现的局限及其对数据库的风险，阿里正祥的文章。<br><a href="https://mp.weixin.qq.com/s?timestamp=1504098595&amp;src=3&amp;ver=1&amp;signature=YJFPuCcWbtbBbQQQmWiVQufHWAzMjFcJrJajcocSrJiPCd4*sXT9Jit16XzUn08bqqDalpHZy0NgvUCPGFzpK*437zVSD4PQxeM3QWOkREdkVSetPmeGewCl160Ub48X664mwmWvmefVbKbbire4XXW8LhdYi*2jOUK4rcwCwoE=" target="_blank" rel="external">https://mp.weixin.qq.com/s?timestamp=1504098595&amp;src=3&amp;ver=1&amp;signature=YJFPuCcWbtbBbQQQmWiVQufHWAzMjFcJrJajcocSrJiPCd4*sXT9Jit16XzUn08bqqDalpHZy0NgvUCPGFzpK*437zVSD4PQxeM3QWOkREdkVSetPmeGewCl160Ub48X664mwmWvmefVbKbbire4XXW8LhdYi*2jOUK4rcwCwoE=</a><br>如果上面微信公号 OceanBase过期的话，试一试这个： <a href="http://blog.sina.com.cn/s/blog_3fc85e260102wr0c.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_3fc85e260102wr0c.html</a></p>
<p>10， 城市级故障自动无损容灾的“新常态”方案<br><a href="https://mp.weixin.qq.com/s/qyFbqCQr-iAY1A8VfQuYKA" target="_blank" rel="external">https://mp.weixin.qq.com/s/qyFbqCQr-iAY1A8VfQuYKA</a></p>
<p>12，蒙特利尔大学开放MILA 2017夏季深度学习与强化学习课程视频（附完整PPT）<br><a href="https://zhuanlan.zhihu.com/p/28922147?group_id=886303000086335488" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/28922147?group_id=886303000086335488</a></p>
<p>13.Java performance techniques The cost of HotSpot runtime optimizations by Ionut Balosin<br><a href="https://www.youtube.com/watch?v=NURE0ZPBVPA" target="_blank" rel="external">https://www.youtube.com/watch?v=NURE0ZPBVPA</a></p>
<p>14.BILL JOY FINDS THE JESUS BATTERY<br><a href="https://www.wired.com/story/bill-joy-finds-the-jesus-battery/" target="_blank" rel="external">https://www.wired.com/story/bill-joy-finds-the-jesus-battery/</a><br><a href="https://twitter.com/kevin2kelly/status/898706414394163200" target="_blank" rel="external">https://twitter.com/kevin2kelly/status/898706414394163200</a></p>
<p>15，<br><a href="http://www.layer9.org/2017/08/paper-3-re-architecting-datacenter.html" target="_blank" rel="external">http://www.layer9.org/2017/08/paper-3-re-architecting-datacenter.html</a></p>
<p>16，A history of branch prediction from 1500000 BC to 1995<br><a href="https://danluu.com/branch-prediction/" target="_blank" rel="external">https://danluu.com/branch-prediction/</a><br>分支预测，大家可以搜索java分支预测优化的技术</p>
<p>17.<br><a href="http://muratbuffalo.blogspot.com/2017/08/retrospective-lightweight-distributed.html" target="_blank" rel="external">http://muratbuffalo.blogspot.com/2017/08/retrospective-lightweight-distributed.html</a></p>
<p>18，<a href="http://blog.didispace.com/why-spring-boot-tran/" target="_blank" rel="external">http://blog.didispace.com/why-spring-boot-tran/</a><br>19，！！！！！！<br><a href="https://www.kancloud.cn/kancloud/mysql-design-reference/47425" target="_blank" rel="external">https://www.kancloud.cn/kancloud/mysql-design-reference/47425</a><br>20，<br><a href="http://highscalability.com/blog/2017/9/1/stuff-the-internet-says-on-scalability-for-september-1st-201.html" target="_blank" rel="external">http://highscalability.com/blog/2017/9/1/stuff-the-internet-says-on-scalability-for-september-1st-201.html</a></p>
<p>The Amish use a canary approach when choosing which technologies to adopt. Kevin Kelley, “Wired” Founding Executive Editor &amp; “The Inevitable” author/futurist, explains how on This Week In Startups. The Amish aren’t luddites, they’re slow followers, selective curators who admit technologies into their portfolio based on deeply held core principles. Individuals don’t choose which technologies to adopt, the community decides based on how it impacts the family and community. They ask: will this technology allow me to spend more time with my family? Will this technology increase the strength of our community? Cell phones are allowed, smart phones are not. Cars were rejected because they let people travel far away from family and community. A horse &amp; buggy keeps everyone within a 15 mile radius. Eating meals together as a family is important, so the Amish create backyard businesses. Using a CNC milling machine is OK because it keeps the family together. Solar panels and chain saws are also OK. They have Amish computers, which are computers without an internet connection. And the computer is used in the office only, not at home. How do they pick which technologies to use? They try them. One or two early adopter families use a technology and they are observed. If it’s deemed the technology hurts the family or the community, then the technology is voted off the island.</p>
<p>21，<br><a href="https://github.com/Developer-Y/cs-video-courses" target="_blank" rel="external">https://github.com/Developer-Y/cs-video-courses</a><br><a href="http://muratbuffalo.blogspot.com/2017/08/retrospective-lightweight-distributed.html" target="_blank" rel="external">http://muratbuffalo.blogspot.com/2017/08/retrospective-lightweight-distributed.html</a></p>
<p>22。 <a href="https://www.ziwenxie.site/2017/01/02/unix-network-programming-asynchronous/" target="_blank" rel="external">https://www.ziwenxie.site/2017/01/02/unix-network-programming-asynchronous/</a><br>阻塞式IO(默认)，非阻塞式IO(nonblock)，IO复用(select/poll/epoll)，signal driven IO(信号驱动IO)都是属于同步型IO，因为在第二个阶段: 从内核空间拷贝数据到程序空间的时候不能干别的事。只有异步I/O模型(AIO)才是符合我们上面对于异步型IO操作的含义，在1.wait for data，2.copy data from kernel to user，这两个等待/接收数据的时间段内进程可以干其他的事情，只要等着被通知就可以了。<br>select/poll/epoll<br>即使现在的各个Linux版本普遍引入了copy on write和线程，但实际上进程/线程之间的切换依然还是一笔很大的开销，这个时候我们可以考虑使用上面提到到多路IO复用，回顾一下我们上面提到的多路IO复用模型的基本原理：一个进程可以监视多个文件描述符，一旦某个文件描述符就绪（读/写准备就绪），能够信号通知程序进行相应的读写操作。下面我们就来简单的看一下多路IO复用的三种方式。<br>select<br>int select (int maxfdp1, fd_set <em>readset, fd_set </em>writeset, fd_set <em>exceptset,<br>            const struct timeval </em>timeout);<br>如上面的方法声明所示, select监听三类描述符: readset(读), writeset(写), exceptset(异常), 我们编程的时候可以制定这三个参数监听对应的文件描述符。正如前面提到的,select调用后进程会阻塞, 当select返回后，可以通过遍历fdset，来找到就绪的描述符。<br>select优点在于它的跨平台，但是也有显著的缺点单个进程能够监视的文件描述符的数量存在最大限制，默认设置为1024/2048，虽然设置可以超过这一限制，但是这样也可能会造成效率的降低。而且select扫描的时候也是采用的轮循，算法复杂度为O(n)，这在fdset很多时效率会较低。<br>下面总结一下select的三个缺点，在下面我们来看epool是如何解决这些缺点的：<br>每次调用select，都需要将fd_set从用户态拷贝到内核态。<br>每次调用select都要在内核遍历所有传递过来的fd_set看哪些描述已经准备就绪。<br>select有1024的容量限制。<br>poll<br>int poll (struct pollfd <em>fdarray, unsigned long nfds, int timeout);<br>poll和select并没有太大的区别，但是它是基于链表实现的所以并没有最大数量限制，它将用户传入的数据拷贝到内核空间，然后查询每个fd对应的设备状态，如果设备就绪则在设备等待队列中加入一项并继续遍历，如果遍历完所有fd后没有发现就绪设备，则挂起当前进程，直到设备就绪或者主动超时，被唤醒后它又要再次遍历fd。这个过程经历了多次的遍历。算法复杂度也是O(n)。<br>epoll<br>int epoll_create(int size);<br>int epoll_ctl(int epfd, int op, int fd, struct epoll_event </em>event);<br>int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);<br>select和poll都只提供了一个函数。而epoll提供了三个函数: epoll_create是创建一个epoll句柄, epoll_ctl是注册要监听的事件类型, epoll_wait则是等待事件的产生。与select相比，epoll几乎没有描述符限制(cat /proc/sys/fs/file-max可查看)。它采用一个文件描述符管理多个描述符，将用户的文件描述符的事件存放到kernel的一个事件表中，这样在程序空间和内核空间的只要做一次拷贝。它去掉了遍历文件描述符这一步骤，采用更加先进的回调(callback)机制，算法复杂度降到了O(1)。p.s: 虽然表面看起来epoll非常好，但是对于连接数少并且连接都十分活跃的情况下，select和poll的性能可能比epoll好，因为epoll是建立在大量的函数回调的基础之上。<br>下面我们来总结一下epoll是如何解决select的三个缺点的：<br>在epoll_ctl每次注册事件到epoll句柄的时候，会将fd拷贝到内核中，保证了每个fd在整个过程中只会拷贝一次。<br>对于第二缺点，epool_ctl为每个fd指定一个回调函数，当设备就绪，就会调用这个回调函数，而这个回调函数会把准备就绪的fd加入一个就绪链表，而不用像select那样去重新遍历一次看有哪些准备就绪的文件描述符。<br>对于第三个缺点，我们上面已经提及到了，epoll几乎没有容量限制，可以通过cat /proc/sys/fs/file-max来查看。</p>
<p>23.<br><a href="http://lovestblog.cn/blog/2015/05/12/direct-buffer/" target="_blank" rel="external">http://lovestblog.cn/blog/2015/05/12/direct-buffer/</a></p>
<p>24。<br><a href="https://shipilev.net/jvm-anatomy-park/2-transparent-huge-pages/" target="_blank" rel="external">https://shipilev.net/jvm-anatomy-park/2-transparent-huge-pages/</a></p>
<p>25.<br>Translation Lookaside Buffer：TLB<br><a href="https://zh.wikipedia.org/wiki/%E8%BD%89%E8%AD%AF%E5%BE%8C%E5%82%99%E7%B7%A9%E8%A1%9D%E5%8D%80" target="_blank" rel="external">https://zh.wikipedia.org/wiki/%E8%BD%89%E8%AD%AF%E5%BE%8C%E5%82%99%E7%B7%A9%E8%A1%9D%E5%8D%80</a><br><a href="https://baike.baidu.com/item/TLB" target="_blank" rel="external">https://baike.baidu.com/item/TLB</a></p>
<p>26.<br><a href="http://blog.csdn.net/dm_vincent/article/details/76735888" target="_blank" rel="external">http://blog.csdn.net/dm_vincent/article/details/76735888</a><br>本文分析了Spring Boot启动时的关键步骤，主要包含以下两个方面：<br>SpringApplication实例的构建过程<br>其中主要涉及到了初始化器(Initializer)以及监听器(Listener)这两大概念，它们都通过META-INF/spring.factories完成定义。<br>SpringApplication实例run方法的执行过程<br>其中主要有一个SpringApplicationRunListeners的概念，它作为Spring Boot容器初始化时各阶段事件的中转器，将事件派发给感兴趣的Listeners(在SpringApplication实例的构建过程中得到的)。这些阶段性事件将容器的初始化过程给构造起来，提供了比较强大的可扩展性。<br>如果从可扩展性的角度出发，应用开发者可以在Spring Boot容器的启动阶段，扩展哪些内容呢：<br>初始化器(Initializer)<br>监听器(Listener)<br>容器刷新后置Runners(ApplicationRunner或者CommandLineRunner接口的实现类)<br>启动期间在Console打印Banner的具体实现类</p>
<p>27.<br>MySQL索引<br><a href="https://www.kancloud.cn/kancloud/mysql-design-reference/47425" target="_blank" rel="external">https://www.kancloud.cn/kancloud/mysql-design-reference/47425</a><br>28.<br><a href="https://www.confluent.io/blog/publishing-apache-kafka-new-york-times/?utm_source=wanqu.co&amp;utm_campaign=Wanqu+Daily&amp;utm_medium=website" target="_blank" rel="external">https://www.confluent.io/blog/publishing-apache-kafka-new-york-times/?utm_source=wanqu.co&amp;utm_campaign=Wanqu+Daily&amp;utm_medium=website</a><br>29.<br><a href="http://www.baeldung.com/java-stream-indices" target="_blank" rel="external">http://www.baeldung.com/java-stream-indices</a><br>30.<br>Spring Boot实现自动配置的基础<br><a href="http://blog.csdn.net/dm_vincent/article/details/77435515" target="_blank" rel="external">http://blog.csdn.net/dm_vincent/article/details/77435515</a><br>31.<br>百度开源项目推荐<br><a href="http://itindex.net/detail/57429-%E7%99%BE%E5%BA%A6-%E5%BC%80%E6%BA%90-%E9%A1%B9%E7%9B%AE" target="_blank" rel="external">http://itindex.net/detail/57429-%E7%99%BE%E5%BA%A6-%E5%BC%80%E6%BA%90-%E9%A1%B9%E7%9B%AE</a><br>32.<br>Lucene’s near-real-time segment index replication<br><a href="http://blog.mikemccandless.com/2017/09/lucenes-near-real-time-segment-index.html" target="_blank" rel="external">http://blog.mikemccandless.com/2017/09/lucenes-near-real-time-segment-index.html</a><br>33.<br>不使用synchronized和lock，如何实现一个线程安全的单例？<br><a href="http://www.hollischuang.com/archives/1860" target="_blank" rel="external">http://www.hollischuang.com/archives/1860</a><br>34.<br>reddit搜索简史<br><a href="https://redditblog.com/2017/09/07/the-search-for-better-search-at-reddit/" target="_blank" rel="external">https://redditblog.com/2017/09/07/the-search-for-better-search-at-reddit/</a><br>35.<br>分布式学习资源list Resources for Getting Started with Distributed Systems<br><a href="https://caitiem.com/2017/09/07/getting-started-with-distributed-systems/" target="_blank" rel="external">https://caitiem.com/2017/09/07/getting-started-with-distributed-systems/</a><br>36.<br><a href="http://www.cakesolutions.net/teamblogs/scalameta-tut-cache" target="_blank" rel="external">http://www.cakesolutions.net/teamblogs/scalameta-tut-cache</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很久没有更新了，最近比较忙。&lt;br&gt;今天刚好是第33个教师节，怀念因吾逃课多次而气哭却依旧对我苦口婆心谆谆教诲到毕业的高二高三班主任。可惜花无重开日，人无再少年。当爱因斯坦霍金这些天才的头脑思考想象时间之箭逆向的时候，凡夫俗子只能哀叹滚滚长江东逝水，但将白发唱黄鸡？&lt;br&gt;所以，第一个链接附上：邓晓芒的&lt;a href=&quot;http://mp.weixin.qq.com/s?timestamp=1505063081&amp;amp;src=3&amp;amp;ver=1&amp;amp;signature=Kp1HJzKUfeq7wGa63hXCrde4tCeSDbO9Wdak7eBQqoGKE1BA*cI01Bjlx-Lsw9UNXfO8eyDCdX5iNjtKIjSizZijosJN*8kUz0weBrkuCygcRhN70SlFPgJDD6i5Z*X9rJdeH7xTToGslS7MIUfDpBKNiLgTLPhr2WTLWKwZOQ4=&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;邓晓芒：我的恩师修斋先生&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="weeklyreading" scheme="http://thomaslau.github.io/tags/weeklyreading/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Reading 170825</title>
    <link href="http://thomaslau.github.io/2017/08/26/2017-08-26-weekly_reading/"/>
    <id>http://thomaslau.github.io/2017/08/26/2017-08-26-weekly_reading/</id>
    <published>2017-08-26T02:29:07.000Z</published>
    <updated>2017-08-26T02:25:23.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><a href="http://gao-xianglong.iteye.com/blog/2390697?from=thomaslau.github.io" target="_blank" rel="external">优雅停机</a><br>dubbo原生是支持优雅停机的，其实也就是采用JDK的ShudownHook来实现，当然仅限kill -15 PID。这里也顺带说一下dubbo优雅停机的原理，如下所示：<br>服务提供方<br>· 停止时，先标记为不接收新请求，新请求过来时直接报错，让客户端重试其它机器。<br>· 然后，检测线程池中的线程是否正在运行，如果有，等待所有线程执行完成，除非超时，则强制关闭。<br>服务消费方<br>· 停止时，不再发起新的调用请求，所有新的调用在客户端即报错。<br>· 然后，检测有没有请求的响应还没有返回，等待响应返回，除非超时，则强制关闭。<a id="more"></a></li>
<li><a href="https://blog.risingstack.com/designing-microservices-architecture-for-failure?from=thomaslau.github.io" target="_blank" rel="external">Designing a Microservices Architecture for Failure</a>，这是译文版的<a href="https://segmentfault.com/a/1190000010799109?from=thomaslau.github.io" target="_blank" rel="external">设计一个容错的微服务架构</a>， infoq好像有类似，这里再推荐下。<br>注意点: Graceful Service Degradation, Change management, Health-check and Load Balancing, Self-healing, Failover Caching, Retry Logic, Rate Limiters and Load Shedders, Fail Fast and Independently, Bulkheads, Circuit Breakers, Testing for Failures.<br>Key Takeways<br>1) Dynamic environments and distributed systems - like microservices - lead to a higher chance of failures.<br>2) Services should fail separately, achieve graceful degradation to improve user experience.<br>3) 70% of the outages are caused by changes, reverting code is not a bad thing.<br>Fail fast and independently. Teams have no control over their service dependencies.<br>4) Architectural patterns and techniques like caching, bulkheads, circuit breakers and rate-limiters help to build reliable microservices.</li>
<li>grep递归查询<br>习惯用 find . -type f -exec grep -l ‘alvin’ {} \; 的可以试一试grep -rl alvin .<br>递归查询多个目录：grep -ril alvin /home/cato /htdocs/zenf</li>
<li><a href="https://peadarcoyle.wordpress.com/2017/08/16/why-zalandos-tech-radar-sucks-as-a-stack/" target="_blank" rel="external">WHY  ZALANDO’S  TECH  RADAR  SUCKS  AS  A  STACK
</a></li>
<li><a href="https://www.zhihu.com/question/30508773/answer/205831957" target="_blank" rel="external">反欺诈(Fraud Detection)中所用到的机器学习模型有哪些？</a>, 有点乱，不过有点参考意义。其实答案里提到的解法，看上去不论可视化或者异常检测对比，从描述来看，这都很依赖人工验证。</li>
<li><a href="http://blog.csdn.net/chdhust/article/details/77507453" target="_blank" rel="external">基于SEDA的异步框架设计与实现</a>, SEDA技术是个存在了很久的概念。<br>目前，面对并发环境，主流互联网服务器编程模型有两种：多线程模型以及事件驱动模型。但是这两个模型都不足以解决这个问题。我们来首先看一下这两种编程模型。</li>
<li>飒然Hang的<a href="http://www.rowkey.me/blog/2017/08/24/arch/?from=thomaslau.github.io" target="_blank" rel="external">谈谈架构</a></li>
<li>API设计，DDD，REST，CQRS<br><a href="http://blog.didispace.com/use-ddd-design-rest-api/" target="_blank" rel="external">http://blog.didispace.com/use-ddd-design-rest-api/</a><br><a href="http://blog.didispace.com/spring-boot-starter-swagger-1.2.0/" target="_blank" rel="external">http://blog.didispace.com/spring-boot-starter-swagger-1.2.0/</a></li>
<li><a href="http://blog.didispace.com/spring-cloud-starter-dalston-6-1/" target="_blank" rel="external">Spring Cloud构建微服务架构：服务网关</a>, 算是初步了解下Spring Cloud.<br>文中因为权限带来状态，所以将权限认证放在API GateWay，其实这样gateway也会有状态的。<br>而且，权限，面向具体服务还是整个系统通用，比如内网限制／ip限制这里通用、用户只能更新自己数据这类business logic。</li>
<li>最近看了Brew的时隔十多年的两篇CAP和Lynch的2002年的CAP证明，发觉他们其实描述的不是同一个东西，至少，他们对一种理论的约束条件定义不同，甚至对Patition tolerance定义也是不同。比如CAP在十多年里就引起许多争论，大多是对A／P理解不同，Brew两篇文章都没有清晰定义。<br>CAP存在的原因，其实就是工程师和理论派的差异的地方了，一个注重理解和实用，哪怕是靠记忆记住，即便是不完全的真理，另一个侧重证明。比如有专家发文为NoSQL没有实现一致性遗憾，比如有自称是CA的，但是后来经验证被认为是CA特性，但是极致情况下表现AP特性。<br>可以看看<a href="https://aphyr.com/tags/jepsen" target="_blank" rel="external">aphyr的jepson</a>系列，实用Jepson验证一些分布式系统。<br>后面会再写篇关于CAP的文章，先立个flag，天气原因，今天就先写到这里了。</li>
<li><p>冯·诺伊曼关于拟合大象的比喻。<br><a href="https://www.quora.com/What-exactly-does-John-Von-Neumanns-quote-with-four-parameters-I-can-fit-an-elephant-with-five-I-can-make-him-wiggle-his-trunk-mean" target="_blank" rel="external">What exactly does John Von Neumann’s quote “with four parameters I can fit an elephant, with five I can make him wiggle his trunk” mean?</a>, <a href="https://www.johndcook.com/blog/2011/06/21/how-to-fit-an-elephant/" target="_blank" rel="external">How-to-fit-an-elephant/</a><br>以下摘录网上：<br>1953年春天，26岁即是康奈尔大学教授的戴森和自己的学生利用赝标介子理论计算了介子与质子的散射截面，得到了与费米的实验观测值十分相符的结果。喜不自禁的长途跋涉去告之费米，费米扫了一眼说，“有两种方式做理论物理学的计算。一种是我喜欢的，就是要对你正在计算的过程拥有一个清晰的物理图象。另一种是得到精确而且自洽的数学形式体系。这两者都是你的计算不具备的。”<br>戴森当时有点懵了，但他还是斗胆问费米，为什么他在计算中所采用的赝标介子理论算不上是自洽的数学形式体系。得到了简洁的解答之后，绝望的戴森又问费米对理论计算与实验测量结果的相符做何感想。费米反问道：“你们在计算过程中引入了多少个任意参数？”戴森回答说四个。于是费米讲了一句日后很著名的话：“<strong>我记得我的朋友约翰·冯·诺依曼（John von Neumann）曾经说过，用四个参数我可以拟合出一头大象，而用五个参数我可以让它的鼻子摆动。</strong>”对话结束了，沮丧的戴森赶回康奈尔大学，向自己的学生告知了费米的意见。尽管他们决定还是把手头的计算做完并发表，但达成共识：这个工作之后就转换研究方向。</p>
<p>故事可能是搞笑成分居多，甚至2010年6月，Jurgen Mayer也发表了题为“<a href="https://publications.mpi-cbg.de/Mayer_2010_4314.pdf" target="_blank" rel="external">用四个复参数画出一头大象</a>”的有点戏谑的论文。<br>其实有些理论参数最多达二十几，但是太多参数限制了理论的自由度，不论是从理论分析还是实践，简洁是最好的选择。自爱因斯坦玻尔海森堡等黄金时代科学家那一代，费米／奥本海默等是少有的理论和实验均有造诣，他们都参与了原子弹的研发，此后估计物理学理论和实验<a href="http://blog.sciencenet.cn/blog-3779-803730.html" target="_blank" rel="external">似乎走上了不同的道路</a>。<br><a href="http://blog.sciencenet.cn/blog-3779-1071332.html" target="_blank" rel="external">http://blog.sciencenet.cn/blog-3779-1071332.html</a><br>这里也有一个<a href="http://www.wolframalpha.com/input/?i=elephant+curve&amp;lk=1&amp;a=ClashPrefs_*PlaneCurve.ElephantCurve-" target="_blank" rel="external">wolframalpha版本的大象拟合</a>, 有兴趣可以输入 heart curve看看，在马上到来的七夕之前. Matrix67也有文章描述怎么画一个breoken heart curve。<br><img alt="Elephant Curve" src="http://www5b.wolframalpha.com/Calculate/MSP/MSP131520778i9g08099ai40000587f1ig8cd9a32c4?MSPStoreType=image/gif&s=41" width="480" data-file-width="480" data-file-height="409"><br>来源：<a href="https://en.wikiquote.org/wiki/John_von_Neumann" target="_blank" rel="external">wikiquote John_von_Neumann</a></p>
</li>
<li>摘自月光的blog：<br>布林和佩奇到了中国后，在访问百度公司时，李彦宏邀请他们吃Subway三明治，布林和佩奇拒绝了。<br>Google中文域名的前期准备活动正在有条不紊的进行之中，直到2005年5月7号，一份意料之外的电子邮件飞进了埃里克·施密特（Eric Schmidt）收件箱中。这份邮件来自微软一位名叫李开复的计算机专家兼高层。“我已经听说Google正准备进军中国市场。”他在邮件中写道：“我想告诉你的是，如果Google真有意在华大干一番，我会有兴趣跟你谈谈。”<br>。。。<br>2009年6月，新出现的问题牵涉到Google搜索建议（Google Suggest），用户在搜索框中输入一两个词字时，就立即显示完整的搜索关键词。Google搜索团队意识到中文用户因嫌打字麻烦通常只会在搜索框中输入一些短的关键词，这一创新功能最初就是针对此问题在中国开发出来的，最后才在全球范围应用开来。但中国官方发现令其不安的内容，搜索建议提供的一些内容与色情有关。<br>2010年3月，粉丝在中国总部门前的Google标志边上点亮蜡烛，留下鲜花和卡片，写下祝福话语。<br>对于Google中国的雇员，这天让人终身难忘。他们中没有人事先到消息。大卫在北京时间上午6点的时候发布了公告。北京和上海的不少Googler都是在同事叫醒他们后，才第一次听到这条消息的。员工涌入办公室，一脸地惊讶。那天下午，Google告诉所有雇员不用上班，给他们发电影片去看《阿凡达》。第二天，所有人都聚集在咖啡厅，与布林以及其他高管开电话会议，几位高管在会议上试图解释Google这样做的原因。这并非易事。Google的新任政府公关负责人朱莉·朱对员工和海外高层做了一次感性的陈词。山景城的高层犹如是战场上抛弃了自己士兵的将军。她争辩道，你们不应该放弃，你们应该继续战斗下。<br>李开复称，如果眼光放长点（20年或30年后）看中国，中国无疑会变得越来越开放。Google撤出大陆的决定只是这一进程的插曲，此次事件的导火索主要是由于中国领导人已经退到底线了。“不出两年的时间，下一代将走上舞台。”李开复说。“他们更年轻，更进步，许多受过美国的教育。许多在商界工作，掌管银行业——他们会变得更加开放。”</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://gao-xianglong.iteye.com/blog/2390697?from=thomaslau.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;优雅停机&lt;/a&gt;&lt;br&gt;dubbo原生是支持优雅停机的，其实也就是采用JDK的ShudownHook来实现，当然仅限kill -15 PID。这里也顺带说一下dubbo优雅停机的原理，如下所示：&lt;br&gt;服务提供方&lt;br&gt;· 停止时，先标记为不接收新请求，新请求过来时直接报错，让客户端重试其它机器。&lt;br&gt;· 然后，检测线程池中的线程是否正在运行，如果有，等待所有线程执行完成，除非超时，则强制关闭。&lt;br&gt;服务消费方&lt;br&gt;· 停止时，不再发起新的调用请求，所有新的调用在客户端即报错。&lt;br&gt;· 然后，检测有没有请求的响应还没有返回，等待响应返回，除非超时，则强制关闭。
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="weeklyreading" scheme="http://thomaslau.github.io/tags/weeklyreading/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Reading 170820</title>
    <link href="http://thomaslau.github.io/2017/08/20/2017-08-20-weekly_reading/"/>
    <id>http://thomaslau.github.io/2017/08/20/2017-08-20-weekly_reading/</id>
    <published>2017-08-20T13:59:07.000Z</published>
    <updated>2017-08-30T00:58:20.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>阿里周洋分享了<a href="http://jm.taobao.org/2017/08/08/080802/?from=thomaslau.gigthub.io" target="_blank" rel="external">中间件技术峰会分享|双11高可用架构演进之路</a>, 介绍了阿里第四代技术架构，将其分为了，容量规划、限流降级、依赖治理、开关预案、故障演练、流量调度。<br>其实这是一系列，另外一篇<a href="http://jm.taobao.org/2017/08/09/20170809/?from=thomaslau.gigthub.io" target="_blank" rel="external">中间件技术峰会分享|阿里电商架构演变之路</a>，很简略的概括了阿里架构史，其实也是国内很多公司开发的架构史。里面将淘宝架构分为：<br><strong>淘宝从初创开始到今天，我们的技术架构总体上经历了四代：<br>第一代是基于LAMP的一套结构。第二代是基于Java的应用架构。第三代是基于分布式体系，构建出一整套的分布式架构。第四代是基于IDC，不但应用能够分布，整数数据中心也能够分布。</strong><br>这里也可以看出，前三代，阿里跟随国外技术圈。本人工作过几家大公司其实也是该思路。</li>
<li><p><a href="https://www.youtube.com/watch?v=OYpTn0nWKR4" target="_blank" rel="external">10,000 Java performance tips over 15 years - what did I learn</a><br>上面是油管链接，也可以去<a href="https://www.voxxed.com/2017/07/10000-java-performance-tips-15-years/" target="_blank" rel="external">voxxed 2017</a>, <a href="https://cfp.devoxx.co.uk/2017/talks/conf" target="_blank" rel="external">devoxx conf</a>上面一些基于JVM语言／优化等链接还是很值得看的。</p>
<a id="more"></a>
<p>作者简介: Jack Shirazi<br>Head of Engineering for Nexmo, the Vonage API, Java Champion since 2005,Founder of javaperformancetuning.com,Author of Java Performance Tuning (O’Reilly),JUG Leader.<br>视频和ppt很值得一看，列举了JAVA优化（主要基于JVM／OS等层面）常见的方法，虽然许多介绍属于蜻蜓点水式的，但作为日常JAVA性能优化参考指南的需求还是可以的。<a href="／images/Devoxx-UK-2017.pdf">这里</a>的链接，以便不好翻墙或查找困难。</p>
</li>
<li><p><a href="https://coderbee.net/index.php/db/20170818/1539" target="_blank" rel="external">MySQL 高性能的索引策略</a>，总结了MySQL高效索引创建约定，很全面了。许多开发，存储上来首选就是NoSQL等，我觉得MySQL依旧是高并发的首选，只要你对设计得当。<br>“在选择和编写利用索引的查询时，记住下面三个原则：<br>a)单行访问是很慢的。（特别是机械硬盘存储，SSD 的随机 I/O 快很多，不过这点仍然成立。）最好读取的块中包含尽可能多所需的行。使用索引可以创建位置引用以提升效率。<br>b)按顺序访问范围数据是很快的。原因：1，顺序 I/O 不需要多次磁盘寻道，所以比随机 I/O 快很多（特别是机械硬盘）；2，如果服务器能够按需要顺序读取数据，那么就不再需要额外的排序操作，并且 group by 查询也无须再做排序和将行按组进行聚合计算。<br>c)索引覆盖查询是很快的。存储引擎不需要回表查找行。”</p>
</li>
<li><p><a href="http://blog.csdn.net/defonds/article/details/76247842" target="_blank" rel="external">Linux 如何添加一个 Swap 文件 - Defonds 的专栏</a>, 有些情况下，一些开发人员会选择增加swap空间以提升Linux 服务器/桌面系统的性能。本文作者翻译nixCraft创始人Vivek Gite在不创建一个新的分区的前提下添加一个swap文件到Linux系统的文章。<br>虽然有人也强调过多的swap甚至swap有害，不过对个人桌面系统／非大型应用，本文值得一看。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># dd if=/dev/zero of=/swapfile1 bs=1024 count=524288</span></div><div class="line"><span class="comment"># chown root:root /swapfile1 //为交换文件设置合适的文件权限</span></div><div class="line"><span class="comment"># chmod 0600 /swapfile1  //为交换文件设置合适的文件权限</span></div><div class="line"><span class="comment"># mkswap /swapfile1   //设置一个 Linux 交换区域</span></div><div class="line"><span class="comment"># swapon /swapfile1   //启用交换文件</span></div><div class="line"><span class="comment"># vi /etc/fstab       //修改 /etc/fstab 文件</span></div><div class="line">追加一行：</div><div class="line">/swapfile1 none swap sw 0 0</div><div class="line">$ free -m</div><div class="line"><span class="comment"># swapon -s           //如何显示 Linux 上交换区的使用摘要</span></div><div class="line"><span class="comment"># --</span></div><div class="line"><span class="comment"># swapoff /swapfile1  //关闭 Linux 上用于 page 分页以及交换区域的设备和文件</span></div><div class="line"><span class="comment"># swapon -s</span></div></pre></td></tr></table></figure>
</li>
<li><p>发表在IBM dw上的文章 <a href="https://www.ibm.com/developerworks/cn/java/j-java8idioms6/index.html" target="_blank" rel="external">为什么完美的lambda表达式只有一行</a><br>作者列举了充满危险的长lambda表达式（该用拆分短小的）, 值得借鉴。<br>不过，如果跟着作者的思路／需求来看，作者说的却是是有道理的，但可惜的是如果我们跳出 lambda函数的范畴，就会发现，或者实践中会发现，其实这么做坏处更多，<a href="https://medium.com/@cindysridharan/small-functions-considered-harmful-91035d316c29" target="_blank" rel="external">这里有篇文章可以解释</a>, 挺欣赏后者对DRY原则和“GoF”的Design Pattern的“have largely gone unchallenged for decades now and direly require reconsideration, especially so since the programming landscape as well as paradigms have evolved vastly in the recent years”质疑态度，如果你真的阅读并写过代码的话，作者质疑了程序员还在奉为圣经的《clean code》，Martin Fowler的function length讨论。在实际开发中，flexibility to accommodate any changes以及可持续／可控的修改也很重要，所以，我认为关键是作出好的Abstraction，不仅仅是模型的抽象，还有架构／代码／变与不变的抽象，受编程书以及大公司教条的误导，有的开发过分关注 int xxx =100这样“写死了”的问题，其实比这更严重的是代码组织架构组织架构死了，才是更严重问题，毕竟前者就算hard code，可是代码改起来好改。所以关键是要做好“Abstraction”。</p>
</li>
<li><p>kafka-exactly-once引发的争吵。<br>一个老生常谈的问题，源于kafka官宣<a href="https://www.confluent.io/blog/exactly-once-semantics-are-possible-heres-how-apache-kafka-does-it/" target="_blank" rel="external">Exactly-once Semantics are Possible: Here’s How Kafka Does it</a>kafka 0.11版本引入exactly once的实现“we have hit an exciting milestone the Kafka community has long been waiting for: we have  introduced exactly-once semantics in Apache Kafka in the 0.11 release ”, 可以说是企图对消息幂等思考的致以尾声，并实现:正好一次传递与事务性消息。<br>之后引发许多讨论<a href="https://www.reddit.com/r/programming/comments/6kh65f/exactlyonce_semantics_is_possible_heres_how/" target="_blank" rel="external">Reddit</a>/<a href="https://news.ycombinator.com/item?id=14670801" target="_blank" rel="external">HN</a>， 更多人质疑这是对 FLP理论或两个拜占庭将军的问题的违反，Kafka的co-creator Jay Kreps发文做了解释<a href="https://medium.com/@jaykreps/exactly-once-support-in-apache-kafka-55e1fdd0a35f" target="_blank" rel="external">exactly-once-support-in-apache-kafka</a>。<br>更多：<a href="https://softwaremill.com/what-kafka-exactly-once-really-means/" target="_blank" rel="external">what-kafka-exactly-once-really-means</a>,里面:</p>
<pre><code>The features which make the above possible are:
a)idempotent producers (introduced in 0.11)
b)transactions across partitions (introduced in 0.11)
c)Kafka-based offset storage (introduced in 0.8.1.1)
Let’s see which of these features are useful at which stage of an exactly-once processing pipeline.
</code></pre><p><a href="http://the-paper-trail.org/blog/exactly-not-atomic-broadcast-still-impossible-kafka/" target="_blank" rel="external">Exactly-once or not, atomic broadcast is still impossible in Kafka – or anywhere</a>, ZK的PMC Flavio Junqueira argued that <a href="https://fpj.me/2017/07/04/no-consensus-in-exactly-once/" target="_blank" rel="external">No consensus in exactly-once</a>.<br><a href="http://bravenewgeek.com/you-cannot-have-exactly-once-delivery-redux/" target="_blank" rel="external">You Cannot Have Exactly-Once Delivery Redux</a>里作者将该问题归结为“Exactly-once delivery” and “Exactly-once processing”. 文章虽简单，但是涉及许多分布式知识。</p>
<pre><code>“Delivery” is a transport semantic. “Processing” is an application semantic.
“Exactly-once delivery” is a poor term. The word “delivery” is overloaded. 
Frankly, I think it’s a marketing word. The better term is “exactly-once processing.” 
Some call the distinction pedantic, but I think it’s important and there is some nuance. 
Kafka did not solve the Two Generals Problem. Exactly-once delivery, at the transport level, is impossible. 
It doesn’t exist in any meaningful way and isn’t all that interesting to talk about. 
“We have a word for infinite packet delay—outage,” as Jay puts it. That’s why TCP exists, 
but TCP doesn’t care about your application semantics. 
And in the end, that’s what’s interesting—application semantics. 
My problem with “exactly-once delivery” is it assumes too much, 
which causes a lot of folks to make bad assumptions. 
“Delivery” is a transport semantic. “Processing” is an application semantic.
...
To achieve exactly-once processing semantics, 
we must have a closed system with end-to-end support for modeling input, 
output, and processor state as a single, atomic operation. 
Kafka supports this by providing a new transaction API and idempotent producers. 
...
Exactly-once processing is an end-to-end guarantee and the application 
has to be designed to not violate the property as well. If you are using the consumer API, 
this means ensuring that you commit changes to your application state 
concordant with your offsets as described here.
</code></pre><p>最后，Jay Kreps写了第二篇文章作解释，<a href="https://medium.com/@jaykreps/exactly-once-one-more-time-901181d592f9" target="_blank" rel="external">exactly-once-one-more-time</a></p>
<pre><code>We think the factoring of the problem into two pieces makes this far far easier:
a)Processing using the streams api
b)Connectors using the connect api
This makes guarantees for processing quite transparent (you just set a config to enable it). 
The only real restriction is that you must maintain state using the provided facilities.
Connectors require more thought about the interaction between Kafka and the external system 
but these can be made reusable. So if one person has implemented a Kafka=&gt;Mysql connector 
and tested it everyone else can just use that.
</code></pre><p>这里<a href="https://tech.meituan.com/distributed_queue_based_programming-optimization.html" target="_blank" rel="external">美团消息队列的扫盲贴</a>, 忘记了RocketMQ曾声称自己是exactly once还是消息顺序可保证了。</p>
</li>
<li>对上面补充，一篇很好的中文介绍 <a href="http://danielw.cn/FLP-proof" target="_blank" rel="external">FLP Impossibility的证明</a>，<a href="http://blog.csdn.net/chen77716/article/details/27963079" target="_blank" rel="external">FLP Impossibility</a>作为分布式重要定理<br>FLP 不可能原理：在网络可靠，存在节点失效（即便只有一个）的最小化异步模型系统中，不存在一个可以解决一致性问题的确定性算法。<br>不可能原理实际上告诉人们，不要浪费时间去为异步分布式系统设计在任意场景下都能实现共识的算法. 不过作为细化，CAP定理则相当于在实践中提供了一个几乎可以打破FLP问题的解决方案。</li>
<li>the morning paper，为作者叹，能有这么多时间去读paper，关键是精力涉及面如此之广<br><a href="http://blog.acolyer.org/2017/08/08/a-general-purpose-counting-filter-making-every-bit-count" target="_blank" rel="external">A better, faster, smaller Approximate Membership Query data structure - time to retire your Bloom filters</a>, 我们知道，在Approximate Membership Query (AMQ) data structures的需求里，许多追求高性能的系统喜欢用Bloom Filter作为去重方法，但是作为m位BitSet这样简单数据结构，支持插入和查找两种操作， 这在在需要经常变动（增删）的数据集中，Bloom Filter性能不如其改进版Cuckoo Filter，这篇文章介绍了类似Cuckoo Filter的数据结构Counting Quotient Filter，不过原论文好像被删除了。</li>
<li><a href="https://shipilev.net/jvm-anatomy-park/2-transparent-huge-pages/" target="_blank" rel="external">JVM Anatomy Park #2: Transparent Huge Pages
</a> JVM Anatomy Park系列文章第二篇，实验了并讨论对于java应用：What are Large Pages? What are Transparent Huge Pages? How does it help me?!</li>
<li><a href="http://blog.codinglabs.org/articles/algorithms-for-cardinality-estimation-part-iii.html" target="_blank" rel="external">对LogLog Counting的进一步理解</a>, 理解Hyperloglog Counting, Redis也引入非常节约资源的Hyperloglog，不过Hyperloglog只能Counting，实际还是鸡肋的。</li>
<li><a href="http://ifeve.com/classloader%E8%A7%A3%E6%83%91/" target="_blank" rel="external">ifeve的ClassLoader解惑</a><br>介绍了java classloader一些问题，不过文中举例可惜没有提到著名的SlF4j面对的classloader问题。<br>另介绍了Tomcat的ClassLoader。<pre><code>总结下，默认情况下tomcat中commonloader,sharedloader,catalinaloader是同一个加载器，
其类查找路径都是同一个地方。其实catalinaloader主要工作应该是加载tomcat本身启动所需要的类，
而sharedloader是webappclassloader的父类，所以应该是加载一些所有webap共享的类，而commonlaoder作为
sharedloader,catalinaloader的父类，自然设计目的是为了加载二者共享的类。所以如果能恰当的使用tomcat中设计的这种策略，
修改catalina.properites中三种加载器类加载路径，就会真正达到这种设计效果
</code></pre></li>
<li><p>另一篇介绍SpringBoot Classloader的文章<a href="http://blog.csdn.net/hengyunabc/article/details/77413669" target="_blank" rel="external">深入Spring Boot：ClassLoader的继承关系和影响</a><br>总结spring boot里ClassLoader的继承关系<br>a)在IDE里main函数执行时，只有一个ClassLoader，也就是SystemClassLoader<br>b)在以fat jar运行时，有一个LaunchedURLClassLoader，它的parent是SystemClassLoader<br>LaunchedURLClassLoader的urls是fat jar里的BOOT-INF/classes和BOOT-INF/lib下的jar。<br>SystemClassLoader的urls是fat jar本身。<br>c)在解压目录运行时，和fatjar类似，不过url都是目录形式。目录形式会有更好的兼容性。<br>spring boot 1.3.<em> 和 1.4.</em> 版本的区别<br>在1.3.<em> 版本里应用的类和loader的类都是打包在一个fat jar里应用依赖的jar放在fat jar里的/lib下面。<br>1.4.</em> 版本后loader的类放在fat jar里应用的类打包放在fat jar的BOOT-INF/classes目录里<br>应用依赖的jar放在fat jar里的/lib下面。<br>带来的问题<br>a)demo.jar!/BOOT-INF/classes!/ 这样子url不工作<br>b)demo.jar!/META-INF/resources 下的资源问题<br>c)getResource(“”) 和 getResources(“”) 的返回值的问题<br>d)类似 classpath<em>:*</em>-service.xml 的通配问题</p>
</li>
<li><p>入门tf。<br><a href="http://www.pinchofintelligence.com/detecting-bats-recognising-sound-tensorflow/" target="_blank" rel="external">http://www.pinchofintelligence.com/detecting-bats-recognising-sound-tensorflow/</a><br><a href="https://medium.com/towards-data-science/how-to-build-a-dynamic-garden-using-machine-learning-d589468f7c04" target="_blank" rel="external">https://medium.com/towards-data-science/how-to-build-a-dynamic-garden-using-machine-learning-d589468f7c04</a><br><a href="https://medium.com/towards-data-science/number-plate-detection-with-supervisely-and-tensorflow-part-1-e84c74d4382c" target="_blank" rel="external">https://medium.com/towards-data-science/number-plate-detection-with-supervisely-and-tensorflow-part-1-e84c74d4382c</a></p>
</li>
<li>来自<a href="https://huoding.com/2017/08/13/628" target="_blank" rel="external">火丁笔记的SYN和RTO问题</a><br>RTO的最大值是 120 秒，最小值是 200 毫秒，在建立连接后，因为目前网络都很快，所以大部分连接的<br>RTO 都会接近 TCP_RTO_MIN，也就是 200ms，可以通过「ss -int」命令来确认</li>
<li><a href="http://developer.lightbend.com/blog/2017-08-11-sbt-1-0-0/" target="_blank" rel="external">http://developer.lightbend.com/blog/2017-08-11-sbt-1-0-0/</a></li>
<li><a href="https://pragmaticintegrator.wordpress.com/2017/08/13/small-hack-to-avoid-ssl-validation-in-spring-resttemplate/" target="_blank" rel="external">https://pragmaticintegrator.wordpress.com/2017/08/13/small-hack-to-avoid-ssl-validation-in-spring-resttemplate/</a></li>
<li>该来的终究要来的。<a href="https://www.azul.com/jdk-9-pitfalls-for-the-unwary/" target="_blank" rel="external">JDK 9: Pitfalls For The Unwary</a>, infoq的一篇<a href="http://www.infoq.com/cn/presentations/introduction-of-java9-new-features-jigsaw" target="_blank" rel="external">Java 9 新特性介绍及 Jigsaw 一览</a></li>
<li><a href="http://blog.jobbole.com/112170/" target="_blank" rel="external">cp 命令两个高效的用法</a><br>cp -r Misc /media/clh/4388-D5FE //更新你的文件夹<br>cp –force –backup=numbered test1.py test1.py //版本备份</li>
<li>没想到啊，一致性还分这么多种类！<a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-apache-cassandra3x1/index.html?from=thomaslau.github.io" target="_blank" rel="external">casanddra 跟最终一致性</a><br>Cassandra 被称为”最终一致性”，有点误导人，Cassandra 一致性是可以调整的。<br>那么什么是一致性？现实世界是按照一致性的级别进行衡量的，最终一致性是几种一致性模型的一种：<br><strong>严格一致性（Strict Consistency）</strong>：所有的请求必须按照线性方式执行。读出的数据始终为最近写入的数据。<br>这种一致性只有全局时钟存在时才有可能，在分布式网络环境不可能实现；<br><strong>顺序一致性（Sequential Consistency）</strong>：所有使用者以同样的顺序看到对统一数据的操作，但是该顺序不一定是实时的；<br><strong>因果一致性（Causal Consistency）</strong>：只有存在因果关系的写操作才要求所有使用者以相同的次序看到，对于无因果关系的写入则并行进行，<br>无次序保证。因果一致性可以看作是对顺序一致性功能的一种优化，但是在实现时必须建立与维护因果依赖图，是相当困难的；<br><strong>管道一致性（PRAM/FIFO Consistency）</strong>：在因果一致性模型上的进一步弱化，要求由某一个使用者完成的写操作可以被其他所有的使用者按照顺序感知到，<br>而从不同使用者中来的写操作则无需保证顺序，就像一个一个的管道一样。相对来说比较容易实现；<br><strong>弱一致性（Weak Consistency）</strong>：只要求对共享数据结构的访问保证顺序一致性。对于同步变量的操作具有顺序一致性，<br>是全局可见的，且只有当没有写操作等待处理时才可进行，以保证对于临界区域的访问顺序进行。<br>在同步时点，所有使用者可以看到相同的数据；<br><strong>释放一致性（Release Consistency）</strong>：弱一致性无法区分使用者是要进入临界区还是要出临界区，释放一致性使用两个不同的操作语句进行了区分。<br>需要写入时使用者 acquire 该对象，写完后 release，acquire-release 之间形成了一个临界区，<br>提供释放一致性也就意味着当 release 操作发生后，所有使用者应该可以看到该操作；<br><strong>最终一致性（Eventual Consistency）</strong>：所有的复制都会在分布式系统内部传播数据，但是需要花点时间，最终所有节点的副本数据会实现一致。<br>当没有新更新的情况下，更新最终会通过网络传播到所有副本点，所有副本点最终会一致，也就是说，<br>使用者在最终某个时间点前的中间过程中无法保证看到的是新写入的数据。可以采用最终一致性模型有一个关键要求，<br>需要用户可以接受读出陈旧数据；<br><strong>Delta 一致性</strong>：系统会在 Delta 时间内达到一致。这段时间内会存在一个不一致的窗口，该窗口可能是因为日志迁移的过程导致的。<br><strong>最终一致性的几种具体实现</strong>：<br><strong>读不旧于写一致性（Read-your-writes consistency）</strong>：使用者读到的数据，总是不旧于自身上一个写入的数据。<br><strong>会话一致性（Session Consistency）</strong>：比读不旧于写一致性更弱化。使用者在一个会话中才保证读写一致性，启动新会话后则无需保证。<br><strong>单读一致性（Monotonic Read Consistency）</strong>：读到的数据总是不旧于上一次读到的数据。<br><strong>单写一致性（Monotonic Write Consistency）</strong>：写入的数据完成后才能开始下一次的写入。<br><strong>写不旧于读一致性（Writes-follow-reads Consistency）</strong>：写入的副本不旧于上一次读到的数据，即不会写入更旧的数据。<br>Cassandra 把一致性级别的决定权交到了客户端手中，这意味着客户决定每一次操作的一致性级别，即决定写入操作过程中集群内部必须有多少份副本完成才能响应读请求。如果客户设置的一致性级别的值小于设置的副本数量值，那么即便一些节点宕机，更新依然成功。</li>
<li><a href="https://mp.weixin.qq.com/s/yVbZfE7oWGmnfmcFTeSV4w" target="_blank" rel="external">Elasticsearch前沿：ES 5.x改进详解与ES6展望</a></li>
<li>一篇老文章<a href="http://www.infoq.com/cn/news/2017/04/2017-Serverless" target="_blank" rel="external">2017年会是Serverless爆发之年吗</a>,虽然已过0.75年，可见批评之声还是很多的。</li>
<li><a href="http://fangjian0423.github.io/2017/05/16/springboot-condition-annotation/" target="_blank" rel="external">SpringBoot源码分析之条件注解的底层实现</a></li>
<li><a href="http://hbasefly.com/2017/07/26/transactions-1/" target="_blank" rel="external">数据库事务系列－事务模型基础</a>, 好文，记忆不熟的可以常看，至少可以用来。</li>
<li><a href="http://www.hascode.com/2017/08/parameterized-tests-with-junit-5/" target="_blank" rel="external">Using JUnit 5 Parameterized Tests</a>系列文章</li>
<li><a href="http://www.cnblogs.com/yjmyzz/p/7390331.html" target="_blank" rel="external">@Transactional导致AbstractRoutingDataSource动态数据源无法切换的解决办法</a><br>在org.springframework.jdbc.datasource.DataSourceTransactionManager#doBegin 这个类的源代码中找到了答案<br>第7-16行，在开始一个事务前，如果当前上下文的连接对象为空，获取一个连接对象，然后保存起来，下次doBegin再调用时，就直接用这个连接了，根本不做任何切换(类似于缓存命中！）<br>这样就解释得通了： doSomeThing()方法被调用前，加了一段select方法，相当于已经切换到了slave从库，<br>然后再进入doBegin方法时，就直接拿这个从库的链接了，不再进行切换。<br>那为啥其它同样启用事务的方法，又能正常连到主库呢？同样的解释，因为这类方法前面，没有任何其它操作，<br>而xml中的动态数据源配置，默认连接的就是master主库，因此没有问题。</li>
<li><a href="https://www.zhihu.com/question/63946700" target="_blank" rel="external">如何评价波恩大学 Norbert Blum 关于 P≠NP 的证明</a>，这个链接跟进Norbert Blum 关于 P≠NP 的证明。<br>虽然每隔一段时间都会有证明冒出，虽然基本上认为不相等才是正道，还是有人不死心企图证明之。吾等表示围观还是要围观的。</li>
<li>最后，来一段中二的 <a href="https://thedailywtf.com/articles/ride-the-url-line" target="_blank" rel="external">Daily WTF 有趣的计算机幽默</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;阿里周洋分享了&lt;a href=&quot;http://jm.taobao.org/2017/08/08/080802/?from=thomaslau.gigthub.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中间件技术峰会分享|双11高可用架构演进之路&lt;/a&gt;, 介绍了阿里第四代技术架构，将其分为了，容量规划、限流降级、依赖治理、开关预案、故障演练、流量调度。&lt;br&gt;其实这是一系列，另外一篇&lt;a href=&quot;http://jm.taobao.org/2017/08/09/20170809/?from=thomaslau.gigthub.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中间件技术峰会分享|阿里电商架构演变之路&lt;/a&gt;，很简略的概括了阿里架构史，其实也是国内很多公司开发的架构史。里面将淘宝架构分为：&lt;br&gt;&lt;strong&gt;淘宝从初创开始到今天，我们的技术架构总体上经历了四代：&lt;br&gt;第一代是基于LAMP的一套结构。第二代是基于Java的应用架构。第三代是基于分布式体系，构建出一整套的分布式架构。第四代是基于IDC，不但应用能够分布，整数数据中心也能够分布。&lt;/strong&gt;&lt;br&gt;这里也可以看出，前三代，阿里跟随国外技术圈。本人工作过几家大公司其实也是该思路。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OYpTn0nWKR4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;10,000 Java performance tips over 15 years - what did I learn&lt;/a&gt;&lt;br&gt;上面是油管链接，也可以去&lt;a href=&quot;https://www.voxxed.com/2017/07/10000-java-performance-tips-15-years/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;voxxed 2017&lt;/a&gt;, &lt;a href=&quot;https://cfp.devoxx.co.uk/2017/talks/conf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;devoxx conf&lt;/a&gt;上面一些基于JVM语言／优化等链接还是很值得看的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="weeklyreading" scheme="http://thomaslau.github.io/tags/weeklyreading/"/>
    
  </entry>
  
  <entry>
    <title>信息熵的理解</title>
    <link href="http://thomaslau.github.io/2017/08/14/2017-08-14-a_dive_into_Shannon_entropy/"/>
    <id>http://thomaslau.github.io/2017/08/14/2017-08-14-a_dive_into_Shannon_entropy/</id>
    <published>2017-08-14T13:59:07.000Z</published>
    <updated>2017-08-19T11:51:21.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>记录一下看书收获。
</code></pre><h1 id="1-什么是熵"><a href="#1-什么是熵" class="headerlink" title="1. 什么是熵"></a>1. 什么是熵</h1><p>让我们先看一下维基百科对玻尔兹曼熵的来源描述和定义：</p>
<pre><code>熵（Entropy），是一种测量在动力学方面不能做功的能量总数，熵的量度正是能量退化的指标。
熵亦被用于计算一个系统中的失序现象，也就是计算该系统混乱的程度。
1877年，玻尔兹曼发现单一系统中的熵跟构成热力学性质的微观状态数量相关。玻尔兹曼并假设：
S=k*lnΩ
公式中的k是玻尔兹曼常数，Ω则为该宏观状态中所包含之微观状态数量。这个被称为玻尔兹曼原理的假定是统计力学的基础。
统计力学则以构成部分的统计行为来描述热力学系统.
</code></pre><p>这就是玻尔兹曼的Entropy的来源了，而当普朗克来中国讲学时用到entropy这个词时，还没有对应名称，胡刚复教授偷懒地根据公式（dS=dQ/T），把“商”字加火旁来意译“entropy”这个字，创造了“熵”字（胡刚复与叶企孙同样是我国近代物理奠基人）。<br>不过上面是物理学衍生的玻尔兹曼熵，在1948年，克劳德·艾尔伍德·香农将热力学的熵引入到信息论，定义了信息熵的概念，因此它又被称为香农熵。</p>
<pre><code>在信息论中，熵是接收的每条消息中包含的信息的平均量，又被称为信息熵、信源熵、平均自信息量。
这里，“消息”代表来自分布或数据流中的事件、样本或特征。
</code></pre><p>这即是熵的定义了，这里隐含的想法是，比较不可能发生的事情，当它发生了，意味着更多的信息。<br>所以熵也可理解为不确定性的量度[Measure of Uncertainty]，即越随机的信源的熵越大。<br><a id="more"></a><br>从玻尔兹曼熵到信息熵，后者是前者泛化(下文熵的表示)，那么Shannon当初是受玻尔兹曼的启发吗？<br>应该很难考证，毕竟不像欧拉一样会留下思考过程的手稿，不过有个故事或许可以说明：</p>
<pre><code>“My greatest concern was what to call it. I thought of calling it ‘information’, 
but the word was overly used, so I decided to call it ‘uncertainty’. When 
I discussed it with John von Neumann, he had a better idea. Von Neumann 
told me, ‘You should call it entropy, for two reasons: In the first place 
your uncertainty function has been used in statistical mechanics under 
that name, so it already has a name. In the second place, and more 
important, nobody knows what entropy really is, so in a debate you will 
always have the advantage.”
</code></pre><p>上面是香农自述纠结于命名，而正是冯・诺伊曼考虑到类似统计力学，建议命名“熵(entropy)”，而且辩论中香农还有解释权的优势。如果理解不透也不必烦恼，因为香农还不认同《控制论》作者维纳对信息熵的定义呢，所以我们按照Shannon的理解。</p>
<h1 id="2-熵的表示"><a href="#2-熵的表示" class="headerlink" title="2. 熵的表示"></a>2. 熵的表示</h1><p>熵的表示是<br>$$ H(X) = E[I(X)] = E[-\ln(P(X))]$$<br>其中，P为X的概率质量函数（probability mass function），E为期望函数，而I(X)是X的信息量（又称为自信息）。I(X)本身是个随机变数。<br>当取自有限的样本时，熵的公式可以表示为：<br>$$ H(X) = - \sum_{i=1}^{m} p(x_i) \cdot \log p(x_i) $$<br>当p(x_i) = 1/m 是不是非常像玻尔兹曼的假设？不过玻尔兹曼其实是一个定义，而在Shannon，不禁会问，这个式子是怎么来的？</p>
<h1 id="3-信息熵的来源"><a href="#3-信息熵的来源" class="headerlink" title="3. 信息熵的来源"></a>3. 信息熵的来源</h1><p>知乎上<a href="https://www.zhihu.com/question/30828247" target="_blank" rel="external">为什么信息熵要定义成-Σp*log(p)</a>，最高赞给出了答案，“假设两个随机变量x和y是相互独立的，那么分别观测两个变量得到的信息量应该和同时观测两个变量的信息量是相同的，即h(x+y)=h(x)+h(y)”, 然后通过这个特性使用柯西函数方程就可以推出Σp*log(p)的定义。</p>
<pre><code>柯西函数方程是以下的函数方程：
    f(x+y)=f(x)+f(y)
此方程的解被称为加性函数。在有理数的范围中，可以用简单的代数得到唯一一类的解，
表示为f(x)=cx ，其中c任意给定的有理数。在实数中，这个方程仍然有这一类解。
</code></pre><p>知乎的答案几乎是正确的，但是有错。<br><strong>这里其实都没有提及对h(x+y) 的约束，比如：x+y其实也是一个函数，“+”代表什么操作或者有什么约束？对于一个代数系统不定义该操作是难理解的，在这里是概率，也就是分别发生x／y事件[的概率]和同时发生事件x／y事件[的概率]带来的信息量是相同的。</strong><br><strong>换句话说，x+y 我们通常认为这是一个“加性”的操作，这样，我们得到的答案只能是类似f(x)=cx 的形式，而不是高赞答案里的</strong>Σp*log(p)。<br>事实上，看Bishop的《Pattern Recognition and Machine Learning》里，原文用的是H(x,y)而不是H(x+y).</p>
<h2 id="3-1-信息量"><a href="#3-1-信息量" class="headerlink" title="3.1 信息量"></a>3.1 信息量</h2><p>让我们先定义一个函数 I, 他是事件概率为p(i)的事件i的信息量的度量(in terms of an event i with probability pi), 记作I(p), 并有如下属性(可参见<a href="https://en.wikipedia.org/wiki/Entropy_(information_theory" target="_blank" rel="external">Entropy_information_theory</a>))：</p>
<pre><code>a)  I(p)随p递增而递减
b)  I(p) ≥ 0
c)  I(1) = 0
d)  I(p1*p2) = I(p1) + I(p2), 即事件独立，具备可加性
</code></pre><p>令I 二次可导:</p>
<p>$$ I(p_1p_2) = I(p_1)+I(p_2) $$</p>
<p>$$ p_2I’(p_1p_2) = I’(p_1) $$</p>
<p>$$ I’(p_1p_2)+p_1p_2I’’(p_1p_2) = 0 $$</p>
<p>$$ I’(u)+uI’’(u) = 0 $$</p>
<p>$$ (u\mapsto uI’(u))’ = 0 $$</p>
<p>这里其实是用的是f’(x) = 0的特性推出f(x)=C 从而得出$I(u)=k\log u $ 对于$k\in \mathbb {R} $<br><strong>实际上根据高等数学里，柯西函数方程 f(x+y) = f(x) + f(y) 这个函数方程的解是 f(x) = f(1) * x [假设f 是连续函数],为了转化为上面那个形式，令g(x)=f(e^x)就有</strong><br>$$ g(x+y)=f(e^{x+y})=f(e^xe^y)=f(e^x)+f(e^y)=g(x)+g(y).$$</p>
<p>f(x<em>y)=f(x)+f(y)特性见：<a href="https://math.stackexchange.com/questions/423492/overview-of-basic-facts-about-cauchy-functional-equation" target="_blank" rel="external">Overview of basic facts about Cauchy functional equation</a><br>上述得到 事件p(i)的信息量计算公式，这就是数学的魅力。不过美中不足是信息量的单位是什么？对数学而言，人为的定义，当对数以2为底，单位是比特（bit），对数以e为底，单位是纳特/nats。<br>假设每个字母出现概率均等，英语26个字母，每个字母信息量是 I=-log(1/26)=4.7, 常用汉字2500，则信息量为11.3，这大约可以解释为什么表达同一个意思，汉字数量一般小于英文的 <em>*字母</em></em> 数量。</p>
<h2 id="3-2-信息熵"><a href="#3-2-信息熵" class="headerlink" title="3.2 信息熵"></a>3.2 信息熵</h2><p>有了信息量，我们就可以定义 随机变量X的平均信息量（期望信息量），也就是熵：<br>如果有一个系统S内存在多个事件S = {x1,…,xn}，每个事件的概率分布P = {p1, …, pn}，则整个系统的平均消息量,即熵为：</p>
<p>$$ H(X) =  - \sum {p({x_i})} \log (p({x_i})) ~~~~ (i = 1,2, \ldots ,n)$$</p>
<h1 id="4-熵的特性"><a href="#4-熵的特性" class="headerlink" title="4 熵的特性"></a>4 熵的特性</h1><h2 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1 定义"></a>4.1 定义</h2><p><strong>两点分布的熵</strong><br>在上面熵的定义中，我们假设 两点分布的情况，假设p(x=1)=q, 代入即可得<br>$${\rm{H(X) = }} - \sum_{x \in X} {p(x)} \ln (p(x)) =  - q\ln q - (1 - q)\ln (1 - q)$$</p>
<p>可以通过求导得出 q=1/2，即分布均匀时候，系统熵最大为ln2，而退化为确定性分布分布时最小为0，<br>那么这是不是意味着当分布均匀时候系统熵最大？确实如此，当满足已知条件的前提下，最大熵原理指出均匀分布熵最大，下文会证明。让我们来先熟悉几个定义：<br><strong>联合熵 Jiont entropy</strong><br>对于两个随机变量X，Y，X的取值为x1,x2…,xm,Y的取值为 y1,y2,…yn，令其联合分布p(x,y), 则其联合熵定义为：<br>$$ H(X,Y) =  - \sum_{x \in X,y \in Y} {p(x,y)} \ln (p(x,y)) = - E(\log p(x,y)).$$<br><strong>条件熵 Conditional entropy</strong><br>同上述两个随机变量X，Y，则在X 已知的条件下Y的条件熵记做 H(Y|X) :</p>
<p>\begin{equation}\begin{split} H(Y|X) &amp;=\sum_{x \in X} {p(x)H(Y|X = x)} \\<br>    &amp;=-\sum_x {p(x)} \sum_y {p(y|x)\log p(y|x)} \\<br>    &amp;=-\sum_x {\sum_y {p(x,y)\log p(y|x)} }<br>\end{split}\end{equation}<br>因某，式中x,y表示：$ x\in X,y \in Y$<br><strong>相对熵 Relative entropy</strong><br><a href="https://zh.wikipedia.org/wiki/%E7%9B%B8%E5%AF%B9%E7%86%B5" target="_blank" rel="external">相对熵</a>，也被叫做KL距离，也即Kullback-Leibler散度（Kullback-Leibler Divergence），信息散度（information divergence），信息增益（information gain）。它主要用于衡量相同事件空间里的两个概率分布的差异。<br>典型情况下，对D(P||Q)P表示数据的真实分布，Q表示数据的理论分布，模型分布，或P的近似分布<br>同上述两个随机变量X，Y。假设p(x),p(y)是随机变量中取不同值时的两个概率分布，那么相对熵是：</p>
<p>$$ D({p||q}) = \sum_x {p(x) \log \frac {p(x)}{q(x)}}  = E_p(x) \log \frac {p(x)}{q(x)} $$<br><strong>互信息 Mutual Information</strong><br><a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E4%BF%A1%E6%81%AF" target="_blank" rel="external">互信息</a>,或转移信息（transinformation）是变量间相互依赖性(如相交信息量)的量度。<br>同上述两个随机变量X，Y，它们的联合概率密度函数为p(x,y)，其边缘概率密度函数分别为p(x),p(y)，则互信息I(x,y)定义：<br>\begin{equation}\begin{split}<br>I(X,Y) &amp;= \sum_x \sum_y p(x,y) \log \frac{p(x,y)}{p(x)p(y)} \\<br>    &amp;= D(p(x,y)||(p(x)p(y))) \\<br>    &amp;= E_p(x,y) \log \frac {p(X,Y)} {p(X)p(Y)}<br>\end{split}\end{equation}<br>如维基百科介绍 直观地说，如果把熵 H(Y) 看作一个随机变量不确定度的量度，那么 H(Y|X) 就是 X 没有涉及到的 Y 的部分的不确定度的量度。这就是“在 X 已知之后 Y 的剩余不确定度的量”，于是第一个等式的右边就可以读作“Y的不确定度，减去在 X 已知之后 Y 的剩余不确定度的量”，此式等价于“移除知道 X 后 Y 的不确定度的量”。这证实了互信息的直观意义为知道其中一个变量提供的另一个的信息量（即不确定度的减少量）。<br>上面也可以看到，互信息也可以表示为两个随机变量的边缘分布 X 和 Y 的乘积 p(x) × p(y) 相对于随机变量的联合熵 p(x,y) 的相对熵。并且可理解为相对熵 X 的单变量分布 p(x) 相对于给定 Y 时 X 的条件分布 p(x|y) ：分布 p(x|y) 和 p(x) 之间的平均差异越大，信息增益越大(下文涉及)。</p>
<h2 id="4-2-关系"><a href="#4-2-关系" class="headerlink" title="4.2 关系"></a>4.2 关系</h2><ol>
<li>H(X,Y)=H(X)+H(Y|X)（链式法则）<br>即：随机变量X,Y的联合熵等于其中一个随机变量的熵加上另一个随机变量的条件熵。其证明见如下：<br>\begin{equation}\begin{split}<br>H(X,Y) &amp;=  - \sum_x \sum_y {p(x,y)\log p(x,y)} \\<br>&amp;=  - \sum_x \sum_y {p(x,y)\log p(x)p(y|x)}\\<br>&amp;=  - \sum_x \sum_y {p(x,y)\log p(x)} - \sum_x \sum_y p(x,y)\log p(y|x)\\<br>&amp;=  - \sum_x {p(x)\log p(x)} - \sum_x \sum_y p(x,y)\log p(y|x) \\<br>&amp;= H(X) + H(Y|X)<br>\end{split}\end{equation}</li>
<li>I(X,Y) = I(Y,X) ,这通过上述定义表达式对称性，可见。</li>
<li>I(X,Y) = H(X) -H(Y|X)  = H(Y) - H(X|Y), 如下证明：<br>\begin{equation}\begin{split}<br>I(X;Y) &amp;= \sum_{x \in X,y \in Y} p(x,y) \log \frac{p(x,y)}{p(x)p(y)}\\<br>&amp;= \sum p(x,y) \log \frac{p(x|y)}{p(x)} \\<br>&amp;=  - \sum_x \sum_y p(x,y)\log p(x) + \sum_x \sum_y p(x,y)\log p(x|y) \\<br>&amp; =  - \sum_x p(x)\log p(x)  - ( - \sum_x \sum_y p(x,y)\log p(x|y) )\\<br>&amp;= H(X) - H(X|Y)<br>\end{split}\end{equation}</li>
<li>D(P||Q) &gt;=0 即：The relative entropy is non-negative<br>证明需要用到<a href="https://zh.wikipedia.org/wiki/%E5%90%89%E5%B8%83%E6%96%AF%E4%B8%8D%E7%AD%89%E5%BC%8F" target="_blank" rel="external">吉布斯不等式</a>，具体见wikipedia关于这个重要的不等式的意义证明。<br>若$\sum_1^n p_i =1$ 及 $\sum_1^n q_i = 1$，且$p_i,q_i \in (0,1]$，则有：$ -\sum_1^n p_i \log p_i\leq  -\sum_1^n p_i\log q_i $，等号成立当且仅当 $p_i=q_i \forall i$<br>则，上述吉布斯不等式等价于：<br>$$0\geq \sum_1^np_i\log q_i-\sum_1^n p_i\log p_i=\sum_1^np_i\log(q_i/p_i)=-D(P||Q)$$<br>得证。</li>
<li>I(X,Y) = H(X) -H(Y|X)=H(X)-(H(X,Y)−H(Y)) = H(X)+H(Y)-H(X,Y)</li>
<li>I(X,Y) &gt;= 0;见上面I(X,Y)的相对熵表示，同理推出I(X,Y),即The mutual information is positive</li>
<li>也可证 H(X,Y) ≤ H(X)+H(Y), 其实这条可推广至多个变量，即Less than or equal to the sum of individual entropies</li>
<li>H(X,Y) ≥ 0, H(X)≥0 joint entropy非负性</li>
<li>H(X|Y ) ≤ H(X).Additional information never increases entropy，由3可证，也可根据计算式得证，且仅独立于X,可等。</li>
<li>H(X,Y,Z) = H(X) + H(Y|X) + H(Z|XY) ≤ H(X) + H(Y) + H(Z)</li>
<li>H(X,Y)≥ max[H(X),H(Y)]，即Greater than individual entropies</li>
<li>还有许多特性，不一一列举。在《通信的数学原理》中香农列举许多特性，并得到许多有趣推论。<br>最后，引用wikipedia一张图来帮助记忆这几种熵,或参考<a href="https://en.wikipedia.org/wiki/Joint_entropy" target="_blank" rel="external">Joint entropy</a>, <a href="https://en.wikipedia.org/wiki/Conditional_entropy" target="_blank" rel="external">Conditional_entropy</a>。<br><img alt="Venn diagram for various information measures associated with correlated variables X and Y." src="/images/information_measures.png" width="480" data-file-width="480" data-file-height="409"></li>
</ol>
<h2 id="4-3-可加性-更好的理解信息熵"><a href="#4-3-可加性-更好的理解信息熵" class="headerlink" title="4.3 可加性 - 更好的理解信息熵"></a>4.3 可加性 - 更好的理解信息熵</h2><ol>
<li>怎么去理解可加性？怎么理解 H(X,Y)=H(X)+H(Y|X)链式法则？<br>其实香农在最初的著作里，用图形象的表达出来了，有助加深理解<br><img alt="Shannon-entropy_ex" src="/images/Shannon-entropy_ex.png"><br>信息熵的计算不依赖事件先后顺序，也即，假设三个事件P，有p1=1/2,p2=1/3,p3=1/6，我们既可以认为三个时间同时发生，如上图左，也可以是首先有两个事件p1=p2=1/2，然后在第二事件又分为p1=2/3,p2=1/3，所以信息熵H(1/2,1/3,1/6)=H(1/2,1/2)+1/2*H(2/3,1/3)。<br><a href="https://arxiv.org/pdf/quant-ph/0511171.pdf" target="_blank" rel="external">一个推导</a></li>
<li>《数学之美》里，吴军也曾分别举了<a href="https://china.googleblog.com/2006/04/4_1731.html" target="_blank" rel="external">猜球队冠军、骰子猜概率、王小波的例子形象化信息熵</a>。</li>
<li>有个说法是思考如下问题：假设一共有N个球，扔到k个桶中。但这些桶大小是不同的。假设扔到第i个桶里的概率是pi，即第i个桶里有ni个球，那么一共有多少种不同分法（状态数）？<br>得到结果后将其联想到玻尔兹曼的熵模型。（这个问题的解法其实可以关联到欧拉创造的神奇的伽马函数，这里不展开了）。</li>
<li><p>为什么要创造信息熵这个概念？其实对应物理／数学模型最大熵的概念</p>
<p> The principle of maximum entropy states that, subject to precisely stated prior data<br> (such as a proposition that expresses testable information), the probability distribution<br> which best represents the current state of knowledge is the one with largest entropy.<br> Another way of stating this: Take a precisely stated prior data or testable information<br> about a probability distribution function. Consider the set of all trial probability distributions<br> that would encode the prior data. Of those, one with maximal information entropy is the proper distribution, according to this principle<br>这很符合人们在解决某系问题时通用的模式，即在已知部分事实的前提下，对未知分布最合理的推断就是符合已知事实的最不确定或最随机的推断。</p>
</li>
<li>Shannon使用熵推导出<a href="https://en.wikipedia.org/wiki/Shannon%27s_source_coding_theorem" target="_blank" rel="external">压缩极限理论</a>, 指出了无损压缩文件的极限，也导致一些有损压缩算法的诞生，比如google的WebP支持有损和无损压缩。 </li>
<li>搜索引擎使用的文档相关性，TD-IDF算法，其实可以理解为相对熵的应用：词频在整个语料库的分布与词频在具体文档中分布之间的差异性。</li>
<li>对于孤立理想气体，在麦克斯韦-玻尔兹曼分布下是稳定态，各相均等，此时是最小熵产生状态。同样的，信息系统有最小鉴别信息原理的说法，可以参考大名鼎鼎的<a href="https://zh.wikipedia.org/wiki/H%E5%AE%9A%E7%90%86" target="_blank" rel="external">H定理</a>，微观推导出热力学第二定律，也是信息熵公式的前身。<br>事实上，玻尔兹曼公式的另一种等价表述形式正是 $S=-k \sum_1^n p_i \log p_i)$ ， 其中i标记所有可能的微观态，p(i)表示微观态i的出现几率.<br>统计熵揭示一个孤立系统的倾向于增加混乱程度，但”宇宙是一个孤立系统“严格来说只是个未被验证的假设。还有H公式等，二者简直是太相似了，甚至通信数学原理许多推论，以及最大熵原理最小鉴别信息原理等都是如此相似？这里物理和信息论如此和谐，这是一种自然现象的两种形式吗，还是二者其实是基于同一数学模型所致？要揭开这样的问题可能需要正态分布／泊松分布／二项分布等各种分布即gama函数等现代概率统计学基础去解释了。</li>
<li>也有使用Shannon熵和热力学熵曲解释现代计算机在处理大量信息时，必须解决散热问题的，如Landauer法则。</li>
<li>玻尔兹曼熵处理的是根据运动的热力学分子均衡状态下，熵增。<br>而香农观点来看，其实把我们看到的信息，比如一段文字，看成是气体分子，不同的是这里的“气体分子”是比玻尔兹曼的要规则，也即熵小一些。从数学角度去理解：熵就是系统各状态自信息量的数学期望<br>信息熵或者说熵，或者不论是维纳还是香农的信息论，可以说，比如许多熵减的系统／过程都可以用熵解释，当然这么讲可能不是很有用。</li>
<li>最后，<strong>你想过信息论可以解释堆排序为何比快排慢吗？</strong><br><strong>heapsort和quicksort排序耗时都是O(n*logn), 但为什么quicksort表现会更好</strong>？非常建议看看MacKay的<a href="http://users.aims.ac.za/~mackay/sorting/sorting.html" target="_blank" rel="external">Heapsort, Quicksort, and Entropy</a>，【如果被墙，可以看<a href="/images/Heapsort_Quicksort_and_Entropy.pdf">这里</a>】不同于常见的思考问题角度，这篇文章里作者神奇的使用了信息论来解释，每次比较，quicksort获得有用信息的概率比heapsort均等。信息论还可以解释排序极限为何是O(nlogn)<br>不过这里应该用“阐释”比较好，公式化的论证见TAOCP。<br>思考下：Java 7偏后版本引入了里面性能被证明更好的<a href="http://cr.openjdk.java.net/~martin/webrevs/openjdk7/timsort/raw_files/new/src/share/classes/java/util/TimSort.java" target="_blank" rel="external">TimSort</a>的快速排序(不要再认为是课本里说的二分快排了)，是不是也可以用信息论解释？（<a href="https://www.theverge.com/2012/4/19/2961128/google-chief-java-architect-likely-i-copied-sun-code-in-android" target="_blank" rel="external">TimSort的争议</a>）</li>
</ol>
<h1 id="5-最大熵模型"><a href="#5-最大熵模型" class="headerlink" title="5 最大熵模型"></a>5 最大熵模型</h1><p>这一段简要介绍最大熵模型的由来。</p>
<h2 id="5-1-交叉熵Cross-entropy"><a href="#5-1-交叉熵Cross-entropy" class="headerlink" title="5.1 交叉熵Cross entropy)"></a>5.1 交叉熵Cross entropy)</h2><p>先看一下交叉熵的定义：<br>对随机事件p，假设其真实概率分布为p(i)，观测得到其概率分布为q(i)[即实验分布]，则定义交叉熵为：<br>$$H(p,q) = E_p[-\log q] = -\sum_1^m p(x_i) \log{q(x_i)} $$</p>
<p>如上，假设p代表一个样本的真实的信息分布，则其信息量为H(p)，q为模型预测分布，则用q来估计真实分布p的样本的信息量为H(p,q),则冗余信息量D(p#q)=H(p,q)−H(p)由下面运算发现即是KL散度<br>\begin{equation}\begin{split}  H(p,q) &amp;= -\sum_x p(x) \log q(x) \\<br>&amp;= -\sum_x p(x) \log \frac{q(x)}{p(x)}p(x)\\<br>&amp;= -\sum_x p(x) \log p(x) -\sum_x p(x) \log \frac{q(x)}{p(x)}\\<br>&amp;= H(p)+ D(p||q)<br>\end{split}\end{equation}</p>
<p>很容易发现：$H(p,q)=H(p)+D_{KL}(p||q) $ ，即：相对熵=交叉熵-信息熵, 信息熵H(p)是可视作不变，因此交叉熵也即损失函数。<br><strong>好了，介绍了这么多，那么你遇到过这样的问题吗</strong>：<br>设有离散随机变量 X，我们并不知道X的概率分布p(x)，但已知其与若干函数的期望满足如下:$ \sum_{x \in X} p(x)f_m(x)=C_m ,x \in X, m=1,2,…,M $，求p(x)最佳估计P̃ (x).<br>这可以追溯到过定／欠定问题，<strong>下面摘录李航的《统计学习方法》来描述</strong>：<br>对于分类问题，假设现有训练数据集 $T={(x1,y1),(x2,y2),….(xn,yn)}$<br>最大熵模型就是分别根据已有的输入X和输出Y集合去学习训练数据的条件概率分布P(y|x)，应用最大熵原理去学习分类能力最好的模型.<br>上面，我们定义(x,y)为 <strong>特征</strong>，(xn,yn)就是某特征的 <strong>样本</strong><br>对于给定的训练数据集，我们可以确定联合分布P(X,Y)的经验分布P̃ (X,Y),以及边缘分布P(X)的经验分布P̃ (X)P~(X)，即:</p>
<p>$$ \tilde{P}(X=x,Y=y)=\frac{count(X=x,Y=y)}{N} $$<br>$$ \tilde{P}(X=x) = \frac{count(X=x)}{N}$$<br>其中count(⋅)表示满足条件在样本中的计数，N表示总的训练样本容量</p>
<p>现在引入 <strong>特征函数</strong>f(x,y)，它是描述输入x与输出y之间满足的某一事实，f(x,y)则定义为二值函数:<br>$$<br>f(n) = \begin{cases} 1, &amp; \text{if x,y满足某一事实} \\<br> 0, &amp; \text{else} \\<br>  \end{cases}<br>$$</p>
<p>对于任意的特征函数f(x,y)，令 $ E_{\tilde{P}}(f)$表示特征函数f在训练数据集T上<br>关于$ \tilde{P}(x,y)$的数学期望，也即 <strong>样本特征函数期望值</strong>有:</p>
<p>$$ E_{\tilde{P}}(f) = \sum_{ x,y} \tilde{P}(x,y) f(x,y) $$<br>另记$E_{P}(f)$表示特征函数f在训练数据集T上关于P(x,y)的数学期望，有:<br>$$ E_P(f) = \sum_{ x,y} {P(x,y) f(x,y)} $$</p>
<p>为了计算P(y|x)，根据Bayes我们可以做如下转换$ P(x,y) = P(y|x) \cdot p(x)$<br>, p(x)未知，但是我们此时可以使用$\tilde{P}(x)$进行近似,也就是最终有:<br>$$ E_P(f) = \sum_{x,y} P(y|x) \tilde{P}(x) f(x,y)$$<br>我的期望是：$E_{\tilde{P}}(f) = E_P(f)$,即：</p>
<p>$$\sum_{x,y} \tilde{P}(x,y) f(x,y) = \sum_{x,y} P(y|x) \tilde{P}(x) f(x,y)$$</p>
<p>上述式子就可以作为模型的约束条件，假如有n个特征函数，则就会有n个约束条件(实际中一般特征的维度就是约束条件的个数)<br>用C来表示满足约束的模型集合:</p>
<p>$$ C= {P|E_{\tilde{P}}(f) = E_{P}(f),I=1,2,3..n} $$</p>
<p>满足约束条件同时使用P(y|x)的熵最大的模型即为最大熵模型.<br>最后，为了获取条件概率的分布，还需要其相应的条件熵<br>$$H(P)= - \sum_{x,y} \tilde{P}(x) P(y|x) log P(y|x)$$</p>
<p>至此，最大熵模型的公式定义结束，再次总结一下，<br>给定数据集 $ {(x_i,y_i)}_1^N $，特征函数$f_i(x,y)，i= 1,2…,n$，根据经验分布得到满足约束集的模型集合 C, 公式化的描述：：</p>
<p>\begin{align}<br>\underset{P \in C}{max} &amp;\quad H(P) = - \sum_{x,y}  \tilde{P}(x) P(y|x) \text{log} P(y|x) \\<br> st. &amp;\quad E_{P}(f) = E_{\tilde{P}}(f),I=1,2,3..n \\<br>  &amp;\quad \sum_y P(y|x)=1<br>\end{align}</p>
<p>至此为止，介绍了信息熵，基本的几种熵，熵的特性，以及最大熵的意义和定义。<br>对于最大熵，其求解方法，与似然函数关系等等还有许多可以介绍的，不过限于篇幅，需要另起一篇再探讨了。</p>
<p><strong>参考</strong>：</p>
<ol>
<li>wikipedia<br> <a href="https://en.wikipedia.org/wiki/History_of_entropy" target="_blank" rel="external">History of entropy</a><br> <a href="https://en.wikipedia.org/wiki/Entropy_(information_theory" target="_blank" rel="external">Entropy_(information_theory)</a>)<br> <a href="https://zh.wikipedia.org/wiki/%E7%86%B5_\(%E4%BF%A1%E6%81%AF%E8%AE%BA\" target="_blank" rel="external">熵 (信息论)</a>)</li>
<li>高等数学第六版 同济版</li>
<li>《统计学习方法》.李航著</li>
<li>The Mathematical Theory of Communication. by Claude E.Shannon and Warren Weaver</li>
<li>Toplanguage <a href="https://groups.google.com/forum/#!forum/pongba" target="_blank" rel="external">https://groups.google.com/forum/#!forum/pongba</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;记录一下看书收获。
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;1-什么是熵&quot;&gt;&lt;a href=&quot;#1-什么是熵&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是熵&quot;&gt;&lt;/a&gt;1. 什么是熵&lt;/h1&gt;&lt;p&gt;让我们先看一下维基百科对玻尔兹曼熵的来源描述和定义：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;熵（Entropy），是一种测量在动力学方面不能做功的能量总数，熵的量度正是能量退化的指标。
熵亦被用于计算一个系统中的失序现象，也就是计算该系统混乱的程度。
1877年，玻尔兹曼发现单一系统中的熵跟构成热力学性质的微观状态数量相关。玻尔兹曼并假设：
S=k*lnΩ
公式中的k是玻尔兹曼常数，Ω则为该宏观状态中所包含之微观状态数量。这个被称为玻尔兹曼原理的假定是统计力学的基础。
统计力学则以构成部分的统计行为来描述热力学系统.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这就是玻尔兹曼的Entropy的来源了，而当普朗克来中国讲学时用到entropy这个词时，还没有对应名称，胡刚复教授偷懒地根据公式（dS=dQ/T），把“商”字加火旁来意译“entropy”这个字，创造了“熵”字（胡刚复与叶企孙同样是我国近代物理奠基人）。&lt;br&gt;不过上面是物理学衍生的玻尔兹曼熵，在1948年，克劳德·艾尔伍德·香农将热力学的熵引入到信息论，定义了信息熵的概念，因此它又被称为香农熵。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;在信息论中，熵是接收的每条消息中包含的信息的平均量，又被称为信息熵、信源熵、平均自信息量。
这里，“消息”代表来自分布或数据流中的事件、样本或特征。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这即是熵的定义了，这里隐含的想法是，比较不可能发生的事情，当它发生了，意味着更多的信息。&lt;br&gt;所以熵也可理解为不确定性的量度[Measure of Uncertainty]，即越随机的信源的熵越大。&lt;br&gt;
    
    </summary>
    
    
      <category term="ML" scheme="http://thomaslau.github.io/tags/ML/"/>
    
  </entry>
  
  <entry>
    <title>为什么 LR 模型要使用 sigmoid 函数</title>
    <link href="http://thomaslau.github.io/2017/08/04/2017-08-04-derivative-of-logistic-sigmoid-function/"/>
    <id>http://thomaslau.github.io/2017/08/04/2017-08-04-derivative-of-logistic-sigmoid-function/</id>
    <published>2017-08-04T13:59:07.000Z</published>
    <updated>2017-08-18T08:31:20.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>分享一下在学习逻辑回归时候的困惑，以便需要者节约时间。
</code></pre><p>在看西瓜书的逻辑回归这一章时，对作者引入了sigmoid函数觉得突兀，于是搜索到了知乎上的提问，<a href="https://www.zhihu.com/question/35322351" target="_blank" rel="external">为什么 LR 模型要使用 sigmoid 函数</a> 里获赞最高的答案。<br><strong>但正如马化腾先生说的，这么说，也对也不对。</strong><br>看完后，上面其他回答各种理由，而匿名回答是最大熵的，并不是原因，甚至，这可以认为是一个推论或公理。试想再问为什么要熵最大化？<br>换言之，一个分析问题是从前一步的因，一个分析问题是从最初的因。这对数学专业可能会直接跳过这么问。<br><a id="more"></a></p>
<h3 id="那么让我们将问题拆开来看："><a href="#那么让我们将问题拆开来看：" class="headerlink" title="那么让我们将问题拆开来看："></a>那么让我们将问题拆开来看：</h3><p><strong>1, 逻辑回归为什么要使用sigmoid函数.</strong><br><strong>2, LR模型的意义，即为什么有了线性回归(linear regression)还需要逻辑回归(logistic regression)</strong></p>
<h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>很好解释：其实没有什么原因。<br>看上面高赞答案解释一堆，或者下面解释sigmoid函数好用，好求导。其实都不是原因。<br>因为逻辑回归对应Logit Function，即逻辑回归就是sigmoid函数的应用,<br>一个对象的两个描述而已，像原文这么问就像是在问为什么抛物线方程要使用 y= a*x^2+bx+c表示一样。<br>逻辑回归，不过是结果sigmoid函数化的线性回归而已。<br>但，为什么要有这个定义？为什么要将线性回归的值sigmoid化？这就是下面要说的。</p>
<h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><p>上面解释了为什么LR对应sigmoid函数，但可能会继续好奇为什么有<a href="https://www.quora.com/What-is-logistic-regression" target="_blank" rel="external">Logistic Regression</a>？常规的linear regression不满足吗？这是一个数学问题, 在许多现代跟统计／概率学相关学术问题里被广泛使用，其实回归分析很多方法，比如linear／logistic／Polynomial等，分别适用于不同模型。<br>我们先看线性回归:</p>
<p>$$Y = X\beta + \epsilon $$</p>
<p>$$J(\theta) = \sum_{i=1}^m (h\theta(x^{(i)})-y^{(i)})^2$$</p>
<p>Linear Regreesion的损失函数就是常见的均值方差也就是平方损失函数，最优求解即是使用高斯的最小二乘法，高中数学都会讲到，这里不详述。<br>那么，线性回归有什么问题嘛？线性回归适用于因变量（随自变量而变）是连续的模型，即特征和结果满足线性，但是实际有的因变量是离散型机率分布。如抛硬币，结果是正面或反面的二项分布问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1. 伯努利分布</div><div class="line">伯努利分布(Bernoulli distribution)又名两点分布或0-1分布。伯努利试验是只有两种可能结果的单次随机试验，</div><div class="line">即对于一个随机变量X而言：伯努利试验都可以表达为“是或否”的问题。</div><div class="line">例如，抛一次硬币是正面向上吗？刚出生的小孩是个女孩吗？等等。</div><div class="line">如果试验E是一个伯努利试验，将E独立重复地进行n次，则称这一串重复的独立试验为n重伯努利试验。</div><div class="line">2. 二项分布</div><div class="line">二项分布(Binomial distribution)是n重伯努利试验成功次数的离散概率分布。</div></pre></td></tr></table></figure></p>
<p>LR用来处理预测结果为0-1的二值分类问题（二态问题其实是一个普遍存在自然界的问题）。这里假设了二值满足了伯努利分布。<br><strong>Logistic Distribution</strong><br>随机变量X服从逻辑斯蒂分布，即X的累积分布函数为上文提到过的logistic function。对分布函数求导得到了概率密度函数。公式如下：<br>$$F(x) = P(X \leqslant x) = \frac{1}{1+e^{-(x-\mu)/\gamma}}$$<br>$$f(x) = F’(x) = \frac{e^{-(x-\mu)/\gamma}} { \gamma (1+e^{-(x-\mu)/\gamma})^2 }$$</p>
<p><img alt="Standard logistic PDF" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/66/Logisticpdfunction.svg/320px-Logisticpdfunction.svg.png" width="320" height="273" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/66/Logisticpdfunction.svg/480px-Logisticpdfunction.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/66/Logisticpdfunction.svg/640px-Logisticpdfunction.svg.png 2x" data-file-width="480" data-file-height="409"><br>Logistic分布的密度函数<br><img alt="Standard logistic CDF" src="//upload.wikimedia.org/wikipedia/commons/thumb/1/1a/Logistic_cdf.svg/320px-Logistic_cdf.svg.png" width="320" height="273" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/1a/Logistic_cdf.svg/480px-Logistic_cdf.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/1a/Logistic_cdf.svg/640px-Logistic_cdf.svg.png 2x" data-file-width="480" data-file-height="409"><br>Logistic分布的分布函数<br>进一步<br>$$P(Y=1|x)=\frac{e^{w\cdot x+b}}{1+e^{w\cdot x+b}} \:\:\:\:\:\:\:\:\:(1)$$<br>$$P(Y=0|x)=\frac{1}{1+e^{w\cdot x+b}} \:\:\:\:\:\:\:\:\:(2)$$<br>又对一个二分类事件发生的几率odds的对数有<br>$$logit(P(Y=1|x)) = log\frac {P(Y=1|x)}{1-P(Y=1|x)} = w\cdot x$$<br>这里我们可以定义LR模型：输出Y=1的对数几率是由输入x的线性函数表示的模型。</p>
<p>线性回归是连续型模型，用于分类的问题时受噪声影响比较大，logistic回归是非线性模型（上文），本质上是线性回归模型，但logistic回归巧妙之处在于其将结果值经一层函数映射在0-1上，即在特征到结果的映射中加入了一层函数映射（对数损失函数），也就是本文的sigmoid function。<br>在《统计学习方法》第六章里已经在做推导。引入最大似然的概念，那么二项式对应的最大熵的解等价于二项式指数形式的最大似然解，为我们前面提到的二项式分布到的熵分布最大，这就必然会引入二项式指数形式的最大似然解，也就是这里采用logit函数原因，也就是本文试图解释的要用sigmoid的原因。<br>具体推导，在《统计学习方法》P80-P88，<a href="/images/LR1.jpeg">或点击,下标1-7</a>。<br>也可以参考: <strong><a href="http://www.dongzhuoyao.com/logistic-regression-and-max-entropymodel/" target="_blank" rel="external">逻辑回归和最大熵模型
</a></strong>，<strong><a href="http://www.win-vector.com/dfiles/LogisticRegressionMaxEnt.pdf" target="_blank" rel="external">The equivalence of logistic regression and maximum entropy models</a></strong></p>
<p>参考：</p>
<ol>
<li>wikipedia:<br><a href="https://en.wikipedia.org/wiki/Logistic_function" target="_blank" rel="external">Logistic_function</a>,<br><a href="https://en.wikipedia.org/wiki/Logistic_distribution" target="_blank" rel="external">Logistic_distribution</a>,<br><a href="https://en.wikipedia.org/wiki/Logistic_regression" target="_blank" rel="external">Logistic_regression</a></li>
<li>知乎<a href="https://www.quora.com/What-is-logistic-regression" target="_blank" rel="external">为什么 LR 模型要使用 sigmoid 函数</a></li>
<li>《统计学习方法》.李航著</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;分享一下在学习逻辑回归时候的困惑，以便需要者节约时间。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在看西瓜书的逻辑回归这一章时，对作者引入了sigmoid函数觉得突兀，于是搜索到了知乎上的提问，&lt;a href=&quot;https://www.zhihu.com/question/35322351&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;为什么 LR 模型要使用 sigmoid 函数&lt;/a&gt; 里获赞最高的答案。&lt;br&gt;&lt;strong&gt;但正如马化腾先生说的，这么说，也对也不对。&lt;/strong&gt;&lt;br&gt;看完后，上面其他回答各种理由，而匿名回答是最大熵的，并不是原因，甚至，这可以认为是一个推论或公理。试想再问为什么要熵最大化？&lt;br&gt;换言之，一个分析问题是从前一步的因，一个分析问题是从最初的因。这对数学专业可能会直接跳过这么问。&lt;br&gt;
    
    </summary>
    
    
      <category term="ML" scheme="http://thomaslau.github.io/tags/ML/"/>
    
  </entry>
  
  <entry>
    <title>Blogs_20170731</title>
    <link href="http://thomaslau.github.io/2017/07/31/2017-07-31-Blogs_2017_07_31/"/>
    <id>http://thomaslau.github.io/2017/07/31/2017-07-31-Blogs_2017_07_31/</id>
    <published>2017-07-31T13:01:07.000Z</published>
    <updated>2017-08-01T03:17:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Blogs"><a href="#Blogs" class="headerlink" title="Blogs"></a>Blogs</h1><p>1, <a href="https://medium.com/the-mission/10-000-hours-with-claude-shannon-12-lessons-on-life-and-learning-from-a-genius-e8b9297bee8f" target="_blank" rel="external">10,000 Hours With Claude Shannon: How A Genius Thinks, Works, and Lives</a><br>上个世纪，尤其是前50年，伟大的天才很多，开拓的天才屈指可数，有些是大众皆知如爱因斯坦，图灵，而知道香农就没有那么多。作者总结了香农许多习惯，试图解密为何香农会有那么多的时间创造，或者思考。<br>2，<a href="http://www.makers.com/margaret-hamilton" target="_blank" rel="external">Makers专访Margaret Hamilton, NASA’s First Software Engineer</a></p>
<pre><code>Meet Margaret H. Hamilton, the woman who led man to the moon. 
On July 20th, 1969, minutes before Apollo 11&apos;s scheduled touch-down, 
there was a computer error that would have changed history had it not been 
for Margaret&apos;s programming that overrode the glitch and ultimately made 
&quot;one small step for man, and a giant leap for mankind&quot; a reality.
</code></pre><a id="more"></a>
<p>可以看到这样的工程师给人类的科学与技术带来了不可估量价值的贡献，Margaret Hamilton回忆起带着自己的孩子参观工作环境，因孩子捣乱而想到了过去编程都是面向正确，而不是现在说的“面向失败”,并为NASA引入了“Software Engineer”的概念。视频很值得一看，最后面颁发总统自由勋章，可以看到艾伦，德尼罗，盖茨夫妇，汤姆汉克斯等。<a href="https://en.wikipedia.org/wiki/List_of_Presidential_Medal_of_Freedom_recipients" target="_blank" rel="external">计算机领域的本来就不多</a><br>3，<a href="https://mondaynote.com/fiction-who-killed-windows-phone-af7491d4a363" target="_blank" rel="external">Fiction: Who Killed Windows Phone?</a><br>印象中windows phone是被Android／iPhone打败，但作者认为不是，android之前已麻烦初现，作者通过Fiction方式，比如假设WP免费会如何。<br>但不论怎么分析，如作者引用“Victory Has Many Fathers But Defeat Is An Orphan”。<br>4, <a href="http://www.lifehack.org/614336/human-brains-arent-designed-to-remember-things" target="_blank" rel="external">You’ve Been Using Your Brain Wrong: Human Brains Aren’t Designed to Remember Things</a>作者为Lifehack的CEO&amp;Founder</p>
<h1 id="Tech-Digest"><a href="#Tech-Digest" class="headerlink" title="Tech Digest"></a>Tech Digest</h1><p>1, Java Performance Tuning<a href="http://www.javaperformancetuning.com/news/news200.shtml" target="_blank" rel="external">本（上）周更新</a>了，<br><a href="http://www.javaperformancetuning.com/news/news200.shtml" target="_blank" rel="external">http://www.javaperformancetuning.com/news/news200.shtml</a><br>里面经常有非常经典的技术分享，虽然这期不是很多，还是有一些值得看的。如：<br><a href="https://www.youtube.com/watch?v=at1YA_u__g8" target="_blank" rel="external">https://www.youtube.com/watch?v=at1YA_u__g8</a><br>The Performance Engineer’s Guide to HotSpot Virtual Machine’s Execution Engine (Page last updated May 2017, Added 2017-07-31, Author Monica Beckwith, Publisher Riga Dev Days).<br>视频内容主讲<a href="https://twitter.com/mon_beck" target="_blank" rel="external">Monica Beckwith</a>是Java/JVM Performance Consultant, 曾在AMD／sun／oracle工作，曾是OpenJDK的leader，同样的视频内容作者其实在许多各地InfoQ都有讲过，youtube上也有许多，同样的内容重复讲，其实，大家这里可以看到文章内容的质量，事实上是不错的，深入浅出, 国内Infoq上也可以搜到<a href="http://s.geekbang.org/?from=thomaslau.github.io" target="_blank" rel="external">极客搜索</a>。<br>2, <a href="http://www.cakesolutions.net/teamblogs/this-week-in-scala-31/07/2017" target="_blank" rel="external">cakesolutions this week #scala 更新</a><br>3, <a href="https://www.lightbend.com/blog/lightbend-tech-digest-june-2017" target="_blank" rel="external">Lightbend Tech Digest</a><br>4, <a href="https://deque.blog/2017/06/14/10-things-idris-improved-over-haskell/" target="_blank" rel="external">10 things Idris improved over Haskell</a><br>很早之前github或Reddit上看过，今天翻来看看，觉得作者的实现／改进很有意思，有些还是有些不好懂的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Blogs&quot;&gt;&lt;a href=&quot;#Blogs&quot; class=&quot;headerlink&quot; title=&quot;Blogs&quot;&gt;&lt;/a&gt;Blogs&lt;/h1&gt;&lt;p&gt;1, &lt;a href=&quot;https://medium.com/the-mission/10-000-hours-with-claude-shannon-12-lessons-on-life-and-learning-from-a-genius-e8b9297bee8f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;10,000 Hours With Claude Shannon: How A Genius Thinks, Works, and Lives&lt;/a&gt;&lt;br&gt;上个世纪，尤其是前50年，伟大的天才很多，开拓的天才屈指可数，有些是大众皆知如爱因斯坦，图灵，而知道香农就没有那么多。作者总结了香农许多习惯，试图解密为何香农会有那么多的时间创造，或者思考。&lt;br&gt;2，&lt;a href=&quot;http://www.makers.com/margaret-hamilton&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Makers专访Margaret Hamilton, NASA’s First Software Engineer&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Meet Margaret H. Hamilton, the woman who led man to the moon. 
On July 20th, 1969, minutes before Apollo 11&amp;apos;s scheduled touch-down, 
there was a computer error that would have changed history had it not been 
for Margaret&amp;apos;s programming that overrode the glitch and ultimately made 
&amp;quot;one small step for man, and a giant leap for mankind&amp;quot; a reality.
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="BlogDigests" scheme="http://thomaslau.github.io/tags/BlogDigests/"/>
    
  </entry>
  
  <entry>
    <title>从noInflation看Java Method.invoke</title>
    <link href="http://thomaslau.github.io/2017/07/25/2017-07-25-from_noInflation_to_Java_Method_invoke/"/>
    <id>http://thomaslau.github.io/2017/07/25/2017-07-25-from_noInflation_to_Java_Method_invoke/</id>
    <published>2017-07-25T13:01:07.000Z</published>
    <updated>2017-07-28T13:31:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>旧文，现重新整理下：</p>
<h1 id="1-缘起"><a href="#1-缘起" class="headerlink" title="1. 缘起"></a>1. 缘起</h1><p>最近有同事发来如下一段异常，程序已开始运行正常，只是很快就会莫名其妙的抛这个异常，不知道如何着手解决:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java.lang.NoClassDefFoundError: sun/reflect/ConstructorAccessorImpl</div><div class="line">    at sun.misc.Unsafe.defineClass(Native Method)</div><div class="line">    at sun.reflect.ClassDefiner.defineClass(ClassDefiner.java:63)</div><div class="line">    at sun.reflect.MethodAccessorGenerator<span class="variable">$1</span>.run(MethodAccessorGenerator.java:399)</div><div class="line">    at sun.reflect.MethodAccessorGenerator<span class="variable">$1</span>.run(MethodAccessorGenerator.java:394)</div><div class="line">    at java.security.AccessController.doPrivileged(Native Method)</div><div class="line">    at sun.reflect.MethodAccessorGenerator.generate(MethodAccessorGenerator.java:393)</div><div class="line">    at sun.reflect.MethodAccessorGenerator.generateConstructor(MethodAccessorGenerator.java:92)</div><div class="line">    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:55)</div><div class="line">    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</div><div class="line">    at java.lang.reflect.Constructor.newInstance(Constructor.java:423)</div><div class="line">    at java.lang.Class.newInstance(Class.java:442)</div><div class="line">    at com.thomas.classloader.unload.MonitorHotSwap.main(MonitorHotSwap.java:34)</div><div class="line">Caused by: java.lang.ClassNotFoundException: sun.reflect.ConstructorAccessorImpl</div><div class="line">    at java.net.URLClassLoader.findClass(URLClassLoader.java:381)</div><div class="line">    ...</div></pre></td></tr></table></figure></p>
<p>我把他的代码稍作简化，主要部分是类似下面的逻辑，功能是程序监控某几个文件的变动，发现符合条件就会编译并会重新加载class，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HotSwapURLClassLoader</span> <span class="keyword">extends</span> <span class="title">URLClassLoader</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line">        Class&lt;?&gt; clazz = <span class="keyword">null</span>;</div><div class="line">        clazz = findLoadedClass(name);</div><div class="line">        <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//...一段热替换逻辑</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (name.startsWith(<span class="string">"java."</span>)) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                ClassLoader system = ClassLoader.getSystemClassLoader();</div><div class="line">                clazz = system.loadClass(name);</div><div class="line">                <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (resolve)</div><div class="line">                        resolveClass(clazz);</div><div class="line">                    <span class="keyword">return</span> (clazz);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">                <span class="comment">// Ignore</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> customLoad(name, <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hot</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        <span class="comment">//System.out.println(String.format("ver:%s, classLoader: %s.", ver, this.getClass().getClassLoader()));</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的异常，不同于常遇到的异常，我们根据异常栈逆推可能不会很容易的定位到root cause。所以我在hot方法加了一条日志信息，即注释打开，运行多次，发现每次都是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ver:15, classLoader: com.thomas.unload.HotSwapURLClassLoader@4e25154f.</div><div class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java.lang.NoClassDefFoundError: sun/reflect/ConstructorAccessorImpl</div></pre></td></tr></table></figure></p>
<p>这让我想起了JVM参数有inflationThreshold=15<br><a id="more"></a></p>
<h1 id="2-复现"><a href="#2-复现" class="headerlink" title="2. 复现"></a>2. 复现</h1><p><span id="Appcode">我们可以通过下面demo来深入问题，运行时候加入 -verbose或者 -XX:+TraceClassLoading 参数：</span><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">int</span> size = args.length &gt; <span class="number">0</span> ? Integer.valueOf(args[<span class="number">0</span>]) : <span class="number">1_000_000</span>;</div><div class="line">        Class&lt;?&gt; clz = Class.forName(<span class="string">"X"</span>);</div><div class="line">        Object o = clz.newInstance();</div><div class="line">        Method m = clz.getMethod(<span class="string">"hot"</span>, String.class);</div><div class="line">        Thread.sleep(<span class="number">20_000</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">500</span>; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;size; j++)&#123;  </div><div class="line">               m.invoke(o, <span class="string">"hello"</span>+i);</div><div class="line">            &#125;</div><div class="line">            Thread.sleep(<span class="number">50</span>);</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"---finish loop----"</span>);</div><div class="line">        Thread.sleep(<span class="number">20_000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们可以看到输出<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">[Loaded sun.reflect.DelegatingMethodAccessorImpl from /Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home/jre/lib/rt.jar]</div><div class="line">Hello, hello0</div><div class="line">...</div><div class="line">Hello, hello14</div><div class="line">[Loaded sun.reflect.ClassFileConstants from /Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home/jre/lib/rt.jar]</div><div class="line">[Loaded sun.reflect.AccessorGenerator from /Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home/jre/lib/rt.jar]</div><div class="line">[Loaded sun.reflect.MethodAccessorGenerator from /Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home/jre/lib/rt.jar]</div><div class="line">[Loaded sun.reflect.ByteVectorFactory from /Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home/jre/lib/rt.jar]</div><div class="line">[Loaded sun.reflect.ByteVector from /Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home/jre/lib/rt.jar]</div><div class="line">[Loaded sun.reflect.ByteVectorImpl from /Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home/jre/lib/rt.jar]</div><div class="line">[Loaded sun.reflect.ClassFileAssembler from /Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home/jre/lib/rt.jar]</div><div class="line">[Loaded sun.reflect.UTF8 from /Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home/jre/lib/rt.jar]</div><div class="line">[Loaded sun.reflect.Label from /Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home/jre/lib/rt.jar]</div><div class="line">[Loaded sun.reflect.Label<span class="variable">$PatchInfo</span> from /Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home/jre/lib/rt.jar]</div><div class="line">[Loaded java.util.ArrayList<span class="variable">$Itr</span> from /Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home/jre/lib/rt.jar]</div><div class="line">[Loaded sun.reflect.MethodAccessorGenerator<span class="variable">$1</span> from /Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home/jre/lib/rt.jar]</div><div class="line">[Loaded sun.reflect.ClassDefiner from /Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home/jre/lib/rt.jar]</div><div class="line">[Loaded sun.reflect.ClassDefiner<span class="variable">$1</span> from /Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home/jre/lib/rt.jar]</div><div class="line">[Loaded sun.reflect.GeneratedMethodAccessor1 from __JVM_DefineClass__]</div><div class="line">Hello, hello15</div><div class="line">Hello, hello16</div><div class="line">Hello, hello17</div><div class="line">[Loaded java.lang.Shutdown from /Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home/jre/lib/rt.jar]</div><div class="line">[Loaded java.lang.Shutdown<span class="variable">$Lock</span> from /Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home/jre/lib/rt.jar]</div></pre></td></tr></table></figure></p>
<p>注意到最开始load的是DelegatingMethodAccessorImpl 可是到第15次执行该方法的时候就开始load MethodAccessorGenerator -&gt; sun.reflect.GeneratedMethodAccessor1了, 前面都是from jre/lib/rt.jar的，而 GeneratedMethodAccessor1 from __JVM_DefineClass__，那么这个类是怎么generate出来的呢？<br>让我们从Method源码开始吧.</p>
<h1 id="3-Class-getMethod"><a href="#3-Class-getMethod" class="headerlink" title="3. Class.getMethod"></a>3. Class.getMethod</h1><p>先看Method的获取，clazz.getMethod获取public方法，这里也可以使用getDeclaredMethod，后者可以获取declared[含private／protect／public]的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@CallerSensitive</span></div><div class="line"><span class="function"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span></span></div><div class="line">    <span class="keyword">throws</span> NoSuchMethodException, SecurityException &#123;</div><div class="line">    checkMemberAccess(Member.PUBLIC, Reflection.getCallerClass(), <span class="keyword">true</span>);</div><div class="line">    Method method = getMethod0(name, parameterTypes, <span class="keyword">true</span>);</div><div class="line">    <span class="keyword">if</span> (method == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodException(getName() + <span class="string">"."</span> + name + argumentTypesToString(parameterTypes));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> method;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkMemberAccess</span><span class="params">(<span class="keyword">int</span> which, Class&lt;?&gt; caller, <span class="keyword">boolean</span> checkProxyInterfaces)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> SecurityManager s = System.getSecurityManager();</div><div class="line">    <span class="keyword">if</span> (s != <span class="keyword">null</span>) &#123;</div><div class="line">        ...</div><div class="line">        <span class="keyword">final</span> ClassLoader ccl = ClassLoader.getClassLoader(caller);</div><div class="line">        <span class="keyword">final</span> ClassLoader cl = getClassLoader0();</div><div class="line">        <span class="keyword">if</span> (which != Member.PUBLIC) &#123;</div><div class="line">            <span class="keyword">if</span> (ccl != cl) &#123;</div><div class="line">                s.checkPermission(SecurityConstants.CHECK_MEMBER_ACCESS_PERMISSION);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.checkPackageAccess(ccl, checkProxyInterfaces);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上述，Reflection.getCallerClass()实现是一个native方法，用于获取调用这个方法的Class对象，完整源码见sun/reflect/Reflection.c, 实现最后在<a href="http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/87ee5ee27509/src/share/vm/prims/jvm.cpp#l668" target="_blank" rel="external">jvm.cpp</a>, 这个Reflection.getCallerClass获取栈帧调用者要比我们平时使用Throwable／thread stackTrace／SecurityManager的getClassContext()都要高效，只是1.8抛弃了，目前是JDK内部使用的方法, 而且该方法有CallerSensitive注解。<br>程序通过forname，即1.8中，forName0(className, true, ClassLoader.getClassLoader(caller), caller) 是通过caller class的classloader加载类，然后调用getMethod，即最终通过<br>privateGetMethodRecursive，即其实是依赖 searchMethods(privateGetDeclaredMethods(true)，从缓存或JVM中获取该Class中的方法列表，searchMethods则用于从返回的方法列表里找到一个匹配的对象，该对象名称和参数的方法匹配。<br>forname和getMethod具体写起来也很长，但为了不影响本文主题，不深入探讨。<br>下面，让我们进入正题。</p>
<h1 id="4-MethodAccessor-vs-ReflectionFactory"><a href="#4-MethodAccessor-vs-ReflectionFactory" class="headerlink" title="4. MethodAccessor vs ReflectionFactory"></a>4. MethodAccessor vs ReflectionFactory</h1><p>使用JAVA版本：java version “1.8.0_102”。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Method</span> <span class="keyword">extends</span> <span class="title">Executable</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> MethodAccessor methodAccessor;</div><div class="line">    <span class="comment">// For sharing of MethodAccessors. This branching structure is</span></div><div class="line">    <span class="comment">// currently only two levels deep (i.e., one root Method and</span></div><div class="line">    <span class="comment">// potentially many Method objects pointing to it.)</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// If this branching structure would ever contain cycles, deadlocks can</span></div><div class="line">    <span class="comment">// occur in annotation code.</span></div><div class="line">    <span class="keyword">private</span> Method              root;</div><div class="line">    <span class="meta">@CallerSensitive</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span></span></div><div class="line">        <span class="keyword">throws</span> IllegalAccessException, IllegalArgumentException,</div><div class="line">           InvocationTargetException</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (!override) &#123;</div><div class="line">            <span class="keyword">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</div><div class="line">                Class&lt;?&gt; caller = Reflection.getCallerClass();</div><div class="line">                checkAccess(caller, clazz, obj, modifiers);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        MethodAccessor ma = methodAccessor;             <span class="comment">// read volatile</span></div><div class="line">        <span class="keyword">if</span> (ma == <span class="keyword">null</span>) &#123;</div><div class="line">            ma = acquireMethodAccessor();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ma.invoke(obj, args);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> MethodAccessor <span class="title">acquireMethodAccessor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// First check to see if one has been created yet, and take it</span></div><div class="line">        <span class="comment">// if so</span></div><div class="line">        MethodAccessor tmp = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) tmp = root.getMethodAccessor();</div><div class="line">        <span class="keyword">if</span> (tmp != <span class="keyword">null</span>) &#123;</div><div class="line">            methodAccessor = tmp;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Otherwise fabricate one and propagate it up to the root</span></div><div class="line">            tmp = reflectionFactory.newMethodAccessor(<span class="keyword">this</span>);</div><div class="line">            setMethodAccessor(tmp);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> tmp;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>JAVA1.8里，Method extends Executable，Executable新见于1.8，是一个适用于method和constructor的通用类，里面有一些paramter和anntation等通用function Executable extends AccessibleObject; 有人可能会问 CallerSensitive 是什么用处，<a href="#hello">见这里</a>。<br>可以看到实现MethodAccessor代理实现了Method.invoke, MethodAccessor在首次调用初始化进入acquireMethodAccessor方法中，这里root即为自己，root.getMethodAccessor()为null，所以会有reflectionFactory.newMethodAccessor来new一个。<br>看reflectionFactory.newMethodAccessor(this), 源码位于jdk/src/share/classes/sun/reflect下，<a href="http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/sun/reflect/ReflectionFactory.java" target="_blank" rel="external">点此在线浏览</a>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> sun.reflect;</div><div class="line">...</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionFactory</span> </span>&#123;</div><div class="line">    <span class="comment">// "Inflation" mechanism. Loading bytecodes to implement</span></div><div class="line">    <span class="comment">// Method.invoke() and Constructor.newInstance() currently costs</span></div><div class="line">    <span class="comment">// 3-4x more than an invocation via native code for the first</span></div><div class="line">    <span class="comment">// invocation (though subsequent invocations have been benchmarked</span></div><div class="line">    <span class="comment">// to be over 20x faster). Unfortunately this cost increases</span></div><div class="line">    <span class="comment">// startup time for certain applications that use reflection</span></div><div class="line">    <span class="comment">// intensively (but only once per class) to bootstrap themselves.</span></div><div class="line">    <span class="comment">// To avoid this penalty we reuse the existing JVM entry points</span></div><div class="line">    <span class="comment">// for the first few invocations of Methods and Constructors and</span></div><div class="line">    <span class="comment">// then switch to the bytecode-based implementations.</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// Package-private to be accessible to NativeMethodAccessorImpl</span></div><div class="line">    <span class="comment">// and NativeConstructorAccessorImpl</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> noInflation        = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>     inflationThreshold = <span class="number">15</span>;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> MethodAccessor <span class="title">newMethodAccessor</span><span class="params">(Method method)</span> </span>&#123;</div><div class="line">        checkInitted();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (noInflation &amp;&amp; !ReflectUtil.isVMAnonymousClass(method.getDeclaringClass())) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MethodAccessorGenerator().</div><div class="line">                generateMethod(method.getDeclaringClass(),</div><div class="line">                               method.getName(),</div><div class="line">                               method.getParameterTypes(),</div><div class="line">                               method.getReturnType(),</div><div class="line">                               method.getExceptionTypes(),</div><div class="line">                               method.getModifiers());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            NativeMethodAccessorImpl acc =</div><div class="line">                <span class="keyword">new</span> NativeMethodAccessorImpl(method);</div><div class="line">            DelegatingMethodAccessorImpl res =</div><div class="line">                <span class="keyword">new</span> DelegatingMethodAccessorImpl(acc);</div><div class="line">            acc.setParent(res);</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="4-1-noInflation"><a href="#4-1-noInflation" class="headerlink" title="4.1 noInflation"></a>4.1 noInflation</h3><p>当noInflation为true，默认false，除非设置 -Dsun.reflect.noInflation=true，则这时由MethodAccessorGenerator生成一个MethodAccessor，具体逻辑跟接下来要讲述的NativeMethodAccessorImpl的一个分支是一样的。</p>
<h3 id="4-2-NativeMethodAccessorImpl"><a href="#4-2-NativeMethodAccessorImpl" class="headerlink" title="4.2 NativeMethodAccessorImpl"></a>4.2 NativeMethodAccessorImpl</h3><p>noInflation为false，则通过new NativeMethodAccessorImpl并将其赋给代理类使用（这里不是很清楚为何代理，猜测可能编码简便，也使得只需通过setDelegate方式解除引用，NativeMethodAccessorImpl可以被回收掉）。<br>让我们看看NativeMethodAccessorImpl的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NativeMethodAccessorImpl</span> <span class="keyword">extends</span> <span class="title">MethodAccessorImpl</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Method method;</div><div class="line">    <span class="keyword">private</span> DelegatingMethodAccessorImpl parent;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> numInvocations;</div><div class="line">    NativeMethodAccessorImpl(Method method) &#123;</div><div class="line">        <span class="keyword">this</span>.method = method;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object[] args)</span></span></div><div class="line">        <span class="keyword">throws</span> IllegalArgumentException, InvocationTargetException</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// We can't inflate methods belonging to vm-anonymous classes because</span></div><div class="line">        <span class="comment">// that kind of class can't be referred to by name, hence can't be</span></div><div class="line">        <span class="comment">// found from the generated bytecode.</span></div><div class="line">        <span class="keyword">if</span> (++numInvocations &gt; ReflectionFactory.inflationThreshold()</div><div class="line">                &amp;&amp; !ReflectUtil.isVMAnonymousClass(method.getDeclaringClass())) &#123;</div><div class="line">            MethodAccessorImpl acc = (MethodAccessorImpl)</div><div class="line">                <span class="keyword">new</span> MethodAccessorGenerator().</div><div class="line">                    generateMethod(method.getDeclaringClass(),</div><div class="line">                                   method.getName(),</div><div class="line">                                   method.getParameterTypes(),</div><div class="line">                                   method.getReturnType(),</div><div class="line">                                   method.getExceptionTypes(),</div><div class="line">                                   method.getModifiers());</div><div class="line">            parent.setDelegate(acc);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> invoke0(method, obj, args);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setParent</span><span class="params">(DelegatingMethodAccessorImpl parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.parent = parent;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> Object <span class="title">invoke0</span><span class="params">(Method m, Object obj, Object[] args)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到当numInvocations超过ReflectionFactory的inflationThreshold(上文ReflectionFactory默认15 )，这时便会通过new MethodAccessorGenerator生成，也就是对应了上文我们说的ReflectionFactory里的noInflation为true的逻辑。</p>
<h3 id="4-3-NativeMethodAccessorImpl-invoke0"><a href="#4-3-NativeMethodAccessorImpl-invoke0" class="headerlink" title="4.3 NativeMethodAccessorImpl.invoke0"></a>4.3 NativeMethodAccessorImpl.invoke0</h3><p>先来看NativeMethodAccessorImpl的invoke0，这是默认的逻辑，即ReflectionFactory提到的<br>    Inflation, Loading bytecodes to implement Method.invoke() and Constructor.newInstance() currently costs 3-4x more than an invocation via native code for the first invocation (though subsequent invocations have been benchmarked to be over 20x faster).<br>java bytecode版本运行快，但是初始化耗时，而native版本启动快，但若长久运行效率不如bytecode版本。<br>在有的文章里说，”调用JNI方法耗时“，如马化腾先生说的，这句话对也不对。因为这句话是没有指明的是耗时的究竟是“调用”这个操作还是“JNI方法”，而且这个“调用”指的是哪些（call，参数校验，java和C的参数／结果转换…）？不过还好平时基本不会用到，所以许多技术交流或者面试这么问这么答对的时候不会有什么大问题。<br>那么究竟是哪个耗时呢？事实上从下面这张火焰图可以明显看出来。</p>
<h1 id="5-JMH-BenchMark"><a href="#5-JMH-BenchMark" class="headerlink" title="5. JMH BenchMark"></a>5. JMH BenchMark</h1><p>MethodAccessorGenerator的代码稍后再做分析，让我们先在此暂停，看一下注释里面提到的二者性能并做一个对比， 这里简化了JMH的日志输出，仅保留VM参数和结果。</p>
<h3 id="5-1-JMH对比结果"><a href="#5-1-JMH对比结果" class="headerlink" title="5.1 JMH对比结果"></a>5.1 JMH对比结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># JMH 1.10 (released 776 days ago, please consider updating!)</span></div><div class="line"><span class="comment"># VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home/jre/bin/java</span></div><div class="line"><span class="comment"># VM options: -Djmh.ignoreLock=true -Dsun.reflect.inflationThreshold=180000000</span></div><div class="line"><span class="comment"># Warmup: 1 iterations, 1 s each</span></div><div class="line">...</div><div class="line">Benchmark                                             (size)  Mode  Cnt    Score    Error    Units</div><div class="line">ReflectiveBenchMarkTest.testDirect                   1000000  avgt    3    0.048 ±  0.003    ms/op</div><div class="line">ReflectiveBenchMarkTest.testDirect:·threads.alive    1000000  avgt    3    5.000 ±  0.001  threads</div><div class="line">ReflectiveBenchMarkTest.testDirect:·threads.daemon   1000000  avgt    3    4.000 ±  0.001  threads</div><div class="line">ReflectiveBenchMarkTest.testDirect:·threads.started  1000000  avgt    3    5.000           threads</div><div class="line">ReflectiveBenchMarkTest.testInvoke                   1000000  avgt    3  290.985 ± 73.334    ms/op</div><div class="line">ReflectiveBenchMarkTest.testInvoke:·threads.alive    1000000  avgt    3    5.000 ±  0.001  threads</div><div class="line">ReflectiveBenchMarkTest.testInvoke:·threads.daemon   1000000  avgt    3    4.000 ±  0.001  threads</div><div class="line">ReflectiveBenchMarkTest.testInvoke:·threads.started  1000000  avgt    3    5.000           threads</div><div class="line">------------------</div><div class="line"><span class="comment"># JMH 1.10 (released 776 days ago, please consider updating!)</span></div><div class="line"><span class="comment"># VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home/jre/bin/java</span></div><div class="line"><span class="comment"># VM options: -Djmh.ignoreLock=true -Dsun.reflect.inflationThreshold=1</span></div><div class="line"><span class="comment"># Warmup: 1 iterations, 1 s each</span></div><div class="line">...</div><div class="line">ReflectiveBenchMarkTest.testDirect                      1000000  avgt    3     0.049 ±    0.012    ms/op</div><div class="line">ReflectiveBenchMarkTest.testDirect:·threads.alive       1000000  avgt    3     5.000 ±    0.001  threads</div><div class="line">ReflectiveBenchMarkTest.testDirect:·threads.daemon      1000000  avgt    3     4.000 ±    0.001  threads</div><div class="line">ReflectiveBenchMarkTest.testDirect:·threads.started     1000000  avgt    3     5.000             threads</div><div class="line">ReflectiveBenchMarkTest.testInvoke                      1000000  avgt    3     3.082 ±    1.054    ms/op</div><div class="line">ReflectiveBenchMarkTest.testInvoke:·threads.alive       1000000  avgt    3     5.000 ±    0.001  threads</div><div class="line">ReflectiveBenchMarkTest.testInvoke:·threads.daemon      1000000  avgt    3     4.000 ±    0.001  threads</div><div class="line">ReflectiveBenchMarkTest.testInvoke:·threads.started     1000000  avgt    3     5.000             threads</div></pre></td></tr></table></figure>
<p>在我的 Mac 2.9 GHz Intel Core i5，8 GB 1867 MHz DDR3，使用JMH实测几次下来性能差距还是inflationThreshold=1和80000000差距还是蛮大的，约80倍(1000000次分别290.985ms,3.082ms)，远大于文中提的20X(1000000次分别0.049ms,3.082ms)[或者测试有误？当然也不排除可能是参数较少的缘故]，而优化的invoke与原生的方法访问性能差60倍，但可以计算到，在反射上的耗时是纳秒计的，这在许多业务系统相对而言几乎可以忽略不计的。</p>
<h3 id="5-2-JMH-BenchMark代码"><a href="#5-2-JMH-BenchMark代码" class="headerlink" title="5.2 JMH BenchMark代码"></a>5.2 JMH BenchMark代码</h3><p>（未想到好的测试first invocation 3-4X的方法，故这里只测两种方法性能）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Warmup</span>(iterations = <span class="number">1</span>, time = <span class="number">1</span>, timeUnit = TimeUnit.SECONDS)</div><div class="line"><span class="meta">@Measurement</span>(iterations = <span class="number">3</span>, time = <span class="number">1</span>, timeUnit = TimeUnit.SECONDS)</div><div class="line"><span class="meta">@Fork</span>(value = <span class="number">1</span>, jvmArgsAppend = &#123; <span class="string">"-Djmh.ignoreLock=true"</span>, <span class="string">"-Dsun.reflect.inflationThreshold=180000000"</span>&#125;)<span class="comment">//"-XX:+TraceClassLoading", </span></div><div class="line"><span class="meta">@BenchmarkMode</span>(Mode.AverageTime)</div><div class="line"><span class="meta">@OutputTimeUnit</span>(TimeUnit.MILLISECONDS)</div><div class="line"><span class="meta">@State</span>(Scope.Benchmark)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectiveBenchMarkTest</span> <span class="keyword">extends</span> <span class="title">MethodTest</span> </span>&#123;</div><div class="line">    Method m;</div><div class="line">    Object o;</div><div class="line">    X xx = <span class="keyword">new</span> X();</div><div class="line">    <span class="meta">@Param</span>(&#123; <span class="string">"1000"</span>, <span class="string">"1000000"</span> &#125;)</div><div class="line">    <span class="keyword">int</span> size;</div><div class="line">    <span class="meta">@Setup</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Class&lt;?&gt; clz = Class.forName(<span class="string">"org.thomas.chs.X"</span>);</div><div class="line">        o = clz.newInstance();</div><div class="line">        m = clz.getMethod(<span class="string">"hot"</span>, String.class);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@TearDown</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Benchmark</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInvoke</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">            m.invoke(o, <span class="string">"hello"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Benchmark</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDirect</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">            xx.hot(<span class="string">"hello"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="6-JAVA-Flame-Graph"><a href="#6-JAVA-Flame-Graph" class="headerlink" title="6. JAVA Flame Graph"></a>6. JAVA Flame Graph</h1><p>下面是针对上文的App类做的一个JAVA火焰图，<a href="#Appcode">代码在这</a> 使用 <a href="https://github.com/jvm-profiling-tools/async-profiler" target="_blank" rel="external">https://github.com/jvm-profiling-tools/async-profiler</a> 的profiler, 在CentOS 7系统。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">java -Dsun.reflect.inflationThreshold=10000000 App 10000000</div><div class="line">pgrep java</div><div class="line">./profiler.sh -d 80 -o flamegraph -f /tmp/traces.txt 7760</div><div class="line">../FlameGraph/flamegraph.pl --colors=java /tmp/traces.txt &gt; ../flamegraph.svg</div></pre></td></tr></table></figure></p>
<p><img src="/images/flamegraph.png" width="100%"><br>由于blog不支持插入svg，可以点击 <a href="/images/flamegraph.svg" target="_blank">这里看svg原件</a>, 上面看各个方法的CPU采样会很清楚。<br>上面采样基于nflationThreshold=10_000_000, 上图可以看到sun/Freflect/DelegatingMethodAccessorImpl.invoke上方被分成了GeneratedMethodAccessor1和NativeMethodAccessorImpl两部分, 并且他们的耗时比还是很明显的3:1，但其实程序在NativeMethodAccessorImpl循环一次，GeneratedMethodAccessor1循环499次。</p>
<h1 id="7-GeneratedMethodAccessor1是什么？"><a href="#7-GeneratedMethodAccessor1是什么？" class="headerlink" title="7. GeneratedMethodAccessor1是什么？"></a>7. GeneratedMethodAccessor1是什么？</h1><h3 id="7-1-GeneratedMethodAccessor1的生成"><a href="#7-1-GeneratedMethodAccessor1的生成" class="headerlink" title="7.1 GeneratedMethodAccessor1的生成"></a>7.1 GeneratedMethodAccessor1的生成</h3><p>那么GeneratedMethodAccessor1到底是什么？这要看这里通过ASM生成的字节码了。<br>可以<a href="http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/sun/reflect/MethodAccessorGenerator.java#l124" target="_blank" rel="external">在线浏览代码MethodAccessorGenerator</a>，这里只贴出部分：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** This routine is not thread-safe */</span></div><div class="line"><span class="function"><span class="keyword">private</span> MagicAccessorImpl <span class="title">generate</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; declaringClass,</span></span></div><div class="line">                                   String name,</div><div class="line">                                   Class&lt;?&gt;[] parameterTypes,</div><div class="line">                                   Class&lt;?&gt;   returnType,</div><div class="line">                                   Class&lt;?&gt;[] checkedExceptions,</div><div class="line">                                   <span class="keyword">int</span> modifiers,</div><div class="line">                                   <span class="keyword">boolean</span> isConstructor,</div><div class="line">                                   <span class="keyword">boolean</span> forSerialization,</div><div class="line">                                   Class&lt;?&gt; serializationTargetClass)</div><div class="line">&#123;</div><div class="line">    ByteVector vec = ByteVectorFactory.create();</div><div class="line">    asm = <span class="keyword">new</span> ClassFileAssembler(vec);</div><div class="line">    <span class="keyword">this</span>.declaringClass = declaringClass;</div><div class="line">    <span class="keyword">this</span>.parameterTypes = parameterTypes;</div><div class="line">    <span class="keyword">this</span>.returnType = returnType;</div><div class="line">    <span class="keyword">this</span>.modifiers = modifiers;</div><div class="line">    <span class="keyword">this</span>.isConstructor = isConstructor;</div><div class="line">    <span class="keyword">this</span>.forSerialization = forSerialization;</div><div class="line">    asm.emitMagicAndVersion();</div><div class="line">    ...</div><div class="line">    <span class="keyword">final</span> String generatedName = generateName(isConstructor, forSerialization);</div><div class="line">    asm.emitConstantPoolUTF8(generatedName);</div><div class="line">    asm.emitConstantPoolClass(asm.cpi());</div><div class="line">    thisClass = asm.cpi();</div><div class="line">    <span class="keyword">if</span> (isConstructor) &#123;</div><div class="line">        ...</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        asm.emitConstantPoolUTF8(<span class="string">"sun/reflect/MethodAccessorImpl"</span>);</div><div class="line">    &#125;</div><div class="line">    asm.emitConstantPoolClass(asm.cpi());</div><div class="line">    ...</div><div class="line">    targetMethodRef = asm.cpi();</div><div class="line">    <span class="keyword">if</span> (isConstructor) &#123;</div><div class="line">        asm.emitConstantPoolUTF8(<span class="string">"newInstance"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        asm.emitConstantPoolUTF8(<span class="string">"invoke"</span>);</div><div class="line">    &#125;</div><div class="line">    invokeIdx = asm.cpi();</div><div class="line">    <span class="keyword">if</span> (isConstructor) &#123;</div><div class="line">        asm.emitConstantPoolUTF8(<span class="string">"([Ljava/lang/Object;)Ljava/lang/Object;"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        asm.emitConstantPoolUTF8</div><div class="line">            (<span class="string">"(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;"</span>);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    <span class="keyword">final</span> <span class="keyword">byte</span>[] bytes = vec.getData();</div><div class="line">    <span class="comment">// Note: the class loader is the only thing that really matters</span></div><div class="line">    <span class="comment">// here -- it's important to get the generated code into the</span></div><div class="line">    <span class="comment">// same namespace as the target class. Since the generated code</span></div><div class="line">    <span class="comment">// is privileged anyway, the protection domain probably doesn't</span></div><div class="line">    <span class="comment">// matter.</span></div><div class="line">    <span class="keyword">return</span> AccessController.doPrivileged(</div><div class="line">        <span class="keyword">new</span> PrivilegedAction&lt;MagicAccessorImpl&gt;() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> MagicAccessorImpl <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">return</span> (MagicAccessorImpl)</div><div class="line">                    ClassDefiner.defineClass</div><div class="line">                            (generatedName,</div><div class="line">                             bytes,</div><div class="line">                             <span class="number">0</span>,</div><div class="line">                             bytes.length,</div><div class="line">                             declaringClass.getClassLoader()).newInstance();</div><div class="line">                    &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="7-2-GeneratedMethodAccessor1长啥样"><a href="#7-2-GeneratedMethodAccessor1长啥样" class="headerlink" title="7.2 GeneratedMethodAccessor1长啥样"></a>7.2 GeneratedMethodAccessor1长啥样</h3><p>其实不管你是否了解ASM，通过注释可以看出大概这段jvm code是干啥的了，不过有没有办法得到这段字节码呢？记得有个jvm参数可以获取匿名类的字节码，而这里我们也可以通过javaagent方式得到这段字节码的。如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAgent</span> <span class="keyword">implements</span> <span class="title">ClassFileTransformer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span> </span>&#123;</div><div class="line">        inst.addTransformer(<span class="keyword">new</span> CustomAgent());</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined,</div><div class="line">            ProtectionDomain protectionDomain, <span class="keyword">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</div><div class="line">        <span class="comment">// System.out.println(className);</span></div><div class="line">        <span class="keyword">if</span> (className.indexOf(<span class="string">"GeneratedMethodAccessor"</span>)!= -<span class="number">1</span>) &#123;</div><div class="line">            String fileName = className.substring(className.lastIndexOf(<span class="string">"/"</span>)+<span class="number">1</span>)+<span class="string">".class"</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Files.write(Paths.get(<span class="string">"/Users/thomaslau/ztemp/java/"</span>, fileName), classfileBuffer);</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"succed writing"</span> + className);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> classfileBuffer;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Manifest.mf文件指定 Premain-Class: thomas.CustomAgent，之后运行</p>
<pre><code>java -javaagent:/Users/thomaslau/custagent.jar App
</code></pre><p>得到的GeneratedMethodAccessor1.class见<a href="#generatedMethodAccessor1">附录</a>。<br>下面需要用到decompile工具，有的使用jd，不过要注意需要支持到1.8，有些不能正确反编译，所以我使用了<a href="https://github.com/deathmarine/Luyten" target="_blank" rel="external">Luyten+Procyon</a>, 一款Java Decompiler Gui for Procyon，曾经评测得分较高。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> sun.reflect;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratedMethodAccessor1</span> <span class="keyword">extends</span> <span class="title">MethodAccessorImpl</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(<span class="keyword">final</span> Object o, <span class="keyword">final</span> Object[] array)</span> <span class="keyword">throws</span> InvocationTargetException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">        &#125;</div><div class="line">        X x;</div><div class="line">        String s;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            x = (X)o;</div><div class="line">            <span class="keyword">if</span> (array.length != <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">            &#125;</div><div class="line">            s = (String)array[<span class="number">0</span>];</div><div class="line">            x.hot(s);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (ClassCastException | NullPointerException ex) &#123;</div><div class="line">            <span class="keyword">final</span> Object o3;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(o3.toString());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            x.hot(s);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvocationTargetException(t);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="7-3-MagicAccessorImpl"><a href="#7-3-MagicAccessorImpl" class="headerlink" title="7.3 MagicAccessorImpl"></a>7.3 MagicAccessorImpl</h3><p>最后，generate返回的是MagicAccessorImpl，因为generate这里为ConstructorAccessorImpl和MethodAccessorImpl共用，二者都是MagicAccessorImpl子类，然后再在各自的方法里强制转换一次。 这里package（sun.reflect）属性的MagicAccessorImpl作用是：</p>
<pre><code>is a marker class in the hierarchy. All subclasses of this class are
&quot;magically&quot; granted access by the VM to otherwise inaccessible
fields and methods of other classes. It is used to hold the code
for dynamically-generated FieldAccessorImpl and MethodAccessorImpl
subclasses. (Use of the word &quot;unsafe&quot; was avoided in this class&apos;s
name to avoid confusion with {@link sun.misc.Unsafe}.)
</code></pre><p>这也表明了至少generate底层是支持invoke 到private方法的。<br>    public Object invoke(final Object o, final Object[] array)<br>从这一句我们也可以看到，即便是GeneratedMethodAccessor1，这个Method的对象／参数／返回都退化成了Object，导致需要一些类型check，但这是由外层方法决定的，MethodHandle避免了这类问题。</p>
<h1 id="8-NativeMethodAccessorImpl-invoke0"><a href="#8-NativeMethodAccessorImpl-invoke0" class="headerlink" title="8. NativeMethodAccessorImpl.invoke0"></a>8. NativeMethodAccessorImpl.invoke0</h1><p>最后，让我们看下GeneratedMethodAccessor1之外的选择，invoke0这个native方法，可以从前面的SVG看C代码的调用栈：<br><img src="/images/flamegraph_native.png" width="100%"><br>CPU采样也可以看到X.hot的cpu占比远小于JVM_InvokeMethod<br>从NativeAccessor.c找到jvm.cpp, <a href="http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/87ee5ee27509/src/share/vm/prims/jvm.cpp#l4010" target="_blank" rel="external">点这里jvm.cpp</a>,让我们大概了解下<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">JVM_ENTRY(jobject, JVM_InvokeMethod(JNIEnv *env, jobject method, jobject obj, jobjectArray args0))</div><div class="line">  JVMWrapper("JVM_InvokeMethod");</div><div class="line">  Handle method_handle;</div><div class="line">  if (thread-&gt;stack_available((address) &amp;method_handle) &gt;= JVMInvokeMethodSlack) &#123;</div><div class="line">    method_handle = Handle(THREAD, JNIHandles::resolve(method));</div><div class="line">    Handle receiver(THREAD, JNIHandles::resolve(obj));</div><div class="line">    objArrayHandle args(THREAD, objArrayOop(JNIHandles::resolve(args0)));</div><div class="line">    oop result = Reflection::invoke_method(method_handle(), receiver, args, CHECK_NULL);</div><div class="line">    jobject res = JNIHandles::make_local(env, result);</div><div class="line">    if (JvmtiExport::should_post_vm_object_alloc()) &#123;</div><div class="line">      oop ret_type = java_lang_reflect_Method::return_type(method_handle());</div><div class="line">      assert(ret_type != NULL, "sanity check: ret_type oop must not be NULL!");</div><div class="line">      if (java_lang_Class::is_primitive(ret_type)) &#123;</div><div class="line">        // Only for primitive type vm allocates memory for java object.</div><div class="line">        // See box() method.</div><div class="line">        JvmtiExport::post_vm_object_alloc(JavaThread::current(), result);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    return res;</div><div class="line">  &#125; else &#123;</div><div class="line">    THROW_0(vmSymbols::java_lang_StackOverflowError());</div><div class="line">  &#125;</div><div class="line">JVM_END</div></pre></td></tr></table></figure></p>
<p>这里往下就是jvm内部，对JIT的黑盒了. <a href="http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/87ee5ee27509/src/share/vm/runtime/reflection.cpp#l1117" target="_blank" rel="external">Reflection.cpp</a><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// This would be nicer if, say, java.lang.reflect.Method was a subclass</div><div class="line">// of java.lang.reflect.Constructor</div><div class="line"></div><div class="line">oop Reflection::invoke_method(oop method_mirror, Handle receiver, objArrayHandle args, TRAPS) &#123;</div><div class="line">  oop mirror             = java_lang_reflect_Method::clazz(method_mirror);</div><div class="line">  int slot               = java_lang_reflect_Method::slot(method_mirror);</div><div class="line">  bool override          = java_lang_reflect_Method::override(method_mirror) != 0;</div><div class="line">  objArrayHandle ptypes(THREAD, objArrayOop(java_lang_reflect_Method::parameter_types(method_mirror)));</div><div class="line">  oop return_type_mirror = java_lang_reflect_Method::return_type(method_mirror);</div><div class="line">  BasicType rtype;</div><div class="line">  if (java_lang_Class::is_primitive(return_type_mirror)) &#123;</div><div class="line">    rtype = basic_type_mirror_to_basic_type(return_type_mirror, CHECK_NULL);</div><div class="line">  &#125; else &#123;</div><div class="line">    rtype = T_OBJECT;</div><div class="line">  &#125;</div><div class="line">  instanceKlassHandle klass(THREAD, java_lang_Class::as_Klass(mirror));</div><div class="line">  Method* m = klass-&gt;method_with_idnum(slot);</div><div class="line">  if (m == NULL) &#123;</div><div class="line">    THROW_MSG_0(vmSymbols::java_lang_InternalError(), "invoke");</div><div class="line">  &#125;</div><div class="line">  methodHandle method(THREAD, m);</div><div class="line">  return invoke(klass, method, receiver, override, ptypes, rtype, args, true, THREAD);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里除了invoke_method，还有上文constructor也对应invoke_constructor，后者主要在initialize检查，没有这些参数校验，但最终也是调用invoke方法。<br>如果你留意链接里的火焰图，就会发现NativeMethodAccessorImpl.invoke0顶上的一条比较宽的是JavaCalls::call_helper(JavaValue<em> result, methodHandle</em> m, JavaCallArguments* args, TRAPS)，没错这里就是最终调用java方法的地方了。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> JavaCalls::call_helper(JavaValue* result, methodHandle* m, JavaCallArguments* args, TRAPS) &#123;</div><div class="line">  methodHandle method = *m;</div><div class="line">  JavaThread* thread = (JavaThread*)THREAD;</div><div class="line">  assert(thread-&gt;is_Java_thread(), <span class="string">"must be called by a java thread"</span>);</div><div class="line">  assert(method.not_null(), <span class="string">"must have a method to call"</span>);</div><div class="line">  assert(!SafepointSynchronize::is_at_safepoint(), <span class="string">"call to Java code during VM operation"</span>);</div><div class="line">  assert(!thread-&gt;handle_area()-&gt;no_handle_mark_active(), <span class="string">"cannot call out to Java here"</span>);</div><div class="line">  ...</div><div class="line">  <span class="comment">// do call</span></div><div class="line">  &#123; <span class="function">JavaCallWrapper <span class="title">link</span><span class="params">(method, receiver, result, CHECK)</span></span>;</div><div class="line">    &#123; <span class="function">HandleMark <span class="title">hm</span><span class="params">(thread)</span></span>;  <span class="comment">// HandleMark used by HandleMarkCleaner</span></div><div class="line"></div><div class="line">      StubRoutines::call_stub()(</div><div class="line">        (address)&amp;link,</div><div class="line">        <span class="comment">// (intptr_t*)&amp;(result-&gt;_value), // see NOTE above (compiler problem)</span></div><div class="line">        result_val_address,          <span class="comment">// see NOTE above (compiler problem)</span></div><div class="line">        result_type,</div><div class="line">        method(),</div><div class="line">        entry_point,</div><div class="line">        args-&gt;parameters(),</div><div class="line">        args-&gt;size_of_parameters(),</div><div class="line">        CHECK</div><div class="line">      );</div><div class="line"></div><div class="line">      result = link.result();  <span class="comment">// circumvent MS C++ 5.0 compiler bug (result ...</span></div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>reflection.cpp invoke等代码过长，就不贴这里了，感兴趣的可以移步到<a href="http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/87ee5ee27509/src/share/vm/runtime/reflection.cpp#l901" target="_blank" rel="external">Reflection.cpp#invoke</a></p>
<h1 id="9-其他"><a href="#9-其他" class="headerlink" title="9. 其他"></a>9. 其他</h1><p>有的会通过机器指令验证，如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash">java -server -Dsun.reflect.inflationThreshold=180000000 -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:+PrintCompilation <span class="string">'-XX:CompileCommand=compileonly sun/reflect/NativeMethodAccessorImpl.invoke'</span> App &gt; pure_native_infla18M.txt</span></div><div class="line">Java HotSpot(TM) 64-Bit Server VM warning: PrintAssembly is enabled; turning on DebugNonSafepoints to gain additional output</div><div class="line"><span class="meta">&gt;</span><span class="bash">java -server -Dsun.reflect.inflationThreshold=1 -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:+PrintCompilation <span class="string">'-XX:CompileCommand=compileonly sun/reflect/GeneratedMethodAccessor1.invoke'</span> App &gt; pure_generate_infla1.txt</span></div></pre></td></tr></table></figure></p>
<p>上面确实可以看到各种inflationThreshold情况下起作用的是GeneratedMethodAccessor1还是NativeMethodAccessorImpl，不过再看就是看到一些callq指令了，性能分析需要引入其他工具。</p>
<h1 id="10-附录"><a href="#10-附录" class="headerlink" title="10. 附录"></a>10. 附录</h1><p><strong>1, <span id="hello">CallerSensitive其实就是实现</span></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Returns the class of the caller of the method calling this method, ignoring frames </div><div class="line">associated with java.lang.reflect.Method.invoke() and its implementation</div></pre></td></tr></table></figure></p>
<p>的功能，这是一个由大神<a href="https://twitter.com/briangoetz" target="_blank" rel="external">Brian Goetz</a>于1.8提出的<a href="http://openjdk.java.net/jeps/176" target="_blank" rel="external">JEP-176</a>，StackOverFlow<a href="https://stackoverflow.com/questions/22626808/what-does-the-sun-reflect-callersensitive-annotation-mean" target="_blank" rel="external">里讲的比较概括些</a>，CallerSensitive<a href="http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/sun/reflect/CallerSensitive.java" target="_blank" rel="external">的源码链接</a><br><strong>2, isVMAnonymousClass</strong><br>见 <a href="http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/sun/reflect/misc/ReflectUtil.java" target="_blank" rel="external">ReflectUtil</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Checks if &#123;<span class="doctag">@code</span> Class cls&#125; is a VM-anonymous class</div><div class="line"> * as defined by &#123;<span class="doctag">@link</span> sun.misc.Unsafe#defineAnonymousClass&#125;</div><div class="line"> * (not to be confused with a Java Language anonymous inner class).</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isVMAnonymousClass</span><span class="params">(Class&lt;?&gt; cls)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> cls.getName().indexOf(<span class="string">"/"</span>) &gt; -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>什么是VM-anonymous class？<a href="https://jcp.org/en/jsr/detail?id=292" target="_blank" rel="external">JSR292</a>的领导者，亦即为JAVA(java7)引入了动态类型语言支持的<a href="https://blogs.oracle.com/jrose/anonymous-classes-in-the-vm" target="_blank" rel="external">John Rose在其Anonymous classes in the VM</a>里面有详述，这是一类独立于class loader、system dictionary的而寄生在hostclass的匿名类（但不是必须），这解决了许多基于JVM的动态语言的问题，<a href="http://openjdk.java.net/projects/mlvm" target="_blank" rel="external">OpenJDK Multi-Language VM project</a><br>定义在<a href="http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/sun/misc/Unsafe.java" target="_blank" rel="external">Unsafe</a>的一个native实现，具体实现在Unsafe.cpp,<a href="http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/c82d1a19ffb5/src/share/vm/prims/unsafe.cpp#l1132" target="_blank" rel="external">源码点击此处</a><strong>TODO！！</strong>.<br>John Rose贡献了MethodHandles等实现，比如常用于JRuby／Jython等语言的invokedynamic指令，即<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Add a new bytecode, invokedynamic, that supports efficient and flexible </div><div class="line">execution of method invocations in the absence of static type information.</div></pre></td></tr></table></figure></p>
<p>事实上，JSR292最初分为三部分，AnonymousClassLoader、MethodHandle(s)和invokedynamic, 1.7主要用AnonymousClass来实现动态语言支持，1.8之后则提供了invokedynamic使用，目前看应该是二者混用的，不过<a href="http://www.javaworld.com/article/2072319/core-java/a-first-taste-of-invokedynamic.html?page=2" target="_blank" rel="external">AnonymousClassLoader</a>在1.7声称因非标准API会被废弃掉，目前依旧是<a href="http://bugs.java.com/view_bug.do?bug_id=6990182" target="_blank" rel="external">声明状态</a>, 因为1.8的lambda实现中LambdaMetaFactory正是通过Unsafe.defineAnonymousClass将ASM生成的class插入到original 即host class。<br>Nashorn项目也在用它<a href="https://bugs.openjdk.java.net/browse/JDK-8135251" target="_blank" rel="external">loading Nashorn script code</a>, 至少截止20170725是如此。<br>invokedynamic于1.7引入，但实际上1.8时javac才支持的。<br>具体目前还未看透，后面可能会再写文章再深入探讨。<br><strong>3，VM-anonymous class与匿名类（anonymous class）的区别？</strong><br>最大的区别是，匿名类经过javac之后是一个有名字(XX.$1)的正常的java class，前者不是，可见上文所述。<br><strong>4，<a href="https://www.slideshare.net/CharlesNutter/invokedynamic-in-45-minutes" target="_blank" rel="external">invokeDynamic</a></strong><br>Java语言架构师Brian Goetz也在JSR 335提到jAVA Lambda实现<a href="http://cr.openjdk.java.net/~briangoetz/lambda/lambda-translation.html" target="_blank" rel="external">Translation of Lambda Expressions</a>…确实太多了，而Reflection与MethodHandle／dynamic区别，简单来讲可以认为Reflection像是java代码层次，MethodHandle是jvm层次，前者局限于java，后者则适用基于JVM的语言。1.8中InvokeDynamic用于lambda对象的创建，实际调用方法还是invokevirtual/inter../speci.., 可以看看<a href="https://wiki.openjdk.java.net/display/HotSpot/Method+handles+and+invokedynamic" target="_blank" rel="external">MethodHandles and Invokedynamic</a>, <a href="http://www.javaworld.com/article/2860079/learn-java/invokedynamic-101.html?page=2" target="_blank" rel="external">Invokedynamic-101</a>,  <a href="https://www.infoq.com/articles/Invokedynamic-Javas-secret-weapon" target="_blank" rel="external">Invokedynamic-Javas-secret-weapon</a>, 或周志明f写的infoq的文章 <a href="http://www.infoq.com/cn/articles/jdk-dynamically-typed-language" target="_blank" rel="external">解析JDK 7的动态类型语言支持</a>, blog签名有趣的JRuby专家<a href="http://blog.headius.com/2008/09/first-taste-of-invokedynamic.html" target="_blank" rel="external">first-taste-of-invokedynamic</a>, Oracle一篇tech note<a href="http://docs.oracle.com/javase/8/docs/technotes/guides/vm/multiple-language-support.html" target="_blank" rel="external">Java Virtual Machine Support for Non-Java Languages</a>, <a href="http://blog.takipi.com/compiling-lambda-expressions-scala-vs-java-8/" target="_blank" rel="external">compiling-lambda-expressions-scala-vs-java-8</a>，有趣的perl6贡献者的<a href="http://jnthn.net/papers/2013-bs-invoke-dynamic.pdf" target="_blank" rel="external">Using invoke dynamic to teach the JVM a new language </a>这些文章有内容过时但值得一看.<br><strong>具体实现如何，可能需要再写文章探讨</strong>。<br><strong>5，关于JNI调用耗时</strong><br>推荐看看<a href="https://stackoverflow.com/questions/7699020/what-makes-jni-calls-slow" target="_blank" rel="external">what-makes-jni-calls-slow</a>, 其实“慢”，这么说没有意义，要看怎么比，要看具体逻辑。<br>而实际上，使用jni实现和java原生实现相比，理论上导致差距的地方有，因为jni像个黑盒不会內联不会jit优化，crossing boundaries问题，JAVA和native之间交换数据可能需要拷贝（java访问jni的返回／jni访问java对象）<br><a href="https://www.slideshare.net/RednaxelaFX/green-teajug-hotspotintrinsics02232013" target="_blank" rel="external">R神的hotspot intrinsics API</a><br><strong>6，privateGetMethodRecursive</strong><br><a href="http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/java/lang/Class.java" target="_blank" rel="external">代码可见Class.java的privateGetMethodRecursive实现</a>, 如果你仔细看了clazz.newInsstance这块，会发现有 <a href="http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/java/lang/Class.java#l2464" target="_blank" rel="external">ReflectionData</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionData</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">volatile</span> Field[] declaredFields;</div><div class="line">    <span class="keyword">volatile</span> Field[] publicFields;</div><div class="line">    <span class="keyword">volatile</span> Method[] declaredMethods;</div><div class="line">    <span class="keyword">volatile</span> Method[] publicMethods;</div><div class="line">    <span class="keyword">volatile</span> Constructor&lt;T&gt;[] declaredConstructors;</div><div class="line">    <span class="keyword">volatile</span> Constructor&lt;T&gt;[] publicConstructors;</div><div class="line">    <span class="comment">// Intermediate results for getFields and getMethods</span></div><div class="line">    <span class="keyword">volatile</span> Field[] declaredPublicFields;</div><div class="line">    <span class="keyword">volatile</span> Method[] declaredPublicMethods;</div><div class="line">    <span class="keyword">volatile</span> Class&lt;?&gt;[] interfaces;</div><div class="line">    <span class="comment">// Value of classRedefinedCount when we created this ReflectionData instance</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> redefinedCount;</div><div class="line">    ReflectionData(<span class="keyword">int</span> redefinedCount) &#123;</div><div class="line">        <span class="keyword">this</span>.redefinedCount = redefinedCount;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里面有 Constructor，在newReflectionData，newInstance都是可关注的地方，这里Constructor的构建，其实也是类似本文Method的逻辑，通过ReflectionFactory.newConstructorAccessor提供了一个基于native的NativeConstructorAccessorImpl实现，而另一个就是同样的基于asm bytecode的MethodAccessorGenerator().generateConstructor实现，但是有一个例外，当。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Bootstrapping issue: since we use Class.newInstance() in</span></div><div class="line"><span class="comment">// the ConstructorAccessor generation process, we have to</span></div><div class="line"><span class="comment">// break the cycle here.</span></div><div class="line"><span class="keyword">if</span> (Reflection.isSubclassOf(declaringClass,</div><div class="line">                            ConstructorAccessorImpl.class)) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BootstrapConstructorAccessorImpl(c);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>满足上述条件时，返回的是BootstrapConstructorAccessorImpl，而它然后就直接通过 UnsafeFieldAccessorImpl.unsafe.allocateInstance(constructor.getDeclaringClass())来newInstance的。<br><strong>7, <span id="generatedMethodAccessor1">GeneratedMethodAccessor1.class</span></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">public java.lang.Object invoke(java.lang.Object, java.lang.Object[]) throws java.lang.reflect.InvocationTargetException;</div><div class="line">  descriptor: (Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;</div><div class="line">  flags: ACC_PUBLIC</div><div class="line">  Code:</div><div class="line">    stack=5, locals=3, args_size=3</div><div class="line">       0: aload_1</div><div class="line">       1: ifnonnull     12</div><div class="line">       4: new           #20                 // class java/lang/NullPointerException</div><div class="line">       7: dup</div><div class="line">       8: invokespecial #28                 // Method java/lang/NullPointerException.&quot;&lt;init&gt;&quot;:()V</div><div class="line">      11: athrow</div><div class="line">      12: aload_1</div><div class="line">      13: checkcast     #6                  // class X</div><div class="line">      16: aload_2</div><div class="line">      17: arraylength</div><div class="line">      18: sipush        1</div><div class="line">      21: if_icmpeq     32</div><div class="line">      24: new           #22                 // class java/lang/IllegalArgumentException</div><div class="line">      27: dup</div><div class="line">      28: invokespecial #29                 // Method java/lang/IllegalArgumentException.&quot;&lt;init&gt;&quot;:()V</div><div class="line">      31: athrow</div><div class="line">      32: aload_2</div><div class="line">      33: sipush        0</div><div class="line">      36: aaload</div><div class="line">      37: checkcast     #14                 // class java/lang/String</div><div class="line">      40: invokevirtual #10                 // Method X.hot:(Ljava/lang/String;)V</div><div class="line">      43: aconst_null</div><div class="line">      44: areturn</div><div class="line">      45: invokespecial #42                 // Method java/lang/Object.toString:()Ljava/lang/String;</div><div class="line">      48: new           #22                 // class java/lang/IllegalArgumentException</div><div class="line">      51: dup_x1</div><div class="line">      52: swap</div><div class="line">      53: invokespecial #32                 // Method java/lang/IllegalArgumentException.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</div><div class="line">      56: athrow</div><div class="line">      57: new           #24                 // class java/lang/reflect/InvocationTargetException</div><div class="line">      60: dup_x1</div><div class="line">      61: swap</div><div class="line">      62: invokespecial #35                 // Method java/lang/reflect/InvocationTargetException.&quot;&lt;init&gt;&quot;:(Ljava/lang/Throwable;)V</div><div class="line">      65: athrow</div></pre></td></tr></table></figure></p>
<p><strong>8，</strong> JAVA StackTrace方法的性能可以参考 stackoverflow的一个问答<a href="https://stackoverflow.com/questions/421280/how-do-i-find-the-caller-of-a-method-using-stacktrace-or-reflection" target="_blank" rel="external">how-do-i-find-the-caller-of-a-method-using-stacktrace-or-reflection</a></p>
<h1 id="11-引用"><a href="#11-引用" class="headerlink" title="11. 引用"></a>11. 引用</h1><ol>
<li><a href="http://rednaxelafx.iteye.com/blog/548536" target="_blank" rel="external">关于反射调用方法的一个log</a>, <strong>RednaxelaFX</strong>, 也就是国内已知公认JVM专家R大，也即许多ppt作者为 莫枢得，写过一篇文章讨论了这个问题</li>
<li>关于Java Flame，这里列出几篇参考文章：<ul>
<li>2.1<br>Brendan Gregg大牛写过 使用google 的<a href="http://www.brendangregg.com/blog/2014-06-12/java-flame-graphs.html" target="_blank" rel="external">Lightweight Java Profiler</a>结合其<a href="https://github.com/brendangregg/FlameGraph" target="_blank" rel="external">火焰图工具FlameGraph</a>如何制作java火焰图的文章，比如里面也可以使用 Richard Warburton开发的<a href="https://github.com/RichardWarburton/honest-profiler" target="_blank" rel="external">honest-profiler</a>来采样。</li>
<li>2.2<br>Brendan Gregg在后来的文章里更新了使用Linux perf_events来一起显示Java和系统代码<a href="http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html#Java" target="_blank" rel="external">cpuflamegraphs</a>，<a href="https://medium.com/netflix-techblog/java-in-flames-e763b3d32166" target="_blank" rel="external">netflix java-in-flames</a>, 不过有一种适用旧版本不影响性能的<a href="https://github.com/jvm-profiling-tools/async-profiler" target="_blank" rel="external">基于AsyncGetCallTrace + perf_events的采样方式</a>, 但 AsyncGetCallTrace is not an official API to the JVM。</li>
<li>2.3<br>有人使用hprof作cpu采样，但是 正如2.1 java-flame-graphs提到的 <a href="http://www.brendangregg.com/blog/2014-06-09/java-cpu-sampling-using-hprof.html" target="_blank" rel="external">这篇文章</a> 做了指正。</li>
<li>2.4<br>有最新的一篇文章介绍了 <a href="http://www.brendangregg.com/blog/2017-06-30/package-flame-graph.html" target="_blank" rel="external">Java Package Flame Graph</a>并引出了<a href="http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html#Java" target="_blank" rel="external">CPU Flame Graphs</a></li>
<li>2.5<br>上述在<a href="http://www.brendangregg.com/flamegraphs.html#Updates" target="_blank" rel="external">updates</a>都可以找到, Brendan Gregg的flamegraphs更新页面，几乎记录了优质的跟flamegraphs有关的链接。</li>
</ul>
</li>
<li><a href="http://www.brendangregg.com/linuxperf.html" target="_blank" rel="external">Brendan Gregg的站点，记录了些高效的Linux性能工具</a></li>
<li>两篇不错的文章 <a href="http://psy-lob-saw.blogspot.co.za/2017/02/flamegraphs-intro-fire-for-everyone.html" target="_blank" rel="external">flamegraphs-intro-fire-for-everyone</a>,<a href="http://psy-lob-saw.blogspot.co.za/2016/06/the-pros-and-cons-of-agct.html" target="_blank" rel="external">The Pros and Cons of AsyncGetCallTrace Profilers</a></li>
<li>几个常用参考页面：<br>Oracle官方的 <a href="http://www.oracle.com/technetwork/articles/java/vmoptions-jsp-140102.html" target="_blank" rel="external">Java HotSpot VM Options</a>, <a href="http://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html" target="_blank" rel="external">VM参数中文版，有些已过期</a><br>Oracle官方的 <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html" target="_blank" rel="external">JAVA Options</a>，R大的 <a href="http://hllvm.group.iteye.com/group/topic/27945" target="_blank" rel="external">JVM调优的”标准参数”的各种陷阱]</a>,可以参考HotSpot VM里的各个globals.hpp文件</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;旧文，现重新整理下：&lt;/p&gt;
&lt;h1 id=&quot;1-缘起&quot;&gt;&lt;a href=&quot;#1-缘起&quot; class=&quot;headerlink&quot; title=&quot;1. 缘起&quot;&gt;&lt;/a&gt;1. 缘起&lt;/h1&gt;&lt;p&gt;最近有同事发来如下一段异常，程序已开始运行正常，只是很快就会莫名其妙的抛这个异常，不知道如何着手解决:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Exception &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; thread &lt;span class=&quot;string&quot;&gt;&quot;main&quot;&lt;/span&gt; java.lang.NoClassDefFoundError: sun/reflect/ConstructorAccessorImpl&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    at sun.misc.Unsafe.defineClass(Native Method)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    at sun.reflect.ClassDefiner.defineClass(ClassDefiner.java:63)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    at sun.reflect.MethodAccessorGenerator&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;.run(MethodAccessorGenerator.java:399)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    at sun.reflect.MethodAccessorGenerator&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;.run(MethodAccessorGenerator.java:394)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    at java.security.AccessController.doPrivileged(Native Method)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    at sun.reflect.MethodAccessorGenerator.generate(MethodAccessorGenerator.java:393)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    at sun.reflect.MethodAccessorGenerator.generateConstructor(MethodAccessorGenerator.java:92)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:55)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    at java.lang.reflect.Constructor.newInstance(Constructor.java:423)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    at java.lang.Class.newInstance(Class.java:442)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    at com.thomas.classloader.unload.MonitorHotSwap.main(MonitorHotSwap.java:34)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Caused by: java.lang.ClassNotFoundException: sun.reflect.ConstructorAccessorImpl&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    at java.net.URLClassLoader.findClass(URLClassLoader.java:381)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我把他的代码稍作简化，主要部分是类似下面的逻辑，功能是程序监控某几个文件的变动，发现符合条件就会编译并会重新加载class，&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HotSwapURLClassLoader&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;URLClassLoader&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Class&amp;lt;?&amp;gt; loadClass(String name, &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; resolve) &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; ClassNotFoundException &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Class&amp;lt;?&amp;gt; clazz = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        clazz = findLoadedClass(name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (clazz != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//...一段热替换逻辑&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (name.startsWith(&lt;span class=&quot;string&quot;&gt;&quot;java.&quot;&lt;/span&gt;)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                ClassLoader system = ClassLoader.getSystemClassLoader();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                clazz = system.loadClass(name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (clazz != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (resolve)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        resolveClass(clazz);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (clazz);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (ClassNotFoundException e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// Ignore&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; customLoad(name, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;X&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hot&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String msg)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//System.out.println(String.format(&quot;ver:%s, classLoader: %s.&quot;, ver, this.getClass().getClassLoader()));&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的异常，不同于常遇到的异常，我们根据异常栈逆推可能不会很容易的定位到root cause。所以我在hot方法加了一条日志信息，即注释打开，运行多次，发现每次都是&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ver:15, classLoader: com.thomas.unload.HotSwapURLClassLoader@4e25154f.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Exception &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; thread &lt;span class=&quot;string&quot;&gt;&quot;main&quot;&lt;/span&gt; java.lang.NoClassDefFoundError: sun/reflect/ConstructorAccessorImpl&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这让我想起了JVM参数有inflationThreshold=15&lt;br&gt;
    
    </summary>
    
    
      <category term="JVM" scheme="http://thomaslau.github.io/tags/JVM/"/>
    
      <category term="Java" scheme="http://thomaslau.github.io/tags/Java/"/>
    
      <category term="JAVA Flame Graph" scheme="http://thomaslau.github.io/tags/JAVA-Flame-Graph/"/>
    
      <category term="JMH" scheme="http://thomaslau.github.io/tags/JMH/"/>
    
  </entry>
  
  <entry>
    <title>从Monte Carlo谈pySpark的fork引发的Bug</title>
    <link href="http://thomaslau.github.io/2017/06/19/2017-06-19-from_Monte_Carlo_to_pySpark_fork_Bug/"/>
    <id>http://thomaslau.github.io/2017/06/19/2017-06-19-from_Monte_Carlo_to_pySpark_fork_Bug/</id>
    <published>2017-06-19T03:01:07.000Z</published>
    <updated>2017-07-28T03:17:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇老文章，记录了发现PySpark一个bug的过程，现重新整理下：</p>
<p>截止2016-05-19已发布最新Spark版本，如果你在使用pySpark，并且也用 import random的方式生成随机数,就可能会遇到下面的问题：</p>
<p>刚学Spark，故先看一段Monte Carlo method 求Pi的代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</div><div class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcx</span><span class="params">(x)</span>:</span></div><div class="line">  <span class="comment"># print x[0],x[1]</span></div><div class="line">  <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> x[<span class="number">0</span>]**<span class="number">2</span> + x[<span class="number">1</span>]**<span class="number">2</span> &lt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">genRnd</span><span class="params">(ind)</span>:</span></div><div class="line">  x=random() * <span class="number">2</span> - <span class="number">1</span></div><div class="line">  y=random() * <span class="number">2</span> - <span class="number">1</span></div><div class="line">  <span class="keyword">return</span> (x,y)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">runsp</span><span class="params">(total)</span>:</span></div><div class="line">  ret=sc.parallelize(xrange(total),<span class="number">1</span>).map(genRnd).map(funcx).reduce(<span class="keyword">lambda</span> x, y: x + y)/float(total) * <span class="number">4</span></div><div class="line">  <span class="keyword">print</span> ret</div><div class="line"></div><div class="line">runsp(<span class="number">3</span>)</div></pre></td></tr></table></figure>
<p>spark-shell方式运行上述代码，多次运行runsp(n), 会发现几点有趣现象：</p>
<p>1, 按理说, n越大，虽不是越能逼近pi，但是逼近pi的概率应该是越大的。然而发现似乎并不如此，起初以为是python生成伪随机算法导致，还好通过下面一个现象发现问题。但是伪随机算法在多大程度上干扰了Monte Carlo求值？这个后面会写一篇从数学上分析下。<br><a id="more"></a><br>2, 多次运行runsp(n)，就会发现输出值是不变的而不是随机的，-_-# 事实上，放开上述 print注释，就会发现下面输出：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; total=3</div><div class="line">&gt;&gt;&gt; sc.parallelize(xrange(total),1).map(genRnd).map(funcx).reduce(add)/<span class="built_in">float</span>(total) * 4</div><div class="line">0.896083541418 -0.635625854075</div><div class="line">-0.0423532645466 -0.526910255885</div><div class="line">0.498518696049 -0.872983895832</div><div class="line">1.3333333333333333</div><div class="line">&gt;&gt;&gt; sc.parallelize(xrange(total),1).map(genRnd).map(funcx).reduce(add)/<span class="built_in">float</span>(total) * 4</div><div class="line">0.896083541418 -0.635625854075</div><div class="line">-0.0423532645466 -0.526910255885</div><div class="line">0.498518696049 -0.872983895832</div><div class="line">1.3333333333333333</div><div class="line">&gt;&gt;&gt; sc.parallelize(xrange(total),1).map(genRnd).map(funcx).reduce(add)/<span class="built_in">float</span>(total) * 4</div><div class="line">0.896083541418 -0.635625854075</div><div class="line">-0.0423532645466 -0.526910255885</div><div class="line">0.498518696049 -0.872983895832</div><div class="line">1.3333333333333333</div><div class="line">&gt;&gt;&gt; <span class="built_in">exit</span>()</div></pre></td></tr></table></figure>
<hr>
<p>不废话了，这应该是pyspark的一个bug，而且对于使用 python random.random()的生成随机科学计算来说更严重。</p>
<p>主要是因为，当用xrange时候，new worker的，如下pyspark的 daemon.py里面代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> listen_sock <span class="keyword">in</span> ready_fds:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        sock, _ = listen_sock.accept()</div><div class="line">    <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</div><div class="line">        <span class="keyword">if</span> e.errno == EINTR:</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        <span class="keyword">raise</span></div><div class="line">    <span class="comment"># Launch a worker process</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        pid = os.fork()</div><div class="line">    <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</div><div class="line">        <span class="keyword">if</span> e.errno <span class="keyword">in</span> (EAGAIN, EINTR):</div><div class="line">            time.sleep(<span class="number">1</span>)</div><div class="line">            pid = os.fork()  <span class="comment"># error here will shutdown daemon</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            outfile = sock.makefile(mode=<span class="string">'wb'</span>)</div><div class="line">            write_int(e.errno, outfile)  <span class="comment"># Signal that the fork failed</span></div><div class="line">            outfile.flush()</div><div class="line">            outfile.close()</div><div class="line">            sock.close()</div><div class="line">            <span class="keyword">continue</span></div><div class="line">    <span class="keyword">if</span> pid == <span class="number">0</span>:</div><div class="line">        <span class="comment"># in child process</span></div><div class="line">        listen_sock.close()</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="comment"># Acknowledge that the fork was successful</span></div><div class="line">            outfile = sock.makefile(mode=<span class="string">"wb"</span>)</div><div class="line">            write_int(os.getpid(), outfile)</div><div class="line">            outfile.flush()</div><div class="line">            outfile.close()</div><div class="line">            <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">                code = worker(sock)</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> reuse <span class="keyword">or</span> code:</div><div class="line">                    <span class="comment"># wait for closing</span></div><div class="line">                    <span class="keyword">try</span>:</div><div class="line">                        <span class="keyword">while</span> sock.recv(<span class="number">1024</span>):</div><div class="line">                            <span class="keyword">pass</span></div><div class="line">                    <span class="keyword">except</span> Exception:</div><div class="line">                        <span class="keyword">pass</span></div><div class="line">                    <span class="keyword">break</span></div><div class="line">                gc.collect()</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            traceback.print_exc()</div><div class="line">            os._exit(<span class="number">1</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            os._exit(<span class="number">0</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        sock.close()</div></pre></td></tr></table></figure>
<p>当生成RDD，map之后，reduce，就会进入上述代码，注意其中一句 </p>
<pre><code>pid = os.fork()
</code></pre><p>这句，会fork一个子进程，fork子进程会复制父进程空间，damon.py通过import pyspark.worker 间接import了shuffle.py的 import random，也就是说，每次fork的时候，复制了父的random，python的random是伪随机的，也就是说，子进程的random的下一个状态是确定的，所以会出现上述每次运行得到的随机序列一样的情况。</p>
<p><strong>fix</strong></p>
<p>最简单的fix办法，想必也会想到，就是在fork之后，worker代理调用random之前，进行random.seed(),<br>这确实是一种方法了，比如在上述代码 code = worker(sock)之前加一句random.seed()</p>
<p><strong>引用</strong><br>Linux系统调用 fork：<br><a href="http://man7.org/linux/man-pages/man2/fork.2.html" target="_blank" rel="external">Fork - Linux Programmer’s Manual</a></p>
<p><a href="https://www.ibm.com/developerworks/cn/linux/kernel/syscall/part2/index.html" target="_blank" rel="external">系统调用跟我学(2)</a><br>最初印象深的fork主题文章是来源于developerworks中国上的一篇文章，可惜太久了找不到，快速阅读可以看下面几篇<br><a href="http://dev.dafan.info/detail/221129?p=" target="_blank" rel="external">Linux进程-基础</a>，<a href="http://www.bijishequ.com/detail/20115?p=" target="_blank" rel="external">Linux进程-fork</a><br>下面结合源码解析了fork的调用原理<br><a href="http://blog.tonychow.me/blog/2013/06/27/linuxzhong-forkxi-tong-diao-yong-fen-xi/" target="_blank" rel="external">Linux中fork系统调用分析</a><br><a href="http://notes.maxwi.com/2016/08/17/linux-fork/" target="_blank" rel="external">Linux下fork函数及pthread函数的总结</a><br><a href="http://www.cnblogs.com/mickole/p/3186441.html" target="_blank" rel="external">linux系统编程之进程<em>3</em>进程复制fork，孤儿进程，僵尸进程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇老文章，记录了发现PySpark一个bug的过程，现重新整理下：&lt;/p&gt;
&lt;p&gt;截止2016-05-19已发布最新Spark版本，如果你在使用pySpark，并且也用 import random的方式生成随机数,就可能会遇到下面的问题：&lt;/p&gt;
&lt;p&gt;刚学Spark，故先看一段Monte Carlo method 求Pi的代码&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; random &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; random&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; operator &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; add&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;funcx&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# print x[0],x[1]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]**&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + x[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]**&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;genRnd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ind)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  x=random() * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  y=random() * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (x,y)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;runsp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(total)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ret=sc.parallelize(xrange(total),&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).map(genRnd).map(funcx).reduce(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x, y: x + y)/float(total) * &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; ret&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;runsp(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;spark-shell方式运行上述代码，多次运行runsp(n), 会发现几点有趣现象：&lt;/p&gt;
&lt;p&gt;1, 按理说, n越大，虽不是越能逼近pi，但是逼近pi的概率应该是越大的。然而发现似乎并不如此，起初以为是python生成伪随机算法导致，还好通过下面一个现象发现问题。但是伪随机算法在多大程度上干扰了Monte Carlo求值？这个后面会写一篇从数学上分析下。&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="Spark" scheme="http://thomaslau.github.io/tags/Spark/"/>
    
      <category term="Monte Carlo" scheme="http://thomaslau.github.io/tags/Monte-Carlo/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse看jvmcode插件</title>
    <link href="http://thomaslau.github.io/2015/07/05/2015-07-05-Eclipse%E7%9C%8Bjvmcode%E6%8F%92%E4%BB%B6/"/>
    <id>http://thomaslau.github.io/2015/07/05/2015-07-05-Eclipse看jvmcode插件/</id>
    <published>2015-07-05T03:01:07.000Z</published>
    <updated>2017-07-28T03:18:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>1，有感于最近使用Lombok遇到一些问题，故特记录后面改进Eclipse+Lombok的编译问题</p>
<p>2，中间经常使用javap看jvm code，故想了个办法看jvm code，希望可以使用方便，节省时间，具体做法是通过Eclipse 的Externel Tool的方式</p>
<blockquote>
<p>a.externel里面新建一个program，取名java-c</p>
<p>b.Location里面填你的javap路径，如“D:\jdk8u45\bin\javap.exe”</p>
<p>c.Working Directory 里面写${project_loc}</p>
<p>d.Arguments里面填“-classpath target/classes;target/test-classes -c ${java_type_name}”</p>
</blockquote>
<p>ok，然后可用了，具体使用不详细解释了。<br><a id="more"></a><br>后记：</p>
<p>上面d步是针对Maven项目的，如果是gradle的，各位可以根据自己习惯修改。</p>
<p>特记，后面有时间的话，再写一个Eclipse插件实现上述。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1，有感于最近使用Lombok遇到一些问题，故特记录后面改进Eclipse+Lombok的编译问题&lt;/p&gt;
&lt;p&gt;2，中间经常使用javap看jvm code，故想了个办法看jvm code，希望可以使用方便，节省时间，具体做法是通过Eclipse 的Externel Tool的方式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a.externel里面新建一个program，取名java-c&lt;/p&gt;
&lt;p&gt;b.Location里面填你的javap路径，如“D:\jdk8u45\bin\javap.exe”&lt;/p&gt;
&lt;p&gt;c.Working Directory 里面写${project_loc}&lt;/p&gt;
&lt;p&gt;d.Arguments里面填“-classpath target/classes;target/test-classes -c ${java_type_name}”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ok，然后可用了，具体使用不详细解释了。&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="Eclipse" scheme="http://thomaslau.github.io/tags/Eclipse/"/>
    
      <category term="JVM" scheme="http://thomaslau.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>从阿里巴巴的六脉神剑看阿里月饼事件</title>
    <link href="http://thomaslau.github.io/2015/03/23/2017-03-23-%E4%BB%8E%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%9A%84%E5%85%AD%E8%84%89%E7%A5%9E%E5%89%91%E7%9C%8B%E9%98%BF%E9%87%8C%E6%9C%88%E9%A5%BC%E4%BA%8B%E4%BB%B6/"/>
    <id>http://thomaslau.github.io/2015/03/23/2017-03-23-从阿里巴巴的六脉神剑看阿里月饼事件/</id>
    <published>2015-03-23T03:01:07.000Z</published>
    <updated>2017-08-30T10:15:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>阿里月饼 事件过去数月，网上褒贬不一，知乎成了宣泄地或者论战的战场。<br>今天我想从阿里的六脉神剑文化和人才观看看这件事。<br>因为有人赞同有人反对有人沉默，所以我这里说自己支持或反对已经都没有意义，未免陷入争论，我尽量使用客观的词语来描述和探讨，毕竟我更感兴趣的事大环境下以及大背景下一些人的反应，他们为什么会如此反应而导致争论？</p>
<p>搜了一下，阿里六脉神剑是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1.客户第一：客户是衣食父母搜索</div><div class="line">2.团队合作：共享共担，平凡人做非凡事</div><div class="line">3.拥抱变化：迎接变化，勇于创新</div><div class="line">4.诚信：诚实正直，言出必践</div><div class="line">5.激情：乐观向上，永不</div><div class="line">6.敬业：专业执着，精益求精</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>可以看出，这是一支注重客户／合作／诚信／创造／敬业的组织，这就对应了阿里用人时候：<br>人才是最好的财富，平凡人做不平凡事，让员工快乐工作<br>招聘注重职业道德和诚信，培训员工，花费在员工，责任感，注重长期的一个过程，需要英雄更需要团队，关心员工的用人之道。</p>
<p>注意，这里是企业的“宽”，对应没有讲出的是对员工的“严”，注重诚信，诚信不仅仅是对客户，还是对公司对同事对工作，缺一不可，注意，这里是公司对员工的要求，是一家管理几万名员工，誓要做102年的企业，是一家在真真正正的丛林社会的国度里成长起来还要面向全世界的企业，形成的企业文化。是一家强调 诚信／快乐工作／敬业 的做法，宁可不要一时的“英雄”，也要注重整体，大局观，因为它们重视的是一个团队，是一个深信平凡人做不平凡事的企业文化。</p>
<p>阿里的HR（或者是什么部门），一个下午就做出上述决断，我觉得这个在大多数公司看来真的是小事司空见惯，在阿里却能解聘来处理，可以反应对自己的约束力和对全员的责任观，这一点，应该是国内大多数企业学习的和思考的。<br>这个角度或许可以理解阿里的HR为什么会做出决定。【好不好另论】<br>但可惜没有公平的对待涉事人员。</p>
<p>上述是个人理解，但要说上面分析可以解释HR为何如此决定，我相信是远不够的，因为做这个决定的人甚至也可能都不用思考，只是个人一个临时的情绪行为，从这一点来说，任何专家的分析都可能解释不了上述情况。但，相信人更是受大环境影响作出决断。</p>
<p>一个讲求自我约束，过分看重团队的整体性，甚至不惜要求大家统一价值观，这在攻城略地的组织活动中可以展现出惊人的效果，或许对应可以产生许多优秀的人才。</p>
<p>更新：<br>事实上，事件结果是不了了之。我觉得这或许应该可以预示着，阿里HR倡导的文化并为紧跟上工程师的思维方式／世界观。毕竟，如果说80后和90后还有相似性，那么，纵观1999-2017，近20年互联网的变化给人生活方式的影响和改变。或者，极端一点，假设未来工程师启用了一个AI机器人，该AI同样方式抢月饼，届时阿里HR会如何处理？–这个例子是比较极端的，只是来说明一下技术人在现代知识型组织里的角色的演变，想想20世纪物理学／数学家们从校园实验室研究机构走向公司研究机构。德鲁克探索管理的顺势而流之道，管理首先是要“服众”啊，众服，然后才能有效在一起工作，如果众不能服，管理怎么体现自己的意义呢？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阿里月饼 事件过去数月，网上褒贬不一，知乎成了宣泄地或者论战的战场。&lt;br&gt;今天我想从阿里的六脉神剑文化和人才观看看这件事。&lt;br&gt;因为有人赞同有人反对有人沉默，所以我这里说自己支持或反对已经都没有意义，未免陷入争论，我尽量使用客观的词语来描述和探讨，毕竟我更感兴趣的事大环境下以及大背景下一些人的反应，他们为什么会如此反应而导致争论？&lt;/p&gt;
&lt;p&gt;搜了一下，阿里六脉神剑是：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1.客户第一：客户是衣食父母搜索&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2.团队合作：共享共担，平凡人做非凡事&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3.拥抱变化：迎接变化，勇于创新&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4.诚信：诚实正直，言出必践&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5.激情：乐观向上，永不&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6.敬业：专业执着，精益求精&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="Security" scheme="http://thomaslau.github.io/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>The-Data-Engineering-Ecosystem-An-Interactive-Map</title>
    <link href="http://thomaslau.github.io/2015/03/15/2015-03-15-The-Data-Engineering-Ecosystem-An-Interactive-Map/"/>
    <id>http://thomaslau.github.io/2015/03/15/2015-03-15-The-Data-Engineering-Ecosystem-An-Interactive-Map/</id>
    <published>2015-03-15T03:01:07.000Z</published>
    <updated>2017-07-28T03:18:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文摘录一篇文章，作者整理了现在大数据使用的一些…<br>直接附原文和他们的成果图.</p>
<p><a href="http://insightdataengineering.com/blog/The-Data-Engineering-Ecosystem-An-Interactive-Map.html" target="_blank" rel="external">原文链接</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://insightdataengineering.com/blog/pipeline_map.html" target="_blank" rel="external">效果</a><br><a id="more"></a><br>摘录：<br>Insight Data Engineering Fellows face these same questions when they begin working on their data pipelines. Fortunately, after several iterations of the Insight Data Engineering Program, we have developed this framework for visualizing a typical pipeline and the various data engineering tools. Along with the framework, we have included a set of tools for each category in the interactive map. </p>
<p>截图<br><img style="width:110%" src="/images/blog/bigdata-store.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文摘录一篇文章，作者整理了现在大数据使用的一些…&lt;br&gt;直接附原文和他们的成果图.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://insightdataengineering.com/blog/The-Data-Engineering-Ecosystem-An-Interactive-Map.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;http://insightdataengineering.com/blog/pipeline_map.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;效果&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="BigData" scheme="http://thomaslau.github.io/tags/BigData/"/>
    
  </entry>
  
  <entry>
    <title>翻墙_二三事</title>
    <link href="http://thomaslau.github.io/2015/02/04/2015-02-04-%E7%BF%BB%E5%A2%99_%E4%BA%8C%E4%B8%89%E4%BA%8B/"/>
    <id>http://thomaslau.github.io/2015/02/04/2015-02-04-翻墙_二三事/</id>
    <published>2015-02-04T03:01:07.000Z</published>
    <updated>2017-07-28T03:19:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>1,</p>
<p>今天和一位素未谋面聊过几次的网友聊了几句，得知已经去了新西兰，该国IT行业就业环境不是很好，但还是找了一份编程的工作，除了得享新西兰大自然的赋予之外，工作又轻松愉快，摆脱国内经常无效率加班，廉价技术劳动力的怨念，打算在异国他乡发展。</p>
<p>听完后，很高兴。<br><a id="more"></a></p>
<p>2,</p>
<p><strong>blog推荐</strong>,非常喜欢作者About里面的一些观点</p>
<p><a href="http://www.raychase.net/aboutme" target="_blank" rel="external">四火的blog</a></p>
<p>3,</p>
<p>一直以为“以德报怨”是孔子说的，今天才听人说，妈的，原来是孔子说的是“以直报怨，以德报德”。</p>
<pre><code>《论语宪问》：“或曰：‘以德报怨，何如？’子曰：&apos;何以报德？以直报怨，以德报德’”
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1,&lt;/p&gt;
&lt;p&gt;今天和一位素未谋面聊过几次的网友聊了几句，得知已经去了新西兰，该国IT行业就业环境不是很好，但还是找了一份编程的工作，除了得享新西兰大自然的赋予之外，工作又轻松愉快，摆脱国内经常无效率加班，廉价技术劳动力的怨念，打算在异国他乡发展。&lt;/p&gt;
&lt;p&gt;听完后，很高兴。&lt;br&gt;
    
    </summary>
    
    
      <category term="Life" scheme="http://thomaslau.github.io/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>Why_we_dont_have_benchmarks_comparing_Redis_with_other_DBs</title>
    <link href="http://thomaslau.github.io/2015/02/04/2015-02-04-%5Bantirez%E5%A6%82%E6%98%AF%E8%AF%B4%5DWhy_we_dont_have_benchmarks_comparing_Redis_with_other_DBs/"/>
    <id>http://thomaslau.github.io/2015/02/04/2015-02-04-[antirez如是说]Why_we_dont_have_benchmarks_comparing_Redis_with_other_DBs/</id>
    <published>2015-02-04T03:01:07.000Z</published>
    <updated>2017-06-16T05:07:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Antirez于前几日发布了一篇blog，<a href="http://antirez.com/news/85" target="_blank" rel="external">Why we don’t have benchmarks comparing Redis with other DBs</a></p>
<p>原文戳上面的链接，这里摘录：</p>
<pre><code>Redis speed could be one selling point for new users, so following the trend of comparative “advertising” it should be logical to have a few comparisons at Redis.io. However there are two problems with this. One is of goals: I don’t want to convince developers to adopt Redis, we just do our best in order to provide a suitable product, and we are happy if people can get work done with it, that’s where my marketing wishes end. There is more: it is almost always impossible to compare different systems in a fair way.

When you compare two databases, to get fair numbers, they need to share *a lot*: data model, exact durability guarantees, data replication safety, availability during partitions, and so forth: often a system will score in a lower way than another system since it sacrifices speed to provide less “hey look at me” qualities but that are very important nonetheless. Moreover the testing suite is a complex matter as well unless different database systems talk the same exact protocol: differences in the client library alone can contribute for large differences.
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Antirez于前几日发布了一篇blog，&lt;a href=&quot;http://antirez.com/news/85&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why we don’t have benchmarks comparing Redis wit
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="antirez" scheme="http://thomaslau.github.io/tags/antirez/"/>
    
      <category term="Redis" scheme="http://thomaslau.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>短句2</title>
    <link href="http://thomaslau.github.io/2015/02/01/2015-02-01-%E7%9F%AD%E5%8F%A52/"/>
    <id>http://thomaslau.github.io/2015/02/01/2015-02-01-短句2/</id>
    <published>2015-02-01T13:01:07.000Z</published>
    <updated>2017-06-16T05:07:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>风起的时候，尘土飞扬。</p>
<p>风落的时候，尘归尘，土归土。</p>
<p>这一次再见，四目对视数秒，</p>
<p>这一刻，意识到，我又能怎样，又能改变什么？</p>
<p>也在这一刻悟到，</p>
<p>有更多更有意义的事。</p>
<p>–2015于携程年会散场</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;风起的时候，尘土飞扬。&lt;/p&gt;
&lt;p&gt;风落的时候，尘归尘，土归土。&lt;/p&gt;
&lt;p&gt;这一次再见，四目对视数秒，&lt;/p&gt;
&lt;p&gt;这一刻，意识到，我又能怎样，又能改变什么？&lt;/p&gt;
&lt;p&gt;也在这一刻悟到，&lt;/p&gt;
&lt;p&gt;有更多更有意义的事。&lt;/p&gt;
&lt;p&gt;–2015于携程年会散场
    
    </summary>
    
    
      <category term="Life" scheme="http://thomaslau.github.io/tags/Life/"/>
    
  </entry>
  
</feed>
