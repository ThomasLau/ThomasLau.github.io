<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>e+Thomas</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://thomaslau.github.io/"/>
  <updated>2020-08-27T17:04:00.506Z</updated>
  <id>http://thomaslau.github.io/</id>
  
  <author>
    <name>Thomas Lau</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何设计高性能支持64位的去重服务</title>
    <link href="http://thomaslau.github.io/2020/08/26/2020-08-26-on_roaringbitmap_bf/"/>
    <id>http://thomaslau.github.io/2020/08/26/2020-08-26-on_roaringbitmap_bf/</id>
    <published>2020-08-26T12:59:10.000Z</published>
    <updated>2020-08-27T17:04:00.506Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><i><strong>intro1</strong>：如何设计一个百万QPS的基于用户uid唯一性检验的系统？</i><br><i><strong>intro2</strong>: bloomfilter和bitmap和roaringbitmap选型比较</i><br><i><strong>intro3</strong>: setbit注意事项</i></p>
</blockquote>
<h3 id="设计要点"><a href="#设计要点" class="headerlink" title="设计要点"></a>设计要点</h3><p>这个问题或许会被经常问到，比如抢红包或者秒杀等场景时，限制用户只能领取/抢购一次，也是笔者可能会遇到类似问题，这里有两个关键点：<br><a id="more"></a><br><strong>1，支持64位long型</strong><br>大部分人可能想到使用Java或Redis提供的bitmap操作，即一个大的bit数组，对应下标标记1来表示用户已经操作过，这样对于32位int来说，需要2^32/8=512MB的内存空间就很容易实现唯一性检查了，但实际上相信大部分系统已经不会使用32位整数表示用户uid了，更多可能使用基于Twitter开源的分布式ID生成算法-Snowflake(当然了，也可能是美团leaf、百度UidGenerator等snowflake的参考时限)，这类算法结果是一个long型的数，即这类64bit的数是无法直接用bitmap实现的（512MB*2^31）。<br>针对该情况bitmap是否依旧可用？<br>要看具体情况，实际上基于snowflake生成的分布式id虽然在1-2^64之间，但用bitmap存储时却可能是非常稀疏的，我们自然想到去压缩bitmap，本文会介绍下压缩的bitmap即 RoaringBitmap，同时也提供另外一种BloomFilter（下文简称BF）的方案，如果你对二者都熟悉可掠过。<br><strong>2，支持百万QPS</strong><br>显然前置条件是需要一种存储，该存储能记录已满足条件的uid，同时支持百万QPS。<br>如果是纯粹基于同实例(机器)内存，完全是可以做到的，比如对于Java应用来说，不论基于堆内或堆外内存来说如Ehcache、Guava Cache、MapDB以及Spring 5之后采用的Caffeine他们都可轻易做到百万QPS，最简单的内置bitmap单机就能百万QPS，但通常不会只用一份单机数据，否则系统的容错性太差了，分布式存储是一种选择，比如基于Java的分布式内存/存储实现如Hazelcast、Chronicle，不过前者无bitmap实现，Chronicle原生支持byte数组，但如果论成熟度/可靠性，Redis或许是一个不错的选择，redis本身也支持bitmap。<br>不过Redis单机按十万QPS来算，我们至少需要十台Redis实例，所以下一步还要将存储分散存储(去除热点数据)，即不论是采用BloomFilter还是Bitmap实现，都应该将数据尽可能的分散在十台redis上，比如定义十个bitmap的数据结构，按uid对十取模分别存储在这十个bitmap里（BF亦然），这样我们读写均支持定位相应的bitmap。<br>视具体redis操作或为了预留足够算力，可能redis不止十台，比如选择十六台，那么取模操作也可做位运算提高一点性能。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>上文中笔者选择Redis作为数据存储，算法/数据结构 则需要在bitmap和BF之间做个选择， 但不论何，二者均支持构造多个对象(比如16个)，按UID对16取模并分散存储到这16个对象里，这里不再详述，下面主要讨论下bitmap或BF的选择。</p>
<h3 id="Bitmap"><a href="#Bitmap" class="headerlink" title="Bitmap"></a>Bitmap</h3><p>bitmap思想应用很广，《编程珠玑》里就有介绍：<br>“Bit-map就是用一个bit位来标记某个元素对应的Value， 而Key即是该元素。由于采用了Bit为单位来存储数据，因此在存储空间方面，可以大大节省。”<br>用于大量数据的排序/查询/去重，还是蛮简单的，比如常见的10亿int型数据排序/去重都可用bitmp思想。<br>位图也是Linux内核在大量使用的基础数据结构，此外也常见于标签系统以及大数据系统做一些快速的集合操作。<br>在Java中使用BitSet实现位图，重要方法有set/get(bit):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">long</span>[] words;</div><div class="line">...</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> bitIndex)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (bitIndex &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"bitIndex &lt; 0: "</span> + bitIndex);</div><div class="line">    checkInvariants();</div><div class="line">    <span class="keyword">int</span> wordIndex = wordIndex(bitIndex);</div><div class="line">    <span class="keyword">return</span> (wordIndex &lt; wordsInUse)</div><div class="line">        &amp;&amp; ((words[wordIndex] &amp; (<span class="number">1L</span> &lt;&lt; bitIndex)) != <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> bitIndex)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (bitIndex &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"bitIndex &lt; 0: "</span> + bitIndex);</div><div class="line">    <span class="keyword">int</span> wordIndex = wordIndex(bitIndex);</div><div class="line">    expandTo(wordIndex);</div><div class="line">    words[wordIndex] |= (<span class="number">1L</span> &lt;&lt; bitIndex); <span class="comment">// Restores invariants</span></div><div class="line">    checkInvariants();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Java bitset底层使用long型数组（long[] words）实现，所以set时需要计算wordIndex，wordIndex即是 bitIndex除以64即右移6位得到，同时我们也可以看到有个expandTo方法，即bitSet是可以自动扩展位数的（但最好一开始就规划好，否则频繁expandTo影响性能），wordIndex得到对应long，再和 1L &lt;&lt; bitIndex 异或从而设置对应bit位，注意这里1L本身即是long，所以可以直接 右移 bitIndex不需要在对64取模后异或了。<br>get就比较简单了，直接对该位做 且1判0操作。bitset怎么去将该位set为0呢？就是clear()方法，通过 words[wordIndex] &amp;= ~(1L &lt;&lt; bitIndex); 即反码做且运算。此外其底层存储使用 long[] words思想还是蛮有技巧性的。<br>此外bitset计算位1的个数方法为 cardinality(), 遍历words并用Long.bitCount()累加 各words的位1数量。<br>这里的Long.bitCount()提供了一种高效的计算long型数据里1的数量的方法，值得一看， 即是大名鼎鼎的MIT Hakmem Counting算法。<br>同时也可以看到 java bitSet的set操作不是线程安全的(set/expandTo)，需要调用者保证。<br>同样的Redis在2.2版本加入了 setbit,getbit,bitcount 命令也支持bitmap。</p>
<h3 id="BloomFilter"><a href="#BloomFilter" class="headerlink" title="BloomFilter"></a>BloomFilter</h3><p>上述不论redis或java，实现bitmap都需要不小的空间，int型就已经512MB了，所以是否存在其他时间换空间方法呢？<br>Bloomfilter就提供了思路，笔者前面文章有介绍BF原理，这里不详述。<br>BF另外一个好处是不用再考虑其是32位或64位，只需要考虑数量，即使用BF无需考虑uid的可能范围，只要根据可能插入的uid的数量和误差率计算所需bit数量，即对于<a href="https://hur.st/bloomfilter/?n=100000000&amp;p=1.0E-6&amp;m=&amp;k=" target="_blank" rel="external">1亿的用户量百万分之一的误判率所耗费的空间也不过343MB</a>。<br>当然Redis目前是不支持BF的，但是依赖redis的bitmap可以实现。<br>通常有：<br>1，Redis BF插件 Rebloom<br>Rebloom，现位于<a href="https://github.com/RedisBloom/RedisBloom" target="_blank" rel="external">RedisBloom</a> 是redis labs 实现的BF插件，从github下载源码编译后得到rebloom.so，<br>然后在redis.conf里面添加 loadmodule /path/to/rebloom.so 或者直接命令行动态加载该module，即可将其加载到redis中。<br>推荐该做法，因为这是redislab官方C代码实现，理论上会比下面介绍的lua或调用bitmap更快，官方声称的“Highly optimized for performance”，这里有和lua实现的对比<a href="https://redislabs.com/redis-enterprise/technology/integrated-modules/" target="_blank" rel="external">Integrated Modules</a>，因为相对bitmap来说，BF就是一种时间换空间的做法，所以性能会差点，下面介绍的2、3方案视BF各参数性能在2-6万/s间，小于Rebloom性能的。<br>其次该插件数据丰富，目前提供了Bloom filter, Cuckoo filter, Count-min sketch, top-k等，这几类都较实用。当然需要redis 4.0以上支持。<br>对于Java/Go/Python等 <a href="https://oss.redislabs.com/redisbloom/" target="_blank" rel="external">redisbloom</a>均有对应client实现，或者自己基于jedis扩展也可。<br>另外ReBloom是源码可用的，但和redis不同的是，其不再属于开源协议，几年前增加了Commons Clause(共用条款)约定，不支持二次销售，这可能对许多拿来主义的云供应商不友好。</p>
<p>2，Redis client组件如Jedis/Redisson等<br>这类组件也是基于redis的bitset实现，代码里初始化bit空间，然后计算出BF的每轮hash得到的index，根据index设置，这里有段redisson里的代码：<br>RedissonBloomFilter.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T object)</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span>[] hashes = hash(object);</div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</div><div class="line">            readConfig();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> hashIterations = <span class="keyword">this</span>.hashIterations;</div><div class="line">        <span class="keyword">long</span> size = <span class="keyword">this</span>.size;</div><div class="line">        <span class="keyword">long</span>[] indexes = hash(hashes[<span class="number">0</span>], hashes[<span class="number">1</span>], hashIterations, size);</div><div class="line">        CommandBatchService executorService = <span class="keyword">new</span> CommandBatchService(commandExecutor.getConnectionManager());</div><div class="line">        addConfigCheck(hashIterations, size, executorService);</div><div class="line">        RBitSetAsync bs = createBitSet(executorService);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; indexes.length; i++) &#123;</div><div class="line">            bs.setAsync(indexes[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            List&lt;Boolean&gt; result = (List&lt;Boolean&gt;) executorService.execute().getResponses();</div><div class="line">            <span class="keyword">for</span> (Boolean val : result.subList(<span class="number">1</span>, result.size()-<span class="number">1</span>)) &#123;</div><div class="line">                <span class="keyword">if</span> (!val) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (RedisException e) &#123;</div><div class="line">            <span class="keyword">if</span> (e.getMessage() == <span class="keyword">null</span> || !e.getMessage().contains(<span class="string">"Bloom filter config has been changed"</span>)) &#123;</div><div class="line">                <span class="keyword">throw</span> e;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中第一次hash：long[] hashes = hash(object)是哈希得到128位(两个long)结果，第二个hash，即是其BF的哈希函数，用来一次性计算需设置1的位，hashIterations是所需哈希函数次数，size即是所需位空间。<br>关于Jedis/Jedisson以及其他语言的BF实现，可在网上找到大多代码，这里不再详述。<br>不过还要指出的是，我们实现BF显然是针对同一redis instance，而了解BF原理的，大多知道BF时hash计算出需要设置的位一般不会只一个（几十到一百可能），这里完全可以使用pipeline提升性能（这里不讨论pipeline带来的其他影响），所以参考网上的BF的jedis实现时留意下这里的改进，上述Redisson实现用到了RBatch批量更新就是基于pipeline的，性能会好些。<br>但Redisson实现的BF不是没有问题，比如批量设置bit时未使用事务不能保证100%准确。<br>另：(jedis实现：restes-Bloomfilter)[<a href="https://github.com/Baqend/Orestes-Bloomfilter" target="_blank" rel="external">https://github.com/Baqend/Orestes-Bloomfilter</a>]</p>
<p>3，Redis Lua实现的BF<br>基于lua脚本实现的BF，原理和上述1、2相似，这里有一个参考实现<a href="https://github.com/erikdubbelboer/redis-lua-scaling-bloom-filter" target="_blank" rel="external">redis-lua-scaling-bloom-filter</a>：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="keyword">local</span> found = <span class="literal">true</span></div><div class="line"><span class="keyword">for</span> i=<span class="number">1</span>, k <span class="keyword">do</span></div><div class="line">  <span class="keyword">if</span> redis.call(<span class="string">'SETBIT'</span>, key, (h[i % <span class="number">2</span>] + i * h[<span class="number">2</span> + (((i + (i % <span class="number">2</span>)) % <span class="number">4</span>) / <span class="number">2</span>)]) % bits, <span class="number">1</span>) == <span class="number">0</span> <span class="keyword">then</span></div><div class="line">    found = <span class="literal">false</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>setbit返回值是原始值，所以上述BF.add的返回值也可表示是否命中，found的逻辑是只要一个为0即false，这点和上述redisson是一样的。<br>另外这个脚本里，作者测试的add和check性能都在 2.5万/s左右。<br><img src="/images/bf_size.png" width="100%"></p>
<h3 id="bitmap存在的问题"><a href="#bitmap存在的问题" class="headerlink" title="bitmap存在的问题"></a>bitmap存在的问题</h3><p>上述BF的实现依赖redis的setbit命令，redis目前没有类似 msetbit这样设置多个bit位指令，所以上述实现都是多次setbit的,<br>不过3.2后支持<a href="http://www.dodobook.net/api/redis/string/bitfield.html" target="_blank" rel="external">bitfield</a>指令，可以批量设置bit位（至于在Bloomfilter场景下和pipeline+setbit性能比较笔者未测）。<br>其次BF最大的问题就是精确度问题，需要按 $ m=-n*l(p)/(l(2)^2) $ 评估假阳率。<br>除此以外，bitmap是比较耗空间的，比如这个简单的设置一个2^32长的bitmap就能让redis占用内存瞬间涨了512MB，虽然只保存两条信息：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">setbit mybmp 0 1</div><div class="line">setbit mybmp 4294967295 1</div></pre></td></tr></table></figure></p>
<p>在<a href="https://redis.io/commands/SETBIT" target="_blank" rel="external">官方文档</a>里 setbit 的offset是有大小限制的，在0到 2^32（最大使用512M内存）之间，即0~4294967296之前，超过这个数会自动将offset转化为0，因此使用的时候一定要注意。<br>其次setbit自身不是没有性能问题的，经测试, 初次分配或者扩展相应的bit空间也是耗时的，在2010 MacBook Pro上,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">setting bit number 2^32 -1 (512MB allocation) takes ~300ms, </div><div class="line">setting bit number 2^30 -1 (128MB allocation) takes ~80ms, </div><div class="line">setting bit number 2^28 -1 (32MB allocation) takes ~30ms and </div><div class="line">setting bit number 2^26 -1 (8MB allocation) takes ~8ms.</div></pre></td></tr></table></figure></p>
<p>可以看到setbit：<br>1) 耗费空间大，存在32位限制的，不支持64位<br>2) 应该避免频繁setbit带来的空间分配</p>
<p><strong>这里也提醒我们使用redis原生bitmap是一定要规划好位数，保证足够长</strong>，否则频繁扩展空间带来会性能尖刺。</p>
<h3 id="Roaring-Bitmap"><a href="#Roaring-Bitmap" class="headerlink" title="Roaring Bitmap"></a>Roaring Bitmap</h3><p>上述举了个只存储一条信息耗费512MB极端情况的例子，所以想当然做法就是压缩bitmap，怎么压缩？像上述512MB极端情况，其实我们保存原始数据不需bitmap，像笔者之前文章里介绍的redis几个个数超过300可改用Hyperloglog，当超过一定数量再改用bitmap就是一种“压缩”方案，我们也可以采用对64bit分段方式压缩存储。<br>Roaring Bitmap即是接近上述的一种压缩方案，这里是官网：<a href="https://roaringbitmap.org/" target="_blank" rel="external">Roaring Bitmaps</a>，可以看到他的历史并不久，较知名的论文是2016年的 <a href="https://arxiv.org/pdf/1402.6407" target="_blank" rel="external">Better bitmap performance with Roaring bitmaps</a>，可以看到 Google、Lucene、Hive、InfluxDB、ClickHouse、Kylin都有使用，也可以看到2016年时候还是蛮活跃/流行的,如<a href="https://github.com/apache/spark/pull/15917" target="_blank" rel="external">SPARK-18252</a>以及下文几处开源代码的链接，这里是官方列出的对各语言支持情况 <a href="http://roaringbitmap.org/software/。" target="_blank" rel="external">http://roaringbitmap.org/software/。</a><br>这里简介下32位的RoaringBitmap，部分文字引用自<a href="https://www.jianshu.com/p/818ac4e90daf" target="_blank" rel="external">高效压缩位图RoaringBitmap的原理与应用</a>：</p>
<p>RoaringBitmap将int数字的高16位作为索引，正好short是16位长度，因此索引采用short数组存储，而低16位则是作为数据，存储到其他容器，RoaringBitmap根据存储的大小，分为3个容器，ArrayContainer,BitmapContainer,RunContainer。BitmapContainer查找是O(1)，其他为O(lgn)。RoaringArray用于通过高位定位Container，RoaringBitmap本身是一系列上述三类Container集合。<br><strong>ArrayContainer</strong><br>当桶内数据的基数不大于4096时，会采用它来存储，其本质上是一个unsigned short类型的有序数组。数组初始长度为4，随着数据的增多会自动扩容（但最大长度就是4096）。另外还维护有一个计数器，用来实时记录基数，当ArrayContainer的容量超过4096后，会自动转成BitmapContainer存储。<br><strong>BitmapContainer</strong><br>当桶内数据的基数大于4096时，会采用它来存储，其本质就是上一节讲过的普通位图，用长度固定为1024的unsigned long型数组表示，亦即位图的大小固定为216位（8KB）。它同样有一个计数器。<br><strong>RunContainer</strong><br>RunContainer是后续加入折中方案，它使用可变长度的unsigned short数组存储，基于Run Length Encoding压缩算法的容器，其压缩原理是对于连续的数字只记录初始数字以及连续的长度，比如有一串数字 2,3,4,5,6 那么经过压缩后便只剩下2,5。从压缩原理我们也可以看出，这种算法对于数据的紧凑程度非常敏感，连续程度越高压缩率也越高。通过optimize从BitmapContainer转化RunContainer之前需要判断是否占用内存更小。</p>
<p>这里贴一张图，便于理解RoaringBitmap，图来自<a href="https://cloud.tencent.com/developer/article/1481855" target="_blank" rel="external">TT</a>：<br><img src="/images/roaring_bitmap_container.png" width="100%"><br>需要指出的是，RoaringBitmap未必一定是起到压缩作用的，这是因为基于行程长度编码(RLE)的压缩比率依赖压缩内容，这也是为什么说RunContainer相对itmapContainer是一种折中。<br><strong>Redis roaring bitmap有个开源实现</strong> <a href="https://github.com/aviggiano/redis-roaring" target="_blank" rel="external">redis-roaring</a>，性能比原生bitmap有优有劣，主要的get/setbit操作是几乎相等的（不过这个<strong>测试数据很可能不准确，或者作者只测试静态的数据</strong>，没有考虑增加数据过程中的压缩消耗）。不过可惜的是redis-roaring也只支持32位，显然我们不能通过将long拆成两个int并各自存储在roaring bitmap实现64位的bitmap。<br>如redis-roaring是基于<a href="https://github.com/RoaringBitmap/CRoaring" target="_blank" rel="external">CRoaring</a>的，理论上可以修改支持，不过 原讨论里提到CRoaring 64bit的性能似乎不够好。<br>这里 Daniel Lemire 提到了几个Java支持64bit的实现 <a href="https://github.com/RoaringBitmap/RoaringBitmap/issues/109" target="_blank" rel="external">Implement support for 64-bit integers</a>，分为两层或48-16bit实现，这里不再详述。<br>遗憾的是笔者没有搜索到基于redis lua的roaring bitmap(含64-bit支持)实现，所以这个方案未进行下去。<br><img src="/images/snowflake-id.png" width="100%"><br>不过上述压缩给了一种思路，但仅考虑snowflake算法，不具有64bit通用性：<br>我们知道全球用户数量一半假设40亿，32bit足够了，不过通常来说，比如压缩64bit到32bit会丢失信息，但考虑到uid生成算法本身具有规律性，而且我们前文讨论过将bitmap按uid取模分成16份(减少热点，保证redis分布式性能)，也就是说uid末四位bit可以不参与Roaring bitmap运算，其次似乎也能保证均衡分布，<strong>但实际上图示snowflake算法末12bit是自增序列，表示该毫秒增长数</strong>，对于用户id分配场景，我相信世界上大部分应用这12bit大部分时间是0，其次可能就是小于16或个位数了，<strong>所以按uid哈希很容易造成分布不均匀</strong>，对压缩贡献度也很低。所以这表示自增的12bit和workerid的10bit完全是可以合起来压缩的，表示时间戳的41bit（毫秒，约69年）其中末4位bit我们可以用来做模16的分库，保证均衡，如果我们只统计8年的用户，那么又可减少3个bit了(当然精确性降低了)，即时间戳部分实际上34bit有效，所以我们也可以参考64bit roaring bitmap分层的思路。<br>需要指出的是，时间戳如果不考虑好高位，可能会导致分布也不均匀，因为对于国内来说统一使用东八区，而我们的用户注册时间通常不会是夜间，如23-08这几个小时的数据量会较其他时间稀疏，通过redis lua实现时需要考虑这点是否有助压缩。</p>
<h3 id="高可用-一致性"><a href="#高可用-一致性" class="headerlink" title="高可用/一致性"></a>高可用/一致性</h3><p>需要指出的是，<strong>不管redis如何高可用，主从异步的同步存在时间差的，比如min-slaves-max-lag等参数，当主节点挂掉时从节点数据可能是存在误差的，尤其是对于百万QPS来说</strong>，当然这是分布式系统的CAP问题了，任何非强一致性的存储必然存在的问题了，这里只是指出一下，设计或实现该系统时最好也留意下底层存储的一些参数，否则自信的脱口而出4个9/5个9的保证不是明智的做法。</p>
<p>其次，上面只是解决底层存储满足支持百万QPS的64位的uid唯一性检验的问题，在实际实现中还要考虑其他问题，如如何保证bitmap或者BF更新和你的业务一致性问题，即应用更新了bitmap操作之后业务更新操作失败或者反过来，这其实的确是一个分布式事务的问题，对于要求不强场景或许先更新业务成功再更新bitmap操作就能满足需求，或者对于响应要求不强场景有人使用分布式事务解决(BF实现不支持TCC，如果基于BF实现你可能需要改进的CBF)，但这其实也只是解决部分问题，以抢红包为例，除了更新bitmap后服务端可捕捉的异常(自身或其他以来系统)，还有返回给用户超时的情况，这加大了分布式事务的复杂性，有节制的使用分布式事务是一点，端到端的追踪/审计/对账也是一点，当然这些超出本文要讨论的内容了，如果你有好的方案也欢迎赐教。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1，Roaring bitmap可能会导致bit数组做 or/and等操作较bitmap耗时，尤其RunContainer压缩的情况。<br>2，上述提供集中redis分布式BF的实现，值得参考。<br><strong>很多人知道回答“怎么实现防止缓存击穿”之类问题时可以用 bloom filter，但可能很多只认为这个BF实现是在应用程序内存自己维护BF</strong>，其实不是，可以参考这里实现一个基于redis的集中式 bloom filter对象。<br>当然，像Redis已经支持客户端缓存（client side cache），6.0开始使用的RESP3协议可以即时push方式更新，开启后可保证client和远程redis server之间数据一定程度的一致性，这个特性也可以提高上述场景下的性能。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://github.com/RedisBloom/RedisBloom" target="_blank" rel="external">RedisBloom</a></li>
<li><a href="https://github.com/erikdubbelboer/redis-lua-scaling-bloom-filter" target="_blank" rel="external">redis-lua-scaling-bloom-filter</a></li>
<li><a href="https://roaringbitmap.org/" target="_blank" rel="external">Roaring Bitmaps</a></li>
<li><a href="https://arxiv.org/pdf/1402.6407" target="_blank" rel="external">Better bitmap performance with Roaring bitmaps</a></li>
<li><a href="https://redis.io/commands/SETBIT" target="_blank" rel="external">redis setbit</a></li>
<li><a href="https://www.jianshu.com/p/818ac4e90daf" target="_blank" rel="external">高效压缩位图RoaringBitmap的原理与应用</a></li>
<li><a href="https://richardstartin.github.io/posts/roaringbitmap-performance-tricks" target="_blank" rel="external">RoaringBitmap Performance Tricks</a></li>
</ul>
<p><strong> 遵循CC协议，转载请标注来源 </strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;i&gt;&lt;strong&gt;intro1&lt;/strong&gt;：如何设计一个百万QPS的基于用户uid唯一性检验的系统？&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro2&lt;/strong&gt;: bloomfilter和bitmap和roaringbitmap选型比较&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro3&lt;/strong&gt;: setbit注意事项&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;设计要点&quot;&gt;&lt;a href=&quot;#设计要点&quot; class=&quot;headerlink&quot; title=&quot;设计要点&quot;&gt;&lt;/a&gt;设计要点&lt;/h3&gt;&lt;p&gt;这个问题或许会被经常问到，比如抢红包或者秒杀等场景时，限制用户只能领取/抢购一次，也是笔者可能会遇到类似问题，这里有两个关键点：&lt;br&gt;
    
    </summary>
    
    
      <category term="bloomfilter" scheme="http://thomaslau.github.io/tags/bloomfilter/"/>
    
      <category term="roaringbitmap" scheme="http://thomaslau.github.io/tags/roaringbitmap/"/>
    
  </entry>
  
  <entry>
    <title>开发常见的Hash函数(四)-图片哈希</title>
    <link href="http://thomaslau.github.io/2020/06/20/2020-06-20-on_hash_4/"/>
    <id>http://thomaslau.github.io/2020/06/20/2020-06-20-on_hash_4/</id>
    <published>2020-06-20T12:59:10.000Z</published>
    <updated>2020-06-22T00:06:12.347Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><i><strong>intro1</strong>：JPG文件生成/压缩原理</i><br><i><strong>intro2</strong>: 对离散余弦变换在图片压缩应用的思考</i><br><i><strong>intro3</strong>: JPG文件存储格式</i><br><i><strong>intro4</strong>: aHash/dHash/pHash原理及源码介绍</i><br><i><strong>intro5</strong>: 对aHash/dHash/pHash准确度、局限、场景等思考</i></p>
</blockquote>
<p>前一篇文章介绍Simhash/Minhash等，下面来看下之前留下的图片的相似性度量算法：ahash、dHash、pHash，在笔者经历的图片/PDf上传的经历中，上述方法效果不错。<br>本文主要以JPEG格式为例探索下图像几种哈希算法，不过图像的处理并非本文要介绍重点，只是为了方便下文理解，如果你只对怎么寻找近似图片感兴趣或看这里感到不适，可以跳过本节。<br><a id="more"></a><br>先简介下图片的组成便于下文理解。</p>
<h2 id="JPG-是什么"><a href="#JPG-是什么" class="headerlink" title="JPG 是什么"></a>JPG 是什么</h2><p>wikipedia定义：<br><em>JPEG是联合图象专家组(Joint Picture Expert Group)的英文缩写，是国际标准化组织(ISO)和CCITT联合制定的静态图象的压缩编码标准</em><br>我们通常说的JPG/JPEG实际指的是JPEG格式的文件，其解码/编码部分是遵循JPEG标准。在下一段会介绍JPEG具体存储格式。<br>如果没有JPG，图片原始存储/表示格式会是什么样子？我们知道记录和显示彩色图像常用RGB方法表示，一般RGB表示是一个四字节int（如java/python中的pixel值是int），所以比如笔者手机中一张4k*3k像素的图片需要的空间就会是4k*3k*4=48MB。<br>而RGB存储表示的长度可能会不同，如图片原始Raw格式由厂家支持度每像素8bit-24bit略有不同。像RGB555用16bit即RGB分量都用5位，RGB24用24bit即RGB分量都用8位，RGB32用32bit即RGB分量都用8位剩下的8位用作Alpha通道或者不用。同样上图在相机存储占用48MB字节，实际相机raw图片可能略小于此。<br>这不利于传输和存储，尤其是在早期存储和带宽较贵时。所以想到了压缩，当我们用基于Lz77之类的无损压缩保存为png或者tiff等格式时可能8-24MB(笔者手机该图jpg反解存png是19MB)之间。无损压缩本身存在极限尤其是jpg这样没有固定重复模式可循时。那么是否存在一种有损压缩更好的压缩比同时保持图片清晰度？有损压缩JPEG就能做到压缩后远小于48MB，在笔者手机是3.4MB，而JPG处理减少近似度时可以达2.5MB且看不出和原图区别。<br>JPEG2000是JPG的下一代版，支持有损和无损压缩，且压缩比更高，其基于<a href="https://blog.csdn.net/weixin_44132627/article/details/105560989" target="_blank" rel="external">小波变换</a>的压缩标准比基于离散余弦变换的JPEG标准不会产生的块状模糊瑕疵，不过核心算法存在版权和专利的风险并未得到广泛支持。</p>
<h3 id="JPG压缩步骤："><a href="#JPG压缩步骤：" class="headerlink" title="JPG压缩步骤："></a>JPG压缩步骤：</h3><p>JPG主要利用两点假设即相邻的像素信息(亮度/色度等)是相近的，这些块的信息可以合并即渐变的颜色被转换为一块块的颜色而不影响显示效果，另一点基于图像信号的频谱特性进行滤波，利用人视觉系统误差过滤高频频谱。<br>先看通常步骤，这里主要引用自<a href="https://zh.wikipedia.org/wiki/JPEG" target="_blank" rel="external">wikipedia JPEG</a>：<br><strong>1）RGB转YUV：</strong><br>什么是以及为什么要转YUV呢？<br><a href="https://zh.wikipedia.org/wiki/YUV" target="_blank" rel="external">YUV wikipedia</a>：<br><em>YUV，是一种颜色编码方法。常使用在各个影像处理组件中。 YUV在对照片或影片编码时，考虑到人类的感知能力，允许降低色度的带宽。<br>YUV是编译true-color颜色空间（color space）的种类，Y’UV, YUV, YCbCr，YPbPr等专有名词都可以称为YUV，彼此有重叠。“Y”表示明亮度（Luminance、Luma），“U”和“V”则是色度、浓度（Chrominance、Chroma）。<br>从历史的演变来说，其中YUV和Y’UV通常用来编码电视的模拟信号，而YCbCr则是用来描述数字的影像信号，适合影片与图片压缩以及传输，例如MPEG、JPEG。 但在现今，YUV通常已经在电脑系统上广泛使用。<br>YUV通常分为平面格式和紧缩格式(packed formats)</em><br>即YUV不仅是编码RGB色彩方法，还支持降低色度的带宽实现压缩，即紧缩格式。<br>RGB转YUV其实是有精度损失的，因为需要double浮点数转整数，只不过小数损失忽略故在有些文章里认为这步无损。<br>也就是实际上我们说的黑白电视上的影响或者黑白照片其实不是黑白图像，而是灰度(gray)图像，YUV中Y按该式计算Y = 0.299 * R + 0.587 * G + 0.114 * B，这就是一些灰软件度化(gray)图片时常用的设置像素点颜色转换式子(其取均值或仅Green不常见)，而我们说的黑白二值图片是像素值只能取255(8位)或0的图片。<br>下面图左边是灰度图片，中间是使用了Floyd-Steinberg抖动算法实现的黑白二值图像，失真较小，最右是暴力的大于某值则白否则黑的黑白图片(可看到其比中间图失真较大)<br><img src="/images/kingfish1.png" width="100%"><br><strong>2）YUV色彩抽样</strong>(YCbCr 4:2:0)<br>即利用视觉因素对YUV的进行采样来达到压缩目的，实现色度和浓度的压缩，即上文Packed formats。因采样原因，这里是有损的。<br><strong>3）离散余弦变换</strong>(<a href="https://en.wikipedia.org/wiki/Discrete_cosine_transform" target="_blank" rel="external">DCT</a>)<br>在YUV转换后就可以将图片按8*8像素的单元格分割（不足则补充），对每个单元格减去128（便于值域对称、归零）再进行DCT。DCT本身是无损的，但如果你的处理矩阵始终是int则可能存在强转的误差。<br>图片点阵表示是一个二维矩阵，所以对应二维傅立叶变换，这步可简单的认为是将原矩阵变换为新的矩阵，新矩阵支持逆矩阵恢复，只不过新矩阵将高低频分离，适合下一步量化并便于压缩。<br><strong>4）量化</strong>(Quantization)<br>在DCT变换后，对于亮度量化表和色度量化表来说(具体实现不同可能来自同一矩阵)，低频区系数较大分布左上方，而人眼识别不敏感的高频区的系数较小分布右下，如何合理的舍弃高频区数据(并保证低频区不致误差)的过程称为量化。<br>通常提供量化表做除法取整，不同的图片质量对应不同级别量化表(也影响压缩比)。<br><strong>5）熵编码</strong>(entropy coding)<br>这一步主要包括Zigzag编码和Huffman编码。<br>为什么叫熵编码呢？因为Huffman和Zigzag编码过程中不丢失任何信息，这和图像本身的图像熵不同概念，不过上文对空间冗余度的压缩倒是符合压缩熵小(虽然熵小不一定无用)的理念。<br>Zigzag编码即是从左上角之字形扫描（在编码解码实现上直接用查表法即可），这么做使得相近的值排列一起便于编码<br>上述即是JPG图片压缩过程，至于存储过程可参考下文“JPG 存储格式”，即将上述几个步骤得到的元数据结合标记字段按JPG格式存储即可。在解码JPG时，则按照JPG存储格式和标记字段解析出元数据，之后对元数据按上述5步进行逆操作即得到JPG图片点阵图，感兴趣下文“Java里的JPG”提供代码可参考。</p>
<h3 id="JPG压缩的思考"><a href="#JPG压缩的思考" class="headerlink" title="JPG压缩的思考"></a>JPG压缩的思考</h3><p><strong>为什么需要离散余弦变换(DCT)</strong><br>本文不会涉及傅立叶公式，仅是原理讨论，但提供几个链接可入门。<br>我们知道作为一种数学上的积分变换，满足一定条件，傅立叶变换(Fourier transform，简称 FT)特殊的地方在于无论多么复杂的函数都可以表示成正弦基函数的线性组合或者积分，是不是有种“描述困难，傅立叶变换”的感觉，最初提出时认为是任何周期函数，后经修正为满足狄利克雷条件，在工程领域FT影响更深远。<br>傅立叶变换就可以用来做信号在时域（或空域）和频域之间的变换。<br>先看<a href="https://www.cnblogs.com/dearzhoubi/p/8716674.html" target="_blank" rel="external">几个概念</a>：<br>1）图像高频分量：图像突变部分；在某些情况下指图像边缘信息，某些情况 下指噪声，更多是两者的混合；<br>2）低频分量：图像变化平缓的部分，也就是图像轮廓信息<br>3）高通滤波器：让图像使低频分量抑制，高频分量通过<br>4）低通滤波器：与高通相反，让图像使高频分量抑制，低频分量通过<br>还有一个是图片的 <strong>空间冗余度</strong>，即图片相邻个点通常是相近的(渐变/变化缓慢)，即像素点取值相同，这种空间相关性就叫 空间冗余度(声音/视频也有该特性)。<br>人眼看到图片就是一种采样，人类视觉听觉都有限，比如低于20赫兹大于2万赫兹人耳都听不到，同样的微小变化人耳大多听不出来，就是傅立叶变换一套理论在JPG(图片)/mp3(音频)/H.264(视频)中都有用武之地，两个系统之间信号传递可接受的采样误差。<br>我们常见的图是位图，也叫<strong>点阵图或绘制图</strong>，不像矢量图/SVG可以用一种语言或公式描述来达到“压缩”目的，即便简单到全黑的位图也只能依赖点阵（矩阵）来表示。但如果我们把图片像素值表示为数字，以上述Y为例，图片看成一个平面，一系列的离散的像素点灰度值看成是二维平面上的连续信号上的点，即把图像看作是一个二维函数f(x,y)，其值为该点灰度  。图像灰度的变化速度(梯度)对应空域灰度变化程度，上文图像平缓部分决定图像轮廓，即低频分量决定信号的轮廓，如果以频域角度看，叫做图像信号的能量主要集中在低频附近。图像的边缘部分变化梯度大，即映射到频域上属于高频分量，描述局部特征，但是这种变化可以一定程度的失真（图像的边缘检测在其他地方反而是重要的，比如视觉检测时描述物体），而使人观察不到明显差异。傅立叶变换就提供了这样的功能，能将原图分为基底低频高频波，这也是傅立叶牛的地方，把时域信号转化为频域的若干频率分量的叠加，对于有限域的离散信号适合用离散傅里叶变换（DFT），但DFT运算量/时间复杂度大，所以又有快速离散傅里叶变换算法（FFT），至于推导高数2里可见，不过超出笔者记忆所以不详述。对于图像/音频等类信号处理时，实偶函数的傅里叶变换可转化为只含实的余弦项（笔者也在探索中…），因此构造了一种实数域的变换——离散余弦变换(DCT)，总之使用DCT不仅使得计算简单，而且使图片的能量更加几种，这篇课件<a href="http://www.svcl.ucsd.edu/courses/ece161c/handouts/DCT.pdf" target="_blank" rel="external">Discrete Cosine Transform</a>  有对DCT详细讨论。<br>这里用该课件图描述下JPG压缩。<br><img src="/images/lecture1.png" width="100%"><br>需要指出的是对图像进行低通滤波就可以得到图像的轮廓组成即图像本身(同时体积缩小)，只是边缘的清晰度会衰减(设置阈值能使人眼很难观察到)，<strong>对其高通滤波能得到图片的边缘但内容丢失</strong>，<a href="https://sighingnow.github.io/math/image_compress.html" target="_blank" rel="external">这个链接里</a>作者附图解释较明了。<br>类傅立叶变换使可逆的，即DCT逆变换(IDCT)可将图像的频率分布函数变换为灰度分布函数。<br><strong>为什么分割成8*8</strong><br>其实只是经验值而已，大则降低质量小则降低压缩比，但如果是超大像素图或超高DPI屏幕16*16分割未尝不可。<br><strong>DCT表示</strong><br>举一个简单的例子，这是笔者通过matplotlib对一张全白(RGB均为255)的图片的dct矩阵的图示：<br><img src="/images/dct.png" width="100%"><br>上图是未gray过的，如果gray过则根据转换式应该是近蓝色而非近白色。我们可认为有用的信息只是其中白色块，即白色块通过IDCT即可恢复全白图，可以简单认为Huffman压缩只需针对这些白色块进行压缩保存。<br><strong>标准量化表</strong><br>在上述量化这一步时，离不开量化表，量化表本身是个矩阵即量化矩阵，DCT得到的矩阵除以该矩阵在进行round取整操作，可以使得高频位尽可能的变成0，也减少非零系数幅度，即量化矩阵决定图像的质量。<br>量化矩阵是写入DQT的，比如下面看起来质量精度还是比较高的。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">➜  imagehash hexdump gen1.jpg </div><div class="line">0000000 ff d8 ff e0 00 10 4a 46 49 46 00 01 01 01 00 64</div><div class="line">0000010 00 64 00 00 ff db 00 43 00 02 01 01 01 01 01 02</div><div class="line">0000020 01 01 01 02 02 02 02 02 04 03 02 02 02 02 05 04</div><div class="line">0000030 04 03 04 06 05 06 06 06 05 06 06 06 07 09 08 06</div><div class="line">0000040 07 09 07 06 06 08 0b 08 09 0a 0a 0a 0a 0a 06 08</div><div class="line">0000050 0b 0c 0b 0a 0c 09 0a 0a 0a ff db 00 43 01 02 02</div><div class="line">0000060 02 02 02 02 05 03 03 05 0a 07 06 07 0a 0a 0a 0a</div><div class="line">0000070 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a</div><div class="line">*</div><div class="line">0000090 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a ff c0</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>至于该矩阵如何得来笔者并未找到相关信息，不过libjpg提供了相关的计算方法，<a href="https://github.com/LuaDist/libjpeg/blob/master/jcparam.c#L68" target="_blank" rel="external">JPEG标准矩阵</a>，1-100图像质量级别矩阵的计算<a href="https://github.com/LuaDist/libjpeg/blob/master/jcparam.c#L122" target="_blank" rel="external">jcpparam.c</a>。<br>下图分别是<a href="https://www.w3.org/Graphics/JPEG/itu-t81.pdf" target="_blank" rel="external">JPEG标准. p147</a> 推荐亮度和色彩常用的量化表，分别表示保留50%的图像质量<br><img src="/images/quant.png" width="100%"><br><a href="https://www.impulseadventure.com/photo/jpeg-quantization.html" target="_blank" rel="external">JPEG Compression Quality from Quantization Tables</a> 这个页面包含JPEG标准量化表，同时更列举常见相机的量化表，该网站也包含常见相机JPG图片质量比较。<br><strong>matplotlib一个示例</strong><br>通常借助Matlab只需几行代码可清晰理解，如果无Matlab可尝试下python的matplotlib和numpy的DCT操作图片，可以参考下这个链接：<a href="https://inst.eecs.berkeley.edu/~ee123/sp16/Sections/JPEG_DCT_Demo.html" target="_blank" rel="external">JPEG DCT Demo
</a>，不过或许是matplotlib版本问题(py 3.7.2)，代码想要跑通有几处要修正：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># import要加入这两行</span></div><div class="line"><span class="keyword">import</span> matplotlib.image <span class="keyword">as</span> mpimg</div><div class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> fftpack</div><div class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> rgb_to_hsv</div><div class="line"></div><div class="line"><span class="comment"># 其他处：改法1</span></div><div class="line"><span class="comment"># 原文的图片是灰度化的图片，加载im的代码替换成下面一段即可</span></div><div class="line">im = mpimg.imread(<span class="string">"./dat/kingfisher.jpg"</span>).astype(int)</div><div class="line">f = plt.figure()</div><div class="line">plt.imshow(im,cmap=<span class="string">'gray'</span>)</div><div class="line">plt.show()</div><div class="line"><span class="comment"># def rgb2gray(rgb):</span></div><div class="line"><span class="comment">#  return np.dot(rgb[...,:3], [0.299, 0.587, 0.114])</span></div><div class="line"><span class="comment"># im=rgb2gray(im)</span></div><div class="line">im=rgb_to_hsv(im)</div><div class="line">plt.imshow(im,cmap=<span class="string">'gray_r'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 改法 2</span></div><div class="line"><span class="comment"># 如果想处理彩色，那么最后hstack时im_dct要改为 im_dct.astype(int)</span></div><div class="line">plt.imshow(np.hstack((im, im_dct.astype(int)) ) ,cmap=<span class="string">'gray'</span>)</div></pre></td></tr></table></figure></p>
<p>图片压缩方法不仅仅局限于傅立叶变换，比如基于矩阵奇异值分解也是一种方法，<a href="https://www.cnblogs.com/shiina922/p/10489034.html" target="_blank" rel="external">这篇文章</a>图示了1-128级别基于SVD的图片压缩效果。这可能也是大多数人容易理解的方法。</p>
<h3 id="Android-JPG往事"><a href="#Android-JPG往事" class="headerlink" title="Android JPG往事"></a>Android JPG往事</h3><p>JPG图片网络传输，只要是正确无差的传输是不会画质逐渐变差的，但是如果你上传过程中有哪一步对jpg图片再次进行压缩或过滤高频或色彩压缩或色彩处理之类的操作，画质就会逐渐变得模糊，常用的聊天工具传输前就可能对图片有损压缩（各自均有算法并生成好的压缩，但慎重）。Android图片处理库曾经在将高精度的RGB色彩转换为低精度的YUV(8位)存在bug导致色彩误差产生色彩偏绿。<br>这个网站可以体验下<a href="https://m13253.github.io/JPEGreen/" target="_blank" rel="external">JPEGreen</a>。</p>
<h3 id="JPG-存储格式"><a href="#JPG-存储格式" class="headerlink" title="JPG 存储格式"></a>JPG 存储格式</h3><p>JPG格式就是包含了离散余弦变换(DCT)后的频域滤波有损压缩再Huffman无损压缩的图片格式，所以JPG并不是通常理解的像素存储，而是有特定格式的。<br>JPEG/JFIF是最普遍的被用来存储和传输照片的格式，JPG文件具体是怎么存储的或哪些格式呢？存储JPEG文件格式叫标准叫JIF（JPEG Interchange Format），最早的实现是JFIF(JPEG File Interchange Format)，这也是被广泛使用的，之后是Exif(Exchangeable image file format) ，两种标准虽然不兼容，但是大同小异。我们看JFIF文件格式：<br><img src="/images/jfif.png" width="100%"><br>其中附加Marker一般是：DQT、SOF、DHT、DRI、COM等。<br>下面就是常见JPEG Marker及含义，<a href="https://en.wikipedia.org/wiki/JPEG" target="_blank" rel="external">wikipedia上可看到</a></p>
<table>
<thead>
<tr>
<th style="text-align:left">Marker名称</th>
<th style="text-align:left">Markerflag</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">SOI</td>
<td style="text-align:left">0xFFD8</td>
<td style="text-align:left">Start Of Image</td>
</tr>
<tr>
<td style="text-align:left">SOF0</td>
<td style="text-align:left">0xFFC0</td>
<td style="text-align:left">Start Of Frame 0</td>
</tr>
<tr>
<td style="text-align:left">SOF2</td>
<td style="text-align:left">0xFFC2</td>
<td style="text-align:left">Start of Frame 2</td>
</tr>
<tr>
<td style="text-align:left">DHT</td>
<td style="text-align:left">0xFFC4</td>
<td style="text-align:left">Define Huffman Table(s)</td>
</tr>
<tr>
<td style="text-align:left">DQT</td>
<td style="text-align:left">0xFFDB</td>
<td style="text-align:left">Define Quantization Table(s)</td>
</tr>
<tr>
<td style="text-align:left">DRI</td>
<td style="text-align:left">0xFFDD</td>
<td style="text-align:left">Define Restart Interval</td>
</tr>
<tr>
<td style="text-align:left">SOS</td>
<td style="text-align:left">0xFFDA</td>
<td style="text-align:left">Start of Scan</td>
</tr>
<tr>
<td style="text-align:left">RST0~RST7</td>
<td style="text-align:left">0xFFD0 ~ 0xFFD7</td>
<td style="text-align:left">Restart</td>
</tr>
<tr>
<td style="text-align:left">APP0~APP15</td>
<td style="text-align:left">0xFFE0 ~ 0xFFEF</td>
<td style="text-align:left">Application-sepcific</td>
</tr>
<tr>
<td style="text-align:left">COM</td>
<td style="text-align:left">0xFFFE</td>
<td style="text-align:left">Comment</td>
</tr>
<tr>
<td style="text-align:left">EOI</td>
<td style="text-align:left">0xFFD9</td>
<td style="text-align:left">End of Image</td>
</tr>
</tbody>
</table>
<p>JPEG Marker含义就是表示一种叫做标记段的数据结构：JPEG Marker + Detail Data，marker就是上述 0xFFxx之类字节，detail data中两个字节表示长度，剩余表示具体数据。<br>Marker中，SOI表示开始，EOI表示文件结束，之后的数据不会被认为是JPEG文件，除了APP0之外其他APPx是可选的，DHT表示Huffman表，RST用于复位表示，DQT表示量化表生成YUV数据，中间comprssed image。 data表示真是的zigzag编码的DCT系数矩阵。<br>如果了解更多可以参考中文这里：<a href="https://cloud.tencent.com/developer/article/1427939" target="_blank" rel="external">JPEG文件格式解析(一) Exif 与 JFIF</a>，<a href="https://blog.csdn.net/yun_hen/java/article/details/78135122" target="_blank" rel="external">jpeg图片格式详解</a><br>wikipedia 文件格式参考 <a href="https://en.wikipedia.org/wiki/JPEG_File_Interchange_Format" target="_blank" rel="external">JFIF</a>，JPP文件处理参考 <a href="https://en.wikipedia.org/wiki/JPEG" target="_blank" rel="external">JPEG</a>，后者清晰的讨论格式和组成以及格式和编码之间的协作，原文还图示了DCT对JPG图片的影响，值得一看。<br>同编辑软件同质量DQT大多数相同，甚至Huffman数据同，如笔者对Mac编辑的两张32*32像素的笑脸图字节码比较，两张笑脸仅有嘴角上下角度不同，可看到只有压缩数据部分不同。</p>
<h3 id="JPG隐藏数据"><a href="#JPG隐藏数据" class="headerlink" title="JPG隐藏数据"></a>JPG隐藏数据</h3><p>如果你仔细看上文是否想到对图片进行隐藏数据的原理？比较常见的是我们生成图片时可以添加APPx(其他格式图片也有类似元信息)信息从而加入自己的数据，像Mac截图图片会默认添加Screenshot/adobe之类信息， Preview改动图片保存是就能看到 Photoshop3.0.8BIM字样，上图可见。但这些信息长度应该不超过两个字节长度，com似乎也可以隐藏，这类属于<strong>基于文件结构的图片隐写</strong>。<br>其次就是比较常见的<strong>附加式的图片隐写</strong>，正如上文提到JPG的EOI表示文件结束，之后数据不会参与图片的运算（其他格式类似）。<br>但上述第一种可能会被图片处理软件篡改忽略，后一种面对图片处理时则可能会被直接截断忽略。<br>我们还可以<strong>基于LSB原理的图片隐写</strong>，利用了人类对颜色变化不敏感的特性，通常RGB有256级变化，于是低位(比如低2位)造成的误差可以忽略，就可以用来用来存储隐藏的数据。LSB可以很好的隐藏数据，但其实信息隐藏能力受限原始图片，且低位过多是隐藏图片容易被发现，低位过少则可能无法隐藏，可以测试这个pthon实现的基于LSB隐藏 <a href="https://github.com/Aqcurate/lsb-steganography" target="_blank" rel="external">lsb-steganography</a>，pip安装PIL就可以运行了，代码仅一个py文件还是非常清晰简单的。用1bit隐藏时图片还是很模糊的。<br>LSB不仅可用于无损压缩如PNG/BMP之类的图片，也可用于JPG，<a href="https://www.ijsr.net/archive/v4i4/29031501.pdf" target="_blank" rel="external">原理和PNG类似</a>，不同是虽然jpg本身是有损压缩，但仅是对于边界有损较明显，但LSB理论上的确会对隐藏图片有损，不过DCT变换更能使得原图不那么容易被发觉是其长处(但该工具可以)。<br>还记得之前阿里巴巴曾经有过图片加水印事件吗，这里的水印不是普通观者可见的，而是盲水印，<strong>通过扩频技术掺杂在图片数据</strong>本身里的，该水印混杂原图特征(频域)里，可能也是抗干扰的，除非原图改变足够大否则总可以解码水印，当然这里是猜测，具体需要待验证。如果感兴趣可以参考：<br><a href="https://xz.aliyun.com/t/1833" target="_blank" rel="external">Misc总结—-隐写术之图片隐写</a>， <a href="https://wooyun.js.org/drops/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JPEG%E5%9B%BE%E5%83%8F%E6%A0%BC%E5%BC%8FJphide%E9%9A%90%E5%86%99.html" target="_blank" rel="external">深入理解JPEG图像格式Jphide隐写</a>，<a href="https://segmentfault.com/a/1190000016223897" target="_blank" rel="external">LSB图片隐写</a></p>
<h3 id="Java里的JPG"><a href="#Java里的JPG" class="headerlink" title="Java里的JPG"></a>Java里的JPG</h3><p>Sun/Open <a href="https://docs.oracle.com/javase/7/docs/technotes/guides/imageio/enhancements60.html" target="_blank" rel="external">JDK</a>和Android底层应该默认都是libjpeg 实现jpeg解码/编码等操作，这在其awt文件夹(share/native/sun/awt/image)下可见，<br>如自称比libjpeg快的高性能实现 <a href="https://libjpeg-turbo.org/" target="_blank" rel="external">libjpeg-turbo</a>，或者纯java实现的支持多种图片格式的 <a href="https://github.com/apache/commons-imaging" target="_blank" rel="external">Apache Commons-imaging</a>，后者是一个纯Java实现的多种格式图片解码，其中即可看到JPG解码组件。<br>需要指出有损压缩不仅上述，比如google基于JPG的Guetzli压缩据说更巧妙利用其视觉模型决定丢弃那些细节增强压缩比。还有适合视频流的jpg压缩，及<a href="http://www.compression.cc/" target="_blank" rel="external">基于深度神经网络等</a>。</p>
<h2 id="图片哈希算法"><a href="#图片哈希算法" class="headerlink" title="图片哈希算法"></a>图片哈希算法</h2><p>上面介绍了些图片处理知识，那么理解aHash/pHash/dHash应该会容易些。<br>对图片哈希为什么不直接用MD5呢？如前一篇文章提到，笔者曾参与的项目不仅期望同样的图片和pdf/ppt文件可以秒传，这样好处是上传体验快，而且节省cdn费用，同时对于服务来说，节省了去图片转pdf以及解析pdf/图片文字的时间和cpu。最初版本使用了md5计算，但后来出现内容基本完全一样由不同人上传的pdf/图片，区别仅是格式变动或加了水印或软件加了meta信息等，这些是md5粗暴编码不能解决的，那时候开源里还没有tensflow以及类似，只搜到了叫skLearn的python工具，不过文档较少。笔者想起了曾经选修过的图像处理课程，所以了解到aHash、pHash等这些基于LSH的算法，能基于图片的内容进行相似度编码。<br>这里来看下这三种编码强大之处，主要基于wikipedia/<a href="https://pypi.org/project/ImageHash/" target="_blank" rel="external">python imagehash</a>/<a href="https://www.cnblogs.com/Kalafinaian/p/11260808.html" target="_blank" rel="external">图像相似度中的Hash算法</a>。</p>
<h3 id="aHash-平均哈希算法"><a href="#aHash-平均哈希算法" class="headerlink" title="aHash(平均哈希算法)"></a>aHash(平均哈希算法)</h3><p>三种算法都需要对图片进行缩小，默认生成64bit指纹，图片缩小一般基于插值算法，由于是缩放长宽像素统一，所以还是可以对应原图的，但缩放损失图片细节，尤易对基于均值的哈希aHash精度影响，不过这个概率其实并不大，下文链接测试数据也反应这点。<br>图片就是二维空间上的像素值分布，aHash的均值就是计算像素的平均值，上文知灰度图即是图像的特征，所以aHash步骤一般是：</p>
<ul>
<li>缩放图片<br>将图片缩小为8*8像素图，得到64个像素点。</li>
<li>转灰度图<br>如上文YUV所述是一种灰度方案</li>
<li>算像素均值<br>计算灰度图8*8的矩阵中所有元素的平均值，假设其值为avg</li>
<li>据像素均值计算指纹<br>初始化ahash为空字符串，按左上到右下顺序遍历G每像素，如果G(i,j) &gt;= avg，则ahash += “1”，否则ahash += “0”</li>
</ul>
<p>上述即可得到图片的aHash的编码，相似度比较采用就是前一篇文章提到的海明距离，下面p/dHash都是采用海明距离比较，距离满足 “0: particular like； &lt; 5: very like；  &gt; 10:different picture”。</p>
<h3 id="pHash-感知哈希算法"><a href="#pHash-感知哈希算法" class="headerlink" title="pHash(感知哈希算法)"></a>pHash(感知哈希算法)</h3><p>上文我们知道DCT(未量化的)是一张图片的特征，pHash就是利用这个特性，一般步骤：</p>
<ul>
<li>缩放图片<br>将图片缩小为32*32像素图，得到1024个像素点。</li>
<li>转灰度图<br>同aHash</li>
<li>计算DCT<br>DCT后得到对应的32*32的数据矩阵</li>
<li>缩小DCT<br>取上一步得到32*32数据矩阵左上角8*8子区域，上文知这里能量最集中</li>
<li>算平均值<br>计算上一步8*8的矩阵中所有元素的平均值，假设其值为avg</li>
<li>计算指纹<br>初始化phash为空字符串，按左上到右下顺序遍历G每像素，如果G(i,j) &gt;= avg，则phash += “1”，否则phash += “0”</li>
</ul>
<p>距离比较同aHash。</p>
<h3 id="dHash-差异哈希算法"><a href="#dHash-差异哈希算法" class="headerlink" title="dHash(差异哈希算法)"></a>dHash(差异哈希算法)</h3><p>上文提到图片的梯度概念，dHash就是对梯度的均值比较，一般步骤：</p>
<ul>
<li>缩放图片<br>将图片缩小为9*8像素图，得到72个像素点。</li>
<li>转灰度图<br>同aHash</li>
<li>算差异值<br>从第二行开始，当前行像素值减去前一行像素值，得到一个8*8矩阵G</li>
<li>计算指纹<br>初始化dhash为空字符串，按左上到右下顺序遍历G每像素，如果G(i,j) &gt;= 0，则phash += “1”，否则phash += “0”</li>
</ul>
<p>距离比较同aHash。</p>
<h3 id="ImageHash"><a href="#ImageHash" class="headerlink" title="ImageHash"></a>ImageHash</h3><p>这里贴下imaghash的上述三个实现的代码，因为代码看起来太精简明了了，注释已删掉，完整代码见<a href="https://github.com/JohannesBuchner/imagehash/blob/master/imagehash.py" target="_blank" rel="external">链接</a>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">average_hash</span><span class="params">(image, hash_size=<span class="number">8</span>, mean=numpy.mean)</span>:</span></div><div class="line">    <span class="keyword">if</span> hash_size &lt; <span class="number">2</span>:</div><div class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"Hash size must be greater than or equal to 2"</span>)</div><div class="line">    image = image.convert(<span class="string">"L"</span>).resize((hash_size, hash_size), Image.ANTIALIAS)</div><div class="line">    pixels = numpy.asarray(image)</div><div class="line">    avg = mean(pixels)</div><div class="line">    diff = pixels &gt; avg</div><div class="line">    <span class="keyword">return</span> ImageHash(diff)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">phash</span><span class="params">(image, hash_size=<span class="number">8</span>, highfreq_factor=<span class="number">4</span>)</span>:</span></div><div class="line">    <span class="keyword">if</span> hash_size &lt; <span class="number">2</span>:</div><div class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"Hash size must be greater than or equal to 2"</span>)</div><div class="line">    <span class="keyword">import</span> scipy.fftpack</div><div class="line">    img_size = hash_size * highfreq_factor</div><div class="line">    image = image.convert(<span class="string">"L"</span>).resize((img_size, img_size), Image.ANTIALIAS)</div><div class="line">    pixels = numpy.asarray(image)</div><div class="line">    dct = scipy.fftpack.dct(scipy.fftpack.dct(pixels, axis=<span class="number">0</span>), axis=<span class="number">1</span>)</div><div class="line">    dctlowfreq = dct[:hash_size, :hash_size]</div><div class="line">    med = numpy.median(dctlowfreq)</div><div class="line">    diff = dctlowfreq &gt; med</div><div class="line">    <span class="keyword">return</span> ImageHash(diff)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dhash</span><span class="params">(image, hash_size=<span class="number">8</span>)</span>:</span></div><div class="line">    <span class="keyword">if</span> hash_size &lt; <span class="number">2</span>:</div><div class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"Hash size must be greater than or equal to 2"</span>)</div><div class="line">    image = image.convert(<span class="string">"L"</span>).resize((hash_size + <span class="number">1</span>, hash_size), Image.ANTIALIAS)</div><div class="line">    pixels = numpy.asarray(image)</div><div class="line">    diff = pixels[:, <span class="number">1</span>:] &gt; pixels[:, :<span class="number">-1</span>]</div><div class="line">    <span class="keyword">return</span> ImageHash(diff)</div></pre></td></tr></table></figure></p>
<h3 id="a-d-pHash思考"><a href="#a-d-pHash思考" class="headerlink" title="a/d/pHash思考"></a>a/d/pHash思考</h3><p>1）上述精准理论上 aHash &lt; dHash &lt; pHash，但是pHash耗时远大于a/dHash，而dHash则是在精确度和性能之间均衡版。<br>2）图片稍微旋转就会影响a/p/dHash的效果，即其不能处理旋转过的图，但我们也可以分别旋转90/180/270度，多计算三次，这样可处理常见的90/180/270度旋转情况。<br>3）构造一个相同a/d/pHash不同内容图是是远比MD5容易的，比如中间态（缩略图）即是，笔者并不清楚深度学习图片修复原理，不过前几天看新闻现在修复技术能通过32*32像素的图片生成大图：<a href="https://www.jiqizhixin.com/articles/2020-06-08-6" target="_blank" rel="external">高糊图片可以做什么？Goodfellow等人用它生成一组合理图像</a>（至于是否改变a/p/dHash值需要笔者再了解下），但像 ahash/dhash我们也可以根据中间产生的8*8、8*9矩阵，然后构造一张8*8图片，并维持均数逐层放大32*32，128*128等，只不过最后得到的图片不忍卒看罢了。<br>4）笔者未找到aHash/pHash的证明，不过官方网站提供了一些效果数据：<a href="http://www.phash.org/docs/design.html" target="_blank" rel="external">Design &amp; Validation</a>，以及pdf文档：<a href="http://www.phash.org/docs/pubs/thesis_zauner.pdf" target="_blank" rel="external">Implementation and Benchmarking of Perceptual Image Hash Functions</a>，可以说是pHash的论文，提到设计思路和效果数据，并对比了其他变换对pHash影响，以及如dHash等效果比较。<a href="https://www.esat.kuleuven.be/cosic/publications/thesis-217.pdf" target="_blank" rel="external">Perceptual Multimedia Hashing</a>。<br>5）上文提到a/p/d精准度，这里是关于dHash/aHash/pHash各自的讨论，<a href="https://www.hackerfactor.com/blog/index.php?/archives/529-Kind-of-Like-That.html" target="_blank" rel="external">Kind of Like That</a>，可以看到作者使用15万张图片测试，aHash产生a huge number of false positives，大量的假阳，pHash则是 No false positives，但是耗时是aHash的2倍，dHash则Very few false positives，和aHash同样快。<br>评论里也有各类python/java/.NET/php等实现对a/d/phash的效果对比，很值得一读，另外这篇blog还是蛮有趣的，通过图片识别一些假新闻。<br>6）上述链接可见，因为精度/性能表现皆优，作者推荐先用dHash计算，排除大部分不相似，如果要解决 false positives，可以再进一步使用pHash。<br>7）a/p/dHash适合小图片，对于超大图精度可能会损失较多。<br>8）大图/小图 pHash一致，所以最好过滤下小图。灰度图像和原图也可能一致，如果你不希望上传灰度图时显示彩色，那么可以先判断下是否灰度图片。<br>9）这里附上一个相似图片搜索，存储图片 pHash以及查询时使用fuzzy query即编辑距离小于2，<a href="https://stackoverflow.com/questions/32785803/similar-image-search-by-phash-distance-in-elasticsearch" target="_blank" rel="external">Similar image search by pHash distance in Elasticsearch</a>，纯粹基于图片相似，或许实用性不够好，但是是一个高效的思路。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>前文文本相似指的是字面上的相近，而不是语义上的相似，像腾讯/百度均有段文本相似的接口可参考，举个例子，比如<a href="https://ai.baidu.com/tech/nlp/simnet" target="_blank" rel="external">短文本相似度</a>，可以判定”小儿腹泻偏方”和”宝宝拉肚子偏方”0.90的相似度，但和”小儿感冒偏方”只0.74的相似度，如果用莱文斯坦距离后者就比前者相近了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><p><a href="https://zh.wikipedia.org/wiki/JPEG" target="_blank" rel="external">wikipedia JPEG</a><br><a href="https://en.wikipedia.org/wiki/Discrete_cosine_transform" target="_blank" rel="external">Discrete_cosine_transform</a><br><a href="https://www.cnblogs.com/senior-engineer/p/9548347.html" target="_blank" rel="external">PNG文件格式详解</a><br><a href="https://daily.zhihu.com/story/8734930" target="_blank" rel="external">为什么图片反复压缩后会普遍会变绿而不是其他颜色</a><br><a href="https://cloud.tencent.com/developer/article/1427939" target="_blank" rel="external">JPEG文件格式解析(一) Exif 与JFIF</a><br><a href="https://www.cnblogs.com/Kalafinaian/p/11260808.html" target="_blank" rel="external">图像相似度中的Hash算法</a><br><a href="https://www.hackerfactor.com/blog/?/archives/432-Looks-Like-It.html" target="_blank" rel="external">hackerfactor Looks-Like-It</a><br><a href="https://zhuanlan.zhihu.com/p/37104535" target="_blank" rel="external">四种计算文本相似度的方法对比</a><br><a href="https://cloud.tencent.com/developer/article/1005751" target="_blank" rel="external">NLP 点滴 ：文本相似度 （下）</a></p>
<p><strong> 遵循CC协议，转载请标注来源 </strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;i&gt;&lt;strong&gt;intro1&lt;/strong&gt;：JPG文件生成/压缩原理&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro2&lt;/strong&gt;: 对离散余弦变换在图片压缩应用的思考&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro3&lt;/strong&gt;: JPG文件存储格式&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro4&lt;/strong&gt;: aHash/dHash/pHash原理及源码介绍&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro5&lt;/strong&gt;: 对aHash/dHash/pHash准确度、局限、场景等思考&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前一篇文章介绍Simhash/Minhash等，下面来看下之前留下的图片的相似性度量算法：ahash、dHash、pHash，在笔者经历的图片/PDf上传的经历中，上述方法效果不错。&lt;br&gt;本文主要以JPEG格式为例探索下图像几种哈希算法，不过图像的处理并非本文要介绍重点，只是为了方便下文理解，如果你只对怎么寻找近似图片感兴趣或看这里感到不适，可以跳过本节。&lt;br&gt;
    
    </summary>
    
    
      <category term="JPG/DCT" scheme="http://thomaslau.github.io/tags/JPG-DCT/"/>
    
      <category term="pHash/dHash" scheme="http://thomaslau.github.io/tags/pHash-dHash/"/>
    
  </entry>
  
  <entry>
    <title>开发常见的Hash函数(三)-Minhash_Simhash</title>
    <link href="http://thomaslau.github.io/2020/06/13/2020-06-13-on_hash_3/"/>
    <id>http://thomaslau.github.io/2020/06/13/2020-06-13-on_hash_3/</id>
    <published>2020-06-13T12:59:10.000Z</published>
    <updated>2020-06-21T23:37:16.043Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><i><strong>intro1</strong>：文本相似相关的hash方法</i><br><i><strong>intro2</strong>: LSH、Minhash、Simhash</i><br><i><strong>intro3</strong>: 基于代码理解minhash/simhash</i></p>
</blockquote>
<p>记录笔者的一些思考，在理解minhash、python minhash源码过程中有不理解或有些搜索不到的，或许在这里得到更多的理解。<br>前面文章介绍了常规hash，谈到了抗碰撞/雪崩效应等特性，比如微小的改动能产生不同的hash结果。<br>不过有时候我们期望hash不那么敏感，可以忽略细微的不同，比如一段文字中忽略某些句子顺序，或者忽略几个词的不同，那么有哪些可用的hash方法呢？<br><a id="more"></a><br>需要强调的是，这类hash重点是不敏感，但前提还是期望明显不同的文本hash结果是不一样的，否则我们使用一个常数hash可以做到结果不敏感。即我们期望Hash结果的相似性也最好能代表了文本的相似性，这样可以用来比如判断两篇文章是否相似等。<br>考虑这类文本hash时，最直接的会想到去考虑对文本特征进行hash，文本最大的特征就是文本使用的“词汇集”，能否对这些词汇做hash达到目的呢？以及图片也是否存在这类hash呢？</p>
<h2 id="匹配场景"><a href="#匹配场景" class="headerlink" title="匹配场景"></a>匹配场景</h2><p>我们先看两个例子：<br><strong>短文本匹配</strong><br>笔者在某旅游OTA 时曾见过 短文本相似建立关系 的分享，其最初的版本曾使用编辑距离比较，很有效果，但是这种做法也会误判，比如“上海浦东四季酒店”计算“浦东四季酒店”和“上海浦东全季酒店”，后者编辑距离更小，但不是一类酒店，前者才是一类。怎么去避免该类问题呢？<br><strong>图片相似</strong><br>在做某学习系统PDF/图片上传功能，笔者曾接到需求要排重PDF和图片避免重复处理。PDF和图片用MD5可以解决部分，但对于微小改动的PDF/图片怎么处理？解析PDF后的文档标题/内容可以去重PDF，但是图片如何处理，尤其是那时开源界尚未有tf，OCR/NLP并不火。<br><em>为了下文描述方便，这里简单介绍下海明距离/LSH等，如已知，请忽略。</em></p>
<h2 id="先了解下什么是-海明距离（Hamming-distance）："><a href="#先了解下什么是-海明距离（Hamming-distance）：" class="headerlink" title="先了解下什么是 海明距离（Hamming distance）："></a>先了解下什么是 海明距离（Hamming distance）：</h2><p>wikipedia：<br><em>In information theory, the Hamming distance between two strings of equal length is the number of positions at which the corresponding symbols are different.</em><br>广义的海明距离定义为两个向量中不同分量的个数，具体数学性质如满足三角不等式等，但在信息论/编码理论中，两个等长字符串之间的汉明距离（Hamming distance）是两个字符串对应位置的不同字符的个数。换句话说，它就是将一个字符串变换成另外一个字符串所需要替换的字符个数。<br><strong>注意这里比较的是等长字符串，比较不同长度字符串否属于编辑距离的范畴，后者目前常见分为：Levenshtein距离、Hamming距离、LCS（最长公共子序列）、Jaro距离等</strong>，维基百科介绍分类比较清晰，如果你看百度百科介绍会比较混乱，不能区分海明距离和莱文斯坦距离。<br>其中Levenshtein距离在处理字符串比较常见，他是 两个字串之间，由一个转成另一个所需的最少编辑操作次数，允许的编辑操作包括：替换、插入、删除单个字符。计算字符串的Levenshtein距离通常用动态规划算法，Levenshtein自动机可用于高效比较两个字符串限定距离内转化，也就是前一篇文章提到Lucene使用，<a href="https://en.wikipedia.org/wiki/Levenshtein_distance" target="_blank" rel="external">Levenshtein_distance</a> 这里列出了计算方法以及几种编辑距离不同点。</p>
<p>对于Java来说 <strong><a href="http://commons.apache.org/proper/commons-text/apidocs/org/apache/commons/text/similarity/EditDistance.html" target="_blank" rel="external">Apache Commons Text</a> 提供了</strong>：CosineDistance、HammingDistance、JaccardDistance、JaroWinklerDistance、LevenshteinDetailedDistance、LevenshteinDistance、LongestCommonSubsequence-Distance 这些方法比较文本。<br>numpy也内置了hamming、Levenshtein算法，这里不再详述。<br>重点看下hamming距离计算方式，对于字符串而言，因为是等长，我们都可以用 if str1[i] != str2[i] dist_cnt++; 来计算，但这里看下对于两个整型数据计算hamming的高效算法，下面是wikipedia上<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">hamming_distance</span><span class="params">(<span class="keyword">unsigned</span> x, <span class="keyword">unsigned</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> dist = <span class="number">0</span>;</div><div class="line">    <span class="comment">// Count the number of bits set</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> val = x ^ y; val &gt; <span class="number">0</span>; val = val &gt;&gt; <span class="number">1</span>)&#123;</div><div class="line">        <span class="comment">// If A bit is set, so increment the count</span></div><div class="line">        <span class="keyword">if</span> (val &amp; <span class="number">1</span>)</div><div class="line">            dist++;</div><div class="line">        <span class="comment">// Clear (delete) val's lowest-order bit</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Return the number of differing bits</span></div><div class="line">    <span class="keyword">return</span> dist;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Hamming distance for 64-bit integers</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">hamming_distance64</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> __builtin_popcountll(x ^ y);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>判断不同位的个数，其实可以对两个数进行异或操作并计算这个结果里1的个数，所以上述两个方法都有 x ^ y，只不过1比较常见，通过循环右移并判断末尾奇偶，方法2则是利用内置cpu指令计算快速计算1的个数。<br>对于64位，计算1个数上述方法1需要循环右移64次，下面改进可以保证循环次数为1的个数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">n = x ^ y;</div><div class="line"><span class="keyword">while</span> (n) &#123;</div><div class="line">  count++ ;</div><div class="line">  n &amp;= (n - <span class="number">1</span>) ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这也是<a href="https://github.com/leonsim/simhash/blob/master/simhash/__init__.py#L112" target="_blank" rel="external">python版simhash使用的计1个数方法</a>。simhash直接用来短句比较不是最优的，但是可以学习下他的思路。</p>
<h2 id="先看-LSH-的定义"><a href="#先看-LSH-的定义" class="headerlink" title="先看 LSH 的定义"></a>先看 LSH 的定义</h2><p>wikipedia即Locality-sensitive hashing，下面的总结很经典了：</p>
<p><em>In computer science, locality-sensitive hashing (LSH) is an algorithmic technique that hashes similar input items into the same “buckets” with high probability(The number of buckets are much smaller than the universe of possible input items.) Since similar items end up in the same buckets, this technique can be used for data clustering and nearest neighbor search. It differs from conventional hashing techniques in that hash collisions are maximized, not minimized. Alternatively, the technique can be seen as a way to reduce the dimensionality of high-dimensional data; high-dimensional input items can be reduced to low-dimensional versions while preserving relative distances between items.</em></p>
<p>不知道你是否发现，前文的Geohash和这里描述的LSH作用很像，接近一种空间上的聚类。<br>事实Geohash和下文讲的Simhash都是LSH的一类应用，LSH通常用于最邻近搜索（Nearest Neighbor Search, NNS)，即TAOCP称之最近邮局问题(post-office problem)，LSH在编码、压缩、模式识别、基因测序、相似网页等都有应用。<br>NNS解决方案有<br>1）<strong>精确计算</strong><br>如线性查询、空间划分，后者包括R家族树以及BSP Tree系列的KD树等。<br>2）<strong>近似计算</strong><br>贪心算法、LSH（Locality sensitive hashing）、最小内聚。</p>
<p>NNS问题也有诸多变种，比较常见的是K近邻（KNN，k-nearest neighbors）和 近似最邻近查找（Approximate nearest neighbor）等，LSH（Locality sensitive hashing)即本文要讲的就是一种Approximate nearest neighbor查找算法，而且是一种高效的解决方案。</p>
<h2 id="ANN近邻查找-海量网页去重-minhash-Simhash"><a href="#ANN近邻查找-海量网页去重-minhash-Simhash" class="headerlink" title="ANN近邻查找/海量网页去重 - minhash/Simhash"></a>ANN近邻查找/海量网页去重 - minhash/Simhash</h2><p>LSH用于在<strong>高维(high-dimension properties)空间寻找相似性，那么这里为什么会和高维有关系呢</strong>？在wordvec中有词向量的概念，比如一个0-1数组(的向量)来表示一个词，向量的长度为辞典的大小，1的位置对应其在辞典中的位置，其他全部是0，但此方法有个维度灾难难于运算，另一种是经过某种训练把词映射为一个短向量，维度很少，一般远少于1000，这些向量构成一个词向量空间，向量余弦距离可以表示相似度，以及像文本预处理也会有特征空间高维性这些概念，LSH就可以用于相似的向量分类达到降维的目的。<br><strong>Minhash/Simhash过程就包含一种降维手段，将能够表示文本的特征向量映射成低维的特征向量，即一段0-1组成的hash值</strong>，两篇文档的minhash/simHash值的Jaccard/海明距离可以代表他们的相似度。<br><strong>Simhash并非是由Google提出的</strong>，只是较早实现并通过一篇论文而被熟知，最初用于从海量的互联网网页中寻找相似的网页，也可用于相似文本排重。举个例子，比如我们怎么判断两篇文章是否一样呢？如上文所述，普通MD5哈希过于敏感，如果希望能够甄别出非标点符号不同以及部分较小改动呢？逐句比较编辑距离是一种方法但未免耗时而且非关键字也能影响结果，分词并统计各自词数也是一种方案，或者早期论文排重里的对比每个段落字数等也是方案。</p>
<h3 id="文本相似度之近邻搜索"><a href="#文本相似度之近邻搜索" class="headerlink" title="文本相似度之近邻搜索"></a>文本相似度之近邻搜索</h3><p>在Simhash之前先介绍下同样用于ANN（近邻搜索）的非LSH的几种做法。<br>下面部分参考自Jeffery Ullman的《Minning of Massive Dataset》（下简称MMD）。<br>如何比较两篇文章的相似度，或者一般推荐系统中比较两个相似用户？<br><strong>协同过滤</strong>：向量空间模型(Vector Space Model，VSM)似一种最为常见的相似度计算模型，所以最容易想到该方法，可以分为欧氏距离、余弦相似度或者Jaccard也可以用来对此进行相似度等计算（狭义的Jaccard相似度是指两个集合的交集除以两个集合并集）。<br>比如用户电影喜好问题，可以对每个用户对电影进行0-1打分表示喜好与否，这样通过余弦距离或者Jaccard相似度判断用户是否相似。<br><strong>k-shigle</strong>：文本都可以表示为k-shingles的集合，即每k长字符分割文本得到一系列 k-shingle集，然后比较Jaccard相似度。通常英文选择5到9-shingle集合，Ullman的书有一小节提到如何选择合适的single大小，一般来讲，shingle越长越好，长句通常比短句更有代表性更有区分性，百度的指纹算法也是利用该特性优先使用长句。<br><strong>编辑距离</strong>：即根据文本编辑距离计算，衡量的是文本文字上的距离。</p>
<p>对于文本计算来说，<strong>MMD认为k-shingle计算Jaccard相似度的会产生大量的数据</strong>，比如对于 4-shingle，数据量可达四倍原文本。而且shingle简单的划分字符串可能很容易因增减助词带来干扰，且任意切割可能使得无法词义上表示文本特征。<br>协同过滤则因为词库通常比较大，会有高维问题。<br>此外对于海量文本，上述都需要大量的运算，不过有许多分布式计算如常见mapreduce，而且可对稀疏矩阵计算做优化。<strong>另外一种比较有效方法是能否对每个文本构造一个指纹，这个指纹相似度一定程度的代表文本相似度呢？LSH方法即是这种思路，用于文本的常见的有 Minhash 和 Simhash。</strong><br>不过需要指出，编辑距离不适合长文本，minhash/simhash不适合极短文本(如推特微博等)，<strong>文本相似不限于上述几类</strong>，比如基于simhash支持权重的<a href="https://www.aclweb.org/anthology/P11-1010.pdf" target="_blank" rel="external">S3H准确度高效</a>，基于TF-IDFM模型或LSA/LDA模型/word2vec等支持语义相似度的计算，不是本文重点，故笔者望而止步。<br>下文探讨两种文本基于指纹去重的，即把一个高维的表示文本的特征向量映射成一个固定bit的指纹(finger print)，指纹的相似度代表了文本相似度：</p>
<h3 id="Minhash"><a href="#Minhash" class="headerlink" title="Minhash"></a>Minhash</h3><p>Minhah在最老牌的搜索引擎AltaVista中用于在搜索结果中检测重复Web页。从wikipedia可知Google news还使用其进行新闻个性化定制：<br><em>In 2007 Google reported using Simhash for duplicate detection for web crawling[20] and using Minhash and LSH for Google News personalization</em><br>minhash正是由在AltaVista工作过的Google杰出科学家Andrei Broder提出（真是需求推动科学理论），MMD书中有对Minhash具体描述，或参考本文 <a href="https://zhuanlan.zhihu.com/p/46164294" target="_blank" rel="external">大规模数据的相似度计算：LSH算法</a>，或者<a href="https://blog.csdn.net/liujan511536/java/article/details/47729721" target="_blank" rel="external">minHash(最小哈希)和LSH(局部敏感哈希)</a>，都是以MMD原文解读。<br><a href="https://towardsdatascience.com/understanding-locality-sensitive-hashing-49f6d1f6134" target="_blank" rel="external">Locality Sensitive Hashing</a> 这篇文章图文结合理解起来清晰。<br>需要说明的是，最小哈希(minhashing)特指对输入特征集合(这里是一维数组)采用最小哈希算法生成一段指纹，可用于比较两份输入（两个特征集合或特征集合矩阵）之间的Jaccard距离，而通常我们说的属于LSH的最小哈希（Minhash）应该是广义的包括minhashing生成指纹以及通过LSH对生成的指纹矩阵进行hash以便快速找出近似指纹（即近似文本）。<br>这里借用前一个链接里的图看下 Minhash 包括哪些：<br><img src="/images/minhash-1.png" width="100%"><br>实际上我们看python的MinHash实现，它的输入是一个特征矩阵（下文代码可见），即文档任何可作为特征描述的信息，只不过默认可是shingling，而min hash的查找则是MinHash LSH的几个类实现的。<br>spark的minhash输入也是一个输入矩阵（一个稀疏矩阵的压缩表示），只不过把minhashing和minhash LSH放到同一个scala类里实现。</p>
<h4 id="minhashing"><a href="#minhashing" class="headerlink" title="minhashing"></a>minhashing</h4><p>这里不详述minhashing算法(上述链接已有)，只是做些补充或讨论便于理解。<br>minhashing有多种变种实现，常见有多哈希函数和单一哈希函数版本。MMD描述的就是多哈希实现。不过笔者认为原文介绍minhash时组织的不够清晰，大部分应该会觉得<strong>比较两个文档Jaccard集为什么不直接求交集(也只需遍历特征集一遍)而要用多次交换矩阵每行并求首位1的方式</strong>？<br>首先存储特征向量耗费大量空间，不如生成指纹占用空间小，这点很重要，因为生成最终指纹才是本算法的目的。而且这么做也是为了查找时不需要再做大量求jaccard计算，如果指纹相似那么可以设计一种算法快速查找。<strong>生成指纹对应minhashing过程，便于查找对应minhash LSH过程</strong>。<br>1）minhashing的输入是特征矩阵中的一列，即对应一个文本的特征集合，该集合是文档在特征矩阵所有元素关系的一个0-1表示，即如果集合中包含该元素，则矩阵中的该列对应位置为1，否则为0。<br>但<strong>为了理解可把特征矩阵作为整体来看</strong>，计算最小哈希的时候就是先把矩阵随机选择两行进行交换，把打乱后的每列第一个值为1的行所在的行号作为本轮计算该列的最小哈希值。<br>2）在MMD中，<strong>作者论证了经行打乱后的两个集合计算得到的最小哈希值相等的概率等于这两个集合的Jaccard相似度</strong>。<br>作者首先说明 SIM(S1,S2) = x / (x+y)，这是容易理解的，因这就是Jaccard相似度的定义，因为Z类表示两个聚合均无，所以就是 x / (x+y)，但是怎么理解 <strong>“经过行打乱之后，对特征矩阵从上往下扫描，在碰到Y类行之前碰到X类行的概率是x/(x+y)”呢</strong>？首先假设在S1扫描到1时，因为Z类要求二者均为0，那么S2只能是X或Y类，所以是1的概率就是 x / (x+y)，即h(S1)=h(S2)的概率等于 SIM(S1,S2) ，显然前提是二者为独立事件且S1、S2相似的假设。这也是为什么 minhash只能做否定的判断(存在false positive可能性)。<br>另外上述只是<strong>单次随机采样，要做到无偏差估计需要多次采样</strong>即重复上述过程。<br>3）上述随机交换矩阵行高维矩阵时是非常浪费的，是否存在不交换行计算的签名矩阵的方式？ MMD在3.3.5章节<strong>最小哈希签名计算</strong> 提供了方法，或者上述链接可看到图示该过程，不详述，这里补充下：<br><strong>1）图示</strong><br><img src="/images/minhash-2.png" width="100%"><br>这里是容易看不明白的地方，其实图示第一列是原文档的顺序（暂理解为原始矩阵行id），h1/h2 两列都是第一列的乱序排列，即是第一列的shuffle或者python/spark minhash 里的置换（permutations）概念，h1列的1表示原来行id为0的置换到矩阵第1行。<br>或许换成下图容易理解些（该图在前一个链接可见），不过下标从1开始。<br><img src="/images/minhash-3.png" width="100%"><br>左边相当于置换即h1/h2/h3，中间是S1/S2…，右边是本轮指纹，注意颜色对应。<br><strong>2）为什么这种做法就等价MMD里描述的行置换方式</strong>，即“每列第一个值为1的行所在的行号作为本轮计算该列的最小哈希值”？<br><strong>MMD原文有些跳跃，可能许多文章没提到，如果我们只看一列，即只用h1列演示一遍就能发现这种更新hn矩阵的做法和原矩阵置换找到最先为1的行号是一样的</strong>，只不过从上往下扫描的做法是按照从小到大找到第一个为1截止更新行号，而该做法是遍历所有行号找到对应为1的最小行号。<br>这里虽然平均多了一倍遍历，但是避免了行置换。<br><strong>3）更多特性：特征顺序不影响minhashing结果</strong><br><strong>这个特性是为了下面讲述python/spark实现minhashing算法准备的</strong>，大部分文章没有提及，所以笔者在看minhash的python实现时觉得有点困惑，希望<strong>这里的分析有助你更好理解python/spark实现原理</strong>。<br>上图中特征集$S1(10010)$，可以看成$S11(10000)$与$S12(00010)$的合集，如果我们分别对S11和S12分别进行h1/h2运算会得到什么结果？<br>已计算得到: $(h1(S1), h2(S1))=(1,0)$<br>计算$(h1(S11),h1(S12))=(1,4)$，$(h2(S11),h2(S12))=(1,0)$，继续对$(1,4)$和$(1,0)$ 按列求最小值合并得到：$(1,0)$，同时S11和S12交换顺序再合并不影响$(1,0)$结果，这个结果和$(h1(S1), h2(S1))=(1,0)$一致。<br>即$(min(h1(S11),h2(S11)),min(h1(S12),h2(S12))=(h1(S1), h2(S1))$。<br>这里的道理其实和mmd里的最小哈希签名计算道理同，只是多了一次min理解。<br>这也是为什么特征向量对minhashing来说是看成特征集，即特征的顺序不影响minhashing的结果。</p>
<h4 id="python-spark中的minhashing"><a href="#python-spark中的minhashing" class="headerlink" title="python/spark中的minhashing"></a>python/spark中的minhashing</h4><p>这里使用<a href="http://ekzhu.com/datasketch/minhash.html" target="_blank" rel="external">datascketch</a>里的minhash，该链接完整代码，这里列出部分。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datasketch <span class="keyword">import</span> MinHash</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line">data1 = [<span class="string">'minhash'</span>, <span class="string">'probabilistic'</span>, <span class="string">'data'</span>, <span class="string">'structure'</span>]</div><div class="line">data2 = [<span class="string">'minhash'</span>, <span class="string">'probability'</span>, <span class="string">'data'</span>, <span class="string">'structure'</span>]</div><div class="line">random.shuffle(data2)</div><div class="line">m1, m2 = MinHash(), MinHash()</div><div class="line"><span class="keyword">for</span> d <span class="keyword">in</span> data1:</div><div class="line">    m1.update(d.encode(<span class="string">'utf8'</span>))</div><div class="line"><span class="keyword">for</span> d <span class="keyword">in</span> data2:</div><div class="line">    m2.update(d.encode(<span class="string">'utf8'</span>))</div><div class="line">print(<span class="string">"Estimated Jaccard for data1 and data2 is"</span>, m1.jaccard(m2))</div></pre></td></tr></table></figure></p>
<p>上面是使用方式，同时笔者加了shuffle是为了展示输入/特征顺序不影响结果。<br>可以看到 datasketch 的核心 MinHash代码即是update方法，即如下一段<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, d)</span>:</span></div><div class="line">    hv = self.hashfunc(d)</div><div class="line">    a, b = self.permutations</div><div class="line">    <span class="comment"># print("a %s ,b %s ,hv %s" %(a, b, hv))</span></div><div class="line">    phv = np.bitwise_and((a * hv + b) % _mersenne_prime, np.uint64(_max_hash))</div><div class="line">    self.hashvalues = np.minimum(phv, self.hashvalues)</div><div class="line">    <span class="comment"># print("phv %s self.hashvalues %s " % (phv,self.hashvalues))</span></div></pre></td></tr></table></figure></p>
<p>首先说明下，<strong>datasketch MinHash默认使用128个32-bit整数保存指纹</strong>，上述链接官方列出测试128次置换时精确度和性能俱佳。其次,原代码是输入参数是b，为免于混淆笔者这里改为d。<br>上述代码中 _mersenne_prime是一个梅森质数，为$(1 &lt;&lt; 61) - 1$，用于实现随机置换效果，_max_hash是$(1 &lt;&lt; 32) - 1$，为了控制phv结果32位，hashfunc默认sha1_hash32，为了效果随机。<br>a和b都是一个由128个64位伪随机产生的整数组成的数组（其中a中数皆大于0），因为seed默认是1，所以所有的Minhash产生的a和b是一样的，a/b被用来产生新的随机数实现置换行。<br>这里解释下原理，<br>1）每当特征集的一个特征通过update加入时，hashfunc对其hash得到32位int，<strong>也就是说 datasketch 默认把所有的特征映射到 32位int 的空间里</strong>，也就是一个 $(1 &lt;&lt; 32) - 1$ 维度的向量，还记得上文分析把特征集S1分拆成特征S11和S12运算结果相同吗，这里就是利用这个原理。<br>2）<strong>怎么对 特征 进行运算呢</strong>？即例子中的$h1(S11)、h2(S11)$运算？<br><strong>上述代码里设计 phv 的两行即是，核心的理解就是在这里</strong>了：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(a * hv + b) % _mersenne_prime</div></pre></td></tr></table></figure></p>
<p><strong>是为了产生随机数</strong>，而 np.bitwise_and 保证运算结果在0-_max_hash之间，<strong>需要注意的是a、hv、b都是数组，所以这里的 phv 也是一个128长度的整数组</strong>，我们知道输入d是单个的特征向量，及其类似S11，<strong>只有一位是1，其他都是0</strong>，所以 phv 即是待置换的行的index，也就是说本轮对其置换后求最小位就是 phv（注意phv是128个置换函数产生的128个(不同)结果），即这里就是模拟置换操作，再次执行 $np.minimum(phv, self.hashvalues)$ 就是最终minhash结果了。<br>spark同样也是利用上述原理，<a href="https://github.com/apache/spark/blob/branch-3.0/mllib/src/main/scala/org/apache/spark/ml/feature/MinHashLSH.scala#L59" target="_blank" rel="external">其核心代码如下</a>，不再详述：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Since</span>(<span class="string">"2.1.0"</span>)</div><div class="line"><span class="keyword">override</span> <span class="keyword">protected</span>[ml] <span class="function"><span class="keyword">def</span> <span class="title">hashFunction</span></span>(elems: <span class="type">Vector</span>): <span class="type">Array</span>[<span class="type">Vector</span>] = &#123;</div><div class="line">    require(elems.nonZeroIterator.nonEmpty, <span class="string">"Must have at least 1 non zero entry."</span>)</div><div class="line">    <span class="keyword">val</span> hashValues = randCoefficients.map &#123; <span class="keyword">case</span> (a, b) =&gt;</div><div class="line">      elems.nonZeroIterator.map &#123; <span class="keyword">case</span> (i, _) =&gt;</div><div class="line">        ((<span class="number">1</span>L + i) * a + b) % <span class="type">MinHashLSH</span>.<span class="type">HASH_PRIME</span></div><div class="line">      &#125;.min.toDouble</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> Output vectors of dimension numHashFunctions in SPARK-18450</span></div><div class="line">    hashValues.map(<span class="type">Vectors</span>.dense(_))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="MinHash-LSH"><a href="#MinHash-LSH" class="headerlink" title="MinHash LSH"></a>MinHash LSH</h4><p>上述minhash只是将文档转换为一个指纹，但如何在海量的minhash结果中通过Jaccard相似找到匹配的指纹？毕竟不可能遍历全部指纹去比对，即是否有办法对指纹建立索引呢？<br>这就是MinHash LSH要解决的问题，由于其比minhash本身易理解，故这里只简单介绍下。默认相似度计算是Jaccard相似度，也就是说比如默认选择128次函数运算（置换）得到最终128个元素组成的签名，<strong>我们希望找出有最多下标同且值相等的签名，即该如何在海量数据中建立索引满足这种需求</strong>？实际上使用B树或跳跃表都能实现这个需求，而使用简单的分段（range）的方法+倒排可能是大多数人想到的，即分桶的方法，<strong>MinHash LSH即是使用分桶策略，但是128层桶可能带来太多的比较次数或空间，MinHash LSH提出了一种 band（段）的概念</strong>，一种宽范围的桶，其实理解成区间更易懂，即：<br><em>每个指纹签名向量被分成了几段（band），如果两个向量的其中一个或多个band相同，那么这两个向量就可能就相似度较高</em><br>但这种分桶的方法会带来两种需要考虑的问题：</p>
<ul>
<li>False Positives:<br>相似度很低的两个向量被哈希到同一个桶内</li>
<li>False Negatives:<br>真正足够相似的向量在每一个band上都没有被哈希到同一个桶内</li>
</ul>
<p>对于前者或许可以通过再次比较排除，但是对于后者怎么处理呢？<strong>实际上MinHash LSH算法默认是不要求处理的，即当真相似的向量每一band上都没有被哈希到同一个桶内时，这次查找就失败即不存在匹配相似度的指纹，也即MinHash LSH是一个近似而非精确的查找</strong>。<br>所以MinHash LSH面临的第二个问题是怎么控制 False Negatives（或者False Positives），原论文作者分析了当 band个数为b，每个band内的行数为r，要求指纹相似度是s时，<br>两个指纹签名向量至少有一个band相同的概率为$P(exist)=1-(1-s^r)^b$。<br>对应曲线：<br><img src="/images/minhash-4.png" width="100%"><br>了解到该函数的性质后，我们可以通过计算r,s,b的关系来控制False Positives/False Negatives达到目的。<br>这个方法是针对Jaccard相似度查找的折中方案，但误判率是存在但可控的。<br><strong>这里留两个问题</strong>：<br>1）MinHash LSH删除一个元素时需要哪些操作呢？<br>2）是否可用前一篇文章里的 FST 替代MinHash LSH呢(通过补位和编辑距离)？</p>
<p>其他minhash LSH实现还有：MinHash LSH Forest 支持更少空间和Top-k查询以及MinHash LSH Ensemble修改相似度计算规则，支持基于量而不是Jaccard值，后者要得益于minhash是一个近似count-min sketch，可以估算集合数量。上述可以参考 datasketch <a href="http://ekzhu.com/datasketch/lshforest.html" target="_blank" rel="external">MinHash LSH Forest</a>，具体需要进一步探索。这里提供了一个结合Hyperloglog的minhash实现 <a href="https://arxiv.org/pdf/1710.08436.pdf" target="_blank" rel="external">HyperMinHash: MinHash in LogLog space</a></p>
<h4 id="Simhash"><a href="#Simhash" class="headerlink" title="Simhash"></a>Simhash</h4><p>介绍完minhash，理解simhash就简单了，实际上simhash和minhash有许多类似，Simhash其实也包括simhashing和LSH两部分，即生成指纹签名和指纹查找。只不过simhash指纹生成策略不同，使用海明距离衡量相似度，这也导致其LSH要比Minhash LSH简单些。<br>Simhash的指纹通常默认是64位的，如python simhash即是，这和上文minhash使用128组32位作为指纹不同。对于64位Simhash的海明距离默认在3以内的都可以认为是相关度高的，这也带来一个优势是在分桶的时候只需要分四个桶就能保证相似的指纹必定会至少一个桶是一样的。<br>Simhash接受的输入是默认是特征集（虽然它和minhash一样都可以用k-shingle建立特征集作为输入，但通常是Google论文提供的是文本词语的特征输入），下面看下simhash常规流程：<br>原文档总结很清晰了：<br><img src="/images/simhash.png" width="100%"><br><strong>具体步骤</strong>：<br>1，初始化：f维的向量V置0，f 位的二进制数S置0；<br>2，对每一个特征运算：<br>  1）用hash该特征产生一个f位的签名b。<br>  2）从i=1到f遍历b，计算权重w，默认是1，否则是特征里对应权重。<br>  3）加权：若i位为1，则V的第i个元素加上该特征的权重；否则V的第i个元素减去该特征的权重。<br>3，更新签名：若V的第i个元素大于0，则S的第i位为1，否则为0；<br>4，结束，S即为签名。<br><strong>python simhash实现</strong><br>先看 python simhash 核心的特征运算部分：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_by_features</span><span class="params">(self, features)</span>:</span></div><div class="line">    v = [<span class="number">0</span>] * self.f</div><div class="line">    masks = [<span class="number">1</span> &lt;&lt; i <span class="keyword">for</span> i <span class="keyword">in</span> range(self.f)]</div><div class="line">    <span class="keyword">if</span> isinstance(features, dict):</div><div class="line">        features = features.items()</div><div class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> features:</div><div class="line">        <span class="keyword">if</span> isinstance(f, basestring):</div><div class="line">            h = self.hashfunc(f.encode(<span class="string">'utf-8'</span>))</div><div class="line">            w = <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">assert</span> isinstance(f, collections.Iterable)</div><div class="line">            h = self.hashfunc(f[<span class="number">0</span>].encode(<span class="string">'utf-8'</span>))</div><div class="line">            w = f[<span class="number">1</span>]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.f):</div><div class="line">            v[i] += w <span class="keyword">if</span> h &amp; masks[i] <span class="keyword">else</span> -w</div><div class="line">    binary_str = <span class="string">''</span>.join([<span class="string">'0'</span> <span class="keyword">if</span> i &lt;= <span class="number">0</span> <span class="keyword">else</span> <span class="string">'1'</span> <span class="keyword">for</span> i <span class="keyword">in</span> v[::<span class="number">-1</span>]])</div><div class="line">    self.value = int(binary_str, <span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<p>其中默认是64位结果，hashfunc是对输入进行md5运算并将结果转化为int值，可以看到初始化v，masks，$h &amp; masks[i]$即是用来判断i位是否为1，这里也可以看到如果输入特征集的项不是string的时，必须为collections.Iterable，且第二元素必须为其权重。<br>比如特征向量为文本分词时，设置的权重时候可以是词频即出现次数，或词的本文权重，也可以是使用的词库设置的权重，甚至也可以自定义。<br>需要说明的是这里的特征向量集即features参数长度是不受限制的，不要求64个。<br>python simhash除了上文支持build_by_features之外，默认还支持如下几种构造方式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> isinstance(value, Simhash):</div><div class="line">    self.value = value.value</div><div class="line"><span class="keyword">elif</span> isinstance(value, basestring):</div><div class="line">    self.build_by_text(unicode(value))</div><div class="line"><span class="keyword">elif</span> isinstance(value, collections.Iterable):</div><div class="line">    self.build_by_features(value)</div><div class="line"><span class="keyword">elif</span> isinstance(value, numbers.Integral):</div><div class="line">    self.value = value</div><div class="line"><span class="keyword">else</span>:</div></pre></td></tr></table></figure></p>
<p>其中basestring就是字符串（文本），默认对字符及中文做<a href="https://github.com/leonsim/simhash/blob/master/simhash/__init__.py#L74" target="_blank" rel="external">4-shingle</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_slide</span><span class="params">(self, content, width=<span class="number">4</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> [content[i:i + width] <span class="keyword">for</span> i <span class="keyword">in</span> range(max(len(content) - width + <span class="number">1</span>, <span class="number">1</span>))]</div></pre></td></tr></table></figure></p>
<h4 id="Simhash含义"><a href="#Simhash含义" class="headerlink" title="Simhash含义"></a>Simhash含义</h4><p>笔者并未找到对于Simhash的证明，看论文<a href="http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/33026.pdf" target="_blank" rel="external">作者总结部分 FUTURE EXPLORATIONS</a>似乎准确率是未证明的，<a href="https://en.wikipedia.org/wiki/Locality-sensitive_hashing" target="_blank" rel="external">不过wikipedia上该方法被归类为随机投影(Random projection)</a>一类，随机超平面+余弦距离,$Pr[h(x) = h(y)] = 1 – d(x,y)/\pi$，不过笔者认为这里映射降维时向量之间距离信息变化大小在原文Simhash算法上没有体现出来。<br><a href="http://snap.stanford.edu/class/cs246-2015/slides/04-lsh_theory.pdf" target="_blank" rel="external">这篇名校的课件比较全的介绍LSH/minHash</a>，推荐。<br><strong>Simhash的查找</strong>，如上文所述，simhash默认64位，默认分成的4块，每一块会建立倒排索引，像python simhash使用hashtable/list等存储倒排，分块遍历。</p>
<h4 id="simhash和minhash对比"><a href="#simhash和minhash对比" class="headerlink" title="simhash和minhash对比"></a>simhash和minhash对比</h4><p>Simhash和Minhash都含有LSH的想法，对输入特征信息生成固定长度的指纹，都可以做到对同样两个文档哈希之后保持相似，不同文档哈希后极低概率相似，Simhash采用海明距离计算相似性，而minhash采用Jaccard距离。<br>另外Simhash指纹通常64位，Minhash不限制，不过许多实现是128组32位整数，Minhash查找算法比Simhash复杂些，且有一定的概率误判。<br>Simhash还可以实现用户相似度类似的功能，如上文提到的Google news。</p>
<p>“Simhash用于比较大文本而非小文本”，如果这里的小文本并非指的是短语/句子的话，这种说法其实就不太准确，Simhash和Minshash本身只是对特征向量集进行运算，特征向量才是和文本比较精准度更相关的，比如Simhash和Minhash均可支持k-shingle的运算。</p>
<p>在其他文章里有对Simhash和Minhash判断相似性的准确率高低比较，笔者认为回答这个问题前要先清楚如何定义“相似性”，如果相似只是纯粹的文字/内容上的相似（或者说形似），那么Minhash基于k-shingle的做法更能区分形似。如果是针对那些打乱部分文字/句子先后顺序的，洗稿的，甚至不形似但是用词重合度高的使用 Simhash 更合适。<br>Simhash感觉关注重点在特征的选取上，或许这也是原论文为什么说“Near-Duplicates”。<br>需要指出的是Simhash/Minhash的结果都是不受单个特征的输入先后顺序影响的。</p>
<h2 id="图片相似计算"><a href="#图片相似计算" class="headerlink" title="图片相似计算"></a>图片相似计算</h2><p>前面写的有点多，所以这部分拆出来放在下一篇了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.mmds.org/" target="_blank" rel="external">Jeffrey D. Ullman Anand Rajaraman, Jure Leskovec. 《Mining of massive datasets》</a></li>
<li><a href="https://longaspire.github.io/blog/%E7%9B%B8%E4%BC%BC%E6%80%A7%E5%BA%A6%E9%87%8F%E7%AC%94%E8%AE%B0/" target="_blank" rel="external">相似性度量笔记</a></li>
<li>这篇课件非常推荐<a href="http://snap.stanford.edu/class/cs246-2015/slides/04-lsh_theory.pdf" target="_blank" rel="external">Theory of LSH</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2013/03/cosine_similarity.html" target="_blank" rel="external">TF-IDF与余弦相似性的应用（二）：找出相似文章</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/46164294" target="_blank" rel="external">大规模数据的相似度计算：LSH算法</a></li>
<li><a href="https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/06.03.md" target="_blank" rel="external">July_simhash算法</a></li>
</ul>
<p><strong> 遵循CC协议，转载请标注来源 </strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;i&gt;&lt;strong&gt;intro1&lt;/strong&gt;：文本相似相关的hash方法&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro2&lt;/strong&gt;: LSH、Minhash、Simhash&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro3&lt;/strong&gt;: 基于代码理解minhash/simhash&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;记录笔者的一些思考，在理解minhash、python minhash源码过程中有不理解或有些搜索不到的，或许在这里得到更多的理解。&lt;br&gt;前面文章介绍了常规hash，谈到了抗碰撞/雪崩效应等特性，比如微小的改动能产生不同的hash结果。&lt;br&gt;不过有时候我们期望hash不那么敏感，可以忽略细微的不同，比如一段文字中忽略某些句子顺序，或者忽略几个词的不同，那么有哪些可用的hash方法呢？&lt;br&gt;
    
    </summary>
    
    
      <category term="Minhash" scheme="http://thomaslau.github.io/tags/Minhash/"/>
    
      <category term="SimHash" scheme="http://thomaslau.github.io/tags/SimHash/"/>
    
  </entry>
  
  <entry>
    <title>开发常见的Hash函数（二）-Geohash</title>
    <link href="http://thomaslau.github.io/2020/05/25/2020-05-25-on_hash_2/"/>
    <id>http://thomaslau.github.io/2020/05/25/2020-05-25-on_hash_2/</id>
    <published>2020-05-25T12:59:10.000Z</published>
    <updated>2020-06-21T23:37:24.615Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><i><strong>intro1</strong>：Geohash祛魅</i><br><i><strong>intro2</strong>: Geohash原理及常见运算</i><br><i><strong>intro3</strong>: Geohash与填充曲线/二进制小数/bitHacks</i><br><i><strong>intro4</strong>: Geohash在Lucene/Elasticsearch/Redis等应用</i></p>
</blockquote>
<p>前文介绍数据结构和密码学的哈希函数，本文介绍下带hash的Geohash，即如何把地理空间映射为字符编码。<br>写作本文的时候，笔者发现一篇比较清晰的Geohash/S2之类的介绍，可以移步<a href="https://halfrost.com/go_spatial_search/" target="_blank" rel="external">高效的多维空间点索引算法 — Geohash 和 Google S2</a> ，本文会介绍一些前置知识，并结合示例以及其在Lucene/Elasticearch等的应用。<br><a id="more"></a></p>
<h1 id="距离计算公式"><a href="#距离计算公式" class="headerlink" title="距离计算公式"></a>距离计算公式</h1><p>在了解geohash之前最好先了解通常计算球面距离通常几种方法：<br><strong>1） 欧氏距离</strong><br>即两点直线距离，一般是把球面作欧氏平面坐标两点距离，也可以是空间两点距离，后者计算量会多些。两种做法两点经纬度差距太大的话误差也会很大，高纬度地区有cos校正所以误差也会影响。<br><strong>2）Great-Circle，球面余弦距离公式</strong><br>即球面的一点A出发到达球面上另一点B，所经过的最短路径的长度，也就是大圆劣弧。运用简单的向量空间即可推导球面三角形的余弦公式：cos(c) = cos(a)<em>cos(b)+sin(a)</em>sin(b)<em>cos(C)，或者也可参考美团的 <a href="https://tech.meituan.com/2014/09/05/lucene-distance.html" target="_blank" rel="external">地理空间距离计算优化</a>这篇文章，推导较简单明了，这里不再贴图表示。<br>该结果返回的是最精确弧形长，但复杂三角函数导致较慢。<br><strong>3）Haversine公式，球面半正矢公式</strong><br>Haversine公式用到的就是半正矢定理，曾经在航海测距上被使用过，wikipedia上给出了从余弦定理推到变换方法，不过中文版描述有误，如 theta和varphi混淆了，而且描述的让人误以为 Haversine 是近似距离<br>这里是另外一个证明：<a href="https://mathforum.org/library/drmath/view/51879.html" target="_blank" rel="external">Deriving the Haversine Formula</a>，<br>如果你熟悉球面三角学，可以通过<a href="https://dothinking.github.io/blog/2017/03/08/球面距离与方位角公式的推导-解三角形法.html" target="_blank" rel="external">球面三角基本式得出结论</a>， 这里是纯粹基于<a href="https://dothinking.github.io/blog/2017/03/09/球面距离与方位角公式的推导-向量代数法.html" target="_blank" rel="external">代数向量空间</a>的证明。<br>这里推荐美团的一篇文章 <a href="https://tech.meituan.com/2014/09/05/lucene-distance.html" target="_blank" rel="external">地理空间距离计算优化</a>。<br><strong>4）其他</strong><br>参考这篇文章，<a href="https://www.movable-type.co.uk/scripts/latlong.html" target="_blank" rel="external">Calculate distance, bearing and more between Latitude/Longitude points</a>，笔者用js实现了几种球面距离计算公式，如Haversine可以达到50万/秒次数。<br><em>*5）简单补充下：</em></em><br>1） 上述前三种类型，在Lucene和Spatial4j均有实现，分别对应distVincentyRAD、distLawOfCosinesRAD、distHaversineRAD，在Elasticsearch早期可以指定参数选择距离计算使用 arc(Great-Circle) 、plane(平面距离)、sloppy_arc(Haversine距离)其一，不过最新版arc已经替换为Haversine并作为默认实现，且删除了sloppy_arc这个distance type。<br>redis中使用的是 geohashGetDistance也是Haversine距离距离。<br>2） 上述 <a href="https://tech.meituan.com/2014/09/05/lucene-distance.html" target="_blank" rel="external">美团文章里</a>，<b>作者还提到了基于Haversine性能优化，以及如何通过曲线拟合消除掉cos函数的</b>，代价是精度降低和开销增加。很值得学习 的一个地方是， <b>作者使用org.apache.commons.math3.PolynomialCurveFitter，即多项式拟合来拟合cos这个三角函数，消除了cos函数计算</b> commons.math3本身提供了simple/高斯拟合/多项式拟合，看泰勒级数猜测可能仅3/5次足够。早期cpu fsin之类三角函数指令周期远比乘法大，软件实现由于精度高可能会较为耗时。<br>不过笔者发现Lucene/Elaticsearch都有计算haversine的优化，sin/cos/arcsin等底层都是用SloppyMath的优化策略，误差在0.01毫米，SloppyMath即是参考fdlibm实现的快速三角函数计算，不过同0.7版本已经直接用java math库了。<br>spatial4j源于lucene开发，后来独立出来，但代码还是和lucene同步，不过已经几年没更新了，Lucene还在剥离中更新，故下文主要指Lucene。<br>3）上述计算提到了误差，其实即便Haversine本身计算也是存在误差的，或者说球面余弦计算也会误差，因为地球毕竟不是一个规则的球体，甚至笔者个人觉得距离足够近的话，该结果不如平面距离计算结果精确也可能。所以真实测距可能会借助一些物理手段测量。</p>
<h1 id="Geohash"><a href="#Geohash" class="headerlink" title="Geohash"></a>Geohash</h1><h2 id="geohash起源-省市区县作为编码"><a href="#geohash起源-省市区县作为编码" class="headerlink" title="geohash起源-省市区县作为编码"></a>geohash起源-省市区县作为编码</h2><p>上面几种方法距离计算其实足够快，如果只是几十万的地理位置进行距离计算，可以看到美团给出的性能数据在毫秒级，感觉搜索附近的人时，直接计算距离也是可以的。<br>但<strong>全量计算毕竟浪费巨大，计算东方明珠附近1km景点没有必要拿全国的景点坐标跑一遍，是否存在一种方案避免呢</strong>？<br>显然存在的，比如最简单的我们可以赋予省市属性，这样可以排除上海之外的其他省市。<br>上面这种方法真的不如Geohash吗，或许许多都会提及z阶曲线/皮亚诺曲线等空间填充曲线，但笔者认为单是geohash甚至可以无关这些，因为康托理论/z阶曲线/皮亚诺曲线侧重不仅是一一对应更是可数这个关系，不过考虑到大多文章提及，这里先介绍下前置知识，之后再继续上文思路。</p>
<h2 id="康托集合论及康托其人"><a href="#康托集合论及康托其人" class="headerlink" title="康托集合论及康托其人"></a>康托集合论及康托其人</h2><p>上文二维映射到一维的数学起源于康托集合论，最简单的例子就是集合的元素个数等于子集的元素个数，比如自然数的数量和偶数(&gt;0)的数量是一样多的，虽然大于零的偶数是自然数的子集，二者可以用y=2*x建立映射关系，更神奇的是有理数的数量和自然数的数量也是一样多，康托提供了一种建立对有理数可数的方式，即自然数和有理数映射关系，这里贴一个经典的图：<br><img src="/images/cantor_rec.png" width="100%"><br>按上图用自然数顺序的一直数下去，同时也遍历了所有的有理数。<br><i>康托尔提出，提出了基数(cardinal number)，也叫势(cardinality)的概念，来标记无穷集合的“大小”。两个无穷集合之间如果能够建立一个一一对应关系，就说这两个集合有“相同数目的元素”/有相同的势/有相同的基数。</i><br><strong>借助康托集合论，我们可以推出许多和常识相悖的令人不可思议的结论：<br>比如所有的奇数/偶数/自然数/整数/有理数他们的数量一样多即基数相同；<br>所有的实数和[0,1]区间内的实数有相同的基数；<br>面的数量等同一条边，比如三角形和它的一条边有相同基数。</strong><br>数学经历过无理数/微积分/集合论三大危机，在康托/罗素等之后公理化集合系统得以建立，1900年后步入新世纪，基于康托的集合论更是将当时数学一分为三，形成逻辑主义、形式主义和直觉主义三大学派。<br>笔者认为康托的理论对数学基础的影响不亚于根号2，不说康托集合论是现代数学的基础，但可以说是现代数学正确性的基础，他对无穷的研究不仅是开拓性而且是颠覆性的，现代科学最能与之相比较的就是相对论。<br>或许是数学理论不如物理理论那样可以通过科学的试验证明，康托没有爱因斯坦那样幸运，早期其理论和个人的观点得到许多批判，不乏顶尖的数学家，如当时法国数学届翘楚/庞加莱猜想的提出者/最有可能比爱因斯坦早提出相对论的庞加莱，以及克莱因瓶提出者克莱因。来自导师的攻击和家庭的不和终导致其一度精神崩溃而入院，恢复后，继续工作，但晚年终在病魔交缠中去世。<br>希尔伯特/罗素曾评价他是 <strong>“是数学天才最优秀的作品”，“是人类纯粹智力活动的最高成就之一”，“是这个时代所能夸耀的最巨大的工作”,”19世纪最伟大的智者之一”。</strong><br>康托集合论启发了哥德尔的不完备定理，图灵的停机问题，而这些都是现代编程语言的根基。</p>
<h2 id="那么需要Geohash的理由是什么？"><a href="#那么需要Geohash的理由是什么？" class="headerlink" title="那么需要Geohash的理由是什么？"></a>那么需要Geohash的理由是什么？</h2><p>接上文，上述地标的方案问题在于需要不存地标信息而且存在边界点问题，所以换种思路，是否可以根据经纬度来呢？<br>比如画一个正方形，即根据距离和中央点经纬度，我们计算这个正方形的左上角和右下角，即满足条件的点的 经度和纬度的范围(组成一个正方形)，筛选出点之后再计算距离。<br>这样不需要地标信息，比如在数据库可以通过 WHERE (经度 BETWEEN a AND b) AND (维度 BETWEEN m AND n))筛选即可。<br>那么有办法通过一种编码快速做到类似功能吗？该功能非常有用，因为早期Lucene/Elasticsearch对于数字尤其是double其实非常不适合做区间查询（下文会介绍下）。</p>
<h2 id="Geohash-1"><a href="#Geohash-1" class="headerlink" title="Geohash"></a>Geohash</h2><p>看Wikipedia介绍<a href="https://wikimili.com/en/Geohash" target="_blank" rel="external">Geohash</a>:<br><em>Geohash is a public domain geocode system invented in 2008 by Gustavo Niemeyer and (similar work in 1966) G.M. Morton</em>。<br>Geohash 2008年为Gustavo发明，但1966年<strong>Morton提出了<a href="https://en.wikipedia.org/wiki/Z-order_curve" target="_blank" rel="external">Z-order</a>编码后来以他的名字命名</strong>，Geohash即是Morton码的一个现实应用，而莫顿码(Morton code)最初则是为了将二维(或者多维)坐标转换为一维，如两个坐标数的各个位交叉的产生一个新数就是莫顿码，这样的数据不仅适合存储压缩，而且使用一维数据的各种(tree/list)等查找方法。 比如一些<a href="https://malagis.com/encoded-raster-data-storage.html" target="_blank" rel="external">删格数据就是用moton码</a>，如地理位置/图像等。<br>这类编码涉及到空间填充的问题，<strong>早在1890年，皮亚诺(Giuseppe Peano)就描述了一种填满一个正方形的曲线的方法，对应曲线叫皮亚诺曲线</strong>，<a href="https://en.wikipedia.org/wiki/Peano_curve" target="_blank" rel="external">Peano curve</a>，<a href="https://onlinemathtools.com/generate-z-order-curve" target="_blank" rel="external">这里链接在线看皮亚诺曲线生成</a>。<br>希尔伯特提出了皮亚诺曲线的变种，希尔伯特曲线，<a href="https://en.wikipedia.org/wiki/Hilbert_curve" target="_blank" rel="external">Hilbert curve</a>。Peano变种许多，而后者以简单明了流传，有意思的是Peano特长在发展布尔的符号逻辑系统，奠定现代符号逻辑学。<br><strong>Z-order 曲线</strong>，在Wikipedia上称之为<a href="https://en.wikipedia.org/wiki/Z-order_curve" target="_blank" rel="external">Z-order curve</a>，以此来区分基因分析里的<a href="https://en.wikipedia.org/wiki/Z_curve" target="_blank" rel="external">Z curve</a>，中文z阶曲线、z填充曲线等，这篇文章有介绍 Z-Order/皮亚诺/希尔伯特等曲线：<a href="https://halfrost.com/go_spatial_search/" target="_blank" rel="external">高效的多维空间点索引算法 — Geohash 和 Google S2</a> 。<br>像上述的空间曲线，分形几何相关研究出了许多有趣的结论，如对皮亚诺曲线科赫曲线的研究就有数学家写出“英国的海岸线有多长”的论文，在代数系统里他们属于实分析的分支测度论，比如除了皮亚诺迭代方法可以构造皮亚诺曲线之外，Z-order/希尔伯特等曲线都可找到对应构造方法。<br>真实的皮亚诺/希尔伯特曲线其实是一套符号系统描述的，非常抽象，但是得益于数学家天才想法，我们还是能通过图形感知这类曲线，这里感受下 Z-order填线：<br><img src="/images/z-order-1.png" width="100%"><br>我们也可以从上文观察到Z-order曲线编码的突变性。<br>GeoHash vs Z-order curve<br><img src="/images/z-order-2.png" width="100%"></p>
<h2 id="GeoHash的运算"><a href="#GeoHash的运算" class="headerlink" title="GeoHash的运算"></a>GeoHash的运算</h2><h3 id="二进制小数"><a href="#二进制小数" class="headerlink" title="二进制小数"></a>二进制小数</h3><p><img src="/images/geohash_err.png" width="100%"><br>大多数文章介绍geohash编码方法时都会用类似上面图举例Geohash如何编码的，实际上Lucene依赖的Spatial4j组件现在却是还是通过一个while循环这么计算的，不过有其他简单的理解，<strong>因为这个过程其实就是像一个十进制小数转化为二进制表示</strong>，比如 123.41555/180=0.6856419444，而0.6856419444小数二进制表示正是 (0.1010111110000110001110110000001)2，即类似<a href="https://en.wikipedia.org/wiki/Moser%E2%80%93de_Bruijn_sequence" target="_blank" rel="external">二进制小数编码并移位</a>，因为Z阶曲线或许就采用了康托常用的二进制小数手段。<br>新版的Lucene的GeoEncodingUtils和Elasticsearch的Geohash就是这个原理去编码的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">encodeLatitude</span><span class="params">(<span class="keyword">double</span> latitude)</span> </span>&#123;</div><div class="line">  checkLatitude(latitude);</div><div class="line">  <span class="comment">// the maximum possible value cannot be encoded without overflow</span></div><div class="line">  <span class="keyword">if</span> (latitude == <span class="number">90.0</span>D) &#123;</div><div class="line">    latitude = Math.nextDown(latitude);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> (<span class="keyword">int</span>) Math.floor(latitude / LAT_DECODE);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上式中：LAT_DECODE = 1/((0x1L&lt;&lt;32)/180.0D)。<br>因为long是64位，所以经纬度各分32位，上面式子其实可化为 return (int) Math.floor(Math.pow(2, 31)*(latitude/180.0D))，纬度因为是在 (-90,90) 之间，所以是除以180，经度除以90。<br>Redis中的geohashEncode也是用这个方法把经纬度编码成32/64位int的。<br>那么这里你是否也理解了下图中geohash位数带来的误差呢？<br><strong>Digits and precision in km</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">geohash length</th>
<th style="text-align:center">lat bits</th>
<th style="text-align:center">lng bits</th>
<th style="text-align:center">lat error</th>
<th style="text-align:center">lng error</th>
<th style="text-align:center">km error</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">±23</td>
<td style="text-align:center">±23</td>
<td style="text-align:center"> ±2500</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">5</td>
<td style="text-align:center">5</td>
<td style="text-align:center"> ±2.8</td>
<td style="text-align:center"> ±5.6</td>
<td style="text-align:center"> ±630</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">7</td>
<td style="text-align:center">8</td>
<td style="text-align:center"> ±0.70</td>
<td style="text-align:center"> ±0.70</td>
<td style="text-align:center">  ±78</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">10</td>
<td style="text-align:center">10</td>
<td style="text-align:center"> ±0.087</td>
<td style="text-align:center"> ±0.18</td>
<td style="text-align:center">  ±20</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">12</td>
<td style="text-align:center">13</td>
<td style="text-align:center"> ±0.022</td>
<td style="text-align:center"> ±0.022</td>
<td style="text-align:center">   ±2.4</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">15</td>
<td style="text-align:center">15</td>
<td style="text-align:center"> ±0.0027</td>
<td style="text-align:center"> ±0.0055</td>
<td style="text-align:center">   ±0.61</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">17</td>
<td style="text-align:center">18</td>
<td style="text-align:center"> ±0.00068</td>
<td style="text-align:center"> ±0.00068</td>
<td style="text-align:center">   ±0.076</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">20</td>
<td style="text-align:center">20</td>
<td style="text-align:center"> ±0.000085</td>
<td style="text-align:center"> ±0.00017</td>
<td style="text-align:center">   ±0.019</td>
</tr>
</tbody>
</table>
<p>“纬度每相差一度是111.2公里,经度则不同,赤道上经度每相差一度则相距111.2公里,北纬30度则是111.2乘以2分之根号3,北纬45度则是111.2乘以2分之根号2”，geohash长度为1时，纬度占两位，也就是 90/pow(2,2)*111=2500 公里，经度是 也就是 180/pow(2,3)*111=2500 公里，这点和上面度数差类似。<br>同时我们也可以看到这个图没有说明的是经度差其实并不准确，因为没有考虑高低纬度时各自的1经度距离差是不一样的。<br>另外，如果你看过上文链接的文章，即<a href="https://tech.meituan.com/2014/09/02/solr-spatial-search.html" target="_blank" rel="external">Solr空间搜索原理分析与实践</a>，这里提一下，<strong>该文章里41.79452,123.41555，对应的geohash是wxrvb2kqexu，这是一个错误，应该是 wxrvb2kqwz0</strong>。</p>
<h3 id="Geohash的Base32编码"><a href="#Geohash的Base32编码" class="headerlink" title="Geohash的Base32编码"></a>Geohash的Base32编码</h3><p>正如你在wikiedia或文章开头文章看到的Geohash是base32编码的，但是却不能用标准的RFC定义的标准Base32解码，最简单一点是GeoHash 基准字符和顺序是“0123456789bcdefghjkmnpqrstuvwxyz”，去掉了容易混淆的 a/i/l/o四个字符，可以看<a href="https://github.com/elastic/elasticsearch/blob/7.8/libs/geo/src/main/java/org/elasticsearch/geometry/utils/Geohash.java" target="_blank" rel="external">ES里的编码</a>，而<a href="https://de.wikipedia.org/wiki/Base32" target="_blank" rel="external">标准base 32</a> 的基准字符和顺序是”ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=”，其中后者的=是填充字符，base32还可以共用base64的码表，标准base32基于<a href="https://tools.ietf.org/html/rfc4648#page-8" target="_blank" rel="external">RFC 3548/RFC 4648</a>。<br>所以标准base32 是不能解码geohash的base32的。</p>
<h3 id="Morton编码的技巧"><a href="#Morton编码的技巧" class="headerlink" title="Morton编码的技巧"></a>Morton编码的技巧</h3><p>将经纬度化为二进制后怎么进行morton编码呢？正如上文把经纬度转换成两个32位int后如何将他们合并分散到奇偶位上成为一个morton码？<br>在Redis和Elasticsearch的代码里均可以找到类似代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MAGIC[] = &#123;</div><div class="line">        <span class="number">0x5555555555555555L</span>, <span class="number">0x3333333333333333L</span>,</div><div class="line">        <span class="number">0x0F0F0F0F0F0F0F0FL</span>, <span class="number">0x00FF00FF00FF00FFL</span>,</div><div class="line">        <span class="number">0x0000FFFF0000FFFFL</span>, <span class="number">0x00000000FFFFFFFFL</span>,</div><div class="line">        <span class="number">0xAAAAAAAAAAAAAAAAL</span></div><div class="line">    &#125;;</div><div class="line"><span class="comment">// shift values for bit interleaving</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">short</span> SHIFT[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>&#125;;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">interleave</span><span class="params">(<span class="keyword">int</span> even, <span class="keyword">int</span> odd)</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span> v1 = <span class="number">0x00000000FFFFFFFFL</span> &amp; even;</div><div class="line">    <span class="keyword">long</span> v2 = <span class="number">0x00000000FFFFFFFFL</span> &amp; odd;</div><div class="line">    v1 = (v1 | (v1 &lt;&lt; SHIFT[<span class="number">4</span>])) &amp; MAGIC[<span class="number">4</span>];</div><div class="line">    v1 = (v1 | (v1 &lt;&lt; SHIFT[<span class="number">3</span>])) &amp; MAGIC[<span class="number">3</span>];</div><div class="line">    v1 = (v1 | (v1 &lt;&lt; SHIFT[<span class="number">2</span>])) &amp; MAGIC[<span class="number">2</span>];</div><div class="line">    v1 = (v1 | (v1 &lt;&lt; SHIFT[<span class="number">1</span>])) &amp; MAGIC[<span class="number">1</span>];</div><div class="line">    v1 = (v1 | (v1 &lt;&lt; SHIFT[<span class="number">0</span>])) &amp; MAGIC[<span class="number">0</span>];</div><div class="line">    v2 = (v2 | (v2 &lt;&lt; SHIFT[<span class="number">4</span>])) &amp; MAGIC[<span class="number">4</span>];</div><div class="line">    v2 = (v2 | (v2 &lt;&lt; SHIFT[<span class="number">3</span>])) &amp; MAGIC[<span class="number">3</span>];</div><div class="line">    v2 = (v2 | (v2 &lt;&lt; SHIFT[<span class="number">2</span>])) &amp; MAGIC[<span class="number">2</span>];</div><div class="line">    v2 = (v2 | (v2 &lt;&lt; SHIFT[<span class="number">1</span>])) &amp; MAGIC[<span class="number">1</span>];</div><div class="line">    v2 = (v2 | (v2 &lt;&lt; SHIFT[<span class="number">0</span>])) &amp; MAGIC[<span class="number">0</span>];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (v2&lt;&lt;<span class="number">1</span>) | v1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里通过简单的移位且或操作把两个32位的int按奇偶打散成一个64位的long，还是慢神奇的。<br>这里的hack技巧来自于 <strong><a href="https://graphics.stanford.edu/~seander/bithacks.html#InterleaveBMN" target="_blank" rel="external">Bit Twiddling Hacks
</a>这个神奇的网站</strong>，正如题所述关于bit操作技巧大全，从最简单的奇偶判定、n位置1、最右的1置0、1数量等，可以说非常的全了，笔者大学时在读完由微软亚洲研究院的程序员集体创作出的《编程之美》这本书曾惊叹其中的位操作技巧，但看到这个网站还是大开眼界的。</p>
<h3 id="Geohash的neighbor"><a href="#Geohash的neighbor" class="headerlink" title="Geohash的neighbor"></a>Geohash的neighbor</h3><p>需要说明的是，Lucene在使用BKDTree之后，这部分功能其实已经没有用了，因为早期采用prefix tree方式，如GeohashprefixTree，而且可能其他系统实现依旧是前缀树，所以这里简介下。<br>Elasticearch还是可以找到的，geohash模式可能还可以用，<a href="https://github.com/elastic/elasticsearch/blob/7.8/libs/geo/src/main/java/org/elasticsearch/geometry/utils/Geohash.java#L140" target="_blank" rel="external">代码</a>。<br>如上文Z-order曲线突变性，以及九宫格解决边界问题，所以需要正确的找到某geohash的邻居，或者说，怎么根据 距离差选择合适的geohash进行搜索？<br>这里可以看到redis通过经纬度获取周围8个neighbors后再通过矩形经纬度筛选，<a href="https://github.com/antirez/redis/blob/6.0/src/geo.c#L326" target="_blank" rel="external">membersOfAllNeighbors</a>，在该过程后还会再排序。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">membersOfAllNeighbors</span><span class="params">(robj *zobj, GeoHashRadius n, <span class="keyword">double</span> lon, <span class="keyword">double</span> lat, <span class="keyword">double</span> radius, geoArray *ga)</span> </span>&#123;</div><div class="line">    GeoHashBits neighbors[<span class="number">9</span>];</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i, count = <span class="number">0</span>, last_processed = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> debugmsg = <span class="number">0</span>;</div><div class="line">    neighbors[<span class="number">0</span>] = n.hash;</div><div class="line">    neighbors[<span class="number">1</span>] = n.neighbors.north;</div><div class="line">    neighbors[<span class="number">2</span>] = n.neighbors.south;</div><div class="line">    neighbors[<span class="number">3</span>] = n.neighbors.east;</div><div class="line">    neighbors[<span class="number">4</span>] = n.neighbors.west;</div><div class="line">    neighbors[<span class="number">5</span>] = n.neighbors.north_east;</div><div class="line">    neighbors[<span class="number">6</span>] = n.neighbors.north_west;</div><div class="line">    neighbors[<span class="number">7</span>] = n.neighbors.south_east;</div><div class="line">    neighbors[<span class="number">8</span>] = n.neighbors.south_west;</div><div class="line"></div><div class="line">    <span class="comment">/* For each neighbor (*and* our own hashbox), get all the matching</span></div><div class="line">     * members and add them to the potential result list. */</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(neighbors) / <span class="keyword">sizeof</span>(*neighbors); i++) &#123;</div><div class="line">        <span class="keyword">if</span> (HASHISZERO(neighbors[i])) &#123;</div><div class="line">            <span class="keyword">if</span> (debugmsg) D(<span class="string">"neighbors[%d] is zero"</span>,i);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/* Debugging info. */</span></div><div class="line">        <span class="keyword">if</span> (debugmsg) &#123;</div><div class="line">            ....</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (last_processed &amp;&amp;</div><div class="line">            neighbors[i].bits == neighbors[last_processed].bits &amp;&amp;</div><div class="line">            neighbors[i].step == neighbors[last_processed].step)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (debugmsg)</div><div class="line">                D(<span class="string">"Skipping processing of %d, same as previous\n"</span>,i);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        count += membersOfGeoHashBox(zobj, neighbors[i], ga, lon, lat, radius);</div><div class="line">        last_processed = i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ES的获取neighbor方法笔者尚未看，似乎用的是尾递归遍历筛选，但如果利用前文所述二进制应该会简单些，redis就是类似的做法。<br>同样，也可以看到其实geohash前缀/neighbor方法还是比较粗糙的，比如误差其实还可以考虑乘以cos角，但也可能复杂了，不过上述已经比前文计算全部的距离可以大大缩减了。<br>像geohashprefixtree就是利用 通常geohash字符串的公共前缀的长度越长，这两个点距离越近（除了突变），反之未必。但其实并不那么适合二维，geohash最好仅用作编码，数据结构可以独立，像lucene提供的quadtree或者bkdtree之类。<br>所以个人认为，美团技术那几篇文章需要更新了，或者基于solr的实现可以更新了。</p>
<h1 id="Geoash常见系统的实现"><a href="#Geoash常见系统的实现" class="headerlink" title="Geoash常见系统的实现"></a>Geoash常见系统的实现</h1><p>上面列出了geohash转换相关知识，那么geohash时怎么被使用呢？</p>
<h2 id="Redis-geo"><a href="#Redis-geo" class="headerlink" title="Redis geo"></a>Redis geo</h2><p>Redis geo提供了几个命令，支持根据位置计算距离，根据某地标或者经纬度计算附近的地标，如详细参考<a href="https://redis.io/commands/georadius" target="_blank" rel="external">georadius</a>。<br>使用redis的问题显而易见，一个完全的单热点，地理坐标信息全部放在一个zset 集合中，而且redis又是单线程，不适合大量的地标数据和大量访问。<br>所以通常不推荐redis做地理位置geohash查询的原因，但是如果你的数十几万以内完全可以使用，不过作为选择也可以试试下面的Mysql方案。</p>
<h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><p>最简单的是在mysql中用经纬度直接计算出球面/平面距离作为一列并排序，这个计算可以复杂如三角函数/开根号或优化近似，但大量计算或扫描/加载是不可避免的，量大时性能远不如上文矩形块经纬度作between查询。<br>不过Mysql有官方实现版本，叫MySQL Spatial Extensions，<a href="https://www.mysqlzh.com/doc/174.html" target="_blank" rel="external">Mysql的空间扩展</a>，他是一个OpenGIS的实现，可以用来进行实体、空间、位置的计算，对于从事GIS行业的很有用，比如Mysql的<a href="https://www.mysqlzh.com/doc/175/141.html" target="_blank" rel="external">geometry定义/geo函数/WKT/WKB</a>值得一看。<br>其中（如下是基于mysql 5.7之后）：<br>1）对于两点的距离计算，即两点间的欧氏直线距离(非球面)，Mysql的空间扩展提供了 ST_Length 函数。<br>2）对于经纬度作between的方法，即矩形包含关系的，Mysql的空间扩展提供了一个MBRContains(g1, g2)函数，用于测试g1和的两个几何的<a href="https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html" target="_blank" rel="external">最小边界矩形（MBR）之间的关系g2</a>。<br>如下，表示loc_point这一列的点数据是否包含在 (lat,lng)这个点附近r公里的矩形内，其中address_point列是SPATIAL/POINT类型，即Geometry，它包含了Point、Curve、LineString、Surface和GeometryCollection几类空间图形，111.12是地球每1纬度的距离是111.12千米，r单位是千米，Polygon即是逆时针点描述的矩形。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">WHERE MBRContains(</div><div class="line">    ST_GeomFromText('Polygon((</div><div class="line">        lat-r/(111.12/COS(RADIANS(lng))) lng-r/111.12,</div><div class="line">        lat-r/(111.12/COS(RADIANS(lng))) lng+r/111.12,</div><div class="line">        lat+r/(111.12/COS(RADIANS(lng))) lng+r/111.12,</div><div class="line">        lat+r/(111.12/COS(RADIANS(lng))) lng-r/111.12,</div><div class="line">        lat-r/(111.12/COS(RADIANS(lng))) lng-r/111.12  </div><div class="line">    ))')</div><div class="line">    loc_point</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>函数MBRContains的性能显然比distnce快速，而且和前文的geohash前缀查询可比，因为其使用了R树索引，但显然也受Mysql本身性能限制。<br><strong><a href="https://dev.mysql.com/doc/refman/5.7/en/spatial-function-reference.html" target="_blank" rel="external">mysql还提供其他丰富的gis/图形位置关系的函数</a>。</strong></p>
<h2 id="Lucene和Elasticsearch里的Geohash"><a href="#Lucene和Elasticsearch里的Geohash" class="headerlink" title="Lucene和Elasticsearch里的Geohash"></a>Lucene和Elasticsearch里的Geohash</h2><h3 id="被放弃的PrefixTree"><a href="#被放弃的PrefixTree" class="headerlink" title="被放弃的PrefixTree"></a>被放弃的PrefixTree</h3><p>上文大多基于Lucene和Elasticsarch分析geohash，所以这里不再具体展开geohash，不过需要指出的是：<strong>Lucene已经计划删除GeohashPrefixTree了</strong><br>Elasticsarch早期使用的就Lucene提供的PrefixTree（GeohashPrefixTree/QuadPrefixTree），可以通过 tree：geohash/quadtree来指定，但是不仅操作复杂而且容易带来<a href="https://github.com/elastic/elasticsearch/issues/22087" target="_blank" rel="external">性能问题</a>，<br>所以prefix tree 6.6就已经全面停止支持了 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-shape.html" target="_blank" rel="external">并预计移除</a> ，因为后面引入了新的地理图形索引：<a href="https://www.elastic.co/cn/blog/bkd-backed-geo-shapes-in-elasticsearch-precision-efficiency-speed" target="_blank" rel="external">BKD Tree</a>，其对于LatLonPoint类型索引，经纬度还是按照Z-order编码，只是会转换成一个可比较的8字节数组 intToSortableBytes作为这个document的fieldsData，构造LatLonPointDistanceQuery查询的时候，根据距离计算出一个矩形，即整个过程不再有morton编码了。</p>
<h3 id="prefix-tree-存在的问题"><a href="#prefix-tree-存在的问题" class="headerlink" title="prefix tree 存在的问题"></a>prefix tree 存在的问题</h3><p>在Elasticsearch 2.2之前，geo-point查询是无法直接对应倒排索引的，geo-point本身是作为string或number保存下来，不管是geohashprefixtree还是quadprefixtree，一次典型的geo-point会分为两步(two-phase)，通过geohash前缀或numer范围查询到相关区域(大概像geohash邻居)，然后通过这些区域(token)去倒排索引中再次查询，quad只是比geohash精确些。<br>Lucene在随着FST后，<a href="https://issues.apache.org/jira/browse/LUCENE-3030" target="_blank" rel="external">Block tree逐渐改进</a>，到了<a href="https://issues.apache.org/jira/browse/LUCENE-6477" target="_blank" rel="external">Lucene 5.6 KD Tree</a><a href="https://www.elastic.co/cn/blog/supercharging-geopoint" target="_blank" rel="external">正式推广</a>，</p>
<h3 id="Lucene早期数字范围搜索问题"><a href="#Lucene早期数字范围搜索问题" class="headerlink" title="Lucene早期数字范围搜索问题"></a>Lucene早期数字范围搜索问题</h3><p>Lucene早期对数字类型字段(Numberic)检索时本质上是作为字符，数字被转化为适合排序和适合trie的结构建立索引，范围查询时从trie得可以得到适合前缀的term再进行查询，该方式可以避免补位或者遍历区间所有数的方式查询，但这些float/double转换后的int/long不是没有问题，虽然或许能保持有序但足够大的时候相差为的两个float可能会被转化为相等的int。<br>数字类型直到<a href="https://issues.apache.org/jira/browse/LUCENE-6477" target="_blank" rel="external">Lucene 6.0的BKD tree(elasticsarch似乎5.x即2.4后)</a>才得到进一步优化，<a href="https://www.elastic.co/cn/blog/lucene-points-6.0" target="_blank" rel="external">大幅性能提升</a>。</p>
<h3 id="Lucene改进-FST-vs-BKD-tree"><a href="#Lucene改进-FST-vs-BKD-tree" class="headerlink" title="Lucene改进 FST vs BKD-tree"></a>Lucene改进 FST vs BKD-tree</h3><p>trie树可以实现前缀树和后缀树，前缀树较常见，常用与分词和字符串查询，像Lucene中DoubleArrayXX的也是，像Lucene实现的FST（Finite State Transducer）理论上像是一种前缀trie（官方自称<a href="http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.18.3499" target="_blank" rel="external">burst trie</a>），<br>这或许也是为什么FST不能直接查询子串(不含分词)或通配符不能用于第一个，子串查询需要使用通配符或正则式模式查询。<br>但FST类似FSM（FSA/FSM有穷状态自动机，其他如DFA/NFA）， 作者自述其实是基于<a href="http://www.cs.nyu.edu/~mohri/pub/fla.pdf" target="_blank" rel="external">Weighted Finite-State Transducer</a>，比较深奥，我们比较常见的实现状态机使用的是trie图，如国内某款分词器在用的大名鼎鼎的AC自动机算法（用于字符多模式匹配的）即是trie的实现（基于trie图进行KMP匹配），这种trie图对树前缀或后缀压缩，可以较少的内存保留较多的字典信息同时，查询次数可以保持在O(1)即字符串长度。</p>
<p><strong>所以FST具备速度快/压缩了空间，FST使得加载到内存完全可以没有索引的词，尤其是英文，所以4.0开始，FST成为重要的数据结构</strong>，影响后续功能的实现，如正排文件存储部分改动面向FST，(BlockTreeTerms类实现)加入了FST的信息和格式，term聚合到block不再是随即而是按前缀聚合…所以阅读源码最好在4.x之后，比如最主要的Term Dictionary的tim/tix/tip等文件。<br>但如果你看到 ”xx版本后倒排索引实现为FST tree“或者“xx开始大量使用的数据结构是FST”，笔者认为是较模棱两可的。倒排索引是Lucene的核心之一(basic data structure)，是一种设计思想，Lucene后来引入了BKD tree新的方式进行geo_shape查询，<a href="https://www.elastic.co/cn/blog/bkd-backed-geo-shapes-in-elasticsearch-precision-efficiency-speed" target="_blank" rel="external">在此之前倒排索引是唯一</a>，的skip list也算一种算法/数据结构，早期Lucene可能用了DefaultSkipListWriter的实现，4.0之后抛弃该类并加入FST同时后续版本也逐渐设计/改进新的skiplist实现，像各个版本产生了各种postings的(writer/reader)，我们常看到Lucene40/50/60/80之类版本好命名的包/writer类/reader类，一般对应索引读写格式的变化，但都存在扩展MultiLevelSkipListWriter/Reader这个存在很久的抽象类的类。<br>比如7.4版本<strong>Lucene50PostingsFormat的BlockTreeTermsWriter在写词典/词索引(Terms Dictionary/index)到tim/tip文件时，就用到了Lucene50PostingsWriter</strong>，其内部即是Lucene50SkipWriter，即MultiLevelSkipListWriter 负责根据block的信息写入skiplist，<a href="https://lucene.apache.org/core/8_0_0//core/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.html" target="_blank" rel="external">BlockTreeTermsWriter</a>本身会写 .tim(Term Dictionary)和.tip(Term Index)文件，后者用来构建FST，前者用来将FST和postings倒排信息关联，FST拿到的 BlockTermState 信息通过reader的postings定位document，当Disjunction的时候BlockDocsEnum的skip就可能是Lucene50SkipReader实现(doc/pos/payload)，也可以看到其他不同的skiplist实现或相关基于skiplist提供功能的，如ParallelPostingsArray，lucene近20年历史，个人觉得看起来可能会比较跳跃。<br>elasticsearch的suggest就是基于Lucene的suggest(基于FST)，<a href="https://www.elastic.co/cn/blog/you-complete-me" target="_blank" rel="external">只不过elasticsearch不是在查询而是在建立索引时就基于segment建立</a>。<br>不过虽然是一个FSA，FST应该还不能用来实现RegexQuery/Fuzzyquery查询，一个简单的例子是“.*abc+”这样的regex查询，不过<strong>Lucene正则查询的确使用到了FST</strong>，其添加了自动机（Automaton，FSA/DFA）相关实现，blocktree匹配的时候会分SegmentTermsEnum、IntersectTermsEnum等，后者用于fuzzy/regex查找，AutomatonTermsEnum用于遍历，虽然如IntersectTermsEnum代码所示，正则查询也是依赖FST实现，而且据说速度提高百倍<a href="http://blog.mikemccandless.com/2011/03/lucenes-fuzzyquery-is-100-times-faster.html" target="_blank" rel="external">Lucene’s FuzzyQuery is 100 times faster in 4.0</a>。<br>另外，Lucene的term index，term dictionary等大多数都是pos/docid/skip这种int/long类型数据建立关联，这也是为什么lucene比较青睐对int/long进行压缩。</p>
<h2 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h2><p>1）elasticsearch支持基于 geo_point/geo_shape 的查询，官方文档好懂，DSL使用起来非常容易。<br>其地理操作目前支持gis主要常见图形和操作，如geo_bounding_box、geo_distance、geo_distance_range、geo_polygon，但语法似乎和geojson有点差别。<br>2）对于geo_point/geo_shape，提醒一个注意点，Lucene/Elasticsearch接受point定义的多边形时，要求point不交叉，否则构成图形会有问题，这一点要注意。除此外，Lucene似乎未定义多边形点的输入顺序，像其他系统可能要求point的输入必须是逆时针顺序，笔者之前不明白原因，现在想到了，因为在球面上点围成的图形其实是两个，内和外，所以建议最好也逆时针输入。</p>
<p><i>计划继续写Google S2和Uber以及Lucene的BKDtree，限于时间仅写到这，不过推荐一篇<a href="https://github.com/halfrost/Halfrost-Field/blob/master/contents/Go/go_s2_regionCoverer.md" target="_blank" rel="external">Google S2 是如何解决空间覆盖最优解问题的</a>。<br>最后，推荐网站在线看全球geohash编码的，因某地图需要翻墙，这里最后贴个图看下世界和中国的geohash效果：</i><br><img src="/images/geohash-world.png" width="100%"><br><img src="/images/geohash-china.png" width="100%"><br><strong> 遵循CC协议，转载请标注来源 </strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;i&gt;&lt;strong&gt;intro1&lt;/strong&gt;：Geohash祛魅&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro2&lt;/strong&gt;: Geohash原理及常见运算&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro3&lt;/strong&gt;: Geohash与填充曲线/二进制小数/bitHacks&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro4&lt;/strong&gt;: Geohash在Lucene/Elasticsearch/Redis等应用&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前文介绍数据结构和密码学的哈希函数，本文介绍下带hash的Geohash，即如何把地理空间映射为字符编码。&lt;br&gt;写作本文的时候，笔者发现一篇比较清晰的Geohash/S2之类的介绍，可以移步&lt;a href=&quot;https://halfrost.com/go_spatial_search/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;高效的多维空间点索引算法 — Geohash 和 Google S2&lt;/a&gt; ，本文会介绍一些前置知识，并结合示例以及其在Lucene/Elasticearch等的应用。&lt;br&gt;
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://thomaslau.github.io/tags/Elasticsearch/"/>
    
      <category term="Lucene" scheme="http://thomaslau.github.io/tags/Lucene/"/>
    
      <category term="geohash" scheme="http://thomaslau.github.io/tags/geohash/"/>
    
  </entry>
  
  <entry>
    <title>开发中常见的一些Hash函数（一）</title>
    <link href="http://thomaslau.github.io/2020/05/20/2020-05-20-on_hash_1/"/>
    <id>http://thomaslau.github.io/2020/05/20/2020-05-20-on_hash_1/</id>
    <published>2020-05-20T12:59:10.000Z</published>
    <updated>2020-06-03T04:40:21.943Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><i><strong>intro1</strong>：常见hash函数及使用场景</i><br><i><strong>intro2</strong>: Java hashCode实现相关/为何计算hash时选择31/33相乘</i><br><i><strong>intro3</strong>: Redis哈希表装载因子为何大于1，而非Java的0.75</i><br><i><strong>intro4</strong>: 新hashmap实现为何要8个冲突才升级红黑树</i><br><i><strong>intro5</strong>: 一致性哈希是否真的有用</i></p>
</blockquote>
<p>在写前一篇博文时，发现Redis上的一个hash函数相关的commit：<a href="https://github.com/antirez/redis/commit/adeed29a99dcd0efdbfe4dbd5da74e7b01966c67" target="_blank" rel="external">Use SipHash</a>，于是笔者想到总结下开发中经常遇到的哈希函数，本篇为第一部分，介绍常见hash算法、java 的hash应用，以及hash对应的数据结构在Java/Redis使用，后续介绍广义的hash，如GeoHash，LSH的Simhash/minHash，以及笔者曾在比较相近图片时用到的hash，同GeoHash还会介绍下Google S2/Uber H3编码。<br><a id="more"></a></p>
<h2 id="什么是Hash函数"><a href="#什么是Hash函数" class="headerlink" title="什么是Hash函数"></a>什么是Hash函数</h2><p>说到哈希函数，大家最熟悉的就是MD5，早期下载工具甚至附带md5校验，那么他具体是什么呢？<br>我们看wikipedia上一个非数学的版本的解释<br><em><strong>散列函数</strong>（Hash function）又称散列算法、哈希函数，是一种从任何一种数据中创建小的数字“指纹”的方法。散列函数把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来。该函数将数据打乱混合，重新创建一个叫做散列值（hash values，hash codes，hash sums，或hashes）的指纹。散列值通常用一个短的随机字母和数字组成的字符串来代表。好的散列函数在输入域中很少出现散列冲突。在散列表和数据处理中，不抑制冲突来区别数据，会使得数据库记录更难找到。</em></p>
<p>Hash function推荐译为散列函数，其本质是一种单向散列函数(one-way hash function)，从上述定义看到，好的散列函数通常具备几个特点：</p>
<ul>
<li>单向性(One-way)<br>输出确定，且无法逆推出源数据。这也是单向散列函数定义</li>
<li>抗冲突性(Collision-resistant)<br>要求产生2个相同的散列值是概率低，即对任意两个不同的x,y，使得h(x)=h(y)是困难的。</li>
<li>雪崩效应(Avalanche effect)<br>即映射分布均匀性和差分分布均匀性，或者说 原始输入数据的微小改动，能导致散列值差异非常大</li>
</ul>
<p>当然最好能具有快速计算的特性，除此以外，信息安全领域中的Hash算法可能还有其他要求。</p>
<h2 id="Hash函数应用领域"><a href="#Hash函数应用领域" class="headerlink" title="Hash函数应用领域"></a>Hash函数应用领域</h2><p>散列函数是一类函数，更是一种思想，它常被一些语言用来实现一种数据结构（Hash表、Hash Table、散列表），也广泛用于密码学。<br>我们看下一些教材对其使用概括：<br><em>1, <strong>在数据结构中的应用</strong><br>使用Hash算法的数据结构叫做哈希表，也叫散列表，主要是为了提高查询的效率。它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数就是hash函数，存放记录的数组叫做哈希表。在数据结构中应用时，有时需要较高的运算速度而弱化考虑抗碰撞性，可以使用自己构建的哈希函数。<br>2, <strong>在密码学领域的应用</strong><br>在密码学中，Hash算法的作用主要是用于消息摘要和签名，换句话说，它主要用于对整个消息的完整性进行校验。比如一些登陆网站并不会直接明文存储用户密码，存储的是经过hash处理的密码的摘要（hash值），当用户登录时只需要对比输入明文的摘要与数据库存储的摘要是否相同；即使黑客入侵或者维护人员访问数据库也无法获取用户的密码明文，大大提高了安全性。</em></p>
<p>大部分语言的标准库都会提供一种散列表（HashTale/HashMap/Dict等）的数据结构，该数据结构采用空间换时间的思想，做到插入和查询都是O(1)的时间耗费。<br>像Java中一切皆对象，对象本身自带hashCode属性（即散列值）, 散列函数就是生成唯一标识的工具。<br>作为数据结构场景下，hash函数的选择会侧重于散列值均匀分布或者足够随机的特性，生成唯一标识就考虑抗碰撞特性，而密码学中因为考虑到完整性，增加破解难度，就要优先考虑抗碰撞性，如MD系/SHA系。</p>
<h2 id="作为数据结构"><a href="#作为数据结构" class="headerlink" title="作为数据结构"></a>作为数据结构</h2><p>和Hash函数对应的数据结构就是HashTable/HashMap/Dict等键值映射表，不同语言不同称呼，本文统称HahsTable。此类Hash函数目标就是把n个元素塞到m个槽位里面（通常假设n &lt; m）, Knuth在 TAOCP 里举例，散列函数可有m^n中函数(结果)，但仅有m!/(m-n)!是无冲突的，也即该情况下避免冲突的函数是通常极少的，比如知名的“生日悖论”。</p>
<h3 id="计算Hash方法"><a href="#计算Hash方法" class="headerlink" title="计算Hash方法"></a>计算Hash方法</h3><p>算法导论里给出两种方法</p>
<ol>
<li>除法散列法<br>hash函数为 h(k) = k mod m， m最好为质数，避免整数幂次，比如当m为2的整数次幂32时，那么k仅有低5位参与散列，上文提及的雪崩效应就不符合了。</li>
<li>乘法散列法<br>hash函数是 h(k) = m(kA mod 1)<br>即：用关键字k乘以常数A(0&lt;A&lt;1)，提取KA的小数部分(kA mod 1)，用m乘以这个值并取整。<br>Knuth TAOCP里提到A为黄金分割数最优。</li>
<li>全域hash<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hash函数为： h[a](k) = sum&#123;ai*ki|i =0,1,...,m-1&#125;mod m</div><div class="line">m为素数，而a=&lt;a0,a1,...,ar&gt;，其中(0&lt;= ai&lt;= m-1)为随机选择的r+1个元素组成。</div></pre></td></tr></table></figure>
</li>
</ol>
<p>解决hash冲突方法有<strong>开放地址方法、链地址法、建立公共溢出区、再哈希法等</strong>，其中开放地址策略又可再分线性探测、再平方探测、伪随机探测等，上述均可在数据结构书找到不详述。<br>Java的HashMap、Redis的dict（hashTable）就是<a href="https://www.jianshu.com/p/81134bd9f771" target="_blank" rel="external">链地址法</a>，《算法导论》中分析了对于采用链表式的简单一致hash表，<strong>一次成功/不成功的查找耗时均为 O(1+a)</strong>，其中a=n/m，a为装载因子，也就是Java HashMap的loadfactor，简单一致表示这n个元素存入m个表槽时的概率是相等的，这点也是容易理解的，关于这个结论的应用下文还会提及。</p>
<h3 id="常见Hash"><a href="#常见Hash" class="headerlink" title="常见Hash"></a>常见Hash</h3><p><a href="http://www.partow.net/programming/hashfunctions/index.html#RSHashFunction" target="_blank" rel="external">General Purpose Hash Function Algorithms</a>，这里列举早期常见c实现的hash函数，RS、JS、PJW、ELF、BKDR、SDBM、DJB、DEK、AP等，不过有些依旧常用，像DJB Hash，Daniel J. Bernstein提出，在php/apache/perl/redis中都有使用，页面提到的设计hash思想以及hansh分类等都比较清晰。<br><a href="http://www.burtleburtle.net/bob/hash/doobs.html" target="_blank" rel="external">doobs hash</a>，这里作者测试/点评了一些流行的hash，如Lookup3、OneAtATime、SpookyHash、FNV Hash<br>CRC32、MurmurHash、Goulburn、DJB、MD4等。<br>这里<a href="http://programmers.stackexchange.com/questions/49550/which-hashing-algorithm-is-best-for-uniqueness-and-speed" target="_blank" rel="external">Which hashing algorithm is best for uniqueness and speed</a>是其他测试，作者测试了DJB2、DJB2a、FNV-1、FNV-1a、SDBM、CRC32、Murmur2（32b）、SuperFastHash。<br>上述hash基本上都注重两点：快速、低碰撞。包括像把hash结果作为变量参与下一轮hash就是为了制造雪崩效应。<br>DJB hash就是最快速并且较均匀hash，也曾是流行。不过MurmurHash算法后来居上，在上述几个测试中几乎都是最快的，官方评测是FNV/SuperFastHash等的2-3倍，由Austin Appleby提出，最开始是作为SMHasher测试hash套件一部分，Austin后入职Google，2011年发布其变种 CityHash算法，性能快于MurmurHash，后者目前似乎无Java版。2014年，google发布farmHash，<a href="https://www.infoq.cn/article/2014/04/google_farmhash" target="_blank" rel="external">继承CityHash增加其他平台支</a>持。<br>Nginx的在ngx_http_split_clients_module中split_clients指令，即常用来做负载/分离测试(AB)的，就采用MurmurHash，Redis HLL实现也用到了MurmurHash，Cassandra默认基于MurmurHash分区，HBase也提供此分区方法。<br>上述hash算法目的都是快速和抗碰撞，此外还有一类hash侧重快速和随机性，就是<a href="https://131002.net/siphash/" target="_blank" rel="external">Siphash</a>: SipHash is a family of pseudorandom functions (a.k.a. keyed hash functions) optimized for speed on short messages，即面向短文本的侧重随机效果的，与其说是hash，不如说是随机函数。目的即是用来防止 哈希洪水攻击（hash-flooding DoS attacks），如官网介绍，已经被OpenSSL/<a href="https://www.python.org/dev/peps/pep-0456/#siphash" target="_blank" rel="external">Python</a>/Rust/Wireguard/xBSD/JRuby/Perl/OpenDNS等内置应用。<br>Redis之前提供了三种计算哈希值的函数，对应分别为：dictIntHashFunction即Thomas Wang’s 32 bit Mix Function，dictGenHashFunction 即 MurmurHash2, dictGenCaseHashFunction 即djb hash，默认murmur2，不过Redis 从4.0后开始抛弃了并删除上述代码了<a href="https://github.com/antirez/redis/pull/718" target="_blank" rel="external">Switch hash function to SipHash. #718</a> <a href="https://github.com/antirez/redis/commit/adeed29a99dcd0efdbfe4dbd5da74e7b01966c67" target="_blank" rel="external">code</a>，下文也会提到。<br>MurMurHash也是支持随机的，只需提供一个seed的参数产生一个随机的MurMurHash函数，这样每次初始化后，hash值会不同，可以防止dos。但一般默认是0（Guava即是0），确保同一段字节hash结果始终一样。<br><strong>需要指出的是</strong><br>1）当hash的字符串位数不多或者作用域小数据量时时，DJB /RS/JS等hash可能比MurmurHash快。<br>2）上述BKDR采用质数31/131其实接近java String采用hash算法。<br>3）上述都不能用于下文密码部分hash函数，抗碰撞弱于MD。<br>4）像有的hash如FNV，选择32位内最大的素数 16777619 ，因为低位1较多也可有不错效果，不过如果没有右移操作，高位似乎可能因为溢出而始终无法参与hash了。</p>
<h3 id="为什么hash常对-33-31-取模"><a href="#为什么hash常对-33-31-取模" class="headerlink" title="为什么hash常对 33/31 取模"></a>为什么hash常对 33/31 取模</h3><p>作为整数，20世纪100以内自然数33和42曾在很长一段时间内无法找到表示为三个立方数和的解一度成为神秘数字，这里33似乎也有一些与众不同，上述的DJB Hash 也叫 Time 33 hash，time 33就是乘33的意思<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">DJBHash</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str, <span class="keyword">unsigned</span> <span class="keyword">int</span> length)</span></span>&#123;</div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> hash = <span class="number">5381</span>;</div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> i    = <span class="number">0</span>;</div><div class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; ++str, ++i)</div><div class="line">   &#123;</div><div class="line">      hash = ((hash &lt;&lt; <span class="number">5</span>) + hash) + (*str);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> hash;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>((hash &lt;&lt; 5) + hash) 就是位操作实现的hash * 32+hash，即 hash * 33。<br>使用33是作者做过hash测试效果得到，我们这里看国内的1-1000之间作为乘数的测试，链接：<a href="https://mp.weixin.qq.com/s/sCWQGU_OWiQkDUuSPXvw-w" target="_blank" rel="external">为什么Java String哈希乘数为31</a>，作者测试结果证实mod偶数或20以内的数据冲突率都很高，作者测试里四个数据效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">31、33的冲突率分别为0.13%、0.14%，执行耗时分别为10、11，实时基本相当</div><div class="line">127、129的冲突率分别为0.01%、0.004%，执行耗时分别为9、10。</div></pre></td></tr></table></figure></p>
<p>编程规范牛书<a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=4045622" target="_blank" rel="external">K&amp;R’s book </a>作者Kernighan 和 Ritchie 在《The C Programming Language》提出BKDR Hash，采用/<em> 31 131 1313 13131 131313 etc.. </em>/ 作为种子计算hash，Joshua Bloch的 Effective Java就提到java选择31，效果好，<a href="https://stackoverflow.com/questions/299304/why-does-javas-hashcode-in-string-use-31-as-a-multiplier" target="_blank" rel="external">而且可优化</a>。</p>
<h3 id="Java-Hash"><a href="#Java-Hash" class="headerlink" title="Java Hash"></a>Java Hash</h3><p>上面谈到Java String的hashCode实现，这里谈谈java其他hash</p>
<h4 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h4><p>Java中Hashtable就是使用除法散列法，Hashtable的table.size默认是11，即默认 % 11，resize时元素数量*2+1，但是初始size可以为指定值，也即指定初始2幂次时，hashtable可能散列的效果不好。<br>顺便提一下Netty中的IntObjectMap采用的是开放地址寻址法，hash策略就是简单的 key ^ (capacity - 1)，capacity是2的幂次。</p>
<h4 id="Object-hashCode"><a href="#Object-hashCode" class="headerlink" title="Object.hashCode"></a>Object.hashCode</h4><p>HashMap/HashTable等都需要其hashCode方法，并且有一套hashcode/equals 规范，那么未重写时，即java Object默认hashCode方法怎么实现的呢，是内存地址的十六进制表示吗？<br>这篇文章<a href="https://srvaroa.github.io/jvm/java/openjdk/biased-locking/2017/01/30/hashCode.html" target="_blank" rel="external">How does the default hashCode() work</a>里作者追踪源码并探讨几点，源码里多可见，笔者摘录下。<br>Object.hashCode是native方法，调用如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// src/share/vm/prims/jvm.cpp</span></div><div class="line">JVM_ENTRY(jint, JVM_IHashCode(JNIEnv* env, jobject handle))</div><div class="line">   JVMWrapper(<span class="string">"JVM_IHashCode"</span>);</div><div class="line">   <span class="comment">// as implemented in the classic virtual machine; return 0 if object is NULL</span></div><div class="line">   <span class="keyword">return</span> handle == <span class="literal">NULL</span> ? <span class="number">0</span> : ObjectSynchronizer::FastHashCode (THREAD, JNIHandles::resolve_non_null(handle)) ;</div><div class="line">JVM_END</div><div class="line"><span class="comment">// 这里是作者简化过的伪码</span></div><div class="line"><span class="comment">// src/share/vm/runtime/synchronizer.cpp</span></div><div class="line"><span class="keyword">intptr_t</span> ObjectSynchronizer::FastHashCode (Thread * Self, oop obj) &#123;</div><div class="line">    mark = monitor-&gt;header();</div><div class="line">    ...</div><div class="line">    hash = mark-&gt;hash();</div><div class="line">    <span class="keyword">if</span> (hash == <span class="number">0</span>) &#123;</div><div class="line">    hash = get_next_hash(Self, obj);</div><div class="line">    ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    <span class="keyword">return</span> hash;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> intptr_t <span class="title">get_next_hash</span><span class="params">(Thread * Self, oop obj)</span> </span>&#123;</div><div class="line">  <span class="keyword">intptr_t</span> value = <span class="number">0</span> ;</div><div class="line">  <span class="keyword">if</span> (hashCode == <span class="number">0</span>) &#123;</div><div class="line">     value = os::random() ;</div><div class="line">  &#125; <span class="keyword">else</span></div><div class="line">  <span class="keyword">if</span> (hashCode == <span class="number">1</span>) &#123;</div><div class="line">     <span class="keyword">intptr_t</span> addrBits = cast_from_oop&lt;<span class="keyword">intptr_t</span>&gt;(obj) &gt;&gt; <span class="number">3</span> ;</div><div class="line">     value = addrBits ^ (addrBits &gt;&gt; <span class="number">5</span>) ^ GVars.stwRandom ;</div><div class="line">  &#125; <span class="keyword">else</span></div><div class="line">  <span class="keyword">if</span> (hashCode == <span class="number">2</span>) &#123;</div><div class="line">     value = <span class="number">1</span> ;            <span class="comment">// for sensitivity testing</span></div><div class="line">  &#125; <span class="keyword">else</span></div><div class="line">  <span class="keyword">if</span> (hashCode == <span class="number">3</span>) &#123;</div><div class="line">     value = ++GVars.hcSequence ;</div><div class="line">  &#125; <span class="keyword">else</span></div><div class="line">  <span class="keyword">if</span> (hashCode == <span class="number">4</span>) &#123;</div><div class="line">     value = cast_from_oop&lt;<span class="keyword">intptr_t</span>&gt;(obj) ;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">     <span class="comment">// Marsaglia's xor-shift scheme with thread-specific state</span></div><div class="line">     <span class="comment">// This is probably the best overall implementation -- we'll</span></div><div class="line">     <span class="comment">// likely make this the default in future releases.</span></div><div class="line">     <span class="keyword">unsigned</span> t = Self-&gt;_hashStateX ;</div><div class="line">     t ^= (t &lt;&lt; <span class="number">11</span>) ;</div><div class="line">     Self-&gt;_hashStateX = Self-&gt;_hashStateY ;</div><div class="line">     Self-&gt;_hashStateY = Self-&gt;_hashStateZ ;</div><div class="line">     Self-&gt;_hashStateZ = Self-&gt;_hashStateW ;</div><div class="line">     <span class="keyword">unsigned</span> v = Self-&gt;_hashStateW ;</div><div class="line">     v = (v ^ (v &gt;&gt; <span class="number">19</span>)) ^ (t ^ (t &gt;&gt; <span class="number">8</span>)) ;</div><div class="line">     Self-&gt;_hashStateW = v ;</div><div class="line">     value = v ;</div><div class="line">  &#125;</div><div class="line">...</div><div class="line">  <span class="keyword">return</span> value;</div><div class="line">&#125;</div><div class="line">product(intx, hashCode, <span class="number">5</span>,\</div><div class="line">    <span class="string">"(Unstable) select hashCode generation algorithm"</span>) </div><div class="line"><span class="comment">// src/share/vm/runtime/thread.cpp</span></div><div class="line">  _hashStateX = os::random() ;</div><div class="line">  _hashStateY = <span class="number">842502087</span> ;</div><div class="line">  _hashStateZ = <span class="number">0x8767</span> ;    <span class="comment">// (int)(3579807591LL &amp; 0xffff) ;</span></div><div class="line">  _hashStateW = <span class="number">273326509</span> ;</div></pre></td></tr></table></figure></p>
<p>上述get_next_hash 提供了随机数、自增sequence、1、内存地址、Marsaglia’s xor-shift scheme with thread-specific state，默认就是 第五类实现，即含线程级别初始状态的hash码，可以看到 _hashStateX 就是一个os::random()的随机数，其他参数是恒定值，这<strong>也意味着Object.hashCode默认是随机</strong>的，也即如果你未重写hashCode，那么这个类即便每个属性都是一样的值，jvm重启之后/甚至在两个线程里new的两个对象，他们各自的hashCode是很可能不等的。<br>java Doc里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Whenever it is invoked on the same object more than once during an \</div><div class="line">execution of a Java application, the hashCode method must \</div><div class="line">consistently return the same integer...</div></pre></td></tr></table></figure></p>
<p>也提到了 during an execution of a Java application，即保证执行期间不变，没有明确指是始终不变，很多人忽略这点。<br><strong>需要指出的是：</strong><br>1） 上述，对象在调用一次hashCode之后，其hashCode缓存在其对象头字段里，以便之后使用，即mark-&gt;hash()。<br>2）通过jvm参数，-XX:hashCode=4 可以指定hashcode生成策略为内存地址。</p>
<p><strong>但是为何hashcode默认要随机数</strong>？<br>让我们看一段历史，虽然二者不一定相关。<br>如果你使用Python 3.2以上，那么shell里运行hash(‘www’)后退出再运行 hash(‘www’)，就会发现两次hash值不一样，这是为了解决python <a href="https://python-security.readthedocs.io/vuln/hash-dos.html" target="_blank" rel="external">Hash Dos</a>问题,具体参考：<a href="https://www.python.org/dev/peps/pep-0456/#siphash" target="_blank" rel="external">PEP 456 – Secure and interchangeable hash algorithm</a>，文末链接是各语言。<br>这个问题曾经在PHP服务较明显，而Tomcat/jettty等也出现过，笔者刚工作时就曾经历过Tomcat因此升级，这里是讨论：<a href="http://mail-archives.apache.org/mod_mbox/www-announce/201112.mbox/%3C4EFB9800.5010106@apache.org%3E" target="_blank" rel="external">Apache Tomcat and the hashtable collision DoS vulnerability</a>，<a href="https://www.cvedetails.com/cve/CVE-2011-4858/" target="_blank" rel="external">tomcat CVE-2011-4858</a>，<a href="https://www.javaspecialists.eu/archive/Issue262.html" target="_blank" rel="external">java hash dos</a>，原理就是已知tomcat这些通过hashmap解析用户post的参数（request.getparameter），那么用户会构造一个表单，比如含有一万个字段，他们都会hash到同一个键上，即查询时退化为链表查询了，导致在处理上比较损耗CPU，这点据说对PHP服务影响巨大，CPU观测到飙升。Tomcat该CVE解决就是设置参数限制用户的表单字段数量。<br>需要指出的是，除了Object.hashCode，JDK 1.7(应该是2012年2月之后的版本，早期1.7版本是没有的)的HashMap似乎也做了改进，在计算HashMap的加入了hashSeed随机，hashSeed会在vm启动时通过random初始化，而对于String类sun.misc.Hashing.stringHash32则采用 murmur3_32，该murmur算法使用时间戳作为随机种子。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> h = hashSeed;</div><div class="line">    <span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</div><div class="line">        <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</div><div class="line">    &#125;</div><div class="line">    h ^= k.hashCode();</div><div class="line">    ...</div><div class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</div><div class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Java-HashMap"><a href="#Java-HashMap" class="headerlink" title="Java HashMap"></a>Java HashMap</h3><p>不过，随机hash可能不符合部分人的理念，JDK 8中HashMap就去掉了随机hash，String的hashcode永远一样，链表解决冲突改为红黑树，避免hash攻击。<br>所以HashMap的hash策略相比1.7就简略许多：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> h;</div><div class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>1.7中String类曾使用murmurhash计算hashcode，其他则会对其进行20/12/7/4位的rotate，1.8中这些都不存在了，并且只一次性rotate16位，这样保证高低16位均可再次参与hash，如果论1.8的放大效应应该不如1.7，但是大大减少了rotate和异或操作次数，而且有红黑树兜底冲突。<br>在计算hash这步应该会快些，但1.8中红黑树带来代码复杂性，且当该槽退化为红黑树后，转换为treenode时，进行查找比较时，对于”class C implements Comparable<c>“存在反射调用的性能损耗，很难说哪个快，需要具体测试结果，并考虑hash冲突次数情况来比较试验。<br>正是由于这一点，JDK 1.8 的hash关于红黑树其实是两个改进：1)当槽位冲突超过8(含)时链表升级为红黑树，2）resize后，如果槽位冲突小于6，但是红黑树，此时会降级为链表。<br>上面其实也意味着当hashmap size较小如64，1.8中参与有效hash的位通常不如1.7的多。</c></p>
<h3 id="为何是超8个才升级为红黑树"><a href="#为何是超8个才升级为红黑树" class="headerlink" title="为何是超8个才升级为红黑树"></a>为何是超8个才升级为红黑树</h3><p>备注里写的清楚了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">* Because TreeNodes are about twice the size of regular nodes, </div><div class="line">* ...  </div><div class="line">* Ideally, under random hashCodes, the frequency of</div><div class="line">* nodes in bins follows a Poisson distribution</div><div class="line">* (http:<span class="comment">//en.wikipedia.org/wiki/Poisson_distribution) with a</span></div><div class="line">* parameter of about <span class="number">0.5</span> on average <span class="keyword">for</span> the <span class="keyword">default</span> resizing</div><div class="line">* threshold of <span class="number">0.75</span>, although with a large variance because of</div><div class="line">* resizing granularity. Ignoring variance, the expected</div><div class="line">* <span class="function">occurrences of list size k <span class="title">are</span> <span class="params">(exp(<span class="number">-0.5</span>)</span> * <span class="title">pow</span><span class="params">(<span class="number">0.5</span>, k)</span> /</span></div><div class="line">* <span class="title">factorial</span><span class="params">(k)</span>). The first values are:</div><div class="line">* 0:    0.60653066</div><div class="line">* 1:    0.30326533</div><div class="line">* 2:    0.07581633</div><div class="line">* 3:    0.01263606</div><div class="line">* 4:    0.00157952</div><div class="line">* 5:    0.00015795</div><div class="line">* 6:    0.00001316</div><div class="line">* 7:    0.00000094</div><div class="line">* 8:    0.00000006</div><div class="line">* more: less than 1 in ten million</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>笔者不会涉及红黑实现细节，只讨论部分问题。<br>上述可知：<br>1, TreeNodes 重量级，耗费空间<br>2，hash冲突超过8个的情况概率可以做到非常小到6/10^8机会，<br>也就是说，该版本里JDK设计者并不希望用户的hashmap出现红黑树！<br><strong>引入红黑树冲突解决是作为极端情况(DOS)下的兜底方案，而不是一种对Hashmap自身功能上的优化</strong>，笔者不确定1.8的HashMap是否比1.7快(单线程)，虽然hash变得简单高效，但本身操作就足够敏感，相信科学的压测结果未必能足够证明二者性能之间的差异(<strong>如hash的key为String时，string的长度影响get的性能</strong>)。不过，<strong>笔者可以确认的是，“Java 8 引入红黑树处理冲突提升了HashMap的性能”，这种说法是完全不对的</strong>，Java 8 HahsMap即便性能有提升也不会直接和链表冲突变为红黑树相关。<br><strong>正如作者在上述写的选择8的原因是因为这样使得链表升级TreeNode情况的可能性足够小</strong>，这里又怎么去考虑性能呢，更别说链表超过8个转换为树是否更高效了。<br>至于loadfactor为0.75纯粹是经验值（可能就是0.5和1.0取中间），没有什么好探讨的，笔者的疑惑是“Ideally, under random hashCodes, the frequency of nodes in bins follows”，毕竟下文得出选用8作为临界的原因就是“出现K次同一个碰撞”符合泊松分布，<strong>但首先确定的一点是作者的公式前提是假设loadfactor为0.5</strong>，如果强行认为泊松分布没有问题，但是需要解释lambda为何0.5。<br>如果按注释理解，笔者猜测作者可能是把K数丢到N桶作为二项分布，或者说作者<strong>可能是把N个桶作为一个个的单位时间，而把数丢到N桶看成是每个时间内概率性到达一个数，这个概率是0.5，当把时间无限长，显然这个模型里每个时间K次到达本身就是泊松分布</strong>，把lambda带入0.5就得到作者的<i> (exp(-0.5)*pow(0.5, k)/factorial(k))</i>结果了。<br><img src="/images/poisson.png" width="100%"><br>换句话说，将n/2的数随机放入n个桶内，约0.60653066的的量是空桶，0.30326533的量含有1个，0.07581633的量含有2个…这个结果有点意外，但是如果代码试验记录函数关系，猜测可能是符合这个图形的(文末笔者用Redis测试了一下，结果是比较符合这个结论的)。</p>
<h3 id="为何hash槽数是2的幂次"><a href="#为何hash槽数是2的幂次" class="headerlink" title="为何hash槽数是2的幂次"></a>为何hash槽数是2的幂次</h3><p>不同于hashtable，hashmap的槽数始终是2的幂次，Redis也是如此。<br>读者可能已经知道HashMap采用这种设计，主要是为了高效取模<i>（tab[i = (n - 1) &amp; hash]）</i>和扩容时计算简单，但是前文<strong>除法散列法</strong>有介绍到”取模应该避免2的幂次来避免高位就不参与运算“，这是否矛盾？<br>笔者认为有缺陷但不矛盾，首先 取模前的 hash值有做过高低位的一次位操作，并且在此之前也有几轮位散列，这个过程比较接近 <strong>乘法散列法</strong>，只是此时m为2的幂次的倒数。</p>
<h3 id="loadfactor-0-75-是否合理"><a href="#loadfactor-0-75-是否合理" class="headerlink" title="loadfactor 0.75 是否合理"></a>loadfactor 0.75 是否合理</h3><p>笔者认为合理，但是有时候可以不遵守。<br>loadfactor是衡量hash表饱和度的指数，过大也意味着hash冲突的概率很大，当超过0.75时，HashMap进行扩容(resize)，槽数翻倍，读者可能已经在Java doc中看到推荐0.75，以及其他博客里认为的超过0.75性能就有损耗，不推荐。<br>而Java中，hashmap要素就是希望冲突尽量少，将表操作维持在 O(1)时间，但是，超过0.75时性能损耗有多少呢？<br>上文我们分析了采用链表式的简单一致hash表，<strong>理论上一次成功/不成功的查找耗时均为 O(1+a)，a为装载因子</strong>，也就是说，loadfactor设为3的时候查询性能是之前的2.9倍，但考虑到hash操作可能是耗时重点，这个值会比2.9小。<br>笔者没有进行严格的JMH测试，分别用0.75和4作为loadfactor插入12万条KV数据对后，简单的进行16轮get测试，在笔者的mac电脑上时间比在1.4-2.8之间，但是占用空间4是32768条，0.75是262144条，仅为其1/8。<br>对于内存消耗频繁/GC频繁的应用来说，如果能接受hashmap的查询耗时损耗，笔者认为这可能是非常值得的。<br>当然，上述还有待笔者更多的性能测试数据，简单的循环跑可能有干扰。</p>
<h3 id="Redis的loadfactor、hash相关"><a href="#Redis的loadfactor、hash相关" class="headerlink" title="Redis的loadfactor、hash相关"></a>Redis的loadfactor、hash相关</h3><p>Redis本身有Hash类型的数据结构之外，redis数据库实现也是一个Hash表，即dict，存储了redis所有的KV对，其哈希策略早期是随机的murmur2，后来或许是受SipHash作者的murmur存在hash DOS问题，策略改为SipHash了。<br>dict用链表解决哈希冲突，其loadfactor默认大于1才开始resize(dict_can_resize固定1)，可以一直持续增加到5后再强行resize(dict_force_resize_ratio固定5)。<br>即redis认为自己的数据量大于dict的槽数是允许的，而Java HashMap建议槽数大于数据量。<br>当然Redis Hash也得益于其hashtable不仅可以扩张，而且可收缩，支持一种渐进式rehash机制，即其hashtable逻辑上有两个hashtable组成(当rehash时)，可同时并用，并且空闲时迁移，直到rehash结束后，其中一个清空。<br>可以看到一个redisDb就是一个dict，dict主要就是dictht ht[2]，2个大的hash表(dictEntry)引用，<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Redis database representation. There are multiple databases identified</span></div><div class="line"> * by integers from 0 (the default database) up to the max configured</div><div class="line"> * database. The database number is the 'id' field in the structure. */</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisDb</span> &#123;</span></div><div class="line">    dict *dict;                 <span class="comment">/* The keyspace for this DB */</span></div><div class="line">    dict *expires;              <span class="comment">/* Timeout of keys with a timeout set */</span></div><div class="line">    dict *blocking_keys;        <span class="comment">/* Keys with clients waiting for data (BLPOP)*/</span></div><div class="line">    dict *ready_keys;           <span class="comment">/* Blocked keys that received a PUSH */</span></div><div class="line">    dict *watched_keys;         <span class="comment">/* WATCHED keys for MULTI/EXEC CAS */</span></div><div class="line">    <span class="keyword">int</span> id;                     <span class="comment">/* Database ID */</span></div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> avg_ttl;          <span class="comment">/* Average TTL, just for stats */</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> expires_cursor; <span class="comment">/* Cursor of the active expire cycle. */</span></div><div class="line">    <span class="built_in">list</span> *defrag_later;         <span class="comment">/* List of key names to attempt to defrag one by one, gradually. */</span></div><div class="line">&#125; redisDb;</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span> &#123;</span></div><div class="line">    dictType *type;</div><div class="line">    <span class="keyword">void</span> *privdata;</div><div class="line">    dictht ht[<span class="number">2</span>];</div><div class="line">    <span class="keyword">long</span> rehashidx; <span class="comment">/* rehashing not in progress if rehashidx == -1 */</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> iterators; <span class="comment">/* number of iterators currently running */</span></div><div class="line">&#125; dict;</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictType</span> &#123;</span></div><div class="line">    <span class="keyword">uint64_t</span> (*hashFunction)(<span class="keyword">const</span> <span class="keyword">void</span> *key);</div><div class="line">    <span class="keyword">void</span> *(*keyDup)(<span class="keyword">void</span> *privdata, <span class="keyword">const</span> <span class="keyword">void</span> *key);</div><div class="line">    <span class="keyword">void</span> *(*valDup)(<span class="keyword">void</span> *privdata, <span class="keyword">const</span> <span class="keyword">void</span> *obj);</div><div class="line">    <span class="keyword">int</span> (*keyCompare)(<span class="keyword">void</span> *privdata, <span class="keyword">const</span> <span class="keyword">void</span> *key1, <span class="keyword">const</span> <span class="keyword">void</span> *key2);</div><div class="line">    <span class="keyword">void</span> (*keyDestructor)(<span class="keyword">void</span> *privdata, <span class="keyword">void</span> *key);</div><div class="line">    <span class="keyword">void</span> (*valDestructor)(<span class="keyword">void</span> *privdata, <span class="keyword">void</span> *obj);</div><div class="line">&#125; dictType;</div><div class="line"></div><div class="line"><span class="comment">/* This is our hash table structure. Every dictionary has two of this as we</span></div><div class="line"> * implement incremental rehashing, for the old to the new table. */</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span> &#123;</span></div><div class="line">    dictEntry **table;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> size;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> sizemask;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> used;</div><div class="line">&#125; dictht;</div></pre></td></tr></table></figure></p>
<p>4.0后，redis大部分dictType的hashFunction都是dictSdsHash(部分dictObjHash)，他们都属于dictGenHashFunction，即对应siphash实现。<br>Redis的HyperLogLog目前还是用MurmurHahs进行哈希。<br>我们知道Antirez<a href="https://redis.io/topics/benchmarks" target="_blank" rel="external">老版本性能报告里</a>，redis get操作大概在12万/s左右，那么Redis的dict查找性能有多快呢？验证需要深入代码，不过我们可以看另一个数据，就是pipeline测试，<i>redis-benchmark -n 1000000 -t set,get -P 64 -q </i>，在笔者电脑上get操作可以达到约120万，表示redis的dict类查询至少120万的，当然这和单线程 hashmap get操作可达千万级别(key为1-6长度字符串)有点差距，不过确实提供了一个load factor 大于1的场景。<br>Redis resize过程还有许多内容，比如scan的实现，能看到作者是非常的善于用心，不走寻常路思维，不过本文不进一步讨论。</p>
<h3 id="关于一致性hash"><a href="#关于一致性hash" class="headerlink" title="关于一致性hash"></a>关于一致性hash</h3><p>什么是一致性hash呢？看看wikipedia上的定义：<br><em>Consistent hashing is a special kind of hashing such that when a hash table is resized, only keys need to be remapped on average, where  is the number of keys, and  is the number of slots. In contrast, in most traditional hash tables, a change in the number of array slots causes nearly all keys to be remapped because the mapping between the keys and the slots is defined by a modular operation.</em><br>这里是笔者网上摘录的一段翻译：<br><em>一致性hash是一种特殊的hash，当hash表的大小发生变化时，平均只有K/N个key需要重新计算映射关系(rehash)，这里K是hash表中key的数目，N是hash表中槽位的数目。相比之下，大多数传统的hash表实现，当hash表的大小发生变化时，几乎所有的key都需要重新映射，这是因为key和hash表槽位之间的映射是通过取模预算实现的。</em></p>
<p>如果是纯粹的理解一致性hash，那么这个概念/算法 实在是太容易理解了，甚至不能称作是算法，笔者也不会放一张经典的一致性hsh轮状图。<br><strong>简单理解就是hash失败时找临近的节点，增加虚拟节点通常是为了希望hash分布均匀</strong>，当然带来好处是hash仅跟虚拟节点有关，如加路由等功能操作时hash算法只需关心虚拟节点不用关心机器。</p>
<p>需要注意的是，<strong><em>Redis本身是没有一致性hash概念的，官方Redis集群cluster，也没有用到一致性hash相关的技术，redis和一致性hash没有直接关系，“redis一致性hash算法/原理”这种说法完全不对的</em></strong>，混淆redis和一致性hash关系可能是第三方带来的，比如Jedis/Twemproxy。<br>像Twemproxy假设某节点故障后恢复，期间因为一致性hash关系写到其他机器上的数据实际上就浪费了，这不是理想的使用redis方式，除非你只是把redis作为缓存使用，并且支持重载缓存。<br><strong>Jedis里有一致性hash概念，并且实现了一致性hash算法，但是如果你只想把jedis作为操作redis的工具的话，那么一致性哈希实在是一个bug</strong>。<br>因为，真实环境里，大多数Redis会借助集群技术(但不管如何，数据冗余是必须的)来实现数据不丢失，至少不是出现一致性hash期待的某节点增删。<br>这种一致性hash是没有必要的，大部分存储服务集群的”client“这一端只有分片概念和服务一致的分片(路由)策略足矣。<br>当然，一致性hash算法不是没有用，像Jedis在Sentinel模式下，用来定位存储节点(分片)时，<strong>其“hash”功能还是有作用的，但“一致性”功能是多余的</strong>。<br>像官方标准的集群实现<a href="https://redis.io/topics/cluster-spec" target="_blank" rel="external">Redis Cluster</a>，其实现就直接采用slot的概念，对Key用CRC16定位slot(HASH_SLOT = CRC16(key) mod 16384)，而jedis 也提供了支持Redis Cluster的实现，在BinaryJedisCluster中封装带有重试机制的JedisClusterCommand，代理给JedisSlotBasedConnectionHandler执行，  其代码里的getConnectionFromSlot即是从缓存中获取对应的JedisPool，即一个Jedis连接执行命令。<br>虽然redis cluster设计/代码初期被吐槽过，但笔者认为目前实现要比其他更接近分布式，可能和其他相比或多或少存在集群的命令支持度问题以及自身实现的限制，不过正确的方向比一切重要，而且现在redis cluster已稳定发布，大量被使用，就笔者所知有些大公司依旧是Codis、Tweamproxy、Sentinel之类的方式，毕竟迁移到Redis Cluster模式不是无缝的，存在风险，大部分技术人员不动。不过笔者也知几家大公司线上服务在用Redis Cluster。</p>
<h2 id="作为密码学"><a href="#作为密码学" class="headerlink" title="作为密码学"></a>作为密码学</h2><p>该类hash具有上文提到的单向函数特性，即其是一种消息摘要算法，而非加密算法，这类散列函数通常称为密码散列函数（Cryptographic hash function，否则就是non-Cryptographic的），它适用于检测消息的完整性，确保消息没有被篡改，该类散列函数的散列结果通常是一段定长的字节(如128-512不等)。<br>最常见就是<strong>数字签名、消息认证</strong>(fingerprint/message digest)，像数字指纹、电子签名、SSL公钥认证、资源授权等都会用到，这属于深奥的HMAC内容；也可用于 <strong>登录认证</strong>，即常见的口令加密，计算密码和随机盐的散列值保存，避免明文密码；<strong>Token</strong>，即一次性授权，过期等失效；另外，<strong>生成伪随机数</strong>也是常见应用，Java的Sun公司早前推出的SecureRandom类就是自称SHA-1的伪随机数生成器。<br>总之，密码学本身涉及广泛，足够花上几辈子研究，这里仅是作为hash函数介绍下，入个门，也不能算是窥豹一斑，这也印证了笛卡尔圆理论。<br>只要知道UUID、CSRF Token、Jwt Token、remeber me token、防重放、密钥、区块链等场景都会用到。</p>
<h3 id="常见的散列算法"><a href="#常见的散列算法" class="headerlink" title="常见的散列算法"></a>常见的散列算法</h3><p>常见的散列算法有：CRC-32、MD5、SHA-1，SM3，以及广泛使用 SHA-2(SHA-224、SHA-356、SHA-384、SHA-512)和海绵结构的SHA-3(Keccak 算法)，像AES/DES/RSA则是加解密算法不算散列函数。</p>
<p><strong>为什么会有这么多种类呢或者命名呢？</strong><br>其中 <strong>CRC-32</strong> 循环冗余校验最早，1961年提出，不过其主要用来进行错误检测，可以有限纠错/奇偶校验等，常用于数据存储和数据通讯，硬件支持，Hadoop就实现了高性能的CRC-32算法作为文件的Checksum保存。可用于密码学领域的Cryptographic hash function，较早的是<strong>MD系列</strong>，1992年，在经历MD2、MD4几个消息摘要算法版本迭代后，Ronald Linn Rivest向IETF提交了<strong>MD5</strong>。<br>SHA（Secure Hash Algorithm，安全散列算法）家族的算法，由美国国家安全局（NSA）所设计，并由美国国家标准与技术研究院（NIST）发布，是美国的政府标准，1993年的<strong>SHA-0</strong>版本，但发布之后很快就被NSA撤回，是<strong>SHA-1</strong>的前身。SHA-1则于1995年发布，SHA-1在许多安全协议中广为使用，包括TLS和SSL、PGP、SSH、S/MIME和IPsec，曾被视为是MD5（更早之前被广为使用的散列函数）的后继者。<br>其中SHA-0/1和MD5类似，1996年Hans Dobbertin就指出存在散列碰撞的可能性，只是密码专家们一直无法给出实际例子，或者说这个穷举计算耗时太久，但2004年王小云及其研究同事展示了几个1024-bit消息的MD5第一个碰撞示例，一年后王小云与姚期智夫妇提出新的<a href="https://www.schneier.com/blog/archives/2005/08/new_cryptanalyt.html" target="_blank" rel="external">SHA-1散列函数散列冲撞算法，碰撞缩短为2^63步</a>。</p>
<p><strong>SHA-2</strong>：2001年发布，包括SHA-224、SHA-256、SHA-384、SHA-512、SHA-512/224、SHA-512/256 六个不同的算法标准。</p>
<p><strong>SHA-3</strong>：2015年正式发布，并未大规模应用，因为目前 SHA-2 尚未被有效破解，但是和MD/SHA-0/1一样，存在破解可能，所以IETF寻找一种新的架构，于是有了基于Keccak,海绵结构(sponge construction)的SHA-3，这也是NIST于2005年/2006年响应自MD5和SHA-1被破解之后召开会议讨论制定新的Hash函数标准。</p>
<p><strong>SM3</strong>：中华人民共和国政府采用的一种密码散列函数标准，由国家密码管理局于2010年12月17日发布，其安全性及效率与SHA-256相当，也是王小云教授主导设计的。</p>
<p>严格来说MD5/SHA-1现在应该是该淘汰的，比如很多下载网站已经不建议MD5，像Apache下载提供的是SHA512，即SHA-2系列验证，md5比如作为nginx etag（当然性能考虑默认似乎是modify time+file size）/加盐的密码验证等。<br><strong>下面一张表看清SHA家族</strong><br><img src="/images/sha_fam.png" width="100%"></p>
<h3 id="MD5碰撞"><a href="#MD5碰撞" class="headerlink" title="MD5碰撞"></a>MD5碰撞</h3><p>上述，在 <a href="http://merlot.usc.edu/csac-f06/papers/Wang05a.pdf" target="_blank" rel="external">How to Break MD5 and Other Hash Functions</a> 这篇文章里，其实提供了一种碰撞MD5的方法，理解本文需要一定的密码学和数理知识，不过看起来是基于古老而又大胆创新的差分攻击思路（比前人胜在数学专业），作者通过设计一些列约束条件，成功控制长比特进位的攻击路线 ，但碰撞产生的差分以及对应差分路径和条件影响碰撞对的搜索，在 HashClash作者Marc Steven提出构造前缀碰撞法，并提供了一个伪造ca证书的示例，<strong>作者还开源了自己的 Chosen-prefix Collisions for MD5 碰撞实现</strong>，感兴趣可以到<a href="https://www.win.tue.nl/hashclash/ChosenPrefixCollisions/" target="_blank" rel="external">这里下载</a>，可以自己尝试一个MD5碰撞，不过看起来是基于Windows平台的，而且会比较耗时。<br>构造前缀碰撞可以在尾部添加不同的填充数据是的恶意程序能够伪装，但其实还有一个比较有趣的应用，笔者知道JPG类图片天然适合在尾部隐藏数据，所以虽然两张不同的图片MD5一样的概率几乎为零，但是借助填充，理论上也可以构造一个MD5碰撞，<strong>他们MD5一样，但是是两张完全不同的图片</strong>，博主Nat McHugh 就提供了一个方法，<a href="https://natmchugh.blogspot.com/2015/02/create-your-own-md5-collisions.html" target="_blank" rel="external">链接在这里</a>(需要梯子) ，图片一张是<a href="https://s3-eu-west-1.amazonaws.com/md5collisions/ship.jpg" target="_blank" rel="external">船</a>，一张是<a href="https://s3-eu-west-1.amazonaws.com/md5collisions/plane.jpg" target="_blank" rel="external">飞机</a>。<br>有趣的另一点是，如果有时间，你可以拿上述两张图，对比下微博/各种云/推特等他们的图片上传策略，是否基于MD5。</p>
<h3 id="相似Hash"><a href="#相似Hash" class="headerlink" title="相似Hash"></a>相似Hash</h3><p>上文是两张不同图片同样Hahs结果，如果两张图片是同一张，但有细微差别，如混入填充数据，有办法hash结果也类似吗？<br>自然想到SimHash，但是效果如何，后续提及。</p>
<h3 id="彩虹表-Rainbow-table"><a href="#彩虹表-Rainbow-table" class="headerlink" title="彩虹表(Rainbow table)"></a>彩虹表(Rainbow table)</h3><p>相比目前大多构造MD5碰撞耗费算力，MD5碰撞另一个方案是彩虹表。<br>国内一些提供md5破解网站可能如宣称基于KV存储，当然可能也会增加一些常见的缓存，如e10adc3949ba59abbe56e057f20f883e 就可以立即返回 123，不过笔者尝试解密md5大多不成功。<br>但彩虹表不是简单的像一些认为的基于“密文-&gt;明文+”的存储，解密md5的时候通过密文直接反查出明文，wikipedia的解释：<br><em>A rainbow table is a precomputed table for reversing cryptographic hash functions, usually for cracking password hashes. Tables are usually used in recovering a password (or credit card numbers, etc.) up to a certain length consisting of a limited set of characters. It is a practical example of a space–time tradeoff, using less computer processing time and more storage than a brute-force attack which calculates a hash on every attempt, but more processing time and less storage than a simple lookup table with one entry per hash. Use of a key derivation function that employs a salt makes this attack infeasible.</em><br>这里官方提供的常用已生成好的<a href="http://project-rainbowcrack.com/table.htm" target="_blank" rel="external">List of Rainbow Tables</a>，上述预先计算好的表指的就是基于 多少位密码、何种字符集(数字/字母)、哈希链长度、条数、第几次等生成的速查表，常常用于破解长度固定且包含的字符范围固定的密码，以空间换时间的典型实践，比暴力破解（Brute force）更实用。<br>预计算<br>我们可以参考下 <a href="https://zh.wikipedia.org/wiki/%E5%BD%A9%E8%99%B9%E8%A1%A8" target="_blank" rel="external">预先计算的散列链</a> ，即 如 <a href="https://lasec.epfl.ch/pub/lasec/doc/Oech03.pdf" target="_blank" rel="external">faster time-memory trade-off technique</a> 介绍，RT的设计思路是很值得花时间理解，它本身考虑的是函数散列值和散列条件之间域的映射，除了构造 R函数（reduction function，归约函数）和哈希函数H之外，它并不关心hash函数具体实现，其把所有Hash运算看作是Hash链上一段，这也使得该理念适用大多数的散列函数，只要根据初始条件生成足够数量的链（预计算表），每次R/H运算后查找是否存在hash链，如存在，则重复哈希链的计算过程并chck前置是否符合，否则重复R/H计算至选定次数（k-1），大幅降低表的数量（实际上，当K=1时，正是全量的“密文-&gt;明文”对），但缺点寻找过程需要计算，生成预计算表耗时，而且该表覆盖可能不够全面导致查询失败（概率可通过预计算条件计算）。<br>通过使用增加R/H的中间态，大幅减少数据的存储，限定条件（比如8位字母+数字，99%概率），可以计算得比全量存储小多了，可能几百千万级别的。</p>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p><strong>Merkle-Damgard结构</strong>，<a href="https://en.wikipedia.org/wiki/Merkle%E2%80%93Damg%C3%A5rd_construction" target="_blank" rel="external">其是一种</a>较早且常见的构建防冲突加密散列函数的方法/架构，他是上文提到SHA-3以外的Cryptographic hash function存在的理论支撑，1979年Ralph Merkle和Ivan Damgård独立证明了在添加合适填充和compression function具备防碰撞的情况下，那么对应的Hash function也是（collision-resistant）防碰撞的。但其本身存在缺点，催生了后来的海绵体（sponge construction）计划取代。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>生日悖论</strong><br><strong>指在不少于23个人中至少有两人生日相同的概率大于50%</strong>。此非悖论，只是30年代悖论未确立，但该结论有违大多数人直觉，比如在60个人的班级里，存在生日相同的概率就达99.4%了。<br><strong>识别“篡改”，但是无法辨别出“伪装”</strong><br>单向散列函数能够辨别出“篡改”，但是无法辨别出“伪装”。鉴于此，提出了消息认证的技术，包括消息验证码和数字签名。<br><strong>长度扩展攻击（Length extension attacks）</strong><br>是指针对某些允许包含额外信息的加密散列函数的攻击手段。<br><strong>盐， salt</strong><br>加盐可以防御彩虹攻击，因为彩虹表生效前提是静态的hash函数。<br>bcrypt是根据Blowfish加密算法所设计的密码散列函数，其提供一个加盐的流程以防御彩虹表攻击。Blowfish和AES/DES一样都是加密函数，像Java就有BCrypt工具类实现各种hash以及加随机的盐，如Spring Security实现BCryptPasswordEncoder类，支持加盐的密码认证，其会获取到保存的初始盐和hash，并进行比对。<br><strong>Bloom Filter</strong><br>BF本质是一种bit数组的数据结构和hash函数，用于判断一个元素是否属于这个集合，他能确认否定的结论，不能确认肯定结论，即BF未命中即表示不属于，反之未必。<br>BF准确度和bit位数和函数次数相关，不过前提是函数设置比特位随机独立，像guava则直接用murmur3_128得到一个数组后，以低64位为初始值，每次加上高64位 来确定本次bit位置1.<br>BF只能增不能删除数据，不过存在其他一类Counting BF，有限度的支持删除。<br><strong>HyperLogLog Counting</strong><br>HLL 是基数计数Cardinality Estimation一种，即常用来统计不同元素的个数，如uv、不同的uid、不同的ip等，HLL本质是一种基数估算。<br>和BF一样，其实他们都是用hash函数来模拟随机性。</p>
<p><strong>redis hashtable的KV分布的问题</strong><br>笔者用Redis模拟，并非Java，分别用随机产生53万/105万万数据测试下来接近备注里的分布。注意：<br>1）在插入完成后，需要等几秒redis完成rehash再debug htstats。<br>2）下述随机数的数量选择在2的幂次附近，是为了让redis进行rehash临界，满足 0.5的负载，比如产生106万是为了近可能未产生超1048576个从而使得redis rehash。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"># 产生529276个随机数/1048576个槽</div><div class="line">➜ ~ git: bin/redis-benchmark -q -n 530000 -P 16 -r 100000000 set key:__rand_int__ __rand_int__</div><div class="line">set key:__rand_int__ __rand_int__: 398009.94 requests per second</div><div class="line"># 对应 hashtable</div><div class="line">127.0.0.1:6379&gt; debug htstats 0</div><div class="line">[Dictionary HT]</div><div class="line">Hash table 0 stats (main hash table):</div><div class="line"> table size: 1048576</div><div class="line"> number of elements: 529276</div><div class="line"> different slots: 415816</div><div class="line"> max chain length: 7</div><div class="line"> avg chain length (counted): 1.27</div><div class="line"> avg chain length (computed): 1.27</div><div class="line"> Chain length distribution:</div><div class="line">   0: 632760 (60.34%)</div><div class="line">   1: 319982 (30.52%)</div><div class="line">   2: 80377 (7.67%)</div><div class="line">   3: 13508 (1.29%)</div><div class="line">   4: 1748 (0.17%)</div><div class="line">   5: 183 (0.02%)</div><div class="line">   6: 17 (0.00%)</div><div class="line">   7: 1 (0.00%)</div><div class="line">[Expires HT]</div><div class="line"></div><div class="line"># 产生1055783个随机数/2097152个槽</div><div class="line">➜ ~ git: bin/redis-benchmark -q -n 1060000 -P 16 -r 100000000 set key:__rand_int__ __rand_int__</div><div class="line">127.0.0.1:6379&gt; debug htstats 0</div><div class="line">[Dictionary HT]</div><div class="line">Hash table 0 stats (main hash table):</div><div class="line"> table size: 2097152</div><div class="line"> number of elements: 1055783</div><div class="line"> different slots: 829655</div><div class="line"> max chain length: 7</div><div class="line"> avg chain length (counted): 1.27</div><div class="line"> avg chain length (computed): 1.27</div><div class="line"> Chain length distribution:</div><div class="line">   0: 1267497 (60.44%)</div><div class="line">   1: 638693 (30.46%)</div><div class="line">   2: 160040 (7.63%)</div><div class="line">   3: 27052 (1.29%)</div><div class="line">   4: 3531 (0.17%)</div><div class="line">   5: 307 (0.01%)</div><div class="line">   6: 29 (0.00%)</div><div class="line">   7: 3 (0.00%)</div><div class="line">[Expires HT]</div></pre></td></tr></table></figure></p>
<p>可以看到当负载因子接近0.5时，上述分布和java HashMap给出的理论分布比较符合的。</p>
<h2 id="REF："><a href="#REF：" class="headerlink" title="REF："></a>REF：</h2><p><a href="https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8" target="_blank" rel="external">散列函数</a><br><a href="https://zh.wikipedia.org/wiki/SHA%E5%AE%B6%E6%97%8F" target="_blank" rel="external">SHA家族</a><br><a href="http://www.ruanyifeng.com/blog/2018/09/hash-collision-and-birthday-attack.html" target="_blank" rel="external">哈希碰撞与生日攻击</a><br><a href="https://en.wikipedia.org/wiki/Merkle%E2%80%93Damg%C3%A5rd_construction" target="_blank" rel="external">Merkle–Damgård construction</a><br><a href="https://www.freebuf.com/column/209755.html" target="_blank" rel="external">不安全的随机数</a><br><a href="https://wooyun.js.org/drops/MD5%E7%A2%B0%E6%92%9E%E7%9A%84%E6%BC%94%E5%8C%96%E4%B9%8B%E8%B7%AF.html" target="_blank" rel="external">MD5碰撞的演化之路</a><br><a href="https://lwn.net/Articles/474912/" target="_blank" rel="external">Denial of service via hash collisions</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;i&gt;&lt;strong&gt;intro1&lt;/strong&gt;：常见hash函数及使用场景&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro2&lt;/strong&gt;: Java hashCode实现相关/为何计算hash时选择31/33相乘&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro3&lt;/strong&gt;: Redis哈希表装载因子为何大于1，而非Java的0.75&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro4&lt;/strong&gt;: 新hashmap实现为何要8个冲突才升级红黑树&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro5&lt;/strong&gt;: 一致性哈希是否真的有用&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在写前一篇博文时，发现Redis上的一个hash函数相关的commit：&lt;a href=&quot;https://github.com/antirez/redis/commit/adeed29a99dcd0efdbfe4dbd5da74e7b01966c67&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Use SipHash&lt;/a&gt;，于是笔者想到总结下开发中经常遇到的哈希函数，本篇为第一部分，介绍常见hash算法、java 的hash应用，以及hash对应的数据结构在Java/Redis使用，后续介绍广义的hash，如GeoHash，LSH的Simhash/minHash，以及笔者曾在比较相近图片时用到的hash，同GeoHash还会介绍下Google S2/Uber H3编码。&lt;br&gt;
    
    </summary>
    
    
      <category term="hash" scheme="http://thomaslau.github.io/tags/hash/"/>
    
      <category term="HashTable" scheme="http://thomaslau.github.io/tags/HashTable/"/>
    
      <category term="Object.hashCode" scheme="http://thomaslau.github.io/tags/Object-hashCode/"/>
    
  </entry>
  
  <entry>
    <title>对限频限流的思考</title>
    <link href="http://thomaslau.github.io/2020/05/10/2020-05-10-on_ratelimiter/"/>
    <id>http://thomaslau.github.io/2020/05/10/2020-05-10-on_ratelimiter/</id>
    <published>2020-05-10T02:59:10.000Z</published>
    <updated>2020-05-10T19:28:36.916Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><i><strong>intro1</strong>：限流的常见实现方式及常见开源限流组件有注意点</i><br><i><strong>intro2</strong>: 你真的理解了漏桶和令牌桶限流算法吗，划分/区分二者科学吗</i><br><i><strong>intro2</strong>: 你知道限流保障服务可用时也可能导致其他服务不可用吗</i></p>
</blockquote>
<p>早先看到朋友圈分享限频限流的文章，从中有些收获，不过笔者不打算赘述，想进一步探讨下限频限流，以及限频限流使用时可能遇到的问题，同时也是对前一篇博文的回应，或许看完本文你会对Guava令牌桶算法有不一样的理解。<br><a id="more"></a></p>
<h2 id="什么是服务限流限频？"><a href="#什么是服务限流限频？" class="headerlink" title="什么是服务限流限频？"></a>什么是服务限流限频？</h2><p>先看 <strong>流量整形</strong>(traffic shaping)这个概念，wikipedia解释是一种控制网络数据包传输的技术，通过控制数据速率使数据较为均匀发送。流量整形可以一定程度减少网络拥塞，并减弱突发流量带来的影响。<br>对于像一个操作数据库的接口、甚至google查询、微信加好友等各种系统服务来说，也需要对请求进行频率控制，这类限频的思想就来自于流量整形，漏桶和令牌桶限流算法即是源自于流量整形衍生。<br>对服务的频控，具体到不同的实现大同小异，如<br>Guava doc对限频（RateLimiter）的理解是 <strong><em>在一个指定的速率上分发许可（permit）,当每次来请求的时候，线程会阻塞，直到获取到可用的permit，使用完这些permit之后不需要进行释放的操作</em></strong><br><em>本文暂且认为限频/限流/频控/流量整形是同一个概念</em></p>
<p>限频显然关键的一点是频率，包括频率大小以及频率计算方式，但还有一点是针对谁限频，即限频的key，常见的如path(url)、ip、api、method、uid等各种维度，似乎没有文章讨论过这一点，但是重要的，下文会讨论。<br>其实考虑到流量整形，限频还有一点要考虑，就是对 均匀 的定义，现实请求是离散又连续均匀的，比如某类请求从每分钟维度统计是均匀的，但可能具体到每秒每0.1秒可能就不是，下文也会提及这点。<br><strong>但不管如何划分，限频的本质是对一类周期性共享资源的使用</strong>。</p>
<h2 id="限频的-Key-设计"><a href="#限频的-Key-设计" class="headerlink" title="限频的 Key 设计"></a>限频的 Key 设计</h2><p>不论何限频组件/算法，都要面临对限流限频资源即key的选择，key虽简单，但重要。<br>像静态的基于API/PATH/METHOD，或者动态uid/ip/cookie等，他们有什么不同呢？</p>
<p>笔者认为限频也可以按功能分为服务限频和业务限频，即针对Key的不同分为：</p>
<ul>
<li>服务限频<br>像同一个接口/path等通常操作同一类资源，显然需要有频率来控制对后端资源的访问。<br>这也即现代大多数网关Gateway/Service Mesh等容器/技术会提供的，可以透明实现的而无需业务方实现。</li>
<li>业务限频<br>用来防止某些人恶意刷接口的，如最简单的根据用户请求某类接口来限制频次(当然简单的可归类于服务，但如复杂需侵入业务的需求则否）。</li>
</ul>
<p>服务限频通常根据 接口名/url(request path)这类常量限制，业务限频则是动态的uid、ip、cookie值、甚至地区等，服务限频只能起到保证整体的后端服务可用，不能防止恶意用户刷频，比如某接口限频100次/分钟，用户A访问刷频了99次，那么其他所有用户该分钟內只能访问1次了，基于uid的业务限频可以避免该类问题，但业务限频不能进行服务限频保证后端服务。</p>
<p>此外，上述限频可以认为默认皆同步实现，假设有的需要业务之间调用并计算才能得到次数，比如用户当天下单优惠次数，比如用户某类接口成功次数，用户每分钟调用接口A和B加起来不能超过多少次，这些需要渗入业务结果，或者通过大数据业务计算出超频的用户，推送给接口限频，对这类限频需求，笔者定义为异步业务限频，当然这存在之后滞后的问题。<br>像Nginx/lstio/linkerd/springcloud都提供了服务限频，而springcloud默认通过配置也即可支持基于uid等业务限频，有些大公司实现的网关也是支持服务和业务(如用户唯一标识)的，如Dubbo的限频Tpslimiter就是仅对service key即接口类限频，而SpringCloud Alibaba 通过Sentinel则支持更丰富的服务/业务限频策略。</p>
<p>服务或业务限频，同步或异步计算各有优劣和不足，但直接公开的服务，如果没有业务限频而只有服务限频存在刷频风险。对于实现限频的方式来说，基于接口/path的服务限频，存在热点问题，基于uid级别限频则可能耗费存储，而且是限频的接口数X每秒(分钟)內活跃用户数的量级。</p>
<h2 id="限频实现的几种技术"><a href="#限频实现的几种技术" class="headerlink" title="限频实现的几种技术"></a>限频实现的几种技术</h2><p>上述限频按功能分类，这里聊聊按实现算法分类。<br>这里几个较可信网站的文章，<a href="https://www.infoq.cn/article/Qg2tX8fyw5Vt-f3HH673" target="_blank" rel="external">分布式服务限流实战</a>, <a href="https://www.infoq.cn/article/microservice-interface-rate-limit" target="_blank" rel="external">微服务接口限流的设计与思考</a>，把限频实现做了分类，分为：<br><strong>信号量、计数器、固定窗口、滑动窗口、漏桶算法(Leaky Bucket)、令牌桶算法(Token Bucket)、分布式限流。</strong><br>以下内容假设读者对此稍微了解。<br>实际上，更早一篇来自网关Kong的文章 <a href="https://konghq.com/blog/how-to-design-a-scalable-rate-limiting-algorithm/" target="_blank" rel="external">How to Design a Scalable Rate Limiting Algorithm</a>，也有此分类，Kong本身使用的是<a href="https://github.com/Kong/kong/blob/0f2d77b678624b0383c0c80c01319cdee5b65cdb/kong/plugins/rate-limiting/policies/init.lua" target="_blank" rel="external">计数法</a>。<br>信号量主要用来控制并发数，本文不做讨论。<br>原文对滑动窗口描述简略，这里补充下：假设限频每分钟100次，一般滑动窗口是将1分钟分割多个单位时间，比如分割为10个窗口，即每6秒滑动一个窗口，统计时间范围也相应后移动。次数不需要每窗口均匀的，也可以多个滑动窗口，比如同时加一个每12秒也可，这样实现每6秒不超过x次每12秒不超过y次。<br>固定窗口/滑动窗口是一类好理解，但计数器和窗口也是一类，都是累计次数的做法（而令牌桶/漏桶归为桶限流），滑动窗口是更细粒度的计数器/固定窗口，如上分析也是可以支持突发流量，Hystrix停更后建议的替代者resilience4j 默认<a href="https://github.com/resilience4j/resilience4j/blob/master/resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/internal/AtomicRateLimiter.java" target="_blank" rel="external">AtomicRateLimiter</a>即是该做法：<br><em>Our RateLimiter is not an implementation of a leaky bucket algorithm which leaks out at a constant rate. It uses a fixed window algorithm which can have burst effects at time window boundaries.</em><br>见<a href="https://github.com/resilience4j/resilience4j/issues/336" target="_blank" rel="external">issue-336</a>。<br>代码略繁，AtomicRateLimiter类变量nanoTimeStart为初始化时间，在计算当前时间窗口时以此为起点（nanoTime() - nanoTimeStart），在acquirePermission时因为burst会有其他计算但基本以时间窗口内累计permits为准，这和下文要分析的令牌桶/漏桶异曲同工。<br><em>需要指出Sentinel官方wiki的 从 <a href="https://github.com/alibaba/Sentinel/wiki/Guideline:-%E4%BB%8E-Hystrix-%E8%BF%81%E7%A7%BB%E5%88%B0-Sentinel" target="_blank" rel="external">Hystrix 迁移到 Sentinel</a>提到的 滑动窗口LeapArray、Ring Bit Buffer(滑动窗口演变)是其统计请求量/成功量/错误失败量的实现，而不是限频算法的实现，和<a href="https://github.com/Netflix/Hystrix/blob/master/hystrix-core/src/main/java/com/netflix/hystrix/util/HystrixRollingNumber.java" target="_blank" rel="external">Hystrix的滑动窗口</a> 实现数据平滑统计类似，但Hystrix只起统计参数作用不参与限频，而Sentinel不仅统计频率提供给StatisticSlot模块使用，还会更新至Node并参与下一次限频(下文提及)。Hystrix 就是将执行结果存储在10个长1秒的时间窗口中，每秒增删来更新窗口，统计数据从这类窗口得出，Sentinel默认似乎仅两个，但默认保持一分钟的。为什么要用滑动窗口记录这类数据而不是直接更新，甚至Sentinel还为此优化高效LeapArray？笔者未能从三者文档/代码或其他文章找到，不过大胆猜测可能初衷是希望借鉴EWMA计算均值的想法。</em><br>Hystrix可以有限的做过载保护削峰，基于信号量做线程隔离/控制并发数，没有真正的限频限流机制，故本文不再讨论 Hystrix（<a href="https://github.com/alibaba/Sentinel/wiki/Sentinel-%E4%B8%8E-Hystrix-%E7%9A%84%E5%AF%B9%E6%AF%94" target="_blank" rel="external">Sentinel 与 Hystrix 的对比</a>）。</p>
<p>Dubbo的限频 DefaultTPSLimiter 可以自定义时间间隔(不考虑gc可以到1毫秒)，即该时间间隔内不超过设置的次数，即其本质是计数法，而不是自称的漏桶，像lyft/ratelimit也是计数法基于redis分布式。<br>笔者记得曾听过淘宝系分享早期限频就是用 计数法 + guava map实现的LRU缓存。<br><strong>不过滑动窗口计数的思想，非常适合流计算工具去计算频率</strong>，下面storm/kafka部分会提及。<br>Nginx和阿里的 Sentinel 都实现了漏桶算法，Springcloud Gateway和Guava Ratelimiter实现了令牌桶。</p>
<p><strong>上述限频方式虽然有优劣，但更有各自的适用场景，比如要求每分钟不超过60次，可以不均匀，使用计数法是比较好的，而漏桶和令牌环都做不到恰好60，因为允许突发。</strong><br><strong>同时，限频限流也不只上述几个分类</strong>，我们甚至可以任意实现有别上述几类的限频方法，比如上述计数法的两个窗口都是基于时间的窗口（时间片），我们也可以基于请求的窗口，即维护一个队列，如每分钟限制100次，那么维护队列最长1000，当请求时判断是否超1000，如否放行并追加末尾，否则取头元素时间并判断是否超一分钟：1)如否，表示已满则拒绝该请求，2)否则，放行并删头追加末尾。该方案同计数法但可以无锁，只是耗内存。<br>分布式限流一般是计数/桶算法的分布式版本，故不提。<br>上面计数法显然默认不支持的流量整形，token支持流量整形，而leaky默认否，但下文分析其例外情况。<br>下面让我们重点看剩下的leaky和token算法</p>
<h2 id="漏桶-Leaky-Bucket-令牌桶-Token-Bucket-是否值得区分"><a href="#漏桶-Leaky-Bucket-令牌桶-Token-Bucket-是否值得区分" class="headerlink" title="漏桶(Leaky Bucket)/令牌桶(Token Bucket)是否值得区分"></a>漏桶(Leaky Bucket)/令牌桶(Token Bucket)是否值得区分</h2><p><em>这段分析认为leaky/token差别只是概念上的，实现上区分无意义，较长，不兴趣可不读，跳到下一节。</em><br>看完上述分类，读者有想过自己真的了解上述分类吗？leaky和token真的有区别吗？</p>
<h3 id="真实的流量"><a href="#真实的流量" class="headerlink" title="真实的流量"></a>真实的流量</h3><p>笔者认为上述分类是混乱的，区分leaky和token不是那么必要。<br>在讨论leaky和token时，大家会经常看到漏桶滴水的两张对比图，即两图实际用水流/水滴模型，<a href="https://en.wikipedia.org/wiki/Leaky_bucket" target="_blank" rel="external">wikipedia这里也有详细介绍</a>。<br>限流通常是因为服务性能有限而要求，但也会被用来纯粹的限制次数需求(防ddos/防薅羊毛等)，而限频使用何种处理方法则是因为真实的请求是离散而时间是一定程度上连续导致。我们先抛开水流，看下真实的请求需要怎么处理：</p>
<p>假设时间最小精度是1秒，需求是限制1分钟处理600个请求，如果不关心出现600个请求1秒处理完，那么使用基于1分钟的计数做法没有问题，这么做达到需求的限频目的，但是对服务限频而言没有，因为可能出现第59-60秒处理600个，甚至下一轮00-01秒也处理600个，即极端情况1秒处理1200个了，对服务来说不希望看到，当把计数的窗口缩小，即每6秒钟重置，也就是把60秒切分10份，每份不超过60(600/10)个请求，此时极端情况1秒处理120了…当划分越细到最小1秒，极端就是每秒20个，但此时存在1秒内不处理请求也就越明显此时划分就类似放token，但目前都是计数法，按窗口计数真正的请求。<br>真实请求不是均匀的，比如第2秒20请求过来，接下来3-60秒可能都没有数据，按计数法会拒掉10个，但考虑到后续空闲，拒掉是浪费，是否可缓冲到第3秒执行，即占用下时间片的额度？这里涉及历史状态，为简化，只记录上一次状态（时间或量），以及一个burst量，像guava限频就记录上次请求时间。</p>
<p><a href="http://www.cs.ucc.ie/~gprovan/CS6323/2014/L11-Congesion-Control.pdf" target="_blank" rel="external">这是笔者搜到的图</a>，对比常见水流模型二图，该图其实更易理解leaky/token的不同<br><img src="/images/leaky_token_buket.png" width="100%"></p>
<h3 id="Token-Bucket"><a href="#Token-Bucket" class="headerlink" title="Token Bucket"></a>Token Bucket</h3><p>上述放入token的情景，换种思路，假设请求是均匀的，<strong>即把每个时间片等同于一个token</strong>，那么通过计算时间差就可以得到该周期内(秒/分钟…)已经发放的token，Token Bucket即是如此，通过控制发放（token）permit方式控制permit被消费速度（即限频），但一般不会用后台线程每 1/n 秒将 bucket 中的 token 数量加一，而是上述计算时间差，得到该时间差內增量token，加上次剩余的 token （二者不超过 bucket 容量限制），然后比较剩余token 数是否满足需要。<br>这种逻辑是依据排队理论中的 <a href="https://en.wikipedia.org/wiki/Little%27s_law" target="_blank" rel="external">Little’s law</a><br>对于一个稳定的系统中，长期的平均顾客人数，等于长期的有效抵达率（λ），乘以顾客在这个系统中平均的等待时间（W），反过来，平均等待时间就是平均顾客数除以有效抵达率。<br>Guava限频/Sentinel就是基于token bucket算法，支持一定的burst，其中SmoothWarmingUp还支持平滑预热的burst，Guava Ratelimiter本质把限频转换成一种排队现象，每次请求返回的实际是下一轮请求需等待(permits)的时间。guava的burst支持即刻或者预热，即刻并不友好，而且burst量默认是一秒的，如果aquire的不是每次一个还是有害的，预热通过线性放量可以定量的缓解，当然如果你想指数级放量也未尝不可，对warmup机制感兴趣参考这篇 <a href="https://mp.weixin.qq.com/s/Mj9TG0e71uoN-W1H1JRHJA" target="_blank" rel="external">源码分析RateLimiter SmoothWarmingUp 实现原理</a></p>
<h3 id="leaky-token是否值得区分"><a href="#leaky-token是否值得区分" class="headerlink" title="leaky/token是否值得区分"></a>leaky/token是否值得区分</h3><p>我们先看经典的Nginx限频限流怎么做的。<br>Nginx可以分别分为针对并发连接数和针对请求（QPS）进行，基于Nginx的扩展OpenRest的<a href="https://github.com/openresty/lua-resty-limit-traffic/blob/master/lib/resty/limit/req.md" target="_blank" rel="external">lua-resty-limit-traffic</a>模块基于redis支持分布式支持leaky/token两种限频，不过这里和Nginx基于并发连接数（limit_req_conn）限频都不讨论，主要看Nginx基于QPS的限频limit_req_zone。<br>如下配置一个基于ip的限频，每秒20次：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">  ...</div><div class="line">  limit_req_zone $binary_remote_addr zone=allips:10m  rate=20r/s;</div><div class="line">  server &#123;</div><div class="line">    ...</div><div class="line">    limit_req  zone=allips  burst=5  nodelay;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Nginx自身有的请求限制模块<a href="http://nginx.org/en/docs/http/ngx_http_limit_req_module.html" target="_blank" rel="external">ngx_http_limit_req_module</a>，正如其描述Nginx基于leaky bucket限频。<br>题外话，Nginx限频缺点是：配置不适合动态修改，存储是单机内存，即不是跨机器共享分布式，内存占用大需要考虑（如上述基于ip 限频64 bit，1M最多能存储16000个，状态指的就是key，nginx有根据LRU优化，但毕竟可能数据不全）。其次，如果你有Nginx实现基于区域的限频，可以试试ip转区域的插件IP2Location Nginx Module。<br>注意上述“burst=5  nodelay”，表示处理突发请求不超过5个，如果不配置nodelay，那么请求会排队等到下一秒，配置nodelay表示可以立即执行(但不超过bust数)，可以看到虽然基于Leaky，但是Nginx限频还是支持突发流量的。</p>
<p><a href="https://github.com/nginx/nginx/blob/master/src/http/modules/ngx_http_limit_req_module.c#L411" target="_blank" rel="external">Nginx 漏桶算法代码</a>，可以看到Nginx leaky也是把permit等同于时间片的，那么思考个问题：<br><strong>在水流模型中流入和流出分别是什么？把permit等同于时间片，是否兼具流入和流出的角色</strong>？</p>
<p>如果读者认定Leaky不允许突发“Doesn’t allow bursty transmissions”，即 <em>它们之间最主要的差别在于：漏桶算法能够强行限制数据的传输速率，而令牌桶算法能够在限制数据的平均传输速率的同时还允许某种程度的突发传输</em>，那么Nginx/Sentinel/Guava都不是leaky，就比较像token了，这时 <a href="http://www.cs.ucc.ie/~gprovan/CS6323/2014/L11-Congesion-Control.pdf" target="_blank" rel="external">“For this purpose we use a token bucket, which is a modified leaky bucket”</a>。</p>
<p>不过<a href="https://github.com/mailgun/gubernator" target="_blank" rel="external">Gubernator</a> 确实是按照这点来区分的，分别实现了leaky/token算法，正如其备注的 “Leaky Bucket is implemented similarly to Token Bucket where OVER_LIMIT is returned when the bucket is full。”</p>
<p>Sentinel文档里作者认为Guava像leaky bucket，自己<a href="https://github.com/alibaba/Sentinel/wiki/%E9%99%90%E6%B5%81---%E5%86%B7%E5%90%AF%E5%8A%A8" target="_blank" rel="external">更像是token bucket</a>，而大部分中文提及Guava是token bucket，<strong><em>不过如果看guava源码/doc，作者没有甚至都未提过token或leaky bucket</em></strong>，在doc里作者阐述了流入的是均匀token[permits]的设计思想，但没有提及token bucket说法。<br>需要指出的是Sentinel的RateLimiterController是leaky算法。</p>
<h3 id="wikipedia的解释"><a href="#wikipedia的解释" class="headerlink" title="wikipedia的解释"></a>wikipedia的解释</h3><p>维基百科对leaky与token的关系做了对比：<br><a href="https://en.wikipedia.org/wiki/Leaky_bucket" target="_blank" rel="external">https://en.wikipedia.org/wiki/Leaky_bucket</a></p>
<p><em><strong>The leaky bucket as a meter is exactly equivalent to (a mirror image of) the token bucket algorithm</strong>, i.e. the process of adding water to the leaky bucket exactly mirrors that of removing tokens from the token bucket when a conforming packet arrives, the process of leaking of water from the leaky bucket exactly mirrors that of regularly adding tokens to the token bucket, and the test that the leaky bucket will not overflow is a mirror of the test that the token bucket contains enough tokens and will not ‘underflow’. Thus, given equivalent parameters, the two algorithms will see the same traffic as conforming or nonconforming. <strong>The leaky bucket as a queue can be seen as a special case of the leaky bucket as a meter.</strong></em><br>…<br><em>In fact both are effectively the same, i.e. implementations of both the leaky bucket and token bucket, as these are the same basic algorithm described differently. This explains why, given equivalent parameters, the two algorithms will see exactly the same packets as conforming or nonconforming.</em><br>leaky算法分为as a queue和as a meter，as a queue可以堪称as a meter的特例(一个单位的延迟)，不过原文确实提及as a queue不存在突发,防抖动，<br>as a meter的leaky和token算法本质同只是描述不同。</p>
<h3 id="进一步理解限频"><a href="#进一步理解限频" class="headerlink" title="进一步理解限频"></a>进一步理解限频</h3><p>笔者觉得可以把限频限流分成两部分来看：</p>
<ul>
<li>计频：该部分功能是计算qps，对计数类就是当前时间段內累积次数，对leaky/token是该周期内permits。</li>
<li>控频，或限频策略，即超频时触发何种操作。</li>
</ul>
<p>控频分拒绝、等待、预热放行，或如Sentinel的策略 拒绝、Warm Up、匀速排队，nginx、guava、springcloud等部分支持。<br>这样上文提到的几个分类算法，可以认为是计频和控频实现方式的组合。</p>
<h2 id="控频"><a href="#控频" class="headerlink" title="控频"></a>控频</h2><p>介绍下几个组件对超频的处理：<br>Guava限频时，中aquire接口超频阻塞，而tryAquire接口则支持立即或超时后拒绝。<br>Sentinel支持阻塞、立即或超时后拒绝，具体DefaultController-默认处理策略，直接拒绝处理，RateLimiterController-匀速排队，WarmUpController-预热/冷启动方式，WarmUpRateLimiterController-预热+匀速排队，但Sentinel同时包含flowrule配置规则的处理。<br>而spring-cloud-gateway redis限频则直接拒绝，只不过会返回等待的时间tokensLeft。<br>Guava ratelimiter融合了令牌桶限频算法和超频处理的逻辑（了解这点，读guava代码就会更容易理解），如果你只是希望理解令牌桶限频，那么spring-cloud-gateway redis脚本就很简洁，而且目前只有setex操作，性能高，相比笔者曾见过的某司基于redis仿Guava限频算法包含hset/hget操作的脚本性能强多了。<br>但是，如springcloudgateway只能直接拒绝这类是起不到流量整形作用的，但流量整形直接暴露公网存在服务阻塞问题，下文会提及。</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ol>
<li>需要指出的是，上文真实放Token的做法并非不可取，像guava实现令牌桶是线程安全的，每次aquire一个token都是synchronized的，而计数法的cas/或CLH锁等，不过在笔者老旧Mac上50-100线程內并发都是可以达到单机十万每秒吞吐，性能尚可。而真实放token的实现方式可能会更快，如使用Disruptor无锁方式，只是空间耗费了。<br>像Sentinel自述warmup几个限频类是参考Guava实现，但去掉了synchronnized，笔者没有完全阅读这块代码，<strong>不过无锁的几个方法应该是存在非线程安全导致限频计算错，但正如其doc提到，实现的是限频这种操作/趋势，对精确性要求不高</strong>。</li>
<li>如有的说法“令牌桶是你能承受突发流量，漏桶是你无法承受”这种说法其实是模糊的，我们服务限流大多是无法承受突发流量，但业务(如基于uid)限流是可以承受突发的-但这也是在假设用户是非恶意用户的情况下，我们可以根据服务/业务设置不同的leaky/token，但理解算法本身时，没必要区分。</li>
<li>笔者没有仔细阅读Sentinel源码，所以再简单探讨下Guava的SmoothWarmingUp和Sentinel的WarmupController的区别，不保证对。<br>Guava 在于控制获取令牌的速率，即获取permits的时间storedPermitsToWaitTime，通过storedPermits以及freshPermits的过程，推算出 nextFreeTicketMicros，即关注/返回的始终是下一次permits需等待的时间，这个nextFreeTicketMicros就是上文说的guava需要的上一次状态，只不过guava提前了，因为guava acquire放行的原则就是尽量提前。<br>而Sentinel目的在于控制QPS，而且主要是passQps，首先对于存在某些异常调用更准确些，其次，QPS是历史数据，比Guava只有上一次状态更能做到均衡，像WarmupController还用到了previousPassQps，看起来通过历史数据想实现更精准些，包括QPS影响token存储量，同时Token开始增长时间也受QPS影响，频率计算跨越太多的类，影响条件也多，绝不是其注释提到的公式那么简单。<br>总之，看下来，个人认为 WarmupController 通过 warningToken 比guava能更早更充裕时间的应对流量突发，而通过warningQps看起来能使该过程更平稳，个人认为对服务而言可能比SmoothWarmingUp更友好。</li>
<li><a href="https://patents.google.com/patent/CN1536815A/zh" target="_blank" rel="external">工业上的限频</a>不仅上述几种，比如上述令牌桶被称为单桶单速，可以扩展单速双桶, 双速双桶等，单速双桶，顾名思义，比令牌桶多了一个桶，可以拿高速路汽车限流举例，红黄绿三灯划分两桶，就像流量被染色，绿桶全放行，黄桶等绿桶，分别用于处理量突发和速率突发的算法，笔者没有兴趣就不深入了。<br>总之我们需要具体情况具体分析，只有最合适没有普适且最优的。</li>
</ol>
<h2 id="限频限流注意事项"><a href="#限频限流注意事项" class="headerlink" title="限频限流注意事项"></a>限频限流注意事项</h2><p>使用限频限流注意事项笔者不赘述，这里讨论两点：<br>1）可以参考前一篇博文 <a href="http://thomaslau.xyz/2020/04/22/2020-04-22-spring_cloud_gateway_redisratelimit_issue/" target="_blank" rel="external">Springcloud Gateway Redis限频失效</a><br>补充下：<br>a）考虑到时间误差，是因为虽然可ntpdate等较时，但RTC时间存在误差，差0.1秒就能有10%误差，而有些廉价主机可能每天1+秒差。<br>b）其次收到反馈：<br>脚本在setex这个写入命令前使用了time命令，产生副作用，需要加 <strong>redis.replicate_commands()</strong> 。在3.2-4.x版本是需要加的，而且也可以如下避免频繁操作也会产生大量主从复制(对了，<strong>redis现在已经没有slave说法</strong>了)操作/流量：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">redis.replicate_commands()</div><div class="line">redis.set_repl(redis.REPL_NONE)</div></pre></td></tr></table></figure></p>
<p>需要再指出的是5.0之后不需要加了，实际上几年前antirez就此讨论过，<strong>而2018年<a href="https://www.redis.com.cn/commands/eval" target="_blank" rel="external">5.0版</a>后的Redis已经修改脚本复制为默认按<a href="https://github.com/antirez/redis/issues/5292" target="_blank" rel="external">效果复制</a></strong>，这里是代码改动 <a href="https://github.com/antirez/redis/commit/7895835df6aeb2a2d499bc499ae6cb340228908f" target="_blank" rel="external">Use commands (effects) replication by default in scripts</a>，<a href="http://antirez.com/news/97" target="_blank" rel="external">这里作者讨论涉及初衷</a>，在<a href="https://github.com/antirez/redis/issues/5292" target="_blank" rel="external">issue-5292</a> 里作者做了讨论，针对过去面临的一些问题和不足，<strong>认为自己考虑不周，Redis lua存在设计错误，认为应该只允许效果复制</strong>：<br><em>All those considerations make me think that there is a design error in Redis currently. I believe that we should only allow effects replication, and totally remove the previous mechanism to replicate the script verbatim.</em><br>即，<strong>5.0之后，redis lua脚本已经默认支持一些副作用的命令后加set类写操作了</strong>，这点可能大多忽视了。<br>2）nginx/sentinel存在时间回退导致限频不准。<br>在通过时间差计算Token/permits时，像Guava ratelimiter <strong>使用nanotime作为计时器而不是currentTimemillis</strong>，这是为了控制更精确吗？<strong>不是</strong>，<strong>纳秒是为了防止时间回拨</strong>，时间回拨时这段时间结果是不对的，所以你看到网上模拟token或leaky使用毫秒，实现都是可能出现该问题的。<br>同样Sentinel也存在并发的可能，不过如其所言，实现的是限频的趋势/效果，容许几次偏差。<br>3）热点数据<br>前文亦提过，这里补充下：<br>redis 单机set/get操作性能在十几万级别，<strong>antirez的<a href="https://redis.io/topics/benchmarks" target="_blank" rel="external">redis-benchmarks 约12万/s</a></strong>。<br>热点数据容易带来尖刺，笔者在做某外卖公司的风控平台时曾对一个不大数据量的sortedset压测，削峰并不容易。<br>Gubernator就认为redis管道或lua脚本耗时操作，提出了本地cache存储限频数据的方案。<br>基于用户级别的限频，Sentinel比guava实现要耗内存，不过阅读Sentinel官方文档，笔者发现其提供了热点参数限流的功能，可以基于LRU策略统计最近访问频次高的uid，看起来似乎少量内存即可实现限流 top K的用户。</p>
<p>提供个信息：十万QPS对有些企业完全不够，几年前的微信摇一摇春晚红包已经是1400万次/秒的QPS级别，用户之间的红包是每秒钟收发40万，oceanbase在双十一期间也曾达6千万每秒操作。</p>
<p>4）<strong>限频可能会耗尽服务线程池，或者说，最小限频吞吐量可能成为你的整个系统吞吐量</strong>。<br>如果使用guava aquire()接口，而不是 tryAquire()，那么因为该接口有sleep操作，并且没有时间限制，当达到限频时你的线程就开始sleep了，如果请求不断的进来，那么可能线程大部分时间都在sleep了，而我们的服务如Dubbo/Tomcat/Jetty等容器都是共用请求线程池的，导致服务的其他接口请求可分配线程资源就少了，甚至没有。<br>想清楚这点并不难，如Tomcat，虽然请求httprequest会作为FIFO队列被线程池消费，只要有一个活跃的线程，总会拿到限频的请求，此时因超频sleep，整个容器无法服务。<br>可以试验看到，假设某接口使用guava的aquire限频1秒钟5次，假设burst 5，tomcat配置200线程，<strong>那么我只要以210次每秒请求该接口就能导致整个Tomcat 200个线程都在sleep约1秒，整个服务不能响应</strong>。<br>所以要用 tryAquire 接口，并且不设置最大等待时间，直接拒绝。</p>
<p>阿里的Sentinel中WarmUpRateLimiterController/RateLimiterController/RateLimiterController都有sleep阻塞，DefaultController默认是直接拒绝的，但是是Priorited的请求SphU.entryWithPriority()是阻塞的。</p>
<p>除非我们将这些限频的请求转入自定义的线程池，像netty我们可以直接把某类handler指定EventExecutorGroup,jetty/tomcat就麻烦些了，这属于长/短链接(请求)处理的问题，不展开探讨，当然纤程（Coroutine）可能也是一种解决方案。<br>说到netty异步，一句题外话，java社区曾热衷异步/响应式编程，笔者不久前看到jdbc异步（ADBA）的文章，不过异步实现是难的，oracle去年已经停掉了 ADBA项目，Spring Pivotal工程师则推出了响应式的 R2DBC, 本文并非比较此，但如社区讨论：<br><em>The only reason to write async code is that threads are so expensive.<br>Project Loom will add fibers<br>No need to learn a new API. Existing code can be made to work with few if any changes<br>In the long term fibers are the answer but that’s a couple of years away.</em><br><a href="https://mail.openjdk.java.net/pipermail/jdbc-spec-discuss/2019-September/000529.html" target="_blank" rel="external">推荐fiber</a>，<a href="https://technology.amis.nl/2020/04/10/spring-blocking-vs-non-blocking-r2dbc-vs-jdbc-and-webflux-vs-web-mvc/" target="_blank" rel="external">这里有一个性能对比</a> </p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>最后，业务计频有怎么做呢？<br>像Spark/KafkaStream/Flink/Storm等流计算工具，都提供了基于流的操作，比如读取应用到文件log、网络端口传输的数据、kafka等mq事件，对于流操作，不仅包含类似groupby/mapreduce这类操作，也支持time window概念，非常适合。</p>
<p>比如，Storm支持从时间或数量上来划分，通过窗口的长度/滑动间隔有不同的如，Sliding Window（滑动窗口）按照固定的时间间隔或者Tuple数量滑动窗口（重叠或间隔），也有Tumbling Window（滚动窗口），如实现统计60s内每10s的xxx。<br><em>topologyBuilder.setBolt(“bolt”, new XXXWindowBolt().withWindow(<br>BaseWindowedBolt.Duration.seconds(60), BaseWindowedBolt.Duration.seconds(10))).shuffleGrouping(“spout”);</em></p>
<p>同storm，kafka-stream也通过Timewindow和commit interval，二者组合起来实现滑动窗口(slice window)，即每commit interval去上报统计该Timewindow 之内统计到的次数。<br>Spark-Streaming的reduceByKeyAndWindow算子也可以实现类似功能，只不过其对Time window的处理和kafka-stream不同，和storm同。Flink也有类似功能。<br>这里推荐笔者之前一篇<a href="/2019/09/13/2019-09-13-how_to_group_twice_in_kafkastreams">kafka-stream的group by 操作的文章</a></p>
<p>最后希望看完本文后 希望你除了知道”接口要加限流保障服务平稳运行“，还能进一步考虑下这么加限流是否可行/是否会影响其他服务不可用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;i&gt;&lt;strong&gt;intro1&lt;/strong&gt;：限流的常见实现方式及常见开源限流组件有注意点&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro2&lt;/strong&gt;: 你真的理解了漏桶和令牌桶限流算法吗，划分/区分二者科学吗&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro2&lt;/strong&gt;: 你知道限流保障服务可用时也可能导致其他服务不可用吗&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;早先看到朋友圈分享限频限流的文章，从中有些收获，不过笔者不打算赘述，想进一步探讨下限频限流，以及限频限流使用时可能遇到的问题，同时也是对前一篇博文的回应，或许看完本文你会对Guava令牌桶算法有不一样的理解。&lt;br&gt;
    
    </summary>
    
    
      <category term="ratelimiter" scheme="http://thomaslau.github.io/tags/ratelimiter/"/>
    
      <category term="guava" scheme="http://thomaslau.github.io/tags/guava/"/>
    
      <category term="Leaky" scheme="http://thomaslau.github.io/tags/Leaky/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud RedisRateLimit限频存在的几个问题</title>
    <link href="http://thomaslau.github.io/2020/04/22/2020-04-22-spring_cloud_gateway_redisratelimit_issue/"/>
    <id>http://thomaslau.github.io/2020/04/22/2020-04-22-spring_cloud_gateway_redisratelimit_issue/</id>
    <published>2020-04-22T14:59:10.000Z</published>
    <updated>2020-05-10T19:23:02.015Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><i>本文主要讨论Spring Cloud Gateway的基于Redis分布式限频存在的失效/不准确的可能性及解决方法，同时适用于所有参考request_rate_limiter.lua实现的基于redis限频组件.</i></p>
</blockquote>
<p>阅读本文不需要了解Spring Cloud Gateway（下简称SCG）怎么使用或具体实现，本文只是基于限频角度讨论下常规的组件使用问题。<br>主要讨论SCG提供的基于Redis分布式限频存在的失效/不准确的可能性及解决方法，同时适用于所有参考request_rate_limiter.lua实现的基于redis限频组件，其次也讨论该方案其他不足。如果你对SCG RedisRateLimit有所了解或已知道其存在的几个问题或觉得TLDR;，可以直接跳到<a href="/#最大的问题">本文最后</a>。<br><a id="more"></a></p>
<h2 id="SCG-RedisRateLimit如何实现"><a href="#SCG-RedisRateLimit如何实现" class="headerlink" title="SCG RedisRateLimit如何实现"></a>SCG RedisRateLimit如何实现</h2><p>Spring Cloud Gateway定义了RateLimiter接口来达到限频效果，通过RedisRateLimiterFactory生成这个bean，借助于基于spring的各种扩展，我们可以通过诸如：</p>
<ul>
<li>spring 配置/Configuation</li>
<li><p>GatewayRedisAutoConfiguration</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">name:</span> <span class="string">RequestRateLimiter</span></div><div class="line"><span class="attr">  args:</span></div><div class="line"><span class="attr">    key-resolver:</span> <span class="string">"#&#123;@remoteAddrKeyResolver&#125;"</span></div><div class="line">    <span class="string">redis-rate-limiter.replenishRate:</span> <span class="number">1</span></div><div class="line">    <span class="string">redis-rate-limiter.burstCapacity:</span> <span class="number">5</span></div></pre></td></tr></table></figure>
</li>
<li><p>注解<br>@RateLimiter(base = RateLimiter.Base.IP, path=”/xxx”, permits = 4, timeUnit = TimeUnit.MINUTES)</p>
</li>
</ul>
<p>上面不需要理解，总之，通过上述等，最后生成RedisRateLimiter类型的bean，而限频最终就是通过该bean调用一段 Redis的Lua脚本来实现，该lua脚本基于令牌桶（Token Bucket）算法实现限频限流，支持从服务、用户、IP或自定义等维度限流。<br>我们来看下基于redis的限频逻辑和SCG的调用逻辑。</p>
<h3 id="简要介绍下脚本的内容"><a href="#简要介绍下脚本的内容" class="headerlink" title="简要介绍下脚本的内容"></a>简要介绍下脚本的内容</h3><p>这里lua脚本是本文主要讨论的内容，它位于SCG的spring-cloud-gateway-core模块的<a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/master/spring-cloud-gateway-core/src/main/resources/META-INF/scripts/request_rate_limiter.lua" target="_blank" rel="external">META-INF/scripts/request_rate_limiter.lua</a>下面:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> tokens_key = KEYS[<span class="number">1</span>]</div><div class="line"><span class="keyword">local</span> timestamp_key = KEYS[<span class="number">2</span>]</div><div class="line">redis.<span class="built_in">log</span>(redis.LOG_WARNING, <span class="string">"tokens_key "</span> .. tokens_key)</div><div class="line"></div><div class="line"><span class="keyword">local</span> rate = <span class="built_in">tonumber</span>(ARGV[<span class="number">1</span>])</div><div class="line"><span class="keyword">local</span> capacity = <span class="built_in">tonumber</span>(ARGV[<span class="number">2</span>])</div><div class="line"><span class="keyword">local</span> now = <span class="built_in">tonumber</span>(ARGV[<span class="number">3</span>])</div><div class="line"><span class="keyword">local</span> requested = <span class="built_in">tonumber</span>(ARGV[<span class="number">4</span>])</div><div class="line"></div><div class="line"><span class="keyword">local</span> fill_time = capacity/rate</div><div class="line"><span class="keyword">local</span> ttl = <span class="built_in">math</span>.<span class="built_in">floor</span>(fill_time*<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment">--redis.log(redis.LOG_WARNING, "rate " .. ARGV[1])</span></div><div class="line"><span class="comment">--redis.log(redis.LOG_WARNING, "capacity " .. ARGV[2])</span></div><div class="line"><span class="comment">--redis.log(redis.LOG_WARNING, "now " .. ARGV[3])</span></div><div class="line"><span class="comment">--redis.log(redis.LOG_WARNING, "requested " .. ARGV[4])</span></div><div class="line"><span class="comment">--redis.log(redis.LOG_WARNING, "filltime " .. fill_time)</span></div><div class="line"><span class="comment">--redis.log(redis.LOG_WARNING, "ttl " .. ttl)</span></div><div class="line"><span class="keyword">local</span> last_tokens = <span class="built_in">tonumber</span>(redis.call(<span class="string">"get"</span>, tokens_key))</div><div class="line"><span class="keyword">if</span> last_tokens == <span class="literal">nil</span> <span class="keyword">then</span></div><div class="line">  last_tokens = capacity</div><div class="line"><span class="keyword">end</span></div><div class="line">redis.<span class="built_in">log</span>(redis.LOG_WARNING, <span class="string">"last_tokens "</span> .. last_tokens)</div><div class="line"></div><div class="line"><span class="keyword">local</span> last_refreshed = <span class="built_in">tonumber</span>(redis.call(<span class="string">"get"</span>, timestamp_key))</div><div class="line"><span class="keyword">if</span> last_refreshed == <span class="literal">nil</span> <span class="keyword">then</span></div><div class="line">  last_refreshed = <span class="number">0</span></div><div class="line"><span class="keyword">end</span></div><div class="line">redis.<span class="built_in">log</span>(redis.LOG_WARNING, <span class="string">"last_refreshed "</span> .. last_refreshed)</div><div class="line"></div><div class="line"><span class="keyword">local</span> delta = <span class="built_in">math</span>.<span class="built_in">max</span>(<span class="number">0</span>, now-last_refreshed)</div><div class="line"><span class="keyword">local</span> filled_tokens = <span class="built_in">math</span>.<span class="built_in">min</span>(capacity, last_tokens+(delta*rate))</div><div class="line"><span class="keyword">local</span> allowed = filled_tokens &gt;= requested</div><div class="line"><span class="keyword">local</span> new_tokens = filled_tokens</div><div class="line"><span class="keyword">local</span> allowed_num = <span class="number">0</span></div><div class="line"><span class="keyword">if</span> allowed <span class="keyword">then</span></div><div class="line">  new_tokens = filled_tokens - requested</div><div class="line">  allowed_num = <span class="number">1</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">redis.<span class="built_in">log</span>(redis.LOG_WARNING, <span class="string">"delta "</span> .. delta)</div><div class="line">redis.<span class="built_in">log</span>(redis.LOG_WARNING, <span class="string">"filled_tokens "</span> .. filled_tokens)</div><div class="line">redis.<span class="built_in">log</span>(redis.LOG_WARNING, <span class="string">"new_tokens "</span> .. new_tokens)</div><div class="line"><span class="comment">--redis.log(redis.LOG_WARNING, "allowed_num " .. allowed_num)</span></div><div class="line"><span class="comment">--redis.log(redis.LOG_WARNING, "new_tokens " .. new_tokens)</span></div><div class="line">redis.<span class="built_in">log</span>(redis.LOG_WARNING, <span class="string">"--------"</span>)</div><div class="line"></div><div class="line">redis.call(<span class="string">"setex"</span>, tokens_key, ttl, new_tokens)</div><div class="line">redis.call(<span class="string">"setex"</span>, timestamp_key, ttl, now)</div><div class="line"></div><div class="line"><span class="keyword">return</span> &#123; allowed_num, new_tokens &#125;</div></pre></td></tr></table></figure>
<p>在介绍下该脚本之前，我们先看下SCG怎么调用的，这里简单贴下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"spring.cloud.gateway.redis-rate-limiter"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisRateLimiter</span> <span class="keyword">extends</span> <span class="title">AbstractRateLimiter</span>&lt;<span class="title">RedisRateLimiter</span>.<span class="title">Config</span>&gt; <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</div><div class="line">    <span class="comment">//......</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * This uses a basic token bucket algorithm and relies on the fact that Redis scripts</div><div class="line">     * execute atomically. No other operations can run between fetching the count and</div><div class="line">     * writing the new count.</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Response&gt; <span class="title">isAllowed</span><span class="params">(String routeId, String id)</span> </span>&#123;</div><div class="line">        <span class="comment">//...</span></div><div class="line">        <span class="comment">// How many requests per second do you want a user to be allowed to do?</span></div><div class="line">        <span class="keyword">int</span> replenishRate = routeConfig.getReplenishRate();</div><div class="line">        <span class="comment">// How much bursting do you want to allow?</span></div><div class="line">        <span class="keyword">int</span> burstCapacity = routeConfig.getBurstCapacity();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            List&lt;String&gt; keys = getKeys(id);</div><div class="line">            <span class="comment">// The arguments to the LUA script. time() returns unixtime in seconds.</span></div><div class="line">            List&lt;String&gt; scriptArgs = Arrays.asList(replenishRate + <span class="string">""</span>, burstCapacity + <span class="string">""</span>,</div><div class="line">                    Instant.now().getEpochSecond() + <span class="string">""</span>, <span class="string">"1"</span>);</div><div class="line">            <span class="comment">// allowed, tokens_left = redis.eval(SCRIPT, keys, args)</span></div><div class="line">            Flux&lt;List&lt;Long&gt;&gt; flux = <span class="keyword">this</span>.redisTemplate.execute(<span class="keyword">this</span>.script, keys, scriptArgs);</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> List&lt;String&gt; <span class="title">getKeys</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">        <span class="comment">// use `&#123;&#125;` around keys to use Redis Key hash tags</span></div><div class="line">        <span class="comment">// this allows for using redis cluster</span></div><div class="line">        <span class="comment">// Make a unique key per user.</span></div><div class="line">        String prefix = <span class="string">"request_rate_limiter.&#123;"</span> + id;</div><div class="line">        <span class="comment">// You need two Redis keys for Token Bucket.</span></div><div class="line">        String tokenKey = prefix + <span class="string">"&#125;.tokens"</span>;</div><div class="line">        String timestampKey = prefix + <span class="string">"&#125;.timestamp"</span>;</div><div class="line">        <span class="keyword">return</span> Arrays.asList(tokenKey, timestampKey);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//......</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为便于理解，我把大部分代码都省略了，只保留调用部分，如上可看到，isAllowed方法判断是否限频时，通过6个参数调用上文的redis lua脚本，分别是：</p>
<ul>
<li>tokenKey ：限频的key，如 request_rate_limiter.{userId123}</li>
<li>timestampKey：限频ke对应的时间戳，request_rate_limiter.{userId123}.timestamp</li>
<li>rate：限频的频率，为次每秒</li>
<li>capacity：令牌桶算法支持的突发量(burst)</li>
<li>now：当前时间（unix Epoch）</li>
<li>requested：请求量，(代码写死)统一为一次</li>
</ul>
<p>其中 tokenKey 就是限频的维度，即是限频是针对用户还是服务等，SCG默认支持的有：<strong>General（统一控制，通常是request path）,IP（用户IP）,User（按用户控制）</strong>，此外也可自定义，诸如上文配置里的 key-resolver。</p>
<h3 id="几个小问题讨论"><a href="#几个小问题讨论" class="headerlink" title="几个小问题讨论"></a>几个小问题讨论</h3><p>上面介绍SCG redis限频实现，不过不是必须理解的，上述归纳起来只是要说明一点：SCG redis限频就是通过 Redis Lua脚本实现，上文代码贴出，并且，这段代码也是国内一些公司自研的基于redis Lua实现限频功能的组件常参考的代码。<br>一段题外话，如果读者可能已经知道限频常用算法分为漏桶(Leaky Bucket)和令牌桶(Token Bucket)，Spring Cloud 定义是该Lua脚本是基于 Token bucket算法实现，这里可以简单了解下，不过笔者认为没必要纠结Leaky Bucket和Token Bucket的区别，事实上guava官方doc/代码没有说自己是Token Bucket实现甚至没有提及，Nginx认为自己是基于Leaky Bucket实现，但核心代码类似上述，Ali Sentinel还认为Guava的实现更接近Leaky，如果你用guava和toekn bucket搜索得到的是中文结果或英文但作者中文名，不过不是本文重点，笔者会在自己的下一篇博客讨论下这个问题，总之不要认为leaky和token是不同的限频/限流算法即可。<br>好了，看几个小问题：</p>
<ul>
<li>基于用户维度<br>显然这是比较耗费Redis内存的，每个用户都需要一点redis存储和redis TTL数据，这个级别是基于TTl时长的活跃用户级别的，并且如果多个接口都使用限频，那么redis的数据量就是是 M*N 量级了。<br>并且，这个限频是基于用户级别限频，不是针对服务限频的，即该维护无法提供系统服务级别本身的限频能力</li>
<li>基于General（path、接口）维度<br>该维度限频，可以提供服务级别的限频能力，也是笔者认为大多数微服务里的限频限流模块以及各类容器里的限频限流模块所指代的对象。<br>但该脚本实现存在这 <strong>热点</strong> 数据问题，即无论redis以何种方式部署，<strong>最终都会读写tokenKey这个热点数据</strong>，也就是最终操作都会聚集到一台redis机器上，其实无论你使用何种实现：Guava的RateLimiter、Bucket4j、Zuul、Ali的Sentinel，或者无论何后端存储（Bucket4j-Jcache、Caffeine、Hazelcast、Redis、RocksDB等，都存在热点问题，而高性能的redis get/set一般在10几万每秒级别，笔者没有测试过，但理论上QPS在10万以内，也就是说无论如何扩容，该接口性能不会超过10万每秒，当然，如果你认为接口限频一定小于这个数值，那么可以忽略。<br>我们可以将一个lua function分解成多个的方式避免此问题，笔者在下一篇文章再讨论。</li>
<li>基于IP维度<br>这个维度没有服务/业务意义，但是一个适中的力度，当然，如果有人特别需求ip到区域的，笔者推荐 IP2Location Nginx Module，lua可参考。</li>
<li>时间回退问题<br>读者是否注意到，计算可用token时，依赖时间，因为token bucket算法就是把时间等价成一段段token均匀放入的。上述lua脚本now参数就是java的unix Epoch time，如果对应机器时间发生校正了（前置/回退），那么上述计算结果就是不准确的。<br>事实上，<em><strong>像Nginx实现的leaky bucket限频算法，阿里的Sentinel实现的Token bucket算法，都存在时间回退问题</strong></em>，而Guava的SmoothRatelimiter实现最终用的是<strong>nanoTime</strong>就不存在这个问题。</li>
</ul>
<h3 id="最大的问题"><a href="#最大的问题" class="headerlink" title="最大的问题"></a>最大的问题</h3><p>以下讨论都是针对 同一个 tokenKey 的情况，即tokenkey为general/api/path时现象明显，uid时存在可能性但不明显。<br>任何参考上述SCG通过Redis Lua脚本实现的基于Redis分布式限频，最大问题就是限频功能可能会失效。<br>为什么这么说？<br>首先，Token Bucket计算依赖于时间，这个时间是脚本参数传入的，假设我们的分布式系统中服务器的时间不一样，比如有一台机器慢了一秒或任何秒数，我相信该现象时间可能极短，但是应该频繁发生。<br>其次，我们看下有一台时间慢一秒，该lua脚本会发生什么。<br><em>这里需要读懂上述lua脚本代码，不过也可只看下面推理即可</em></p>
<ul>
<li>假设某次请求时间正常，为21:00:09秒某秒段內，且已达限频临界条件。</li>
<li>此时慢几秒的机器发送请求（21:00:06秒），按上述脚本，则该请求会被限频，但是 redis.call(“setex”, timestamp_key, ttl, now)这句，把当前时间更新为21:00:06秒了</li>
<li>之后其他机器请求进来，时间为21:00:09秒，基于Token bucket算法，以秒为单位时，我们知道当前秒数大于上次秒数时，请求会立即放行，并且可用缓冲permits能达到capacity。</li>
</ul>
<p>上面分析结论就是 21:00:09秒 限频临界后的请求本该被限频，但是却被放行了，即限频失效。</p>
<p>下面这个脚本可以验证上述想法：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash </span></div><div class="line"></div><div class="line">sleep 4;</div><div class="line">date</div><div class="line">snds=`date +<span class="string">"%s"</span>`</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..4&#125; </div><div class="line"><span class="keyword">do</span> </div><div class="line">    redis-cli --<span class="built_in">eval</span> ~/git/spc_ratelimit.lua uuid1 uuid1.tmp , 2 4 <span class="variable">$snds</span> 1;</div><div class="line"><span class="keyword">done</span></div><div class="line">redis-cli --<span class="built_in">eval</span> ~/git/spc_ratelimit.lua uuid1 uuid1.tmp , 2 4 <span class="variable">$snds</span> 1;</div><div class="line"><span class="built_in">echo</span> <span class="string">"--reset---"</span></div><div class="line">redis-cli --<span class="built_in">eval</span> ~/git/spc_ratelimit.lua uuid1 uuid1.tmp , 2 4 $((snds-10)) 1</div><div class="line"><span class="built_in">echo</span> <span class="string">"--after reset---"</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..4&#125; </div><div class="line"><span class="keyword">do</span> </div><div class="line">    redis-cli --<span class="built_in">eval</span> ~/git/spc_ratelimit.lua uuid1 uuid1.tmp , 2 4 <span class="variable">$snds</span> 1; </div><div class="line"><span class="keyword">done</span></div><div class="line">redis-cli --<span class="built_in">eval</span> ~/git/spc_ratelimit.lua uuid1 uuid1.tmp , 2 4 <span class="variable">$snds</span> 1;</div><div class="line">date</div></pre></td></tr></table></figure></p>
<p>上述 spc_ratelimit.lua uuid1 uuid1.tmp , 2 4 $snds 1;即是调用该脚本，uuid1即为tokenkey，2是频率，4是capacity，$snds是当前秒，1是请求量，redis ttl时间是4秒，所以开头sleep 4秒来清空历史数据。<br>开启redis-server，运行上述shell，本人机器输出：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">➜  2019 sh test.sh</div><div class="line">Wed Apr 22 23:59:57 CST 2020</div><div class="line">1) (<span class="built_in">integer</span>) 1</div><div class="line">2) (<span class="built_in">integer</span>) 3</div><div class="line">1) (<span class="built_in">integer</span>) 1</div><div class="line">2) (<span class="built_in">integer</span>) 2</div><div class="line">1) (<span class="built_in">integer</span>) 1</div><div class="line">2) (<span class="built_in">integer</span>) 1</div><div class="line">1) (<span class="built_in">integer</span>) 1</div><div class="line">2) (<span class="built_in">integer</span>) 0</div><div class="line">1) (<span class="built_in">integer</span>) 0</div><div class="line">2) (<span class="built_in">integer</span>) 0</div><div class="line">--reset---</div><div class="line">1) (<span class="built_in">integer</span>) 0</div><div class="line">2) (<span class="built_in">integer</span>) 0</div><div class="line">--after reset---</div><div class="line">1) (<span class="built_in">integer</span>) 1</div><div class="line">2) (<span class="built_in">integer</span>) 3</div><div class="line">1) (<span class="built_in">integer</span>) 1</div><div class="line">2) (<span class="built_in">integer</span>) 2</div><div class="line">1) (<span class="built_in">integer</span>) 1</div><div class="line">2) (<span class="built_in">integer</span>) 1</div><div class="line">1) (<span class="built_in">integer</span>) 1</div><div class="line">2) (<span class="built_in">integer</span>) 0</div><div class="line">1) (<span class="built_in">integer</span>) 0</div><div class="line">2) (<span class="built_in">integer</span>) 0</div><div class="line">Wed Apr 22 23:59:57 CST 2020</div></pre></td></tr></table></figure></p>
<p>可以看到，在调用四次被限频后，通过模拟一次慢10秒（$((snds-10))）的请求调用后，请求又被放行了，即 在 “Wed Apr 22 23:59:57 CST 2020至Wed Apr 22 23:59:57 CST 2020”这段时间內，接口被访问了8次(本该4次)。</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>1，拆分<br>个人觉得比较好的办法是将一个热点数据拆分成16个或更多，可以提高性能，然后通过设置机器相关的key将同一台机器请求路由至同一台redis，但该方案需要些hash改进，且需要解决分布式调用均衡的问题。<br>2，改lua脚本<br>该方法是将 now 这个时间由服务传参方式，改为 lua脚本自己获取时间，lua本身有 os.time 可以获取时间，但是redis安全原因 禁止lua调用系统函数，所以想到了 redis本身有个 time 指令，所以将 request_rate_limiter.lua 脚本里的<br>local now = tonumber(ARGV[3])<br>改为<br>now = tonumber(redis.call(“time”)[1])<br>即可，上述改完后再次sh test.sh 就会发现限频生效，仅放行四次，但需要指出的是，该改动多了一次redis调用(但无需重新路由)。</p>
<p>需要指出的是，上述改进并非必要，正如 阿里 Sentinel的限频实现所说，只要求保证实现限频的效果，不要求准确性。</p>
<p>update: 关于redis低版本不支持set命令前含有副作用命令，<a href="/2020/05/10/2020-05-10-on_ratelimiter">见下一篇文章</a>。</p>
<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><p>1.<a href="https://github.com/spring-cloud/spring-cloud-gateway" target="_blank" rel="external">spring-cloud-gateway</a><br>2.<a href="https://github.com/alibaba/Sentinel/wiki/%E9%99%90%E6%B5%81---%E5%86%B7%E5%90%AF%E5%8A%A8" target="_blank" rel="external">Sentinel-限流冷启动</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;i&gt;本文主要讨论Spring Cloud Gateway的基于Redis分布式限频存在的失效/不准确的可能性及解决方法，同时适用于所有参考request_rate_limiter.lua实现的基于redis限频组件.&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;阅读本文不需要了解Spring Cloud Gateway（下简称SCG）怎么使用或具体实现，本文只是基于限频角度讨论下常规的组件使用问题。&lt;br&gt;主要讨论SCG提供的基于Redis分布式限频存在的失效/不准确的可能性及解决方法，同时适用于所有参考request_rate_limiter.lua实现的基于redis限频组件，其次也讨论该方案其他不足。如果你对SCG RedisRateLimit有所了解或已知道其存在的几个问题或觉得TLDR;，可以直接跳到&lt;a href=&quot;/#最大的问题&quot;&gt;本文最后&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="http://thomaslau.github.io/tags/SpringCloud/"/>
    
      <category term="RedisLua" scheme="http://thomaslau.github.io/tags/RedisLua/"/>
    
      <category term="ratelimiter" scheme="http://thomaslau.github.io/tags/ratelimiter/"/>
    
  </entry>
  
  <entry>
    <title>Unix Time 的几个冷门知识点</title>
    <link href="http://thomaslau.github.io/2020/03/07/2020-03-07-on_unix_time_unix_epoch/"/>
    <id>http://thomaslau.github.io/2020/03/07/2020-03-07-on_unix_time_unix_epoch/</id>
    <published>2020-03-07T14:59:10.000Z</published>
    <updated>2020-03-08T10:16:03.513Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><i><strong>intro1</strong>：一文搞懂unix time、unix epoch、utc时间、gmt时间</i><br><i><strong>intro2</strong>: 大部分人对unix time的误解</i></p>
</blockquote>
<p>本计划对上一篇文章做点补充，不过今天来点简单的。</p>
<h3 id="unix-time"><a href="#unix-time" class="headerlink" title="unix time"></a>unix time</h3><p>许多人对 unix time有误解，只知其是相对世界时/格林威治时1970年1月1号0点0分0秒整的时间差，有的人可能还记得是0时区。<br>但这些认识是不对的。而一些文档如Java API Doc里写的并不全，或没有明确使阅读者明确理解。<br><a id="more"></a><br>笔者工作过程就曾经听到不同的人在做把unix timestamp 转化为格式化的时间时，会问时区是哪里的，或者认为其时区是本地或者0时区的是否+8。<br>排除这种误区实际上可以简单的记住一点即可：<strong>unix timestamp 是 相对于 UTC 时间的时间差，而 UTC 几乎是对等 GMT+0 的时间。</strong></p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>先从Wikipedia介绍几个概念：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">世界时（Universal Time，简称UT）是一种以格林尼治子夜起算的平太阳时。</div><div class="line">世界时是以地球自转为基准得到的时间尺度，其精度受到地球自转不均匀变化和极移的影响，</div><div class="line">为了解决这种影响，1955年国际天文联合会定义了UT0、UT1和UT2</div><div class="line">1. UT0系统是由一个天文台的天文观测直接测定的世界时，没有考虑极移造成的天文台地理坐标变化。</div><div class="line">该系统曾长期被认为是稳定均匀的时间计量系统，得到过广泛应用。</div><div class="line">2. UT1系统是在UT0的基础上加入了极移改正 Δλ，修正地轴摆动的影响。UT1是目前使用的</div><div class="line">世界时标准。被作为目前世界民用时间标准UTC在增减闰秒时的参照标准。</div><div class="line">3. UT2系统是UT1的平滑处理版本，在UT1基础上加入了地球自转速率的季节性改正 ΔT。</div><div class="line"></div><div class="line">协调世界时（英语：Coordinated Universal Time，法语：Temps Universel Coordonné，</div><div class="line">简称UTC）是最主要的世界时间标准，其以原子时秒长为基础，在时刻上尽量接近于格林威治标准时间</div><div class="line"></div><div class="line">格林尼治平均时间（英语：Greenwich Mean Time，GMT）是指位于英国伦敦郊区的皇家格林尼治</div><div class="line">天文台当地的平太阳时，因为本初子午线被定义为通过那里的经线。</div><div class="line"></div><div class="line">Unix epoch：that is the time 00:00:00 UTC on 1 January 1970，</div><div class="line">即一般指特定的时间：1970-01-01 00:00:00 UTC。</div><div class="line"></div><div class="line">Unix time：also known as Epoch time, POSIX time,seconds since the Epoch,</div><div class="line">or UNIX Epoch time.It is the number of seconds that have elapsed since </div><div class="line">the Unix epoch, minus leap seconds. Leap seconds are ignored,with a leap</div><div class="line"> second having the same Unix time as the second before it, and every day </div><div class="line"> is treated as if it contains exactly 86400 seconds.[2] Due to this treatment, </div><div class="line"> Unix time is not a true representation of UTC.</div></pre></td></tr></table></figure></p>
<p>上述，UTC是协调世界时，即Universal Time Coordinated，英法两国联合定制，名字取二者调和。</p>
<p>上述，Unix time表示距离unix Epoch的秒数，但Unix time是不考虑闰秒的，这意味着如果你运行：<br>1) JAVA的System.out.println(new SimpleDateFormat(“yyyy-MM-dd HH:mm:ss,SSS”).format(915148800750l));<br>系统输出的是 1999-01-01 08:00:00,750<br>2) 或python的 datetime.datetime.fromtimestamp(915148800.750).strftime(“%Y-%m-%d %H:%M:%S.%f”)<br>系统输出的是：1999-01-01 08:00:00.750000<br><strong>但实际上 UTC时间 其实是 1998-12-31T23:59:60.75</strong>，而不是1999年1月1日。</p>
<p>地球的轨道和运动速度都不是均匀的，天文学家计算地球非圆形轨迹与极轴倾斜对视太阳时的效应，修正以后的实际即平太阳时，在格林尼治子午线上的平太阳时称为世界时(UT0)，又叫格林尼治平时(GMT)，为了兼容人们对天亮/天黑的常识（如正午12点表示太阳正当中），地球相应划分24个时区。<br>协调时是一个时间刻度标准，GMT是一个刻度，UTC即GMT+0，只是后来协调时的基准是原子钟，也就和GMT不相干了，虽然二者可能差距不过1秒。现在GMT时间已不再被科学界所使用，尽管GMT可转换为UTC。</p>
<p>但协调世界时和相差不会超过0.9秒，有需要时便会在协调世界时内加上正或负闰秒。因此协调世界时与国际原子时(TAI)之间会出现若干整数秒的差别。位于巴黎的国际地球自转事务中央局(IERS)负责决定何时加入闰秒。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">在UTC系统的时间尺度中，秒和比秒小的单位（毫秒、微秒等）其长度是固定的，但是对于分钟和比分</div><div class="line">还大的单位（小时、天、周等），其长度是可变的。国际地球自转服务组织（IERS）做出插入闰秒的</div><div class="line">决定，并至少在加入前6个月发布在该组织的“公告C”中。闰秒是无法提前很早预知的，因为地球的</div><div class="line">自转速率是不可预测的。</div><div class="line">几乎所有的UTC天都包含 86,400 SI秒，即每分钟正好有60秒。然而，由于一个平太阳日比 86,400 </div><div class="line">SI秒稍微长一些，偶尔会有一个UTC天的最后一分钟被调整为61秒。多出的这一秒被称为闰秒，它体现了</div><div class="line">上一闰秒后比平太阳日多出来的全部时长（大约每天2毫秒）。一个UTC天的最后一分钟也可以是59秒，</div><div class="line">以此来适应地球自转得更快的情况，但是这样的可能性很小，至今还没有出现过。UTC天的长度不规则</div><div class="line">意味着带小数的儒略日和UTC时间不能很好的对应。</div><div class="line">为了保证协调世界时很接近世界时UT1，UTC从基于TAI的线性方程转变成另一方程时，偶尔会出现</div><div class="line">不连续点。这些不连续点以闰秒的形式体现出来，这些不连续点就是造成了UTC天的长度不规则的闰秒。</div><div class="line">IERS规定不连续点仅出现在6月或12月底，但也有规定将3月或者9月作为备选。</div><div class="line">国际地球自转服务组织(IERS)跟踪并公布UTC时间和世界时的差别，即DUT1 = UT1 - UTC，</div><div class="line">另外，IERS也负责引入不连续的闰秒来保证它们的时间差DUT1在±0.9秒之间</div></pre></td></tr></table></figure></p>
<p>NTP就是基于世界协调时的，北京时间即是 UTC+8 的。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>对了，<strong>计算机是怎么计算时间的，像Java的System.currenTimeMillis怎么获取Unix时间呢？</strong><br>一般商用/办公/家用计算机主板上有计时电路，核心是晶体振荡器，靠电池供电维持一定频率的震荡，转化为时钟信号，无电量或电量不足就会归零或慢，此外这个信号频率不够稳定，受环境压力/温度影响，时间并不准确，所以通常会通过网络较时来修正。<br>但这个频率还不足以纳秒级别，<strong>像Java的System.nanoTime是需要高频的(1GHz)，其实就是CPU内部电路产生的脉冲频率</strong>。</p>
<p>对于牛顿力学而言，摆钟的周期实际受重力影响，所以摆钟走时是不准的，而我们本身佩戴的机械手表同样受重力/摩擦力/气压/游丝重心/摆轮平衡等影响，据说世界上曾最精准的依赖石英震动的机械表每天误差千分之一秒，而如今大众佩戴的机械表如陀飞轮/defy等也只能每天0.25秒差异。<br>说因为相对论影响，机械钟测量不准而采用本20世纪发现的原子钟实际上不正确。<br>科学家们发现原子的能级跃迁释放电磁波，这种电磁波的频率是恒定的，通过一系列放大效应，人们就可以将其作为时间脉冲的节拍器，只不过这种节拍器最小可以做到每秒钟10^15次方次计数，然后逐层放大到秒/分钟等。原子钟不受气压/温度等影响，但其实是受重力影响的，曾有试验做过，飞行原子钟来回后和地球原子钟存在差异(微秒级别)，这其实才是需要用相对论,而且是广义相对论解释了(时间膨胀)。<br>而现有的原子钟精确到 50亿年误差一秒，比地球年龄要大，可以认为是精度极高。</p>
<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul>
<li><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%AD%90%E9%92%9F/765460" target="_blank" rel="external">原子钟</a>  <a href="https://baike.baidu.com/item/%E5%8E%9F%E5%AD%90%E9%92%9F/765460" target="_blank" rel="external">https://baike.baidu.com/item/%E5%8E%9F%E5%AD%90%E9%92%9F/765460</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%99%82%E9%96%93%E8%86%A8%E8%84%B9" target="_blank" rel="external">时间膨胀</a>  <a href="https://zh.wikipedia.org/wiki/%E6%99%82%E9%96%93%E8%86%A8%E8%84%B9" target="_blank" rel="external">https://zh.wikipedia.org/wiki/%E6%99%82%E9%96%93%E8%86%A8%E8%84%B9</a><br><a href="https://tech.qq.com/a/20141105/008961.htm" target="_blank" rel="external">最精确原子钟问世：50亿年误差一秒</a>  <a href="https://tech.qq.com/a/20141105/008961.htm" target="_blank" rel="external">https://tech.qq.com/a/20141105/008961.htm</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4" target="_blank" rel="external">一些语言的时间范围</a>  <a href="https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4" target="_blank" rel="external">https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4</a></li>
<li><a href="https://en.wikipedia.org/wiki/Unix_time" target="_blank" rel="external">Unix time</a>  <a href="https://en.wikipedia.org/wiki/Unix_time" target="_blank" rel="external">https://en.wikipedia.org/wiki/Unix_time</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/30582175" target="_blank" rel="external">讲了这么多年的CPU频率，到底是什么？</a>  <a href="https://zhuanlan.zhihu.com/p/30582175" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/30582175</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;i&gt;&lt;strong&gt;intro1&lt;/strong&gt;：一文搞懂unix time、unix epoch、utc时间、gmt时间&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro2&lt;/strong&gt;: 大部分人对unix time的误解&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本计划对上一篇文章做点补充，不过今天来点简单的。&lt;/p&gt;
&lt;h3 id=&quot;unix-time&quot;&gt;&lt;a href=&quot;#unix-time&quot; class=&quot;headerlink&quot; title=&quot;unix time&quot;&gt;&lt;/a&gt;unix time&lt;/h3&gt;&lt;p&gt;许多人对 unix time有误解，只知其是相对世界时/格林威治时1970年1月1号0点0分0秒整的时间差，有的人可能还记得是0时区。&lt;br&gt;但这些认识是不对的。而一些文档如Java API Doc里写的并不全，或没有明确使阅读者明确理解。&lt;br&gt;
    
    </summary>
    
    
      <category term="unix Epoch" scheme="http://thomaslau.github.io/tags/unix-Epoch/"/>
    
      <category term="闰秒" scheme="http://thomaslau.github.io/tags/%E9%97%B0%E7%A7%92/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 的几个冷门知识点</title>
    <link href="http://thomaslau.github.io/2020/01/12/2020-01-12-professional_knowledge_on_elasticsearch/"/>
    <id>http://thomaslau.github.io/2020/01/12/2020-01-12-professional_knowledge_on_elasticsearch/</id>
    <published>2020-01-11T16:59:10.000Z</published>
    <updated>2020-01-13T19:48:21.804Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><i><strong>intro1</strong>：一个不太正常的elasticsaerch分片分布场景下的扩容</i><br><i><strong>intro2</strong>: elasticsaerch到底往Lucene中写了些什么数据</i><br><i><strong>intro3</strong>: Lucene的文件的压缩</i></p>
</blockquote>
<h3 id="前文问题解答"><a href="#前文问题解答" class="headerlink" title="前文问题解答"></a>前文问题解答</h3><p>前一篇文章，留了个Elasticsearch（以下简称ES） cpu load图猜问题，不难猜，这里贴一张磁盘图看的就更明显了。<br><a id="more"></a><br><img src="/images/2020_es_io_load.png" width="100%"><br>可以看到十几号已有迹象，20号明显，只不过转移或者丢弃，然后定期删除，21/22基本就无法支撑大量写入，之后是在23号下午15点挂载mfs存储，集群开始恢复，但是写入性能比之前写磁盘下降，于是25号下午15点卸载mfs，并删除更多数据来恢复，31号等来了机器之后开始扩容，主分片可以正常写入/查询，3号开启replica，至此完全恢复正常。如下图cpu/存储/网卡监控恢复。<br><img src="/images/2020_es_status_green.png" width="100%"><br>集群有8台数据节点，每台1.6-2T，索引是每天生成一份，每天大约60个新索引，并且会删除N天以前的数据，最大的索引的数据量的约20亿/日，最占存储的索引约 310GB/日(单副本)，这些索引都因磁盘空间有限，调整为无副本的了。</p>
<h3 id="那么，对于这非正常情况如何扩容，即增加数据节点呢"><a href="#那么，对于这非正常情况如何扩容，即增加数据节点呢" class="headerlink" title="那么，对于这非正常情况如何扩容，即增加数据节点呢"></a>那么，对于这非正常情况如何扩容，即增加数据节点呢</h3><p>需要说明的是，ES官方有一个滚动升级/维修的方案，前提是需要暂停写入，<strong>如果不停止写入索引数据时应该怎么做呢？要考虑到有些索引是没有副本的</strong>。<br>如果增加节点，按官方操作，primary 分片就会被被 rebalance到新增节点上，且几百G的数据会迁移，导致往ES集群长时间写入失败，当然我们可以预先手动将已有的历史索引往新分片上迁移，足够均衡后在开启 allocation all，但需要花时间整理迁移的索引。<br>所以笔者想到了另外一种做法，即：<br>1) cluster.routing.allocation.enable设置为 new_primaries，cluster.routing.rebalance.enable 设置为none<br>那么启用新节点后，当前以及历史索引的 primaries 分片不受影响，故不影响现有索引读写，新索引的 primaries分配和写入也都不受影响.<br>2) 这样持续N天后，集群中老的索引已经被删除，剩下多是通过 new_primaries 分配的索引.<br>3) 此时将 cluster.routing.allocation.enable恢复为all，cluster.routing.rebalance.enable 设置为 replicas，此时至副本会被创建完成，这段时间因为异步复制数据，性能会有影响，但是可控，不过重要的是不会影响数据的写入和查询。<br>4) 恢复 cluster.routing.rebalance.enable 为all<br>需要指出的是：<br>1) 因为N天是单副本，还是存在数据仅一份带来的风险的。<br>2) 3/4步其实可以一部到位，但还是稳妥起见，其实2/3步也可以第二天开始，不必等N天。<br>当然上述是在允许少量数据丢失情况下懒人操作法，笔者操作下来看到还是会有接近万分之一的数据丢失。</p>
<h3 id="如果是迁移一个数据节点呢？"><a href="#如果是迁移一个数据节点呢？" class="headerlink" title="如果是迁移一个数据节点呢？"></a>如果是迁移一个数据节点呢？</h3><p><strong>比如将故障的机器A替换为新机器B(此时机器A有当日正在写入的主分片)</strong>，也可以通过上述 cluster.routing.allocation.enable和cluster.routing.rebalance.enable操作的方法，不过这种情况下，其实也可以通过预先创建好 第二天的索引，并将 第二日索引从A上迁移走(如果有的话)，然后在第二日将A上的分片作为历史数据都迁移到B即可。<br>这里附上几个迁移/上下线node常用的es命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">curl -XPUT 10.135.20.38:9200/_cluster/settings -d&apos;&#123;</div><div class="line">    &quot;transient&quot;: &#123;</div><div class="line">        &quot;cluster.routing.allocation.enable&quot;: &quot;none&quot;</div><div class="line">    &#125;</div><div class="line">&#125;&apos;</div><div class="line">取值可以是: all/primaries/new_primaries/none</div><div class="line">重新启动节点时，此设置不会影响本地主分片的恢复, 如果重新启动的节点具有未分配的主分片的副本，会立即恢复该主分片</div><div class="line">即该配置影响新创建的索引不会被 allocate</div><div class="line"></div><div class="line">curl -XPUT 10.135.20.38:9200/_cluster/settings -d&apos;&#123;</div><div class="line">    &quot;transient&quot;: &#123;</div><div class="line">        &quot;cluster.routing.rebalance.enable&quot;: &quot;replicas&quot;</div><div class="line">    &#125;</div><div class="line">&#125;&apos;</div><div class="line">取值可以是: all/primaries/replicas/none</div><div class="line">该配置影响已有索引的分片不会进行rebalance</div><div class="line"></div><div class="line"># 当然在rebalance时你可以调整带宽，默认时40MB，可以调整100MB，增加速度</div><div class="line"># 其他优化如压缩等就不再详述，参见官方doc</div><div class="line">curl -XPUT &apos;http://10.135.20.38:9200/_cluster/settings&apos; -d&apos;&#123;</div><div class="line">  &quot;persistent&quot;:&#123;</div><div class="line">    &quot;indices.recovery.max_bytes_per_sec&quot;:&quot;100mb&quot;</div><div class="line">  &#125;</div><div class="line">&#125;&apos;</div><div class="line">其他：</div><div class="line">transport.tcp.compress</div><div class="line">cluster.routing.allocation.allow_rebalance</div><div class="line">cluster.routing.allocation.balance.shard</div><div class="line">cluster.routing.allocation.balance.index</div><div class="line">cluster.routing.allocation.balance.threshold</div><div class="line">操作分片</div><div class="line">curl -XPOST &apos;10.135.20.38:9200/_cluster/reroute?pretty&apos; -d &apos;&#123;</div><div class="line">    &quot;commands&quot; : [</div><div class="line">        &#123;</div><div class="line">          &quot;allocate_empty_primary&quot; : &#123;</div><div class="line">              &quot;index&quot; : &quot;abcd-2019.12.23&quot;, &quot;shard&quot; : 4, &quot;node&quot; : &quot;jOsYiEk_S3C7U0r0XDadzQ&quot;, &quot;accept_data_loss&quot; : true</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;&apos;</div><div class="line"></div><div class="line">curl -XPOST &apos;10.135.20.38:9200/_cluster/reroute?pretty&apos; -d &apos;&#123;</div><div class="line">    &quot;commands&quot; : [</div><div class="line">        &#123;</div><div class="line">          &quot;allocate_replica&quot; : &#123;</div><div class="line">              &quot;index&quot; : &quot;abcd-2020.01.03&quot;, &quot;shard&quot; : 4, &quot;node&quot; : &quot;jOsYiEk_S3C7U0r0XDadzQ&quot;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure></p>
<h3 id="一个分词问题"><a href="#一个分词问题" class="headerlink" title="一个分词问题"></a>一个分词问题</h3><p>笔者曾被问到如何搜索 一个超长(约530个字符串)的问题，即业务写入ES的数据有个msg字段，值是下面那段很长的文本，像这种超长的字符串，ES会怎么索引？<br> <i>为什么用 7B22626F64* 可以搜索到，而 7B22626F64 却搜索不到？</i><br>该索引使用 ES 默认的 standard analyzer分词，我们看下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[java@10-135-16-105 logs]$ curl -s 10.135.20.38:9200/_analyze?text=<span class="stringamp;pretty"</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"tokens"</span> : [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span> : <span class="string">"7b22626f6479223a22222c2263726561746554696d65223a313537383338353930383736312c22657854797065223a312c22657874656e73696f6e223a227b5c227264436d645c223a7b7d2c5c2267624366675c223a7b5c22756e6b6e6f776e446973636172645c223a747275657d7d222c22666c6167223a302c2266726f6"</span>,</div><div class="line">      <span class="string">"start_offset"</span> : 0,</div><div class="line">      <span class="string">"end_offset"</span> : 255,</div><div class="line">      <span class="string">"type"</span> : <span class="string">"&lt;ALPHANUM&gt;"</span>,</div><div class="line">      <span class="string">"position"</span> : 0</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span> : <span class="string">"d223a223040636d642e796f756e69222c226d6964223a224f6f6566656566663434333835393037383737222c22737461747573223a302c2273756254797065223a372c2273796e634b6579223a2233222c22746f223a22343132333435363738394068656c6c6f776f726c64222c2274797065223a34322c2276657273696f"</span>,</div><div class="line">      <span class="string">"start_offset"</span> : 255,</div><div class="line">      <span class="string">"end_offset"</span> : 510,</div><div class="line">      <span class="string">"type"</span> : <span class="string">"&lt;ALPHANUM&gt;"</span>,</div><div class="line">      <span class="string">"position"</span> : 1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span> : <span class="string">"6e223a31353730313430327d"</span>,</div><div class="line">      <span class="string">"start_offset"</span> : 510,</div><div class="line">      <span class="string">"end_offset"</span> : 534,</div><div class="line">      <span class="string">"type"</span> : <span class="string">"&lt;ALPHANUM&gt;"</span>,</div><div class="line">      <span class="string">"position"</span> : 2</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>也即这个534字节长的字符串实际上被分词分成了三个词</strong>：两个255长度的字符串，和剩下的”6e223a31353730313430327d”，所以如果不用正则/模糊查询，那我们就要用上述的 三个词(两个255长的词和6e223a31353730313430327d)作为搜索词才能查到。<br>ES的 StandardAnalyzer 正是下面所示类，可以看到 max_token_length 就是设置了255长度。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StandardAnalyzerProvider</span> <span class="keyword">extends</span> <span class="title">AbstractIndexAnalyzerProvider</span>&lt;<span class="title">StandardAnalyzer</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StandardAnalyzer standardAnalyzer;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StandardAnalyzerProvider</span><span class="params">(IndexSettings indexSettings, Environment env, String name, Settings settings)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(indexSettings, name, settings);</div><div class="line">        <span class="keyword">final</span> CharArraySet defaultStopwords = CharArraySet.EMPTY_SET;</div><div class="line">        CharArraySet stopWords = Analysis.parseStopWords(env, settings, defaultStopwords);</div><div class="line">        <span class="keyword">int</span> maxTokenLength = settings.getAsInt(<span class="string">"max_token_length"</span>, StandardAnalyzer.DEFAULT_MAX_TOKEN_LENGTH);</div><div class="line">        standardAnalyzer = <span class="keyword">new</span> StandardAnalyzer(stopWords);</div><div class="line">        standardAnalyzer.setVersion(version);</div><div class="line">        standardAnalyzer.setMaxTokenLength(maxTokenLength);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> StandardAnalyzer <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.standardAnalyzer;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>题外话，笔者知道这里msg之前是json字符串，初看起来猜测试base64编码，但是没有=所以暂不考虑，仔细观察发现字符串都是以7B22开头，7D结尾，看起来是个对齐位数的编码，base32/base16解压下，发现确实base16，因为无意义，所以读者想对该字段禁用index。</p>
<h3 id="Elasticsearch如何通过Lucene存储"><a href="#Elasticsearch如何通过Lucene存储" class="headerlink" title="Elasticsearch如何通过Lucene存储"></a>Elasticsearch如何通过Lucene存储</h3><p>上述 msg字段所在索引，一天可以产生310G数据，可以看下面数据, 一天单shard的tim文件已经有30GB了。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">-rw-rw-r-- 1 elast elast 1159905974 Dec 31 10:01 _3qr.fdt</div><div class="line">-rw-rw-r-- 1 elast elast 1178870155 Dec 31 15:17 _665.fdt</div><div class="line">-rw-rw-r-- 1 elast elast 1193478301 Dec 31 18:51 _7uo.fdt</div><div class="line">-rw-rw-r-- 1 elast elast 1207594933 Dec 31 03:48 _1dd.fdt</div><div class="line">-rw-rw-r-- 1 elast elast 1211229272 Dec 31 08:15 _2y6.fdt</div><div class="line">-rw-rw-r-- 1 elast elast 1212375992 Dec 31 11:58 _4n3.fdt</div><div class="line">-rw-rw-r-- 1 elast elast 1216719366 Dec 31 16:53 _6x4.fdt</div><div class="line">-rw-rw-r-- 1 elast elast 1221544713 Dec 31 13:25 _5bk.fdt</div><div class="line">-rw-rw-r-- 1 elast elast 1236112172 Dec 31 20:04 _8go.fdt</div><div class="line">-rw-rw-r-- 1 elast elast 3313610786 Dec 31 10:13 _3qr_Lucene50_0.tim</div><div class="line">-rw-rw-r-- 1 elast elast 3386240596 Dec 31 15:30 _665_Lucene50_0.tim</div><div class="line">-rw-rw-r-- 1 elast elast 3393837649 Dec 31 19:03 _7uo_Lucene50_0.tim</div><div class="line">-rw-rw-r-- 1 elast elast 3397969349 Dec 31 12:10 _4n3_Lucene50_0.tim</div><div class="line">-rw-rw-r-- 1 elast elast 3471182659 Dec 31 17:06 _6x4_Lucene50_0.tim</div><div class="line">-rw-rw-r-- 1 elast elast 3471365535 Dec 31 20:17 _8go_Lucene50_0.tim</div><div class="line">-rw-rw-r-- 1 elast elast 3473142411 Dec 31 13:38 _5bk_Lucene50_0.tim</div><div class="line">-rw-rw-r-- 1 elast elast 3492353187 Dec 31 04:00 _1dd_Lucene50_0.tim</div><div class="line">-rw-rw-r-- 1 elast elast 3502603707 Dec 31 08:28 _2y6_Lucene50_0.tim</div><div class="line">-rw-rw-r-- 1 elast elast 5142369032 Dec 31 23:51 _a4z.cfs</div><div class="line">-rw-rw-r-- 1 elast elast 5200590671 Dec 31 22:41 _9k4.cfs</div><div class="line">-rw-rw-r-- 1 elast elast 5225322674 Dec 31 21:43 _91t.cfs</div></pre></td></tr></table></figure></p>
<p>不过在笔者禁用 msg 的索引后，ES该Index的存储数据量降到每天110G，这个降幅让笔者有点意外。<br>我们知道ES底层就是通过Lucene实现索引的存储，所以先了解下，这几个后缀名文件含义：<br><blockquote><p>.fdt .fdm .fdx 其中.fdt(field data)用于存储具有Store.YES属性的Field的数据，fdx/fdm则是对fdt的索引。<br>.tim .tip .doc 其中 .tim 存储倒排索引的文件，它存储了分词后的词条（Term）和doc的索引信息<br>.dvd .dvm 用于聚合排序的列存文件<br>.cfs 是复合索引格式，就是上述后缀文件的大杂烩，es IndexWriter的useCompoundFile默认true，就是该功能，这是性能考虑，为了减少索引文件数量，减少同时打开的文件数量。</p>
</blockquote><br>更多可以参考 <a href="https://lucene.apache.org/core/3_5_0/fileformats.html" target="_blank" rel="external">Apache Lucene - Index File Formats</a></p>
<h3 id="Elasticsearch底层-到底-往Lucene写入了些什么"><a href="#Elasticsearch底层-到底-往Lucene写入了些什么" class="headerlink" title="Elasticsearch底层 到底 往Lucene写入了些什么"></a>Elasticsearch底层 到底 往Lucene写入了些什么</h3><p>很简单，这是笔者 通过Luke查看一段 ES 的一个索引看到的数据，如图示：<br><img src="/images/2020_es_lucene_data.png" width="100%"><br><strong>我们首先可以看到 _all,_source,_uid,_type,_version,_field_names 这些下划线开头的字段名，这些就是属于ES的元数据</strong><br>_source就是大家熟知的写入es的消息体内容，_all 是把所有其它(indexed)的字段值合并成一个大字符串来索引的特殊字段，_field_names就是字段名的索引(用于es的<em>exists</em>查询)，但图中的 _uid 字段是什么呢？其实就是ES的 _id 字段，只不过ES在内部使用 _uid（_uid的格式是：type + ‘#’ + id）实现，即把_uid存储在Lucene中，关于ES的内部字段，可以参考： <a href="https://blog.csdn.net/zhaipengfei1231/article/details/80031261" target="_blank" rel="external">https://blog.csdn.net/zhaipengfei1231/article/details/80031261</a> ，这里不展开。<br>同时我们还可以看到许多如 msg、name等一些业务字段，而这些字段都对应着一个 XX.keyword 字段。<br>从图上看到，ES写入Lucene的 字段，除了_uid和_source，其他字段都是 不存储到 Lucene中的，即这些field都是Store.NO ！<br>这些字段的type都可以在ES的org.elasticsearch.index.mapper package下看到源码，比如_source 这个field type 可以看到它是 store，但不索引，不参与index-time boosting<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MappedFieldType FIELD_TYPE = <span class="keyword">new</span> SourceFieldType();</div><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">    FIELD_TYPE.setIndexOptions(IndexOptions.NONE); <span class="comment">// not indexed</span></div><div class="line">    FIELD_TYPE.setStored(<span class="keyword">true</span>);</div><div class="line">    FIELD_TYPE.setOmitNorms(<span class="keyword">true</span>);</div><div class="line">    FIELD_TYPE.setIndexAnalyzer(Lucene.KEYWORD_ANALYZER);</div><div class="line">    FIELD_TYPE.setSearchAnalyzer(Lucene.KEYWORD_ANALYZER);</div><div class="line">    FIELD_TYPE.setName(NAME);</div><div class="line">    FIELD_TYPE.freeze();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>同时我们还可以看到 _source 的值为 “7b 22 62 69 7a 41 63 74 69 6f 6e 22…”这一串，其实是因为 源数据是作为二进制的Byte存入 _source并写入Lucene的，即将 _source值拷贝出来，通过HEX 解码，我们就可以得到源数据。</p>
<h3 id="但为什么去掉msg后就可以节省66-的空间？"><a href="#但为什么去掉msg后就可以节省66-的空间？" class="headerlink" title="但为什么去掉msg后就可以节省66%的空间？"></a>但为什么去掉msg后就可以节省66%的空间？</h3><p>我们知道，ES借助Lucene有许多压缩，比如_source的存储，就会以LZ4的方式被压缩存储，也就是ES官方默认和推荐的压缩方式：Best Speed，另外一种方式是 Best Compressed。<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tune-for-disk-usage.html" target="_blank" rel="external">Elasticsearch Tune for disk usage</a><br>LZ4是通用的非常快的压缩/解压算法，但是压缩比不好，Deflate(通常如gzip压缩)压缩比较好，但是耗时，因为Deflate首先也是基于LZ77压缩，然后再经Huffman编码再压缩，所以理论上压缩更少，但压缩也更耗时。<br>好了，我们看看上文提到.tim文件，即倒排索引文件，无论其数据格式如何，底层实际是保存了倒排索引需要的 term 和doc(doc id) 的索引关系，那么这个term的内容是否需要压缩呢？<br>通常经过分词后得到的就是极小的词单元，已经是小文本了，再压缩似乎没有必要，而且倒排索引本身就是一种压缩方式，这点和LZ4一样，都是基于字典技术，处理重复文本的压缩，但是 Lucene还是有针对term在存储时进行压缩的。 而且在 tim 文件中，为了构建Lucene的高性能查询数据结构(即FST), term在存储时就是按字典排序存储的，这也适合压缩。<br>但是，目前已知的无损压缩对于非常随机的字符串压缩效果都不好，lz4亦然，笔者曾测试过80万次随机541字节长的字符串的文本(413MB)压缩，tar/gzip基本上是压缩后稳定在263MB左右，LZ4 则在413MB，比原文件大了1KB左右。<br>不过如果文本是80万次重复530字节长的字符串时，tar/zip基本上是400MB压缩后稳定在1.7MB左右，而LZ4也可压缩到1.7MB。深入展开需要了解压缩“Compress”这门技术了，google以及一些研究机构也在此付出巨大努力，Netflix曾经爆款剧《硅谷》就是以主角 Richard发明神奇压缩算法Pied Piper展开，笔者最早接触还是WinRAR/Winzip之类，这里附上一个有意思的知乎链接<a href="https://www.zhihu.com/question/20583075/answer/26673424" target="_blank" rel="external">世界上最大的文件压缩率是多少</a>，不过不建议大家尝试里面的解压炸弹(decompression bomb)。<br>需要指出的是上述80万次重复文本 LZ4 压缩效果要看 LZ4设置的block size，1K时压缩到160MB，16K时压缩到12MB，512K时才压缩到1.8MB，16MB时压缩到1.2MB，而ES基于Lucene使用LZ4时block size 是16KB，也就是官方推荐，默认可以装进L1 cache的配置，即考虑性能优先，而不是压缩比，所以对于超大文本的压缩不要过于指望压缩效果。<br>因为 deflate压缩性能比lz4差许多，对于写多情况也不建议 BEST_COMPRESSION，理论上至少会导致写入性能下降，至于读性能则还需要考虑磁盘读写，所以作这个测试需要考虑到，虽然官方推荐在Tune for disk usage可以考虑，但是在对存储要求时才考虑，对于小文本没有必要选择最优压缩。<br>如上面两点提到的，我们看下ES字段存储，还记得ES 5之后字段都会有一个.keyword字段吗，上文图片可以看到，即不分词的索引，同时还默认开启 _all，_all 字段索引就是包含全部字段的内容索引，也即上文图片所述 _all，他们都会写入Lucene的 xx.keyword或_all字段，所以对于启用 _all 的索引排除某字段后，几乎是相当于排除三份针对该字段索引的字节数，而msg文本也是比较随机的，压缩不好占空间，这也是为什么 上文中禁用 msg 索引后，该index的存储文件从310G降到了110G。<br>最后，如果对ES写入Lucene的这段代码感兴趣，可以从 ES 的 org.elasticsearch.index.engine.InternalEngine看起，ES对于索引的CRUD操作等接口都是通过InternalEngine实现的，相关追溯在 IndexResult index(Index index)方法。</p>
<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><p><a href="https://lucene.apache.org/core/3_5_0/fileformats.html" target="_blank" rel="external">Apache Lucene - Index File Formats</a><br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tune-for-disk-usage.html" target="_blank" rel="external">Elasticsearch Tune for disk usage</a><br><a href="https://github.com/DmitryKey/luke" target="_blank" rel="external">Luke, the Lucene Toolbox Project + Swing</a><br><a href="http://www.shenyanchao.cn/blog/2018/12/04/lucene-fst/" target="_blank" rel="external">Lucene FST</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;i&gt;&lt;strong&gt;intro1&lt;/strong&gt;：一个不太正常的elasticsaerch分片分布场景下的扩容&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro2&lt;/strong&gt;: elasticsaerch到底往Lucene中写了些什么数据&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro3&lt;/strong&gt;: Lucene的文件的压缩&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;前文问题解答&quot;&gt;&lt;a href=&quot;#前文问题解答&quot; class=&quot;headerlink&quot; title=&quot;前文问题解答&quot;&gt;&lt;/a&gt;前文问题解答&lt;/h3&gt;&lt;p&gt;前一篇文章，留了个Elasticsearch（以下简称ES） cpu load图猜问题，不难猜，这里贴一张磁盘图看的就更明显了。&lt;br&gt;
    
    </summary>
    
    
      <category term="elasticsearch" scheme="http://thomaslau.github.io/tags/elasticsearch/"/>
    
      <category term="architecture" scheme="http://thomaslau.github.io/tags/architecture/"/>
    
      <category term="Lucene" scheme="http://thomaslau.github.io/tags/Lucene/"/>
    
  </entry>
  
  <entry>
    <title>新一年的技术叨叨</title>
    <link href="http://thomaslau.github.io/2020/01/02/2020-01-02-new_decades_new_life/"/>
    <id>http://thomaslau.github.io/2020/01/02/2020-01-02-new_decades_new_life/</id>
    <published>2020-01-01T16:59:10.000Z</published>
    <updated>2020-01-02T23:51:08.035Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><i><strong>intro1</strong>：kafk异常io图，kafka rebalance和reassigne区别</i><br><i><strong>intro2</strong>: kafka真的只能从leader partition读写吗</i><br><i><strong>intro3</strong>: 一个不太正常的elasticsaerch分片分布场景下的扩容</i></p>
</blockquote>
<h2 id="从一些系统监控图能看到些什么"><a href="#从一些系统监控图能看到些什么" class="headerlink" title="从一些系统监控图能看到些什么"></a>从一些系统监控图能看到些什么</h2><p>最近在排查线上问题时，留意到几台Kafka机器的基础的zabbix io/cpu监控，图一所示平稳读操作中夹杂一些尖峰，图二是之前放大的图<br><a id="more"></a><br><img src="/images/20_kafka_perfect_IO.png" width="100%"><br>放大看，io持续还是明显的<br><img src="/images/20_kafka_bad_IO.png" width="100%"><br>从上述图能够看出，Kafka非常少有大量读磁盘的操作，主要还是定期批量写磁盘操作，而且顺序写操作磁盘非常高效。但为什么上图最近读磁盘增加了许多呢？我们知道Kafka在写消息时，消息实际上时写入page cache(内存)中，然后由异步线程刷盘，消息从page cache落地磁盘。而读取消息时，是直接由page cache转入socket发送出去[也即大家说的零拷贝技术]。如果page cache没有命中相应数据(offset)，Kafka就会通过idx文件，即索引，定位到对应的数据文件，将整个文件从磁盘加载消息到page cache,然后再从socket发出去，此时就会发生不小的磁盘读操作。<br>也就是说，<strong>page cache常没有命中消费的数据，这通常是消费延迟导致</strong>，查看消费监控，确实存在一些groupid的消费者存在严重的消费延迟情况，甚至还有程序经常从头开始消费。<br>这些都应该是尽量避免的，因为 <strong>使用page cahce当遇到问题脏页，内存回收等问题时，易造成消息读写的延迟，而且过多page cache也影响linux系统本身性能，如果未关闭swap问题可能更严重了</strong>。 不过据说来自阿里的 RocketMQ 在这方面做了些优化。</p>
<h2 id="Kafka-rebalance-vs-Kafka-reassigne"><a href="#Kafka-rebalance-vs-Kafka-reassigne" class="headerlink" title="Kafka rebalance vs Kafka reassigne"></a>Kafka rebalance vs Kafka reassigne</h2><p>还有一点的是，我们知道Kafka读写的都是partition，partition分为leader/follower角色，在过去对于Kafka的partition来说，只有leader才会进行读写操作，folower仅进行同步/复制/备份(当然，有些例外如测试等, 不过现在更例外了，请看下文)，follower对于consumer/producer等client来说是透明的，这也可以认为是kafka数据一致性的方法。<br>同Mysql的实现不同，Mysql分为主从，通常会针对主从作读写分离操作，实现性能提升，而Kafka则分为多个partition，读写分离到多partition上，他们的负载均衡就是通过 broker(机器)+partition+角色(leader) 的均衡实现的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">We assume that there are many partitions in a cluster and try to </div><div class="line">spread the leaders evenly among brokers. That way, even for a </div><div class="line">particularpartition, all clients have to talk to a single broker, </div><div class="line">the overall workload is still balanced.</div></pre></td></tr></table></figure></p>
<p>不过，是否读replica这个做法在多数据中心时是有一定益处的，<strong>为此Kafka就做了改进，允许消费者从最近的副本进行获取</strong>，<strong><a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-392%3A+Allow+consumers+to+fetch+from+closest+replica" target="_blank" rel="external">KIP-392: Allow consumers to fetch from closest replica</a><br><a href="https://github.com/apache/kafka/pull/6832" target="_blank" rel="external">KAFKA-8443 Broker support for fetch from followers #6832</a>, <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=125307901" target="_blank" rel="external">Release Plan 2.4.0</a>，</strong> 这个改进可以说更上层楼，<strong>在目前最新的2.4.0版本发布</strong>，如果你通过百度查询，国内相关文章不多，所以需要自己阅读官方指导了。<br>其次，可以看到一些kafka server的监控软件，如Kafka Manager有个leader skew，用来衡量leader倾斜度，简单列举下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Brokers Spread：看作broker使用率，该topic分布的broker占集群broker总量百分比</div><div class="line">Brokers Skew：该topic偏离均值的broker占集群broker总量百分比</div><div class="line">Brokers Leader Skew：Percentage of brokers having more partitions as leader than the average，</div><div class="line">leader partition是否存在倾斜，即没有达到平均leader比重的broker数量占集群broker总量百分比</div></pre></td></tr></table></figure></p>
<p>这是因为Kafka所有读写都在leader上进行， broker leader skew过高会导致读写负载不均衡，<br>Kafka有个参数 auto.leader.rebalance.enable，默认为true 可以使kafka自动定期做leader的rebalance，消除写不均衡的问题。</p>
<h2 id="那么这个-rebalance-和reassign-有关系吗"><a href="#那么这个-rebalance-和reassign-有关系吗" class="headerlink" title="那么这个 rebalance 和reassign 有关系吗"></a>那么这个 rebalance 和reassign 有关系吗</h2><p>需要指出，这里的Kafka rebalance，不是指kafka consumer的rebalance，而是kafka partition的rebalance，也就是 kafka leader rebalance，即针对partition的 均衡，与此相关的还有一个 partition reassign，都是实现kafka server的各个broker之间的负载均衡的方式。<br>有的文章没有注意把二者混为一谈，认为partition rebalance 会引起partition重分配， 导致对于大吞吐量的应用在leader rebalance 时，可能导致partition不可用的，无法读写数据，在生产环境关闭该功能，或者 rebalance 可能短暂导致如partition不可写等，其实无此必要。<br><strong>partition reblance 和 partition reassign 是两个概念</strong>，reassign 是在监听ZK事件时触发的，比如我们通过ReassignPartitionsCommand命令操作分片迁移。<br>Kafka rebalance判断依据是 imbalanceRatio 因子的大小，而扩展节点(broker)不会引起imbalanceRatio的变化，因为 totalTopicPartitionsForBroker不变，totalTopicPartitionsNotLedByBroker 和新的broker无关，除非已经手动设置作修改。<br>rebalance是否会引起reasign呢？官方没有详细涉及，从笔者也正在阅读这块代码，尚未发现rebalance会导致resign的情况。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div></pre></td><td class="code"><pre><div class="line"><span class="type">ControllerContext</span>.scala</div><div class="line">...</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">checkAndTriggerPartitionRebalance</span></span>(): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">if</span> (isActive()) &#123;</div><div class="line">      trace(<span class="string">"checking need to trigger partition rebalance"</span>)</div><div class="line">      <span class="comment">// get all the active brokers</span></div><div class="line">      <span class="keyword">var</span> preferredReplicasForTopicsByBrokers: <span class="type">Map</span>[<span class="type">Int</span>, <span class="type">Map</span>[<span class="type">TopicAndPartition</span>, <span class="type">Seq</span>[<span class="type">Int</span>]]] = <span class="literal">null</span></div><div class="line">      inLock(controllerContext.controllerLock) &#123;</div><div class="line">        preferredReplicasForTopicsByBrokers =</div><div class="line">          controllerContext.partitionReplicaAssignment.filterNot(p =&gt; deleteTopicManager.isTopicQueuedUpForDeletion(p._1.topic)).groupBy &#123;</div><div class="line">            <span class="keyword">case</span>(topicAndPartition, assignedReplicas) =&gt; assignedReplicas.head</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      debug(<span class="string">"preferred replicas by broker "</span> + preferredReplicasForTopicsByBrokers)</div><div class="line">      <span class="comment">// for each broker, check if a preferred replica election needs to be triggered</span></div><div class="line">      preferredReplicasForTopicsByBrokers.foreach &#123;</div><div class="line">        <span class="keyword">case</span>(leaderBroker, topicAndPartitionsForBroker) =&gt; &#123;</div><div class="line">          <span class="keyword">var</span> imbalanceRatio: <span class="type">Double</span> = <span class="number">0</span></div><div class="line">          <span class="keyword">var</span> topicsNotInPreferredReplica: <span class="type">Map</span>[<span class="type">TopicAndPartition</span>, <span class="type">Seq</span>[<span class="type">Int</span>]] = <span class="literal">null</span></div><div class="line">          inLock(controllerContext.controllerLock) &#123;</div><div class="line">            topicsNotInPreferredReplica =</div><div class="line">              topicAndPartitionsForBroker.filter &#123;</div><div class="line">                <span class="keyword">case</span>(topicPartition, replicas) =&gt; &#123;</div><div class="line">                  controllerContext.partitionLeadershipInfo.contains(topicPartition) &amp;&amp;</div><div class="line">                  controllerContext.partitionLeadershipInfo(topicPartition).leaderAndIsr.leader != leaderBroker</div><div class="line">                &#125;</div><div class="line">              &#125;</div><div class="line">            debug(<span class="string">"topics not in preferred replica "</span> + topicsNotInPreferredReplica)</div><div class="line">            <span class="keyword">val</span> totalTopicPartitionsForBroker = topicAndPartitionsForBroker.size</div><div class="line">            <span class="keyword">val</span> totalTopicPartitionsNotLedByBroker = topicsNotInPreferredReplica.size</div><div class="line">            imbalanceRatio = totalTopicPartitionsNotLedByBroker.toDouble / totalTopicPartitionsForBroker</div><div class="line">            trace(<span class="string">"leader imbalance ratio for broker %d is %f"</span>.format(leaderBroker, imbalanceRatio))</div><div class="line">          &#125;</div><div class="line">          <span class="comment">// check ratio and if greater than desired ratio, trigger a rebalance for the topic partitions</span></div><div class="line">          <span class="comment">// that need to be on this broker</span></div><div class="line">          <span class="keyword">if</span> (imbalanceRatio &gt; (config.leaderImbalancePerBrokerPercentage.toDouble / <span class="number">100</span>)) &#123;</div><div class="line">            topicsNotInPreferredReplica.foreach &#123;</div><div class="line">              <span class="keyword">case</span>(topicPartition, replicas) =&gt; &#123;</div><div class="line">                inLock(controllerContext.controllerLock) &#123;</div><div class="line">                  <span class="comment">// do this check only if the broker is live and there are no partitions being reassigned currently</span></div><div class="line">                  <span class="comment">// and preferred replica election is not in progress</span></div><div class="line">                  <span class="keyword">if</span> (controllerContext.liveBrokerIds.contains(leaderBroker) &amp;&amp;</div><div class="line">                      controllerContext.partitionsBeingReassigned.size == <span class="number">0</span> &amp;&amp;</div><div class="line">                      controllerContext.partitionsUndergoingPreferredReplicaElection.size == <span class="number">0</span> &amp;&amp;</div><div class="line">                      !deleteTopicManager.isTopicQueuedUpForDeletion(topicPartition.topic) &amp;&amp;</div><div class="line">                      controllerContext.allTopics.contains(topicPartition.topic)) &#123;</div><div class="line">                    onPreferredReplicaElection(<span class="type">Set</span>(topicPartition), <span class="literal">true</span>)</div><div class="line">                  &#125;</div><div class="line">                &#125;</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * This callback is invoked by the reassigned partitions listener. When an admin command initiates a partition</div><div class="line">   * reassignment, it creates the /admin/reassign_partitions path that triggers the zookeeper listener.</div><div class="line">   * Reassigning replicas for a partition goes through a few steps listed in the code.</div><div class="line">   * RAR = Reassigned replicas</div><div class="line">   * OAR = Original list of replicas for partition</div><div class="line">   * AR = current assigned replicas</div><div class="line">   *</div><div class="line">   * 1. Update AR in ZK with OAR + RAR.</div><div class="line">   * 2. Send LeaderAndIsr request to every replica in OAR + RAR (with AR as OAR + RAR). We do this by forcing an update</div><div class="line">   *    of the leader epoch in zookeeper.</div><div class="line">   * 3. Start new replicas RAR - OAR by moving replicas in RAR - OAR to NewReplica state.</div><div class="line">   * 4. Wait until all replicas in RAR are in sync with the leader.</div><div class="line">   * 5  Move all replicas in RAR to OnlineReplica state.</div><div class="line">   * 6. Set AR to RAR in memory.</div><div class="line">   * 7. If the leader is not in RAR, elect a new leader from RAR. If new leader needs to be elected from RAR, a LeaderAndIsr</div><div class="line">   *    will be sent. If not, then leader epoch will be incremented in zookeeper and a LeaderAndIsr request will be sent.</div><div class="line">   *    In any case, the LeaderAndIsr request will have AR = RAR. This will prevent the leader from adding any replica in</div><div class="line">   *    RAR - OAR back in the isr.</div><div class="line">   * 8. Move all replicas in OAR - RAR to OfflineReplica state. As part of OfflineReplica state change, we shrink the</div><div class="line">   *    isr to remove OAR - RAR in zookeeper and sent a LeaderAndIsr ONLY to the Leader to notify it of the shrunk isr.</div><div class="line">   *    After that, we send a StopReplica (delete = false) to the replicas in OAR - RAR.</div><div class="line">   * 9. Move all replicas in OAR - RAR to NonExistentReplica state. This will send a StopReplica (delete = false) to</div><div class="line">   *    the replicas in OAR - RAR to physically delete the replicas on disk.</div><div class="line">   * 10. Update AR in ZK with RAR.</div><div class="line">   * 11. Update the /admin/reassign_partitions path in ZK to remove this partition.</div><div class="line">   * 12. After electing leader, the replicas and isr information changes. So resend the update metadata request to every broker.</div><div class="line">   *</div><div class="line">   * For example, if OAR = &#123;1, 2, 3&#125; and RAR = &#123;4,5,6&#125;, the values in the assigned replica (AR) and leader/isr path in ZK</div><div class="line">   * may go through the following transition.</div><div class="line">   * AR                 leader/isr</div><div class="line">   * &#123;1,2,3&#125;            1/&#123;1,2,3&#125;           (initial state)</div><div class="line">   * &#123;1,2,3,4,5,6&#125;      1/&#123;1,2,3&#125;           (step 2)</div><div class="line">   * &#123;1,2,3,4,5,6&#125;      1/&#123;1,2,3,4,5,6&#125;     (step 4)</div><div class="line">   * &#123;1,2,3,4,5,6&#125;      4/&#123;1,2,3,4,5,6&#125;     (step 7)</div><div class="line">   * &#123;1,2,3,4,5,6&#125;      4/&#123;4,5,6&#125;           (step 8)</div><div class="line">   * &#123;4,5,6&#125;            4/&#123;4,5,6&#125;           (step 10)</div><div class="line">   *</div><div class="line">   * Note that we have to update AR in ZK with RAR last since it's the only place where we store OAR persistently.</div><div class="line">   * This way, if the controller crashes before that step, we can still recover.</div><div class="line">   */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">onPartitionReassignment</span></span>(topicAndPartition: <span class="type">TopicAndPartition</span>, reassignedPartitionContext: <span class="type">ReassignedPartitionsContext</span>) &#123;</div><div class="line">    <span class="keyword">val</span> reassignedReplicas = reassignedPartitionContext.newReplicas</div><div class="line">    areReplicasInIsr(topicAndPartition.topic, topicAndPartition.partition, reassignedReplicas) <span class="keyword">match</span> &#123;</div><div class="line">      <span class="keyword">case</span> <span class="literal">false</span> =&gt;</div><div class="line">        info(<span class="string">"New replicas %s for partition %s being "</span>.format(reassignedReplicas.mkString(<span class="string">","</span>), topicAndPartition) +</div><div class="line">          <span class="string">"reassigned not yet caught up with the leader"</span>)</div><div class="line">        <span class="keyword">val</span> newReplicasNotInOldReplicaList = reassignedReplicas.toSet -- controllerContext.partitionReplicaAssignment(topicAndPartition).toSet</div><div class="line">        <span class="keyword">val</span> newAndOldReplicas = (reassignedPartitionContext.newReplicas ++ controllerContext.partitionReplicaAssignment(topicAndPartition)).toSet</div><div class="line">        <span class="comment">//1. Update AR in ZK with OAR + RAR.</span></div><div class="line">        updateAssignedReplicasForPartition(topicAndPartition, newAndOldReplicas.toSeq)</div><div class="line">        <span class="comment">//2. Send LeaderAndIsr request to every replica in OAR + RAR (with AR as OAR + RAR).</span></div><div class="line">        updateLeaderEpochAndSendRequest(topicAndPartition, controllerContext.partitionReplicaAssignment(topicAndPartition),</div><div class="line">          newAndOldReplicas.toSeq)</div><div class="line">        <span class="comment">//3. replicas in RAR - OAR -&gt; NewReplica</span></div><div class="line">        startNewReplicasForReassignedPartition(topicAndPartition, reassignedPartitionContext, newReplicasNotInOldReplicaList)</div><div class="line">        info(<span class="string">"Waiting for new replicas %s for partition %s being "</span>.format(reassignedReplicas.mkString(<span class="string">","</span>), topicAndPartition) +</div><div class="line">          <span class="string">"reassigned to catch up with the leader"</span>)</div><div class="line">      <span class="keyword">case</span> <span class="literal">true</span> =&gt;</div><div class="line">        <span class="comment">//4. Wait until all replicas in RAR are in sync with the leader.</span></div><div class="line">        <span class="keyword">val</span> oldReplicas = controllerContext.partitionReplicaAssignment(topicAndPartition).toSet -- reassignedReplicas.toSet</div><div class="line">        <span class="comment">//5. replicas in RAR -&gt; OnlineReplica</span></div><div class="line">        reassignedReplicas.foreach &#123; replica =&gt;</div><div class="line">          replicaStateMachine.handleStateChanges(<span class="type">Set</span>(<span class="keyword">new</span> <span class="type">PartitionAndReplica</span>(topicAndPartition.topic, topicAndPartition.partition,</div><div class="line">            replica)), <span class="type">OnlineReplica</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//6. Set AR to RAR in memory.</span></div><div class="line">        <span class="comment">//7. Send LeaderAndIsr request with a potential new leader (if current leader not in RAR) and</span></div><div class="line">        <span class="comment">//   a new AR (using RAR) and same isr to every broker in RAR</span></div><div class="line">        moveReassignedPartitionLeaderIfRequired(topicAndPartition, reassignedPartitionContext)</div><div class="line">        <span class="comment">//8. replicas in OAR - RAR -&gt; Offline (force those replicas out of isr)</span></div><div class="line">        <span class="comment">//9. replicas in OAR - RAR -&gt; NonExistentReplica (force those replicas to be deleted)</span></div><div class="line">        stopOldReplicasOfReassignedPartition(topicAndPartition, reassignedPartitionContext, oldReplicas)</div><div class="line">        <span class="comment">//10. Update AR in ZK with RAR.</span></div><div class="line">        updateAssignedReplicasForPartition(topicAndPartition, reassignedReplicas)</div><div class="line">        <span class="comment">//11. Update the /admin/reassign_partitions path in ZK to remove this partition.</span></div><div class="line">        removePartitionFromReassignedPartitions(topicAndPartition)</div><div class="line">        info(<span class="string">"Removed partition %s from the list of reassigned partitions in zookeeper"</span>.format(topicAndPartition))</div><div class="line">        controllerContext.partitionsBeingReassigned.remove(topicAndPartition)</div><div class="line">        <span class="comment">//12. After electing leader, the replicas and isr information changes, so resend the update metadata request to every broker</span></div><div class="line">        sendUpdateMetadataRequest(controllerContext.liveOrShuttingDownBrokerIds.toSeq, <span class="type">Set</span>(topicAndPartition))</div><div class="line">        <span class="comment">// signal delete topic thread if reassignment for some partitions belonging to topics being deleted just completed</span></div><div class="line">        deleteTopicManager.resumeDeletionForTopics(<span class="type">Set</span>(topicAndPartition.topic))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>partition reassign又具体做了些什么</strong>，上文 onPartitionReassignment 部分可以看出大概，不必追踪代码具体细节，只通过上述代码里方法名字和注释，大概可以了解到，在controller接收到reassign指令，并updateLeaderEpochAndSendRequest后，会新分配一个副本，并努力追上 Leader 的位移，从而加入ISR(In Sync Replicas)，待全部的RAR副本(Reassigned replicas)都加入 ISR 之后，就会进行分区 Leader 选举，选举完删除原有的副本，在Kafka扩容broker时，kafka-reassign-partitions.sh脚本的–generate/–execute 配合即可完成上述变更。</p>
<h2 id="Elasticsearch-的扩容"><a href="#Elasticsearch-的扩容" class="headerlink" title="Elasticsearch 的扩容"></a>Elasticsearch 的扩容</h2><p>同Kafka partition reassign一样，Elasticseach在扩展节点时也会遇到shards的平衡问题，此时通过master节点手动/自动指定shards之间的 rebalance，如通过控制集群的 cluster.routing.allocation.enable/cluster.routing.rebalance.enable来决定哪类分片可被分配/哪类分片可被再平衡，尽量做到不影响线上的读写。<br>这在主节点都具备至少一个从节点时，机制运行良好，但在些极端情况下，有些shards因不得已原因没有从shards，如何扩容而不影响线上读写呢？<br>下一篇文章里笔者会总结下，这里贴一张elasticsearch某个数据节点的cpu负载图，同时告知磁盘io/网络io图走势都和该cpu走势类似，你能在图上指出正常、磁盘超85%、磁盘超95%、挂载MFS存储、卸载MFS存储、扩容所对应的时间点吗（假设索引是daily的，只需指出天级别的即可）<br><img src="/images/20_elasticsearch_cpu_except.png" width="100%"></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>最后是，例行夹带私货部分。<br>设计模式至今仍被国内许多编程人奉为圭臬，也成了面试青睐的问题，若你从事架构/中间件，那可能必考题了。<br>十年前，笔者还是在校生的时候，是设计模式的拥趸，那一年笔者读完了从 HeadFirst的《设计模式》到一千多页《Java与模式》( <a href="https://book.douban.com/subject/1214074/" target="_blank" rel="external">https://book.douban.com/subject/1214074/</a> ,阎宏博士著 )，再到斥巨资买来GoF的《设计模式：可复用面向对象软件的基础》看完。<br>但经历越久，越觉得设计模式可以扩展一个人的编程世界，但亦有其局限性。<br><strong>为什么这么说？</strong><br>23个设计模式是Erich Gamma等四位博士(Gang of four), 从前人的经验中总结出来的，从面向对象的设计中精选出23种构建健壮/灵活代码设计的技巧，正如其前言所述 <i><strong>本书假设你至少已经比较熟悉一种面向对象编程语言，并且有一定的面向对象设计经验。当我们提及“类型”和“多态”，或“接口”继承与“实现”继承的关系时，你应该对这些概念了然于胸”</strong></i>。<br>23种模式比如工厂模式里分简单工厂/抽象工厂模式是否算设计模式，这也曾经是个争论点。<br>如今笔者认为设计模式是不存在的，如果类似主题的话，不如看《面向模式的软件架构》上下卷，后者更接近怎么去设计软件。<br>甚至，对于JAVA研发来说，背诵设计模式不如背诵阿里巴巴的《阿里巴巴Java规范》，尽管笔者对其评价是负面为主，但同意其在实际开发中的实用性。<br>不赞同上述观点的人可能会以JAVA的BIO就通过装饰者模式实现了各种便捷的reader/stream或者dubbo里的策略模式反驳笔者，但请问下，读小文件或配置之类的文件时大家的选择是各种stream装饰读，还是IOUtils.tostrings或者java 7后提供的Files.listAsstring之类方法“一言以蔽之”略过这些stream？高性能拷贝文件时大家又会选择各种stream组装吗？<br><strong>今人有二十三种设计模式，古人也有三十六计</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;i&gt;&lt;strong&gt;intro1&lt;/strong&gt;：kafk异常io图，kafka rebalance和reassigne区别&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro2&lt;/strong&gt;: kafka真的只能从leader partition读写吗&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro3&lt;/strong&gt;: 一个不太正常的elasticsaerch分片分布场景下的扩容&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;从一些系统监控图能看到些什么&quot;&gt;&lt;a href=&quot;#从一些系统监控图能看到些什么&quot; class=&quot;headerlink&quot; title=&quot;从一些系统监控图能看到些什么&quot;&gt;&lt;/a&gt;从一些系统监控图能看到些什么&lt;/h2&gt;&lt;p&gt;最近在排查线上问题时，留意到几台Kafka机器的基础的zabbix io/cpu监控，图一所示平稳读操作中夹杂一些尖峰，图二是之前放大的图&lt;br&gt;
    
    </summary>
    
    
      <category term="kafka" scheme="http://thomaslau.github.io/tags/kafka/"/>
    
      <category term="yearly" scheme="http://thomaslau.github.io/tags/yearly/"/>
    
      <category term="elasticsearch" scheme="http://thomaslau.github.io/tags/elasticsearch/"/>
    
      <category term="architecture" scheme="http://thomaslau.github.io/tags/architecture/"/>
    
  </entry>
  
  <entry>
    <title>一段IP查找函数的优化及其它</title>
    <link href="http://thomaslau.github.io/2019/12/03/2019-12-03-on_optimising_a_ip_find_function/"/>
    <id>http://thomaslau.github.io/2019/12/03/2019-12-03-on_optimising_a_ip_find_function/</id>
    <published>2019-12-02T16:59:10.000Z</published>
    <updated>2019-12-03T01:06:00.958Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><i><strong>intro1</strong>：对一段解析17monipdb/ipip.net ip库 函数的 15倍-70倍-300倍 性能优化</i><br><i><strong>intro2</strong>: 一个sql count 语句的优化</i></p>
</blockquote>
<p>声明：</p>
<ol>
<li>本文代码均为本人所写或可在网上搜索的到的开源代码，遵循开源协议。</li>
<li>文中引用代码不涉及所就职公司代码，即便有也是本人从开源代码获取，或做了混淆处理。<a id="more"></a>
<h4 id="起因："><a href="#起因：" class="headerlink" title="起因："></a>起因：</h4>先看一段某系统中的的IP查询的代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IpParse</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> offset;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] index = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ByteBuffer dataBuffer;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ByteBuffer indexBuffer;</div><div class="line">    ...</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Area <span class="title">find</span><span class="params">(String ip)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ip_prefix_value = <span class="keyword">new</span> Integer(ip.substring(<span class="number">0</span>, ip.indexOf(<span class="string">"."</span>)));</div><div class="line">        <span class="keyword">long</span> ip2long_value = ip2long(ip);</div><div class="line">        <span class="keyword">int</span> start = index[ip_prefix_value];</div><div class="line">        <span class="keyword">int</span> max_comp_len = offset - <span class="number">1028</span>;</div><div class="line">        <span class="keyword">long</span> index_offset = -<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> index_length = -<span class="number">1</span>;</div><div class="line">        <span class="keyword">byte</span> b = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (start = start * <span class="number">8</span> + <span class="number">1024</span>; start &lt; max_comp_len; start += <span class="number">8</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (int2long(indexBuffer.getInt(start)) &gt;= ip2long_value) &#123;</div><div class="line">                index_offset = bytesToLong(b, indexBuffer.get(start + <span class="number">6</span>), indexBuffer.get(start + <span class="number">5</span>),</div><div class="line">                        indexBuffer.get(start + <span class="number">4</span>));</div><div class="line">                index_length = <span class="number">0xFF</span> &amp; indexBuffer.get(start + <span class="number">7</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">byte</span>[] areaBytes;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            dataBuffer.position(offset + (<span class="keyword">int</span>) index_offset - <span class="number">1024</span>);</div><div class="line">            areaBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[index_length];</div><div class="line">            dataBuffer.get(areaBytes, <span class="number">0</span>, index_length);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Area(<span class="keyword">new</span> String(areaBytes).split(<span class="string">"\t"</span>, -<span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 读取 ip 库到 dataBuffer</span></div><div class="line">        <span class="comment">// dataBuffer 读取并设置 indexBuffer</span></div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>不知道读者看到这段代码是否有所忆，笔者第一眼看到这段代码时，就想起很久前还在用php解析17monipdb的IP库代码，解析部分代码，尤其是256个数组、ip2long等几个ip处理函数，看起来和网上代码的完全一样，只不过这里是参考了c#实现。<br>17monipdb曾是一个开放的优质的ip库，后来似乎属ipip.net这家公司所有(非官方信息，网上资料较少，从百度结果/代码/数据格式推测)，并另起一收费版ip库。在这之前，更为大家使用的是QQ IP数据库，也叫纯真IP数据库，它最为熟知的是一个叫做 qqwry.dat 的二进制文件。笔者曾在实习的第一家公司时，就是用 C 语言解析 qqwry.dat 的文件，根据IP获取省市信息，至今还依稀记得它分为头信息/数据段/索引段，从索引段读取索引/偏移信息并对数据段建立索引后方可使用，17monipdb/ipip.net也是这个原理，<a href="https://blog.csdn.net/donghuib/article/details/53736764" target="_blank" rel="external">这里看17monip数据格式</a>。</p>
<h4 id="言归正传"><a href="#言归正传" class="headerlink" title="言归正传"></a>言归正传</h4><p>当笔者被告知这段代码性能能达到300万/s的查询次时，其实是怀疑的，毕竟有一个大且不可优化的锁lock了查询函数的大部分，事实上性能确实未达到20万/s(下文会附上数据)。<br><strong>如何优化呢？</strong><br>先看关键部分，lock.lock()， 这个lock其实是一个ReentrantLock，也就是相当于synchronize，一个完全的悲观锁，虽然java(似乎是1.6以后，对ReentrantLock做了比synchronize好一点的优化),也就是说，这里多线程访问其实是线性的。<br><strong>为什么这里要lock呢，可以优化吗？</strong><br>这里用lock是因为涉及的ByteBuffer几个操作不是线程安全的，其实上文 indexBuffer 也同样非 Thread-safe的，只是这里的操作相当于不可变量(immutable)，所以不加锁(lock)也未产生并发问题。正是因为有ByteBuffer的非线程安全操作，所以这里不会采用优化锁的思路去优化，因为首先想到的是ByteBuffer替换为byte数组，这样所有offset/偏移都是方法局部变量，无所谓并发了，企图用ByteBuffer这个所谓的零拷贝技术实在是大材小用/滥用/金玉其外，实际上，<strong>七牛就有个byte数组的实现</strong>，<a href="https://github.com/qiniu/ip17mon-java" target="_blank" rel="external">ip17mon-java</a>，正如其自称“IP 17mon java version, 比官方的速度快很多，支持监视文件改动自动加载”，下文会对其做个benchmark/或对其做个指正，并对比下和笔者B Tree实现的哪个更快。<br><blockquote><p>题外话：为什么这里要lock呢，其实可能还有一个考虑，就是实现者可能想实现动态更新IP库信息(包括文件改动全量更新/部分更新)。<br>如果全量更新，其实可以有其他lockless的方式优化，就是将IP库信息设置为volatile/autorefference的，更新的时候加锁或CAS方式(这也是下文代码采用方式)，find函数可以采用经典的Doug Lee在JUC包采用的方法local变量保存引用。<br>如果部分更新，那么不建议这么做，因为要修改索引段数据，索引段本身是个数组，大部分改动不会只是追加的方式，那样不比全量更新改动更少。</p>
</blockquote></p>
<h4 id="但有没有其他更好的或更高性能的实现呢？"><a href="#但有没有其他更好的或更高性能的实现呢？" class="headerlink" title="但有没有其他更好的或更高性能的实现呢？"></a>但有没有其他更好的或更高性能的实现呢？</h4><p><strong>我想做的通用一点，且其格式扩展起来方便，或者性能高。</strong><br>因为是对查找性能要求高，所以首先想到了 BTree，看起来像数据库，实际上，一些数据库实现就有线程安全的BTree可借鉴，这样动态更新很方便。<br>我们知道Mysql数据库索引的innodb实现就是BTree，比如2000万(好像是)数据通常会用一个三层BTree即可满足，1-4次io就能定位数据，前文几个解析17monipdb的本质上也是个一层的BTree，一层有256个索引分段定位ip位于哪个“段”(类似Mysql的页)，之后就是从该页中进行二分查找，找到该ip所属的条目，该条目携带的信息即是其ip库地址信息。<br>这里只不过是一层，为了减少内存的花费。<br>需要先明确的一点，查询时，都会把ip通过移位转化为一个对应的long数值，然后通过long找到对应ip段。<br><strong>其次，我想做的更通用一点，因为通过第三方渠道获取的IP信息可能只是一行文本数据，不是17monipdb那样的结构化的二进制数据, 且方便其他扩展。</strong><br>综上，笔者决定采用 B+ Tree和地址数组 的数据结构保存IP库信息(BTree保存IP段-&gt;对应地址信息在地址数组下标)。<br>公司的IP数据也是文本方式提供，而国外就有个免费的基于文本的IP库 Maxmind geoip，它也是logstash官方ip插件在用/ELK等支持的IP库，我们配置logstash ip/地址功能时就是用这个免费IP库。该IP库主要分为两个文件 城市信息和IP段-城市id文件，下载下来后，IP段-城市id文件可能几百MB，加载会耗时，所以需要剔除部分信息。笔者简化后，城市信息/BTree实际占用内存约60MB，而17monipdb在20-30MB左右。</p>
<p>OceanBase/Hsqldb都有java版实现的B+Tree，但改起来麻烦，所以笔者直接用 <a href="https://en.wikibooks.org/wiki/Algorithm_Implementation/Trees/B%2B_tree" target="_blank" rel="external">维基百科</a>上的B+Tree代码。<br>代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> https://en.wikibooks.org/wiki/Algorithm_Implementation/Trees/B%2B_tree</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BPlusTree</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> Node&lt;V&gt; root;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> M_LEAF;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> N_INNER;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BPlusTree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(n, n);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BPlusTree</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        M_LEAF = m;</div><div class="line">        N_INNER = n;</div><div class="line">        root = <span class="keyword">new</span> LeafNode();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">long</span> key, V value)</span> </span>&#123;</div><div class="line">        Split&lt;V&gt; result = root.insert(key, value);</div><div class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</div><div class="line">            InnerNode _root = <span class="keyword">new</span> InnerNode();</div><div class="line">            _root.num = <span class="number">1</span>;</div><div class="line">            _root.keys[<span class="number">0</span>] = result.key;</div><div class="line">            _root.children[<span class="number">0</span>] = result.left;</div><div class="line">            _root.children[<span class="number">1</span>] = result.right;</div><div class="line">            root = _root;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">find</span><span class="params">(<span class="keyword">long</span> key)</span> </span>&#123;</div><div class="line">        Node&lt;V&gt; node = root;</div><div class="line">        <span class="keyword">while</span> (node <span class="keyword">instanceof</span> BPlusTree.InnerNode) &#123;</div><div class="line">            InnerNode inner = (InnerNode) node;</div><div class="line">            <span class="keyword">int</span> idx = inner.getLoc(key);</div><div class="line">            node = inner.children[idx];</div><div class="line">        &#125;</div><div class="line">        LeafNode leaf = (LeafNode) node;</div><div class="line">        <span class="keyword">int</span> idx = leaf.getLoc(key);</div><div class="line">        <span class="keyword">if</span> (idx &lt; leaf.num &amp;&amp; leaf.keys[idx]==key) &#123;</div><div class="line">            <span class="keyword">return</span> leaf.values[idx];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">findMinGTE</span><span class="params">(<span class="keyword">long</span> key)</span> </span>&#123;</div><div class="line">        Node&lt;V&gt; node = root;</div><div class="line">        <span class="keyword">while</span> (node <span class="keyword">instanceof</span> BPlusTree.InnerNode) &#123;</div><div class="line">            InnerNode inner = (InnerNode) node;</div><div class="line">            <span class="keyword">int</span> idx = inner.getLoc(key);</div><div class="line">            node = inner.children[idx];</div><div class="line">        &#125;</div><div class="line">        LeafNode leaf = (LeafNode) node;</div><div class="line">        <span class="keyword">int</span> idx = leaf.getLoc(key);</div><div class="line">        <span class="keyword">if</span> (idx &lt; leaf.num &amp;&amp; leaf.keys[idx] == key) &#123;</div><div class="line">            <span class="keyword">return</span> leaf.values[idx];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (idx &lt; leaf.num) &#123;</div><div class="line">                <span class="keyword">return</span> find(leaf.keys[idx]);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> find(leaf.keys[idx]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">protected</span> <span class="keyword">int</span> num;</div><div class="line">        <span class="keyword">protected</span> <span class="keyword">long</span>[] keys;</div><div class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLoc</span><span class="params">(<span class="keyword">long</span> key)</span></span>;</div><div class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> Split&lt;T&gt; <span class="title">insert</span><span class="params">(<span class="keyword">long</span> key, T value)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LeafNode</span> <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        <span class="keyword">final</span> V[] values = (V[]) <span class="keyword">new</span> Object[M_LEAF];</div><div class="line">        &#123;</div><div class="line">            keys = <span class="keyword">new</span> <span class="keyword">long</span>[M_LEAF];</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLoc</span><span class="params">(<span class="keyword">long</span> key)</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (keys[i] - key &gt;= <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> num;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Split&lt;V&gt; <span class="title">insert</span><span class="params">(<span class="keyword">long</span> key, V value)</span> </span>&#123;</div><div class="line">            <span class="keyword">int</span> i = getLoc(key);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.num == M_LEAF) &#123;</div><div class="line">                <span class="keyword">int</span> mid = (M_LEAF + <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">                <span class="keyword">int</span> sNum = <span class="keyword">this</span>.num - mid;</div><div class="line">                LeafNode sibling = <span class="keyword">new</span> LeafNode();</div><div class="line">                sibling.num = sNum;</div><div class="line">                System.arraycopy(<span class="keyword">this</span>.keys, mid, sibling.keys, <span class="number">0</span>, sNum);</div><div class="line">                System.arraycopy(<span class="keyword">this</span>.values, mid, sibling.values, <span class="number">0</span>, sNum);</div><div class="line">                <span class="keyword">this</span>.num = mid;</div><div class="line">                <span class="keyword">if</span> (i &lt; mid) &#123;</div><div class="line">                    <span class="keyword">this</span>.insertNonfull(key, value, i);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    sibling.insertNonfull(key, value, i - mid);</div><div class="line">                &#125;</div><div class="line">                Split&lt;V&gt; result = <span class="keyword">new</span> Split&lt;V&gt;(sibling.keys[<span class="number">0</span>],<span class="keyword">this</span>, sibling);</div><div class="line">                <span class="keyword">return</span> result;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">this</span>.insertNonfull(key, value, i);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertNonfull</span><span class="params">(<span class="keyword">long</span> key, V value, <span class="keyword">int</span> idx)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (idx &lt; num &amp;&amp; keys[idx] == key) &#123;</div><div class="line">                values[idx] = value;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                System.arraycopy(keys, idx, keys, idx + <span class="number">1</span>, num - idx);</div><div class="line">                System.arraycopy(values, idx, values, idx + <span class="number">1</span>, num - idx);</div><div class="line">                keys[idx] = key;</div><div class="line">                values[idx] = value;</div><div class="line">                num++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerNode</span> <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        <span class="keyword">final</span> Node&lt;V&gt;[] children = <span class="keyword">new</span> Node[N_INNER + <span class="number">1</span>];</div><div class="line">        &#123;</div><div class="line">            keys = <span class="keyword">new</span> <span class="keyword">long</span>[N_INNER];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLoc</span><span class="params">(<span class="keyword">long</span> key)</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (keys[i] - key &gt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> num;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Split&lt;V&gt; <span class="title">insert</span><span class="params">(<span class="keyword">long</span> key, V value)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.num == N_INNER) &#123;</div><div class="line">                <span class="keyword">int</span> mid = (N_INNER + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">                <span class="keyword">int</span> sNum = <span class="keyword">this</span>.num - mid;</div><div class="line">                InnerNode sibling = <span class="keyword">new</span> InnerNode();</div><div class="line">                sibling.num = sNum;</div><div class="line">                System.arraycopy(<span class="keyword">this</span>.keys, mid, sibling.keys, <span class="number">0</span>, sNum);</div><div class="line">                System.arraycopy(<span class="keyword">this</span>.children, mid, sibling.children, <span class="number">0</span>, sNum + <span class="number">1</span>);</div><div class="line">                <span class="keyword">this</span>.num = mid - <span class="number">1</span>;</div><div class="line">                Split&lt;V&gt; result = <span class="keyword">new</span> Split&lt;V&gt;(<span class="keyword">this</span>.keys[mid - <span class="number">1</span>], <span class="keyword">this</span>, sibling);</div><div class="line">                <span class="keyword">if</span> (key - result.key &lt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">this</span>.insertNonfull(key, value);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    sibling.insertNonfull(key, value);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> result;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">this</span>.insertNonfull(key, value);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertNonfull</span><span class="params">(<span class="keyword">long</span> key, V value)</span> </span>&#123;</div><div class="line">            <span class="keyword">int</span> idx = getLoc(key);</div><div class="line">            Split&lt;V&gt; result = children[idx].insert(key, value);</div><div class="line">            <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (idx == num) &#123;</div><div class="line">                    keys[idx] = result.key;</div><div class="line">                    children[idx] = result.left;</div><div class="line">                    children[idx + <span class="number">1</span>] = result.right;</div><div class="line">                    num++;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    System.arraycopy(keys, idx, keys, idx + <span class="number">1</span>, num - idx);</div><div class="line">                    System.arraycopy(children, idx, children, idx + <span class="number">1</span>, num - idx + <span class="number">1</span>);</div><div class="line">                    children[idx] = result.left;</div><div class="line">                    children[idx + <span class="number">1</span>] = result.right;</div><div class="line">                    keys[idx] = result.key;</div><div class="line">                    num++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Split</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> key;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Node&lt;T&gt; left;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Node&lt;T&gt; right;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Split</span><span class="params">(<span class="keyword">long</span> k, Node&lt;T&gt; l, Node&lt;T&gt; r)</span> </span>&#123;</div><div class="line">            key = k;</div><div class="line">            left = l;</div><div class="line">            right = r;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IPMaxV2</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> BPlusTree&lt;Integer&gt; bTree;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> CityInfo[] cityInfoArray;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(String ipDbMaxPath, String ipCityPath)</span> </span>&#123;</div><div class="line">        Map&lt;Long, Integer&gt; cityInfoMap_r = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">110_000</span>);</div><div class="line">        cityInfoArray = <span class="keyword">new</span> CityInfo[<span class="number">110_000</span>];</div><div class="line">        String line = <span class="keyword">null</span>;</div><div class="line">        Splitter splitter = Splitter.on(<span class="string">","</span>);</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(ipCityPath))) &#123;</div><div class="line">            <span class="comment">/*String */</span>line = br.readLine();</div><div class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">                List&lt;String&gt; arr = splitter.splitToList(line);</div><div class="line">                Long id = Long.valueOf(arr.get(<span class="number">0</span>));</div><div class="line">                String continentCode = <span class="string">"*"</span>; <span class="comment">// 适配ipipnet库 大陆信息为空，配置的AP_新加坡 是机会转化为 *_新加坡</span></div><div class="line">                String countryCode = arr.get(<span class="number">2</span>);</div><div class="line">                String country = countryNmaeAdjust(arr.get(<span class="number">3</span>));</div><div class="line">                String subCode = arr.get(<span class="number">4</span>);</div><div class="line">                String subName = provinceNmaeAdjust(arr.get(<span class="number">3</span>), arr.get(<span class="number">5</span>));</div><div class="line">                String cityName= arr.get(<span class="number">6</span>);</div><div class="line">                cityInfoArray[i++] = <span class="keyword">new</span> CityInfo(id, continentCode, countryCode, country, subCode, subName, cityName, arr.get(<span class="number">7</span>));</div><div class="line">                cityInfoMap_r.put(id, i);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="comment">// log.error("err line: " + line);</span></div><div class="line">            <span class="comment">// log.error("error load maxmind city info", e);</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//TODO ip库的问题：1.地域信息都是空的情况（如：86.62.5.0/24,,,,0,1,,,,） 2.是否存在ip跳跃的情况</span></div><div class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">        BPlusTree&lt;Integer&gt; bTree_r = <span class="keyword">new</span> BPlusTree&lt;&gt;(<span class="number">64</span>, <span class="number">64</span>);</div><div class="line">        <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(ipDbMaxPath))) &#123;</div><div class="line">            line = br.readLine();</div><div class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">                String[] arr = line.split(<span class="string">","</span>);</div><div class="line">                <span class="keyword">long</span> key = Long.valueOf(arr[<span class="number">0</span>]);</div><div class="line">                Long cityId = Long.valueOf(arr[<span class="number">1</span>]);</div><div class="line">                <span class="comment">// check_insert(key, cityId, arr, bTree_r);</span></div><div class="line">                cityId = (cityId.longValue() != <span class="number">0</span>) ? cityId:Long.valueOf(arr[<span class="number">1</span>]);</div><div class="line">                Integer idx = cityInfoMap_r.get(cityId);</div><div class="line">                <span class="comment">// System.err.println(line + "--" + idx);</span></div><div class="line">                bTree_r.insert(key, idx);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="comment">// log.error("error load maxmind ip lib", e);</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> readEnd = System.currentTimeMillis();</div><div class="line">        <span class="comment">// log.info("index ip cost: &#123;&#125; ms.", readEnd - start);</span></div><div class="line">        bTree = bTree_r;</div><div class="line">        cityInfoMap_r = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">// cityInfoArray = cityInfoMap_r;</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> CityInfo <span class="title">find</span><span class="params">(String ip)</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> ip_long = convIp2Long2(ip);</div><div class="line">        BPlusTree&lt;Integer&gt; bTree_r = bTree;</div><div class="line">        Integer id = bTree_r.findMinGTE(ip_long);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == id) &#123;</div><div class="line">            <span class="keyword">return</span> UNKNOWAREA;</div><div class="line">        &#125;</div><div class="line">        CityInfo cityInfo = cityInfoArray[id];</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == cityInfo) &#123;</div><div class="line">            <span class="keyword">return</span> UNKNOWAREA;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cityInfo;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> CityInfo <span class="title">find</span><span class="params">(<span class="keyword">long</span> ip)</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> ip_long = ip;</div><div class="line">        BPlusTree&lt;Integer&gt; bTree_r = bTree;</div><div class="line">        Integer id = bTree_r.findMinGTE(ip_long);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == id) &#123;</div><div class="line">            <span class="keyword">return</span> UNKNOWAREA;</div><div class="line">        &#125;</div><div class="line">        CityInfo cityInfo = cityInfoArray[id];</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == cityInfo) &#123;</div><div class="line">            <span class="keyword">return</span> UNKNOWAREA;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cityInfo;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CityInfo UNKNOWAREA = <span class="keyword">new</span> CityInfo(<span class="number">0L</span>, <span class="string">"*"</span>, <span class="string">"*"</span>, <span class="string">"*"</span>, <span class="string">"*"</span>, <span class="string">"*"</span>, <span class="string">"*"</span>, <span class="string">"*"</span>);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">setOrDefault</span><span class="params">(String xx)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">null</span> == xx || xx.length() == <span class="number">0</span>) ? <span class="string">"*"</span> : xx;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">b2int</span><span class="params">(<span class="keyword">byte</span>[] origBytes)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> value = <span class="number">0</span>;</div><div class="line">        <span class="keyword">switch</span> (origBytes.length) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            value = (<span class="keyword">int</span>) ((origBytes[<span class="number">0</span>] &amp; <span class="number">0x0F</span>));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">            value = <span class="number">10</span> * (<span class="keyword">int</span>) (origBytes[<span class="number">0</span>] &amp; <span class="number">0x0F</span>) + (origBytes[<span class="number">1</span>] &amp; <span class="number">0x0F</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">            value = <span class="number">100</span> * (<span class="keyword">int</span>) (origBytes[<span class="number">0</span>] &amp; <span class="number">0x0F</span>) + <span class="number">10</span> * (origBytes[<span class="number">1</span>] &amp; <span class="number">0x0F</span>) + (origBytes[<span class="number">2</span>] &amp; <span class="number">0x0F</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// return value &gt; 255 ? -1 : value;</span></div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">convIp2Long2</span><span class="params">(String ip)</span> </span>&#123;</div><div class="line">        String[] ss = ip.split(<span class="string">"\\."</span>);</div><div class="line">        <span class="keyword">if</span> (ss.length &lt; <span class="number">4</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ip_int = (b2int(ss[<span class="number">0</span>].getBytes()) &lt;&lt; <span class="number">24</span>) | (b2int(ss[<span class="number">1</span>].getBytes()) &lt;&lt; <span class="number">16</span>) | (b2int(ss[<span class="number">2</span>].getBytes()) &lt;&lt; <span class="number">8</span>)</div><div class="line">                | b2int(ss[<span class="number">3</span>].getBytes());</div><div class="line">        <span class="keyword">long</span> ret_long = ip_int &amp; <span class="number">0x7fffffffL</span>;</div><div class="line">        <span class="keyword">if</span> (ip_int &lt; <span class="number">0</span>) &#123;</div><div class="line">            ret_long |= <span class="number">0x080000000L</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret_long;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Deprecated</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">convIp2Long</span><span class="params">(String ip)</span> </span>&#123;</div><div class="line">        String[] ss = ip.split(<span class="string">"\\."</span>);</div><div class="line">        <span class="keyword">int</span> ip_int = (Integer.parseInt(ss[<span class="number">0</span>]) &lt;&lt; <span class="number">24</span>) | (Integer.parseInt(ss[<span class="number">1</span>]) &lt;&lt; <span class="number">16</span>) | (Integer.parseInt(ss[<span class="number">2</span>]) &lt;&lt; <span class="number">8</span>)</div><div class="line">                | Integer.parseInt(ss[<span class="number">3</span>]);</div><div class="line">        <span class="keyword">long</span> ret_long = ip_int &amp; <span class="number">0x7fffffffL</span>;</div><div class="line">        <span class="keyword">if</span> (ip_int &lt; <span class="number">0</span>) &#123;</div><div class="line">            ret_long |= <span class="number">0x080000000L</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret_long;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addPrivateNetInfo</span><span class="params">(BPlusTree&lt;Long&gt; bTree, Map&lt;Long, CityInfo&gt; cityInfoMap)</span> </span>&#123;</div><div class="line">        <span class="comment">// ipv4 国际保留地址</span></div><div class="line">        String ipInfo = <span class="string">"16777215,1,1;184549375,1,1;1686110207,1,1;2147483647,1,1;2852061183,1,1;"</span></div><div class="line">                + <span class="string">"2887778303,1,1;3221225727,1,1;3221225479,1,1;3221225480,1,1;3221225481,1,1;"</span></div><div class="line">                + <span class="string">"3221225482,1,1;3221225642,1,1;3221225643,1,1;3221226239,1,1;3223307519,1,1;"</span></div><div class="line">                + <span class="string">"3224683007,1,1;3227018239,1,1;3232301055,1,1;3232706815,1,1;3323199487,1,1;"</span></div><div class="line">                + <span class="string">"3325256959,1,1;3405804031,1,1;4026531839,1,1;4294967295,1,1;4294967295,1,1"</span>;</div><div class="line">        <span class="keyword">for</span> (String ipip : ipInfo.split(<span class="string">";"</span>)) &#123;</div><div class="line">            String[] line = ipip.split(<span class="string">","</span>);</div><div class="line">            check_insert(Long.valueOf(line[<span class="number">0</span>]), Long.valueOf(line[<span class="number">1</span>]), line, bTree);</div><div class="line">        &#125;</div><div class="line">        cityInfoMap.put(<span class="number">1L</span>, <span class="keyword">new</span> CityInfo(<span class="number">1L</span>, <span class="string">"保留地址"</span>, <span class="string">"保留地址"</span>, <span class="string">"保留地址"</span>, <span class="string">"保留地址"</span>, <span class="string">"保留地址"</span>, <span class="string">"保留地址"</span>, <span class="string">"*"</span>));</div><div class="line">        cityInfoMap.put(<span class="number">0L</span>, <span class="keyword">new</span> CityInfo(<span class="number">0L</span>, <span class="string">"未定义"</span>, <span class="string">"未定义"</span>, <span class="string">"未定义"</span>, <span class="string">"未定义"</span>, <span class="string">"未定义"</span>, <span class="string">"未定义"</span>, <span class="string">"*"</span>));</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CityInfo</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</div><div class="line">    <span class="keyword">private</span> String continentCode;</div><div class="line">    <span class="keyword">private</span> String countryCode;</div><div class="line">    <span class="keyword">private</span> String countryName;</div><div class="line">    <span class="keyword">private</span> String subCode;</div><div class="line">    <span class="keyword">private</span> String subName;</div><div class="line">    <span class="keyword">private</span> String cityName;</div><div class="line">    <span class="keyword">private</span> String timeZone;</div><div class="line">    ...getter/setter</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>解释：</p>
<ol>
<li><strong>这里的find不是标准的BTree find 方法，因为存储的是IP段，所以BTree节点存的是IP界限，查询时对于查找不到返回null的[常见]会再次追溯父节点，返回大于该数值的最小(右侧最左)的节点，即 findGTE方法。</strong> </li>
<li>简单起见，代码中保证IP段连续/保留IP段这些没加进来，但是必须的，否则可能导致结果不准确。</li>
</ol>
<h4 id="下面是BenchMark数据"><a href="#下面是BenchMark数据" class="headerlink" title="下面是BenchMark数据"></a>下面是BenchMark数据</h4><p>使用 JMH 测试的性能，2-32线程:<br>target_ipparse表示原来的方法，target_localtor为七牛开源的解析方法，target_maxmindv2为笔者的B Tree方法。硬件为2017年 8G i5 new Mac，JDK信息如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># JMH version: 1.21</span></div><div class="line"><span class="comment"># VM version: JDK 1.8.0_151, Java HotSpot(TM) 64-Bit Server VM, 25.151-b12</span></div><div class="line"><span class="comment"># VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/bin/java</span></div><div class="line"><span class="comment"># VM options: -Dfile.encoding=UTF-8</span></div><div class="line"><span class="comment"># Warmup: 1 iterations, 10 s each</span></div><div class="line"><span class="comment"># Measurement: 3 iterations, 10 s each</span></div><div class="line"><span class="comment"># Timeout: 10 min per iteration</span></div><div class="line"><span class="comment"># Threads: 2 threads, will synchronize iterations</span></div><div class="line"><span class="comment"># Benchmark mode: Throughput, ops/time</span></div><div class="line">....</div><div class="line"><span class="comment"># 2 线程</span></div><div class="line">Benchmark                Mode  Cnt     Score      Error   Units</div><div class="line">JMHIP.target_ipparse    thrpt    3   113.956 ±  391.000  ops/ms</div><div class="line">JMHIP.target_localtor   thrpt    3  1846.572 ± 3566.676  ops/ms</div><div class="line">JMHIP.target_maxmindv2  thrpt    3  1995.854 ±  125.343  ops/ms</div><div class="line"></div><div class="line"><span class="comment"># 4 线程</span></div><div class="line">Benchmark                Mode  Cnt     Score      Error   Units</div><div class="line">JMHIP.target_ipparse    thrpt    3   137.426 ±   18.704  ops/ms</div><div class="line">JMHIP.target_localtor   thrpt    3  1847.472 ±  951.733  ops/ms</div><div class="line">JMHIP.target_maxmindv2  thrpt    3  1817.778 ± 3347.274  ops/ms</div><div class="line"></div><div class="line"><span class="comment"># 8 线程</span></div><div class="line">Benchmark                Mode  Cnt     Score     Error   Units</div><div class="line">JMHIP.target_ipparse    thrpt    3   140.642 ±  79.715  ops/ms</div><div class="line">JMHIP.target_localtor   thrpt    3  1888.104 ± 439.820  ops/ms</div><div class="line">JMHIP.target_maxmindv2  thrpt    3  2040.365 ± 336.506  ops/ms</div><div class="line"></div><div class="line"><span class="comment"># 16 线程</span></div><div class="line">Benchmark                Mode  Cnt     Score     Error   Units</div><div class="line">JMHIP.target_ipparse    thrpt    3   139.092 ±  33.246  ops/ms</div><div class="line">JMHIP.target_localtor   thrpt    3  1792.992 ± 396.497  ops/ms</div><div class="line">JMHIP.target_maxmindv2  thrpt    3  2077.337 ± 278.774  ops/ms</div><div class="line"></div><div class="line"><span class="comment"># 32 线程</span></div><div class="line">Benchmark                Mode  Cnt     Score      Error   Units</div><div class="line">JMHIP.target_ipparse    thrpt    3   110.591 ±  128.144  ops/ms</div><div class="line">JMHIP.target_localtor   thrpt    3  1538.003 ± 1925.825  ops/ms</div><div class="line">JMHIP.target_maxmindv2  thrpt    3  2079.801 ±  838.722  ops/ms</div></pre></td></tr></table></figure></p>
<p>JMH类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="meta">@State</span>(Scope.Benchmark)</div><div class="line"><span class="meta">@BenchmarkMode</span>(Mode.Throughput)</div><div class="line"><span class="meta">@OutputTimeUnit</span>(TimeUnit.MILLISECONDS)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMHIP</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> Locator locator;</div><div class="line">    <span class="keyword">static</span> IpParse ipParse;</div><div class="line">    <span class="keyword">static</span> IPMaxV2 ipmaxv2;</div><div class="line">    <span class="meta">@Setup</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">target_blank</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        locator = Locator.loadFromLocal(<span class="string">"/Users/thomas/git/17monipdb.dat"</span>);</div><div class="line">        System.out.println(locator.find(<span class="string">"220.255.1.166"</span>));</div><div class="line">       </div><div class="line">        ipmaxv2 = <span class="keyword">new</span> IPMaxV2();</div><div class="line">        ipmaxv2.init(<span class="string">"/Users/thomas/git/maxmind_ip_data"</span>, <span class="string">"/Users/thomas/git/maxmind_city_data"</span>);</div><div class="line">        System.out.println(ipmaxv2.find(<span class="string">"220.255.1.166"</span>));</div><div class="line"></div><div class="line">        ipParse.load(<span class="string">"/Users/thomas/git/17monipdb.dat"</span>);</div><div class="line">        System.out.println(ipParse.find(<span class="string">"220.255.1.166"</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// @CompilerControl(CompilerControl.Mode.INLINE)</span></div><div class="line">    <span class="meta">@Benchmark</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">target_localtor</span><span class="params">()</span> </span>&#123;</div><div class="line">        locator.find(<span class="string">"220.255.1.166"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Benchmark</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">target_maxmindv2</span><span class="params">()</span> </span>&#123;</div><div class="line">        ipmaxv2.find(<span class="string">"220.255.1.166"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Benchmark</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">target_maxmindv2long</span><span class="params">()</span> </span>&#123;</div><div class="line">        ipmaxv2.find(<span class="number">16819199l</span>);<span class="comment">// 16819199 3707699622</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Benchmark</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">target_ipparse</span><span class="params">()</span> </span>&#123;</div><div class="line">        ipParse.find(<span class="string">"220.255.1.166"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</div><div class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder().include(JMHIP.class.getSimpleName()).warmupIterations(<span class="number">1</span>)</div><div class="line">                .measurementIterations(<span class="number">3</span>).threads(<span class="number">16</span>).forks(<span class="number">1</span>).build();</div><div class="line">        <span class="keyword">new</span> Runner(opt).run();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>针对这个结果几个有趣总结：</p>
<ol>
<li>几轮结果，ipparse/localtor 都是8线程(4核)时性能最好，而 maxmindv2比较稳定。</li>
<li>老的ipparse性能其实只有15万/s不到的吞吐量，localtor比maxmindv2稍微差点，但也可达到200万/s的吞吐量</li>
</ol>
<p>对于1，说明ipparse/localtor在更大如200线程并发时，性能其实会更差，甚至达不到10万/s，虽然对应用可能足够，但是和声称的差距还是蛮大的。<br>对于1，localtor似乎是无锁的，竟然也会因线程增长而减少，有点意外。另外如果仔细看 Localtor代码，可以发现其文件流/URL流都没有规范的关闭，AutoReload的那个类不够并发安全。<br>对于2，奇怪的是maxmindv2怎么始终不变？是不是还漏了哪里的明显的性能优化点？</p>
<h4 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h4><p>实际上：</p>
<ol>
<li>是的，find(String ip) 这个方法里，convIp2Long2(ip)也耗费许多性能，如果用 find(long ip)替代，还可以有 5倍性能的提升！(一个快速把字符串ip转化为long数字的方法就是使用查表方法，毕竟只额外需一个长度为256的数组)。<br>见 下文benchmark数据。</li>
<li>上述ip 220.255.1.166或者说3707699622，其实是一个B+ Tree首次未命中的情况，如果首次命中性能会怎样？可以再有24倍的性能提升！做到这点其实不难，可以在创建B+ Tree索引时，叶节点加一个指针指向他的下一个兄弟叶节点。<br>这个是jmh数据，这也是为什么上文采用 220.255.1.166这个IP，因为它可以代表大多数差性能下的查询。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 16 线程   string ip -&gt; long ip : 3707699622</span></div><div class="line">Benchmark                    Mode  Cnt     Score      Error   Units</div><div class="line">JMHIP.target_maxmindv2      thrpt    3  2110.476 ±  647.039  ops/ms</div><div class="line">JMHIP.target_maxmindv2long  thrpt    3  9010.649 ± 1973.710  ops/ms</div><div class="line"></div><div class="line"><span class="comment"># 16 线程   string ip -&gt; long ip + 命中 : 16819199</span></div><div class="line">Benchmark                    Mode  Cnt      Score       Error   Units</div><div class="line">JMHIP.target_maxmindv2      thrpt    3   2068.251 ±   178.626  ops/ms</div><div class="line">JMHIP.target_maxmindv2long  thrpt    3  46669.170 ± 28929.424  ops/ms</div></pre></td></tr></table></figure>
</li>
</ol>
<p>总结下来，使用B Tree和优化convIp2Long2可以有70倍性能提升的，这还是在ipparse 表现最好情况下，如果再优化BTree首次命中情况，就会有约300倍性能提升了。</p>
<h4 id="SQL-count-id"><a href="#SQL-count-id" class="headerlink" title="SQL count(id)"></a>SQL count(id)</h4><p>几个月前，朋友问的一个问题，是我几年前写的系统，大概是定时刷Mysql数据库的任务，3分钟一次，数据量最近破千万了，加了功能，发现任务耗时超过了3分钟，咨询我优化下。<br>N年不做数据库相关的我，不再熟练sql优化了，看到代码里sql语句其实还是有种放弃的感觉，但好在看到有几条类似：<br>    <strong>select count(*) from xxx</strong><br>的统计sql,id就是各个表的主键索引，试着把它换为 count一个二级索引，即一个非空且index的列：<br>    <strong>select count(*) from xxx where uid &gt; 0</strong><br>耗时还是能从4秒多提升到0.37秒。勉强挤进2分半了。<br>因为第一种要全表扫描，但是mysql innodb 的clustered index其实把主键和行数据存放在一起的[这也是为什么列存储兴起]，但二级索引(secondary index)不会包含，仅记录主键指向行记录。<br><strong>对于用count(*)/count(id)统计表记录总数时，利用二级索引进行count会快些。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;i&gt;&lt;strong&gt;intro1&lt;/strong&gt;：对一段解析17monipdb/ipip.net ip库 函数的 15倍-70倍-300倍 性能优化&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro2&lt;/strong&gt;: 一个sql count 语句的优化&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;声明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本文代码均为本人所写或可在网上搜索的到的开源代码，遵循开源协议。&lt;/li&gt;
&lt;li&gt;文中引用代码不涉及所就职公司代码，即便有也是本人从开源代码获取，或做了混淆处理。
    
    </summary>
    
    
      <category term="B Tree" scheme="http://thomaslau.github.io/tags/B-Tree/"/>
    
      <category term="17monipdb" scheme="http://thomaslau.github.io/tags/17monipdb/"/>
    
      <category term="guava ratelimiter" scheme="http://thomaslau.github.io/tags/guava-ratelimiter/"/>
    
      <category term="sql.count" scheme="http://thomaslau.github.io/tags/sql-count/"/>
    
  </entry>
  
  <entry>
    <title>海量数据计数的一个方法分析</title>
    <link href="http://thomaslau.github.io/2019/11/20/2019-11-20-on_redis_hyperloglog/"/>
    <id>http://thomaslau.github.io/2019/11/20/2019-11-20-on_redis_hyperloglog/</id>
    <published>2019-11-20T15:59:10.000Z</published>
    <updated>2019-11-21T01:09:12.681Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><i><strong>intro1</strong>：如何存储以及计算一份资源的累积UV/PV？</i><br><i><strong>intro2</strong>: 使用 hyperloglog 究竟有多节省内存呢？</i></p>
</blockquote>
<h4 id="现象和问题："><a href="#现象和问题：" class="headerlink" title="现象和问题："></a>现象和问题：</h4><p>接一需求，一顿抽丝剥茧去干扰取核心后才弄清楚原始的需求：即时的计算资源累积UV，即对uid去重后进行计数，超阈值则上报。</p>
<h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>自然想到了Redis的 Hyperloglog[以下简称HLL] 数据结构计数。<br><blockquote><p>Redis的HyperLogLog 每Key只需要12kB就可以统计大到 2^64个的用户，而保持0.81%的误差率。</p>
</blockquote><br><a id="more"></a><br>文末备注几个关于 HLL 的链接，这里简单白话一下HLL，方便阅读本文:<br>HLL是一种类似bitmap的计数原理，但由于采用了多次高离散的hash函数，使得它比 bitmap 消耗更少的内存，据说Google也在用它计数。<br>借助于精妙的假设采用时间换空间的思想，关键是这个时间还不大。</p>
<p>对于去重计数，redis提供的就有Set/Bitmap数据结构，这也是最开始考虑几次后对使用HLL有些疑虑原因，我们的资源总量预估十亿，如果仅按三个月过期来算也有数千万：<br><blockquote><ol>
<li>如果HLL每个Key计数也是耗费KB甚至最大12KB，那么redis内存可能就要上百GB到10个T这么多</li>
<li>长尾效应：显然这些资源，可能至少百分80不会过千或过万，这个时候是不是用 保存uid的set结构比HLL更节省内存呢</li>
</ol>
</blockquote><br>其实还想过性能足够，支持文件存储HBase、Cassandra、Pegasus等，但都未有提供HLL的数据结构或者操作接口，那么他们是否支持近似，比如自己写一个BloomFilter+计数或者HLL的value值操作？<br>估算一下Guava BloomFilter 实现对于500万千分之一的误差耗费空间是 80K bit，不比HLL小，而且众所周知，即便实现，也要解决一个大多数分布式存储更新同一个Key面临的问题： 即非同一线程/进程并发处理同一个Key时的原子性问题。而 HBase、Pegasus都有基于CAS原理的 check_and_put/check_and_mutate 类似操作，Cassandra也不同程度支持原子性更新，但实现起来对于耗时/快照空间可能要慎重，而且更新失败之后再获取再重试，即便几率很小也会导致实现的代码本身难看，而 Redis HLL是add操作即单进程封装了所有逻辑，可谓天生原子性，且数据只需存储一份，更且支持 merge另一个 HLL，而Guava的BloomFilter要直到 15.0 版本才支持 merge 另一个BloomFilter，而且另一个问题是 “As of Guava 23.0, this class is thread-safe and lock-free.”，23.0版本后 Guava 的BF才是线程安全的( <strong>意味着，以前很多介绍Guava Bloomfilter的文章，如果没提到最低支持版本就基本上不严谨/不实用的</strong>)。<br>也不会选择Spark，因为这里的问题本身在于持久化存储，而不是计算资源本身。<br>当然了，单Key的热点问题上述几个选型都是存在的。</p>
<p>所以，用 Redis+HLL，但是我确实想知道是否存在上文的长尾效应问题，也就是，一份资源累积独立访问用户数达到多少时用HLL比Set “划算”？</p>
<h4 id="动手试一下"><a href="#动手试一下" class="headerlink" title="动手试一下"></a>动手试一下</h4><p>redis提供了 info memory 和 debug object key 可供查看(精确或近似的对象级别的)内存消耗。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- pfadd_sadd.lua</span></div><div class="line"><span class="keyword">local</span> <span class="built_in">time</span> = redis.call(<span class="string">'time'</span>);</div><div class="line"><span class="keyword">local</span> now_micros = <span class="built_in">tonumber</span>(<span class="built_in">time</span>[<span class="number">1</span>])*<span class="number">1000000</span> + <span class="built_in">tonumber</span>(<span class="built_in">time</span>[<span class="number">2</span>]);</div><div class="line"><span class="built_in">math</span>.<span class="built_in">randomseed</span>(now_micros);</div><div class="line"><span class="keyword">local</span> num = <span class="built_in">math</span>.<span class="built_in">random</span>(<span class="number">100000000</span>, <span class="number">10000000000</span>);</div><div class="line"><span class="keyword">for</span> i=<span class="number">10000</span>,<span class="number">1</span>,<span class="number">-1</span> <span class="keyword">do</span></div><div class="line">    <span class="comment">-- redis.call('sadd',"myset", math.random(1000000000, 10000000000));</span></div><div class="line">    <span class="comment">-- redis.call('PFADD',"mypfa", math.random(1000000000, 10000000000));</span></div><div class="line">    redis.call(KEYS[<span class="number">1</span>],ARGV[<span class="number">1</span>], <span class="built_in">math</span>.<span class="built_in">random</span>(<span class="number">1000000000</span>, <span class="number">10000000000</span>));</div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="keyword">return</span> <span class="number">1</span></div></pre></td></tr></table></figure>
<p>这个lua脚本就是可以实现 n次随机uid去 sadd myset xxx 和 pfadd myHLL xxx 的操作，简单来说就是通过 lua 随机函数生成10000个随机uid，并sadd或者pfadd到redis里。<br>需要解释下为什么lua随机数这里代码有点”不走寻常路”</p>
<ol>
<li>如果直接用math.random() 初始化，可能会导致每次生成的随机uid 序列是一样的，即多次跑脚本后set数量不增。</li>
<li>为什么不用 math.randomseed(os.time()) 生成随机数更好看？试过，不过redis lua 编译器禁止调用系统相关的os函数，是的，安全考虑。</li>
</ol>
<p>运行：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➜  ztemp redis-cli --<span class="built_in">eval</span> pfadd_sadd.lua pfadd , <span class="string">"myHLL"</span></div><div class="line">(<span class="built_in">integer</span>) 1</div><div class="line">➜  ztemp redis-cli --<span class="built_in">eval</span> pfadd_sadd.lua sadd , <span class="string">"myset2"</span></div><div class="line">(<span class="built_in">integer</span>) 1</div><div class="line">➜  ztemp</div></pre></td></tr></table></figure></p>
<p>内存查看:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; info memory</div><div class="line"><span class="comment"># Memory</span></div><div class="line">used_memory:7594672</div><div class="line">used_memory_human:7.24M</div><div class="line">used_memory_rss:6213632</div><div class="line">used_memory_rss_human:5.93M</div><div class="line">...</div><div class="line">127.0.0.1:6379&gt; debug object myHLL</div><div class="line">Value at:0x7fb99e614160 refcount:1 encoding:raw serializedlength:10578 lru:14012310 lru_seconds_idle:15</div><div class="line">127.0.0.1:6379&gt; info memory</div><div class="line"><span class="comment"># Memory</span></div><div class="line">used_memory:7608176</div><div class="line">used_memory_human:7.26M</div><div class="line">used_memory_rss:6250496</div><div class="line">used_memory_rss_human:5.96M</div><div class="line">...</div><div class="line">127.0.0.1:6379&gt; debug object myset2</div><div class="line">Value at:0x7fb9a08e3870 refcount:1 encoding:hashtable serializedlength:499960 lru:14012406 lru_seconds_idle:12</div><div class="line">127.0.0.1:6379&gt; info memory</div><div class="line"><span class="comment"># Memory</span></div><div class="line">used_memory:13981680</div><div class="line">used_memory_human:13.33M</div><div class="line">used_memory_rss:8421376</div><div class="line">used_memory_rss_human:8.03M</div><div class="line">...</div><div class="line">127.0.0.1:6379&gt; pfcount myHLL</div><div class="line">(<span class="built_in">integer</span>) 99287</div><div class="line">127.0.0.1:6379&gt; scard myset2</div><div class="line">(<span class="built_in">integer</span>) 99991</div></pre></td></tr></table></figure></p>
<p>上面是测试 十万次随机(注意不是10万条)uid数据量差，还是蛮大的，分别是在 10KB和 6387KB。<br>ps. 这里也可以看到 lua 伪随机数效果还是不错的。<br>对于一千条测试下来 Set耗费是HLL的五倍。<br>还是蛮意外的。实际上 redis 作者 Salvatore Sanfilippo(Antirez)已经在代码注释里写了些参考数据，值得一看：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> ...</div><div class="line"> * The following table shows average cardinality vs bytes used, 100</div><div class="line"> * samples per cardinality (when the set was not representable because</div><div class="line"> * of registers with too big value, the dense representation size was used</div><div class="line"> * as a sample).</div><div class="line"> *</div><div class="line"> * 100 267</div><div class="line"> * 200 485</div><div class="line"> * 300 678</div><div class="line"> * 400 859</div><div class="line"> * 500 1033</div><div class="line"> * 600 1205</div><div class="line"> * 700 1375</div><div class="line"> * 800 1544</div><div class="line"> * 900 1713</div><div class="line"> * 1000 1882</div><div class="line"> * 2000 3480</div><div class="line"> * 3000 4879</div><div class="line"> * 4000 6089</div><div class="line"> * 5000 7138</div><div class="line"> * 6000 8042</div><div class="line"> * 7000 8823</div><div class="line"> * 8000 9500</div><div class="line"> * 9000 10088</div><div class="line"> * 10000 10591</div><div class="line"> *</div><div class="line"> * The dense representation uses 12288 bytes, so there is a big win up to</div><div class="line"> * a cardinality of ~2000-3000. For bigger cardinalities the constant times</div><div class="line"> * involved in updating the sparse representation is not justified by the</div><div class="line"> * memory savings. The exact maximum length of the sparse representation</div><div class="line"> * when this implementation switches to the dense representation is</div><div class="line"> * configured via the define server.hll_sparse_max_bytes.</div><div class="line"> */</div></pre></td></tr></table></figure></p>
<p>也就是说其实用户UV达到300就已经比set划算了。</p>
<h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><ol>
<li><a href="http://algo.inria.fr/flajolet/Publications/FlFuGaMe07.pdf" target="_blank" rel="external">Hyperloglog: The analysis of a near-optimal cardinality estimation algorithm</a></li>
<li><a href="http://www.rainybowe.com/blog/2017/07/13/%E7%A5%9E%E5%A5%87%E7%9A%84HyperLogLog%E7%AE%97%E6%B3%95/index.html" target="_blank" rel="external">神奇的HyperLogLog算法</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/58519480" target="_blank" rel="external">走近源码：神奇的HyperLogLog</a></li>
<li><a href="https://docs.redislabs.com/latest/ri/memory-optimizations/" target="_blank" rel="external">Memory Optimization</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;i&gt;&lt;strong&gt;intro1&lt;/strong&gt;：如何存储以及计算一份资源的累积UV/PV？&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro2&lt;/strong&gt;: 使用 hyperloglog 究竟有多节省内存呢？&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;现象和问题：&quot;&gt;&lt;a href=&quot;#现象和问题：&quot; class=&quot;headerlink&quot; title=&quot;现象和问题：&quot;&gt;&lt;/a&gt;现象和问题：&lt;/h4&gt;&lt;p&gt;接一需求，一顿抽丝剥茧去干扰取核心后才弄清楚原始的需求：即时的计算资源累积UV，即对uid去重后进行计数，超阈值则上报。&lt;/p&gt;
&lt;h4 id=&quot;方案&quot;&gt;&lt;a href=&quot;#方案&quot; class=&quot;headerlink&quot; title=&quot;方案&quot;&gt;&lt;/a&gt;方案&lt;/h4&gt;&lt;p&gt;自然想到了Redis的 Hyperloglog[以下简称HLL] 数据结构计数。&lt;br&gt;&lt;blockquote&gt;&lt;p&gt;Redis的HyperLogLog 每Key只需要12kB就可以统计大到 2^64个的用户，而保持0.81%的误差率。&lt;/p&gt;
&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://thomaslau.github.io/tags/Redis/"/>
    
      <category term="Hyperloglog" scheme="http://thomaslau.github.io/tags/Hyperloglog/"/>
    
  </entry>
  
  <entry>
    <title>Maven Profile的两个技巧和一个注意事项</title>
    <link href="http://thomaslau.github.io/2019/11/13/2019-11-13-on_maven_profiles/"/>
    <id>http://thomaslau.github.io/2019/11/13/2019-11-13-on_maven_profiles/</id>
    <published>2019-11-13T15:59:10.000Z</published>
    <updated>2019-11-15T00:55:59.330Z</updated>
    
    <content type="html"><![CDATA[<p><strong>现象和问题：</strong><br>写了个 xx-service 的基于maven项目，借助spring配置文件可执行，现在有需求是希望将该项目以SDk方式打包到maven仓库以便使用其中某些service类(暂不论合理与否)，如何通过maven profile实现在编辑器里不同开发人员默认用不同的 active profile？<br>实现不同的 active profile是希望双方在开发的时候，一个可以直接package出来 不含配置文件的纯 SDK 包，而我这边使用eclipse时可以默认生成需要的配置文件(local profile)到classpath下，免于命令行切换,提高开发/测试效率。<br><a id="more"></a><br>源项目通过Main函数启动，所以一种方案是定义spring.active.profile的方式，在eclipse配置参数方式启动，但是我不希望引入这种不纯粹的方式，过多依赖在一些零散的地方设置，就像我觉得使用lomb组件的不配谈代码优雅。<br>大部分了解maven的会想到active profile实现，但我也不想通过maven安装包下的 settings.xml中使用activeProfiles指定的方式，更不想通过两人部分代码不同的方式实现，即希望两人看到的代码一样。<br><strong>最好能都在项目代码里如pom.xml/xx.properties（配置即是代码!）里设置搞定。</strong><br><strong>那么有什么好办法呢？</strong><br>因为classpath生成是在编译之后，即maven编译之后的，所以不要妄想通过eclipse的配置 jvm run 参数，必定是在maven编译前或时(eclipse通过m2e和maven交互即时编译)，而maven pom.xml没有支持 if-else这类表达式语言的，实际上maevn基于配置的理念并不能支持其如DSL一般灵活，gradle可以。m2eclipse只是扩展了maven集成到eclipse的能力，并未扩展功能。<br>如果pom指定了A profile为active的，没有理由在其他人机器上A profile不是active的，除非maven支持基于机器等设置profile。好在maven 对profile本身支持力度是勉强可以达到上述功能。</p>
<h4 id="让我们先看看官方支持激活profile的几种方式："><a href="#让我们先看看官方支持激活profile的几种方式：" class="headerlink" title="让我们先看看官方支持激活profile的几种方式："></a>让我们先看看官方支持激活profile的几种方式：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--配置默认激活--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--通过jdk版本--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jdk</span>&gt;</span>[1.5,)<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--根据当前操作系统--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">os</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Windows XP<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">family</span>&gt;</span>Windows<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">arch</span>&gt;</span>x86<span class="tag">&lt;/<span class="name">arch</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2600<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">os</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--通过系统环境变量--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>test<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--通过文件的存在或缺失--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">missing</span>&gt;</span>target/generated-sources/axistools/wsdl2java/wdl<span class="tag">&lt;/<span class="name">missing</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exists</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">file</span>&gt;</span></div></pre></td></tr></table></figure>
<p>所以解决办法就是环境变量或者文件是否存在的方式。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>local<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">property</span>&gt;</span> </div><div class="line">           <span class="tag">&lt;<span class="name">name</span>&gt;</span>user.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">value</span>&gt;</span>thomas<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">log.path</span>&gt;</span>./logs<span class="tag">&lt;/<span class="name">log.path</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/profiles/common<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>sdk<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>该方式虽然也依赖一些配置，但好处是一目了然，看到代码即可明白。<br>通过上述配置，在我的eclipse上是classpath下包含配置的local模式可运行项目，而在对方机器就是sdk可打包项目，非常轻便了。<br>对方可通过 mvn deploy 正常的发布包，但是，当我使用 “mvn package deploy -Psdk” 时，却发现打出来的包中包含了配置文件！</p>
<h4 id="为什么，指定了-sdk-的profile却发现配置文件被包含进来"><a href="#为什么，指定了-sdk-的profile却发现配置文件被包含进来" class="headerlink" title="为什么，指定了 sdk 的profile却发现配置文件被包含进来"></a>为什么，指定了 sdk 的profile却发现配置文件被包含进来</h4><p>怎么定位问题呢？使用 help:active-profiles 命令试试：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">-&gt; mvn -P sdk  <span class="built_in">help</span>:active-profiles</div><div class="line">...</div><div class="line">Active Profiles <span class="keyword">for</span> Project <span class="string">'org.thomas:justitia-service:jar:0.2.8-SNAPSHOT'</span>:</div><div class="line"></div><div class="line">The following profiles are active:</div><div class="line"></div><div class="line"> - sonar (<span class="built_in">source</span>: external)</div><div class="line"> - gdev (<span class="built_in">source</span>: external)</div><div class="line"> - <span class="built_in">local</span> (<span class="built_in">source</span>: org.thomas:justitia-service:0.2.8-SNAPSHOT)</div><div class="line"> - sdk (<span class="built_in">source</span>: org.thomas:justitia-service:0.2.8-SNAPSHOT)</div><div class="line"> - dev (<span class="built_in">source</span>: org.thomas:justitia-parent:0.2.8-SNAPSHOT)</div><div class="line"> ...</div></pre></td></tr></table></figure></p>
<p>即，”mvn -P sdk”并不表示 仅使用 sdk 或parent/setting.xml里指定的active的profile打包，还包括任何能够匹配的profile！<br>即上面输出里看到的，默认生效的profile有 settings.xml定义的 sonar/gdev，还有本pom.xml里的 local/sdk 的profile，以及父类的默认 dev ，<em>这是一个注意事项</em></p>
<h4 id="怎么解决或者原因在哪呢？"><a href="#怎么解决或者原因在哪呢？" class="headerlink" title="怎么解决或者原因在哪呢？"></a>怎么解决或者原因在哪呢？</h4><p>其实 -P 参数支持简单的包含/排除运算，即 <strong>mvn package deploy -Plocal</strong> 就表示排除 local 这个active profile， !local 也表示排除， +local表示添加 local，<em>这是一个技巧</em>，代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; activeProfiles = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">List&lt;String&gt; inactiveProfiles = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line"><span class="keyword">if</span> ( commandLine.hasOption( CLIManager.ACTIVATE_PROFILES ) )</div><div class="line">&#123;</div><div class="line">    String[] profileOptionValues = commandLine.getOptionValues( CLIManager.ACTIVATE_PROFILES );</div><div class="line">    <span class="keyword">if</span> ( profileOptionValues != <span class="keyword">null</span> )</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> ( String profileOptionValue : profileOptionValues )</div><div class="line">        &#123;</div><div class="line">            StringTokenizer profileTokens = <span class="keyword">new</span> StringTokenizer( profileOptionValue, <span class="string">","</span> );</div><div class="line"></div><div class="line">            <span class="keyword">while</span> ( profileTokens.hasMoreTokens() )</div><div class="line">            &#123;</div><div class="line">                String profileAction = profileTokens.nextToken().trim();</div><div class="line"></div><div class="line">                <span class="keyword">if</span> ( profileAction.startsWith( <span class="string">"-"</span> ) || profileAction.startsWith( <span class="string">"!"</span> ) )</div><div class="line">                &#123;</div><div class="line">                    inactiveProfiles.add( profileAction.substring( <span class="number">1</span> ) );</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ( profileAction.startsWith( <span class="string">"+"</span> ) )</div><div class="line">                &#123;</div><div class="line">                    activeProfiles.add( profileAction.substring( <span class="number">1</span> ) );</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    activeProfiles.add( profileAction );</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>这是第二个技巧</em></p>
<h4 id="但为什么-sonar-gdev-local-sdk-dev-这些profile都生效了？"><a href="#但为什么-sonar-gdev-local-sdk-dev-这些profile都生效了？" class="headerlink" title="但为什么 sonar/gdev/local/sdk/dev 这些profile都生效了？"></a>但为什么 sonar/gdev/local/sdk/dev 这些profile都生效了？</h4><p>在<br>org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor.populateFromSettings(MavenExecutionRequest, Settings)<br>这个方法有涉及，不过这里我们倒序追溯一下：</p>
<p>mvn 命令的入口都在 org.apache.maven.cli.MavenCli 类里面，MavenCli 封装配置build好一个MavenExecutionRequest 之后，最终调用DefaultMaven.doExecute(MavenExecutionRequest request)实现，也是所有maven项目的MavenExecutionRequest，Project/Module/Artifact等都是在此实现的，该方法会调用这个方法进行 Project 的初始化：<br>org.apache.maven.project.DefaultProjectBuilder.initProject(MavenProject, ModelBuildingResult, Map<file, boolean="">)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initProject</span><span class="params">( MavenProject project, ModelBuildingResult result, Map&lt;File, Boolean&gt; profilesXmls )</span></span></div><div class="line">&#123;</div><div class="line">    Model model = result.getEffectiveModel();</div><div class="line">    project.setModel( model );</div><div class="line">    project.setOriginalModel( result.getRawModel() );</div><div class="line"></div><div class="line">    project.setFile( model.getPomFile() );</div><div class="line"></div><div class="line">    File parentPomFile = result.getRawModel( result.getModelIds().get( <span class="number">1</span> ) ).getPomFile();</div><div class="line">    project.setParentFile( parentPomFile );</div><div class="line"></div><div class="line">    Artifact projectArtifact =</div><div class="line">        repositorySystem.createArtifact( project.getGroupId(), project.getArtifactId(), project.getVersion(), <span class="keyword">null</span>,</div><div class="line">                                         project.getPackaging() );</div><div class="line">    project.setArtifact( projectArtifact );</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ( project.getFile() != <span class="keyword">null</span> )</div><div class="line">    &#123;</div><div class="line">        Build build = project.getBuild();</div><div class="line">        project.addScriptSourceRoot( build.getScriptSourceDirectory() );</div><div class="line">        project.addCompileSourceRoot( build.getSourceDirectory() );</div><div class="line">        project.addTestCompileSourceRoot( build.getTestSourceDirectory() );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    List&lt;Profile&gt; activeProfiles = <span class="keyword">new</span> ArrayList&lt;Profile&gt;();</div><div class="line">    activeProfiles.addAll( result.getActivePomProfiles( result.getModelIds().get( <span class="number">0</span> ) ) );</div><div class="line">    activeProfiles.addAll( result.getActiveExternalProfiles() );</div><div class="line">    project.setActiveProfiles( activeProfiles );</div><div class="line"></div><div class="line">    project.setInjectedProfileIds( <span class="string">"external"</span>, getProfileIds( result.getActiveExternalProfiles() ) );</div><div class="line">    <span class="keyword">for</span> ( String modelId : result.getModelIds() )</div><div class="line">    &#123;</div><div class="line">        project.setInjectedProfileIds( modelId, getProfileIds( result.getActivePomProfiles( modelId ) ) );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    String modelId = findProfilesXml( result, profilesXmls );</div><div class="line">    <span class="keyword">if</span> ( modelId != <span class="keyword">null</span> )</div><div class="line">    &#123;</div><div class="line">        ModelProblem problem =</div><div class="line">            <span class="keyword">new</span> DefaultModelProblem( <span class="string">"Detected profiles.xml alongside "</span> + modelId</div><div class="line">                + <span class="string">", this file is no longer supported and was ignored"</span> + <span class="string">", please use the settings.xml instead"</span>,</div><div class="line">                                     ModelProblem.Severity.WARNING, model, -<span class="number">1</span>, -<span class="number">1</span>, <span class="keyword">null</span> );</div><div class="line">        result.getProblems().add( problem );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></file,></p>
<p>这几个方法就是分别从 pom/父项目/maven settings中获取active profile的，而profile 判定isActive是支持系统变量方式的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">activeProfiles.addAll( result.getActivePomProfiles( result.getModelIds().get( <span class="number">0</span> ) ) );</div><div class="line">activeProfiles.addAll( result.getActiveExternalProfiles() );</div><div class="line">project.setActiveProfiles( activeProfiles );</div><div class="line">project.setInjectedProfileIds( <span class="string">"external"</span>, getProfileIds( result.getActiveExternalProfiles() ) );</div></pre></td></tr></table></figure></p>
<p>三类profile都会作为maven project的Active Profiles，这也是 help:active-profiles 实现原理。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getActiveProfileStatement</span><span class="params">( MavenProject project, StringBuilder message )</span></span></div><div class="line">&#123;</div><div class="line">    Map&lt;String, List&lt;String&gt;&gt; activeProfileIds = project.getInjectedProfileIds();</div><div class="line"></div><div class="line">    message.append( LS );</div><div class="line">    message.append( <span class="string">"Active Profiles for Project \'"</span> ).append( project.getId() ).append( <span class="string">"\':"</span> );</div><div class="line">    message.append( LS ).append( LS );</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ( activeProfileIds.isEmpty() )</div><div class="line">    &#123;</div><div class="line">        message.append( <span class="string">"There are no active profiles."</span> );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        message.append( <span class="string">"The following profiles are active:"</span> ).append( LS );</div><div class="line"></div><div class="line">        <span class="keyword">for</span> ( Map.Entry&lt;String, List&lt;String&gt;&gt; entry : activeProfileIds.entrySet() )</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span> ( String profileId : entry.getValue() )</div><div class="line">            &#123;</div><div class="line">                message.append( LS ).append( <span class="string">" - "</span> ).append( profileId );</div><div class="line">                message.append( <span class="string">" (source: "</span> ).append( entry.getKey() ).append( <span class="string">")"</span> );</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    message.append( LS );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>说两个不相关的问题：<br>1.<br>Mac 的sed命令不支持一些linux sed写法 众所周知，有时甚至导致一些莫名其妙运行结果，故建议避免使用，改为linux sed 即安装gsed：<br><strong>brew install gnu-sed</strong><br>不过不建议把gsed替换或直接别名为sed, 有些外部进程会调用sed。<br>2.<br>最近在写一个Chrome extension，发现下面写法返回空，要是把 sendResponse 放到chrome.storage.local.get的回调函数里就会报一个 类似：<br>“unchecked runtime lasterror the message port closed before a response”的错误，原因就是因为异步且没有作为回调函数的方式，但即便用Promise也是该情况，<br>解决办法是给函数加一个简单的 return true；即把下面else里已有的注释掉，现有注释部分打开，就解决该问题了。<a href="https://github.com/mozilla/webextension-polyfill/issues/130" target="_blank" rel="external">https://github.com/mozilla/webextension-polyfill/issues/130</a><br>虽然写过一些js代码，但觉得js的这个功能很神奇。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">chrome.runtime.onMessage.addListener(main.onMessageListener);</div><div class="line">...</div><div class="line">onMessageListener: <span class="function"><span class="keyword">function</span>(<span class="params">message, sender, sendResponse</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(message == <span class="string">'tabs'</span>)&#123;</div><div class="line">        sendResponse(main.queue.slice());</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">var</span> msg;</div><div class="line">        chrome.storage.local.get(message, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">            msg=result[message];</div><div class="line">            alert(result)</div><div class="line">        &#125;);</div><div class="line">        sendResponse(msg);</div><div class="line">        <span class="comment">/*new Promise(function(resolve, reject)&#123;</span></div><div class="line">            chrome.storage.local.get(message, function(result) &#123;</div><div class="line">                msg=result[message];</div><div class="line">                resolve(msg)</div><div class="line">            &#125;);</div><div class="line">        &#125;).then((data)=&gt; sendResponse(data));*/</div><div class="line">        <span class="comment">// return true</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// return true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;现象和问题：&lt;/strong&gt;&lt;br&gt;写了个 xx-service 的基于maven项目，借助spring配置文件可执行，现在有需求是希望将该项目以SDk方式打包到maven仓库以便使用其中某些service类(暂不论合理与否)，如何通过maven profile实现在编辑器里不同开发人员默认用不同的 active profile？&lt;br&gt;实现不同的 active profile是希望双方在开发的时候，一个可以直接package出来 不含配置文件的纯 SDK 包，而我这边使用eclipse时可以默认生成需要的配置文件(local profile)到classpath下，免于命令行切换,提高开发/测试效率。&lt;br&gt;
    
    </summary>
    
    
      <category term="Maven" scheme="http://thomaslau.github.io/tags/Maven/"/>
    
      <category term="Chrome" scheme="http://thomaslau.github.io/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>Https模式下Nginx+SpringSecurity+SSO的一个交互问题</title>
    <link href="http://thomaslau.github.io/2019/10/28/2019-10-28-nginx_springsecurity_cas_error/"/>
    <id>http://thomaslau.github.io/2019/10/28/2019-10-28-nginx_springsecurity_cas_error/</id>
    <published>2019-10-28T15:59:10.000Z</published>
    <updated>2019-11-15T00:11:31.884Z</updated>
    
    <content type="html"><![CDATA[<p><strong>现象和问题：</strong><br>有一个基于SpringBoot+Spring Security和CAS SSO的应用A，端口是8080，前端为Nginx，Nginx对外为https，即443端口，nginx内部反向代理到A就是常规的http协议了，应用A配置了正确的SSO login url和service url，历史原因，Nginx混乱的逻辑，没有配置80(http)强转443(https)。<br>问题来了：服务A本身运行正常，但是开启nginx前端代理时候，发现通过https进入系统A时，第一次(sso登录验证成功)通过url1总是跳转到 80端口(http)的服务，而不是443端口(https)的A应用，但是第二次再通过url1就能正常访问A应用。<br><a id="more"></a><br>怎么去解决这个问题呢？可能大部分人没看懂上文所述问题所在，也会猜到在Nginx上配置80强转443即可解决问题。<br>但本文希望探寻下问题的本质，以及有无其他解决办法。<br><strong>先看简化且脱敏后的nginx配置</strong><br>80端口为原生网页，443为A应用代理端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen       80;</div><div class="line">        server_name  localhost;</div><div class="line">        location / &#123;</div><div class="line">            root   html;</div><div class="line">            index  index.html index.htm;</div><div class="line">        &#125;</div><div class="line">        error_page   500 502 503 504  /50x.html;</div><div class="line">        location = /50x.html &#123;</div><div class="line">            root   html;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    upstream  audit_config.short &#123;</div><div class="line">      server 127.0.0.1:8080 max_fails=200 fail_timeout=10;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    server &#123;</div><div class="line">        listen       443 ssl;</div><div class="line">        server_name  dev.example.com;</div><div class="line">        ssl_certificate      /usr/local/etc/nginx/ssl/test.crt; # cert.pem;</div><div class="line">        ssl_certificate_key  /usr/local/etc/nginx/ssl/test.key; # cert.key;</div><div class="line">        ssl_session_cache    shared:SSL:1m;</div><div class="line">        ssl_session_timeout  5m;</div><div class="line">        ssl_ciphers  HIGH:!aNULL:!MD5;</div><div class="line">        ssl_prefer_server_ciphers  on;</div><div class="line">        proxy_set_header    Host $http_host;</div><div class="line">        location / &#123;</div><div class="line">            proxy_pass  http://audit_config.short;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    include servers/*;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果你对Spring Boot+Spring security+cas部分代码感兴趣，文末也附带脱敏后的代码了。<br>先透露下问题出在nginx的这行配置 “proxy_set_header Host $http_host”。</p>
<p>打开浏览器访问 <a href="https://dev.example.com/rule/index" target="_blank" rel="external">https://dev.example.com/rule/index</a> ,可以看到前面几个跳转 sso 服务器以及本地service url：<a href="https://dev.example.com/login/cas" target="_blank" rel="external">https://dev.example.com/login/cas</a> 都是正确的，即 SSO登录验证成功，访问<a href="https://dev.example.com/login/cas" target="_blank" rel="external">https://dev.example.com/login/cas</a> 也确实返回了 302 跳转链接： <a href="http://dev.example.com/rule/index" target="_blank" rel="external">http://dev.example.com/rule/index</a> ，问题就在302跳转这一步，返回302时的Location是http:// 而不是https://。</p>
<p><strong>如何定位是哪一步出错？</strong></p>
<p>如果把Spring Boot日志设置为debug level可能是可以的，幸而 Spring Security打印的日志足够详细，我们才能看到返回 302 条转链接相关一条log：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2019-10-28 23:27:56.268 DEBUG 50901 --- [nio-8099-exec-1] o.s.s.w.s.HttpSessionRequestCache        :  \</div><div class="line">DefaultSavedRequest added to Session: DefaultSavedRequest[http://dev.example.com/rule/index]</div></pre></td></tr></table></figure></p>
<p>即上面A应用返回的是http，而不是htts，是否意味着A应用的spring security cas的bug？<br>下面我会针对这条日志，看几种不同的解决方案。</p>
<h2 id="0"><a href="#0" class="headerlink" title="0."></a>0.</h2><p>先不看即决方案，先看 http:// 是怎么来的？通过 DefaultSavedRequest 源码，可以看到http其实是 从tomcat的Request的schema取得，tomcat的Request 解析/设置 有其本身的逻辑，当Nginx通过<a href="http://协议，就决定request只能获取http的schema。不过设置" target="_blank" rel="external">http://协议，就决定request只能获取http的schema。不过设置</a> “proxy_set_header Host $http_host” 就导致tomcat解析后，当发生302跳转时拼接的Host前半部分就是Host，即<a href="http://开头。" target="_blank" rel="external">http://开头。</a></p>
<p>上面日志，即Spring Security返回http是对错？有的人认为可能是bug，其实不是。Nginx和A应用之间是 http协议，也就是说，nginx传给A应用时已经向其屏蔽了客户端的https信息，如果Spring Security解析出 https的schema，那Spring Security才是真正有bug了。</p>
<p>故而考虑下面方法。</p>
<h2 id="1-修改Nginx到tomcat的配置"><a href="#1-修改Nginx到tomcat的配置" class="headerlink" title="1. 修改Nginx到tomcat的配置"></a>1. 修改Nginx到tomcat的配置</h2><p>修改Nginx到tomcat的配置，把客户端的 request 信息通过 proxy_set_header方式都传给 tomcat，从而让Spring security正确解析。<br>这个方法是可行的，可以参考这篇博文：<a href="https://blog.csdn.net/goldenfish1919/article/details/78815192" target="_blank" rel="external">SSO 无法获取正确的schema</a><br>简单摘录下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># nginx 配置</div><div class="line">proxy_set_header       Host $host; </div><div class="line">proxy_set_header  X-Real-IP  $remote_addr; </div><div class="line">proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for; </div><div class="line">proxy_set_header X-Forwarded-Proto  $scheme;</div><div class="line">---</div><div class="line"># tomcat 配置</div><div class="line"><span class="tag">&lt;<span class="name">Engine</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.RemoteIpValve"</span> </span></div><div class="line">    <span class="attr">remoteIpHeader</span>=<span class="string">"X-Forwarded-For"</span> </div><div class="line">    <span class="attr">protocolHeader</span>=<span class="string">"X-Forwarded-Proto"</span> </div><div class="line">    <span class="attr">protocolHeaderHttpsValue</span>=<span class="string">"https"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">Engine</span> &gt;</span></div></pre></td></tr></table></figure></p>
<p>如果你的应用复杂，多处使用到客户端原始的 request 信息里的header等(或不仅仅在sso登录这一步使用)，那么 推荐该方式，虽然 使用/配置 起来较为复杂。</p>
<h2 id="2-修改-Spring-Security-CAS代码"><a href="#2-修改-Spring-Security-CAS代码" class="headerlink" title="2. 修改 Spring Security CAS代码"></a>2. 修改 Spring Security CAS代码</h2><p>能否修改Spring Security或者 CAS代码来实现？既然nginx传给应用A时已经丢失了schema信息，那么能否通过Spring的配置信息设置正确的Location？<br>让我们先看看 Spring Security 在哪里生成该Location。追寻 CasAuthenticationFilter 这个CAS的SSO实现filter，可以发现在 SavedRequestAwareAuthenticationSuccessHandler 通过 DefaultRedirectStrategy 生成了 302跳转的redirectUrl：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultRedirectStrategy</span> <span class="keyword">implements</span> <span class="title">RedirectStrategy</span> </span>&#123;</div><div class="line">...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRedirect</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></div><div class="line">            String url) <span class="keyword">throws</span> IOException &#123;</div><div class="line">        String redirectUrl = calculateRedirectUrl(request.getContextPath(), url);</div><div class="line">        redirectUrl = response.encodeRedirectURL(redirectUrl);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">            logger.debug(<span class="string">"Redirecting to '"</span> + redirectUrl + <span class="string">"'"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        response.sendRedirect(redirectUrl);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">calculateRedirectUrl</span><span class="params">(String contextPath, String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!UrlUtils.isAbsoluteUrl(url)) &#123;</div><div class="line">            <span class="keyword">if</span> (isContextRelative()) &#123;</div><div class="line">                <span class="keyword">return</span> url;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> contextPath + url;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Full URL, including http(s)://</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!isContextRelative()) &#123;</div><div class="line">            <span class="keyword">return</span> url;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Calculate the relative URL from the fully qualified URL, minus the last</span></div><div class="line">        <span class="comment">// occurrence of the scheme and base context.</span></div><div class="line">        url = url.substring(url.lastIndexOf(<span class="string">"://"</span>) + <span class="number">3</span>); <span class="comment">// strip off scheme</span></div><div class="line">        url = url.substring(url.indexOf(contextPath) + contextPath.length());</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (url.length() &gt; <span class="number">1</span> &amp;&amp; url.charAt(<span class="number">0</span>) == <span class="string">'/'</span>) &#123;</div><div class="line">            url = url.substring(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> url;</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重写 sendRedirect 方法即可，即直接加个 如果redirect url以<a href="http://开头则替换为https://的逻辑。" target="_blank" rel="external">http://开头则替换为https://的逻辑。</a><br>不过由于Location是在 Spring Request里拼成的，有的同学可能会想到，那么是否可以通过只让这个 Location 以 // 开头，这样能适配http/https，即是否可以用下面方式？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (url.startsWith(<span class="string">"http://"</span>)) &#123;</div><div class="line">    tmpUrl = tmpUrl.substring(<span class="string">"http:"</span>.length());</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (url.startsWith(<span class="string">"https://"</span>)) &#123;</div><div class="line">    tmpUrl = tmpUrl.substring(<span class="string">"https:"</span>.length());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种方式是不可以的，org.apache.catalina.connector.Response.toAbsolute(String location) 这里实际上会对 redirectUrl 做一个schema的判断并修改为http或https。</p>
<p>但是考虑到，用https还是 http其实在配置 sso的 service url 时候已经可知了，所以可以根据 service url 来判断用http还是https，见下文MoreDefaultRedirectStrategy.java 部分代码。</p>
<h2 id="3-删除Nginx配置"><a href="#3-删除Nginx配置" class="headerlink" title="3. 删除Nginx配置"></a>3. 删除Nginx配置</h2><p>上面两种方法都可解决问题，方案2较之方案1改动少，而且无需改nginx，但是他们其实都违背了系统设计之间单一性，增加了不必要的耦合。<br><strong>如果 把 Nginx里 “proxy_set_header Host $http_host;” 这行去掉会发生什么呢？</strong><br>还是开启应用A的Spring log level为debug会发现<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2019-10-28 23:27:56.268 DEBUG 50901 --- [nio-8099-exec-1] o.s.s.w.s.HttpSessionRequestCache        :   \</div><div class="line">DefaultSavedRequest added to Session: DefaultSavedRequest[http://audit_config.short/rule/index]</div></pre></td></tr></table></figure></p>
<p>你是否感到奇怪这里返回的跳转链接是 <a href="http://audit_config.short/rule/index" target="_blank" rel="external">http://audit_config.short/rule/index</a> ？更奇怪的是返回给客户端(浏览器)竟然是正确的Location，即 <a href="https://dev.example.com/rule/index" target="_blank" rel="external">https://dev.example.com/rule/index</a> 。<br>首先注意 host 为 audit_config.short ，即配置的nginx的 upstream名字，而不是大多数人认为的 dev.example.com，<br>其次Nginx把 Location中的 audit_config.short 重写了。<br><strong>怎么去验证这个想法呢？</strong><br>nginx debug 日志打开：<br>1）server配置添加 error_log /path/to/log; 这一行。<br>2）如果是Mac brew 安装，需要 “brew install nginx –cc –with-debug”指令，记住这里要加 –cc的参数，否则不对，至少目前版本的不对。</p>
<p>可以看到一下nginx日志：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http upstream request: "/login/cas?ticket=ST-114933-UenJLINO5uyRLv6Mq1uA-cas01.example.org"</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http upstream process header</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 malloc: 00007FEFE0004C00:4096</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 recv: eof:1, avail:322, err:0</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 recv: fd:11 322 of 4096</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http proxy status 302 "302 "</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http proxy header: "X-Content-Type-Options: nosniff"</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http proxy header: "X-XSS-Protection: 1; mode=block"</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http proxy header: "Cache-Control: no-cache, no-store, max-age=0, must-revalidate"</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http proxy header: "Pragma: no-cache"</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http proxy header: "Expires: 0"</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http proxy header: "X-Frame-Options: DENY"</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 posix_memalign: 00007FEFE000DC00:4096 @16</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http proxy header: "Location: http://audit_config.short/rule/index"</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http proxy header: "Content-Length: 0"</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http proxy header: "Date: Fri, 25 Oct 2019 11:11:16 GMT"</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http proxy header: "Connection: close"</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http proxy header done</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 rewritten location: "/rule/index"</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 HTTP/1.1 302</span></div><div class="line">Server: nginx/1.17.3</div><div class="line">Date: Mon, 28 Oct 2019 11:11:16 GMT</div><div class="line">Content-Length: 0</div><div class="line">Location: https://dev.example.com/rule/index</div><div class="line">Connection: keep-alive</div><div class="line">X-Content-Type-Options: nosniff</div><div class="line">X-XSS-Protection: 1; mode=block</div><div class="line">Cache-Control: no-cache, no-store, max-age=0, must-revalidate</div><div class="line">Pragma: no-cache</div><div class="line">Expires: 0</div><div class="line">X-Frame-Options: DENY</div><div class="line"></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 write new buf t:1 f:0 00007FEFE000DE98, pos 00007FEFE000DE98, size: 344 file: 0, size: 0</span></div><div class="line">2019/10/28 19:11:16 [debug] 68616<span class="comment">#0: *48 http write filter: l:0 f:0 s:344</span></div></pre></td></tr></table></figure></p>
<p>也就是说 Nginx其实已经 rewrite 302的Location了，那么什么情况下会rewrite呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">// ngx_http_upstream.c</div><div class="line">static ngx_int_t</div><div class="line">ngx_http_upstream_rewrite_location(ngx_http_request_t *r, ngx_table_elt_t *h,</div><div class="line">    ngx_uint_t offset)</div><div class="line">&#123;</div><div class="line">    ngx_int_t         rc;</div><div class="line">    ngx_table_elt_t  *ho;</div><div class="line"></div><div class="line">    ho = ngx_list_push(&amp;r-&gt;headers_out.headers);</div><div class="line">    if (ho == NULL) &#123;</div><div class="line">        return NGX_ERROR;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    *ho = *h;</div><div class="line"></div><div class="line">    if (r-&gt;upstream-&gt;rewrite_redirect) &#123;</div><div class="line">        rc = r-&gt;upstream-&gt;rewrite_redirect(r, ho, 0);</div><div class="line"></div><div class="line">        if (rc == NGX_DECLINED) &#123;</div><div class="line">            return NGX_OK;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (rc == NGX_OK) &#123;</div><div class="line">            r-&gt;headers_out.location = ho;</div><div class="line"></div><div class="line">            ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r-&gt;connection-&gt;log, 0,</div><div class="line">                           &quot;rewritten location: \&quot;%V\&quot;&quot;, &amp;ho-&gt;value);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return rc;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (ho-&gt;value.data[0] != &apos;/&apos;) &#123;</div><div class="line">        r-&gt;headers_out.location = ho;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /*</div><div class="line">     * we do not set r-&gt;headers_out.location here to avoid handling</div><div class="line">     * relative redirects in ngx_http_header_filter()</div><div class="line">     */</div><div class="line"></div><div class="line">    return NGX_OK;</div><div class="line">&#125;</div><div class="line">-----</div><div class="line">static ngx_int_t</div><div class="line">ngx_http_proxy_rewrite_redirect(ngx_http_request_t *r, ngx_table_elt_t *h,</div><div class="line">    size_t prefix)</div><div class="line">&#123;</div><div class="line">    size_t                      len;</div><div class="line">    ngx_int_t                   rc;</div><div class="line">    ngx_uint_t                  i;</div><div class="line">    ngx_http_proxy_rewrite_t   *pr;</div><div class="line">    ngx_http_proxy_loc_conf_t  *plcf;</div><div class="line"></div><div class="line">    plcf = ngx_http_get_module_loc_conf(r, ngx_http_proxy_module);</div><div class="line"></div><div class="line">    pr = plcf-&gt;redirects-&gt;elts;</div><div class="line"></div><div class="line">    if (pr == NULL) &#123;</div><div class="line">        return NGX_DECLINED;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    len = h-&gt;value.len - prefix;</div><div class="line"></div><div class="line">    for (i = 0; i &lt; plcf-&gt;redirects-&gt;nelts; i++) &#123;</div><div class="line">        rc = pr[i].handler(r, h, prefix, len, &amp;pr[i]);</div><div class="line"></div><div class="line">        if (rc != NGX_DECLINED) &#123;</div><div class="line">            return rc;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return NGX_DECLINED;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码看下去略长，不过可以参考官方注释：<br><a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_redirect" target="_blank" rel="external">http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_redirect</a><br>即，这里仅能进行简单的 proxy_pass 逆向替换。</p>
<p><strong>附：相关代码</strong><br>spring-boot.version：1.5.4.RELEASE<br>spring-security-cas：4.2.3.RELEASE</p>
<p>application.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">login.filter.type=devcas</div><div class="line">sso.cas.servicePath=https://sso.example.com/cas</div><div class="line"># sso.cas.localPath=http://127.0.0.1:8099/login/cas</div><div class="line">sso.cas.localPath=https://dev.example.com/login/cas</div></pre></td></tr></table></figure></p>
<p>下面是简单写的一段demo代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"login.filter"</span>, name = <span class="string">"type"</span>, havingValue = <span class="string">"devcas"</span>)</div><div class="line"><span class="comment">// @ConfigurationProperties(prefix = "sso.cas")</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CASConfiguation</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;sso.cas.servicePath&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String servicePath;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;sso.cas.localPath&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String localPath;</div><div class="line">   </div><div class="line">    <span class="meta">@Resource</span> CurrentUserDetailsService userDetailsService;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ServiceProperties <span class="title">serviceProperties</span><span class="params">()</span> </span>&#123;</div><div class="line">        ServiceProperties serviceProperties = <span class="keyword">new</span> ServiceProperties();</div><div class="line">        serviceProperties.setService(localPath);</div><div class="line">        <span class="comment">// serviceProperties.setSendRenew(false);</span></div><div class="line">        <span class="keyword">return</span> serviceProperties;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@Primary</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AuthenticationEntryPoint <span class="title">authenticationEntryPoint</span><span class="params">(ServiceProperties sP)</span> </span>&#123;</div><div class="line">        CasAuthenticationEntryPoint entryPoint = <span class="keyword">new</span> CasAuthenticationEntryPoint();</div><div class="line">        entryPoint.setLoginUrl(servicePath);</div><div class="line">        entryPoint.setServiceProperties(sP);</div><div class="line">        <span class="keyword">return</span> entryPoint;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> TicketValidator <span class="title">ticketValidator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cas20ServiceTicketValidator(servicePath);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> CasAuthenticationProvider <span class="title">casAuthenticationProvider</span><span class="params">()</span> </span>&#123;</div><div class="line">        CasAuthenticationProvider provider = <span class="keyword">new</span> CasAuthenticationProvider();</div><div class="line">        provider.setServiceProperties(serviceProperties());</div><div class="line">        provider.setTicketValidator(ticketValidator());</div><div class="line">        provider.setUserDetailsService(userDetailsService);</div><div class="line">        provider.setKey(<span class="string">"CAS_PROVIDER_LOCALHOST_9000"</span>);</div><div class="line">        <span class="keyword">return</span> provider;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SecurityContextLogoutHandler <span class="title">securityContextLogoutHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SecurityContextLogoutHandler();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> LogoutFilter <span class="title">logoutFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        LogoutFilter logoutFilter = <span class="keyword">new</span> LogoutFilter(servicePath+<span class="string">"/logout"</span>, securityContextLogoutHandler());</div><div class="line">        logoutFilter.setFilterProcessesUrl(<span class="string">"/logout/cas"</span>);</div><div class="line">        <span class="keyword">return</span> logoutFilter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SingleSignOutFilter <span class="title">singleSignOutFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        SingleSignOutFilter singleSignOutFilter = <span class="keyword">new</span> SingleSignOutFilter();</div><div class="line">        singleSignOutFilter.setCasServerUrlPrefix(servicePath+<span class="string">"/logout"</span>);</div><div class="line">        singleSignOutFilter.setIgnoreInitConfiguration(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> singleSignOutFilter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@EventListener</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SingleSignOutHttpSessionListener <span class="title">singleSignOutHttpSessionListener</span><span class="params">(HttpSessionEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SingleSignOutHttpSessionListener();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@EnableWebSecurity</span>(debug = <span class="keyword">true</span>)</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"login.filter"</span>, name = <span class="string">"type"</span>, havingValue = <span class="string">"devcas"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> AuthenticationProvider authenticationProvider;</div><div class="line">    <span class="keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint;</div><div class="line">    <span class="keyword">private</span> SingleSignOutFilter singleSignOutFilter;</div><div class="line">    <span class="keyword">private</span> LogoutFilter logoutFilter;</div><div class="line">    <span class="keyword">private</span> ServiceProperties serviceProperties;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecurityConfig</span><span class="params">(CasAuthenticationProvider casAuthenticationProvider, AuthenticationEntryPoint eP,</span></span></div><div class="line">            LogoutFilter lF, SingleSignOutFilter ssF, ServiceProperties serviceProperties) &#123;</div><div class="line">        <span class="keyword">this</span>.authenticationProvider = casAuthenticationProvider;</div><div class="line">        <span class="keyword">this</span>.authenticationEntryPoint = eP;</div><div class="line">        <span class="keyword">this</span>.logoutFilter = lF;</div><div class="line">        <span class="keyword">this</span>.singleSignOutFilter = ssF;</div><div class="line">        <span class="keyword">this</span>.serviceProperties = serviceProperties;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;       </div><div class="line">        http</div><div class="line">        .authorizeRequests()</div><div class="line">        .regexMatchers(<span class="string">"/accdenied"</span>, <span class="string">"/css.*"</span>, <span class="string">"/accdenied"</span>,<span class="string">"/assets.*"</span>, <span class="string">"/favicon.ico"</span>, <span class="string">"/login/cas.*"</span>).permitAll()</div><div class="line">        .antMatchers(<span class="string">"/test"</span>).authenticated()<span class="comment">//.access("hasRole('ROLE_USER')")</span></div><div class="line">        .antMatchers(<span class="string">"/secure/**"</span>).access(<span class="string">"hasRole('ROLE_SUPERVISOR')"</span>)</div><div class="line">        .anyRequest().authenticated()</div><div class="line">        .and()</div><div class="line">        .logout()</div><div class="line">        .logoutUrl(<span class="string">"/logout/cas"</span>)</div><div class="line">        .permitAll()</div><div class="line">        .and()</div><div class="line">        .csrf().disable();</div><div class="line"></div><div class="line">        http</div><div class="line">        .exceptionHandling().accessDeniedPage(<span class="string">"/accdenied"</span>)</div><div class="line">        .and().httpBasic().authenticationEntryPoint(authenticationEntryPoint)</div><div class="line">        .and()</div><div class="line">        .addFilter(casAuthenticationFilter(serviceProperties))</div><div class="line">        .addFilterBefore(logoutFilter, LogoutFilter.class)</div><div class="line">        .addFilterBefore(singleSignOutFilter, CasAuthenticationFilter.class);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        auth.authenticationProvider(authenticationProvider);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationManager <span class="title">authenticationManager</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProviderManager(Arrays.asList(authenticationProvider));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> CasAuthenticationFilter <span class="title">casAuthenticationFilter</span><span class="params">(ServiceProperties serviceProperties)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        CasAuthenticationFilter filter = <span class="keyword">new</span> CasAuthenticationFilter();</div><div class="line">        filter.setServiceProperties(serviceProperties);</div><div class="line">        filter.setAuthenticationManager(authenticationManager());</div><div class="line">        CasSuccessHandler casSuccessHandler = <span class="keyword">new</span> CasSuccessHandler();</div><div class="line">        filter.setAuthenticationSuccessHandler(casSuccessHandler);</div><div class="line">        <span class="keyword">return</span> filter;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CasSuccessHandler</span> <span class="keyword">extends</span> <span class="title">SavedRequestAwareAuthenticationSuccessHandler</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">                                        HttpServletResponse response, Authentication authentication) <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">        CurrentUser userDetails = (CurrentUser) SecurityContextHolder.getContext()</div><div class="line">                .getAuthentication()</div><div class="line">                .getPrincipal();</div><div class="line">        <span class="keyword">if</span> (userDetails != <span class="keyword">null</span>) &#123;</div><div class="line">            SysMenu menuRoot = userDetails.getMenuRoot();</div><div class="line">            String userName = userDetails.getSysUser().getUserName();</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">super</span>.onAuthenticationSuccess(request, response, authentication);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>MoreDefaultRedirectStrategy部分更改：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MoreDefaultRedirectStrategy</span> <span class="keyword">extends</span> <span class="title">DefaultRedirectStrategy</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> rewrite;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRedirect</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></div><div class="line">            String url) <span class="keyword">throws</span> IOException &#123;</div><div class="line">        String redirectUrl = calculateRedirectUrl(request.getContextPath(), url);</div><div class="line">        redirectUrl = response.encodeRedirectURL(redirectUrl);</div><div class="line">        <span class="keyword">if</span> (rewrite) &#123;</div><div class="line">            <span class="keyword">if</span> (redirectUrl.startsWith(<span class="string">"http://"</span>)) &#123;</div><div class="line">                redirectUrl = <span class="string">"https://"</span> + redirectUrl.substring(<span class="string">"http://"</span>.length());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">            logger.debug(<span class="string">"Redirecting to '"</span> + redirectUrl + <span class="string">"'"</span>);</div><div class="line">        &#125;</div><div class="line">        response.sendRedirect(redirectUrl);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRewrite</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> rewrite;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRewrite</span><span class="params">(<span class="keyword">boolean</span> rewrite)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.rewrite = rewrite;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">---</div><div class="line"><span class="comment">// 其次需要在上述SecurityConfig里变动：</span></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> CasAuthenticationFilter <span class="title">casAuthenticationFilter</span><span class="params">(ServiceProperties serviceProperties)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    CasAuthenticationFilter filter = <span class="keyword">new</span> CasAuthenticationFilter();</div><div class="line">    filter.setServiceProperties(serviceProperties);</div><div class="line">    filter.setAuthenticationManager(authenticationManager());</div><div class="line">    CasSuccessHandler casSuccessHandler = <span class="keyword">new</span> CasSuccessHandler();</div><div class="line">   </div><div class="line">    MoreDefaultRedirectStrategy redirect = <span class="keyword">new</span> MoreDefaultRedirectStrategy();</div><div class="line">    String service = serviceProperties.getService();</div><div class="line">    <span class="keyword">if</span> (service.startsWith(<span class="string">"https://"</span>)) &#123;</div><div class="line">        redirect.setRewrite(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    casSuccessHandler.setRedirectStrategy(redirect);</div><div class="line">   </div><div class="line">    filter.setAuthenticationSuccessHandler(casSuccessHandler);</div><div class="line">    <span class="keyword">return</span> filter;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong> outro </strong><br>说一个不相干的感悟，为什么TCP必须三次握手？<br>在网上可以搜到答案，都很有道理，不过我想补充一下，这或许是很多人并不在乎的点，或者认为讨论三次以上意义不大。<br>但为什么是三次，五次不行吗？<br>三次其实就是请求确认-&gt;确认-&gt;对确认的确认，如果从严格的科学理论上讲，这可能是不够的，一个无限循环，但是从技术上讲，也就是涉及经验(当然也综合考虑了性能/效率等因素)。<br>超过三次就强制认为失败而已。<br>计算机技术并没有大家想象的那么严谨，甚至可能会有 0.3不等于0.3的情况，如果大学了解过一点数电和模电的知识，就会知道这种区别，如果再学过物理理论的对立面–物理实验，就会理解 误差/精确度 的含义。<br>同时也会知道，流行大众以及电影上的“蝴蝶效应”其实算是个笑话吧。但这并不表示误差就不重要，实际上，上个世纪最伟大的物理理论，跟人们对于极小误差的纠结源远很深呢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;现象和问题：&lt;/strong&gt;&lt;br&gt;有一个基于SpringBoot+Spring Security和CAS SSO的应用A，端口是8080，前端为Nginx，Nginx对外为https，即443端口，nginx内部反向代理到A就是常规的http协议了，应用A配置了正确的SSO login url和service url，历史原因，Nginx混乱的逻辑，没有配置80(http)强转443(https)。&lt;br&gt;问题来了：服务A本身运行正常，但是开启nginx前端代理时候，发现通过https进入系统A时，第一次(sso登录验证成功)通过url1总是跳转到 80端口(http)的服务，而不是443端口(https)的A应用，但是第二次再通过url1就能正常访问A应用。&lt;br&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="http://thomaslau.github.io/tags/Nginx/"/>
    
      <category term="SpringSecurity" scheme="http://thomaslau.github.io/tags/SpringSecurity/"/>
    
      <category term="CAS SSO" scheme="http://thomaslau.github.io/tags/CAS-SSO/"/>
    
  </entry>
  
  <entry>
    <title>Many Links 0920</title>
    <link href="http://thomaslau.github.io/2019/09/20/2019-09-20-many_links_0920/"/>
    <id>http://thomaslau.github.io/2019/09/20/2019-09-20-many_links_0920/</id>
    <published>2019-09-19T17:09:07.000Z</published>
    <updated>2019-10-22T00:36:15.977Z</updated>
    
    <content type="html"><![CDATA[<p>1.<br><a href="https://www.easyice.cn/archives/328" target="_blank" rel="external">https://www.easyice.cn/archives/328</a><br>一次 JBD2进程导致磁盘 IO 高的分析解决过程<br>设计不合理，导致对 zk 执行大量写操作，导致io高。<br>临时措施：将 zk 的数据路径调整到系统盘，系统盘为 ssd<br>使用 sysdig+strace 工具<br>2.<br>软件架构被高估，清晰简单的设计被低估<br><a href="https://www.infoq.cn/article/NKLNc0HHtZNaviOX2VdV" target="_blank" rel="external">https://www.infoq.cn/article/NKLNc0HHtZNaviOX2VdV</a><br><a id="more"></a><br>3.<br>几种支持分页的ES查询方式<br><a href="https://www.jianshu.com/p/3acc365240b6" target="_blank" rel="external">https://www.jianshu.com/p/3acc365240b6</a><br><blockquote><p>scroll<br>sliced scroll<br>search after<br>…<br>sliced scroll api 除指定上下文保留时间外，还需要指定最大切片和当前切片，最大切片数据一般和shard数一致或者小于shard数，每个切片的scroll操作和scroll api的操作是一致的.<br>…<br>上面两种翻页的方式都无法支撑用户在线高并发操作，search_after提供了一种动态指针的方案，即基于上一页排序值检索下一页实现动态分页：<br>说白了 search_after 并没有解决随机跳页查询的场景，但是可以支撑多query并发请求；search_after 操作需要指定一个支持排序且值唯一的字段用来做下一页拉取的指针，这种翻页方式也可以通过bool查询的range filter实现。</p>
</blockquote><br>4.<br>为 JPA 插上翅膀的 QueryDSL<br><a href="https://mp.weixin.qq.com/s/WUWSygSUjL4mSoimvzZw3g" target="_blank" rel="external">https://mp.weixin.qq.com/s/WUWSygSUjL4mSoimvzZw3g</a><br>5.<br>用Elasticsearch做Terms聚合计算数据不准的问题<br><a href="https://www.dongwm.com/post/elasticsearch-terms-agg-is-not-accurate/" target="_blank" rel="external">https://www.dongwm.com/post/elasticsearch-terms-agg-is-not-accurate/</a><br><blockquote><p>关于文档计数错误，在延伸阅读链接 1 中有一个小节专门介绍文档计数错误 (Calculating Document Count Error)，其中提到了在返回结果的 aggregations 中包含了doc_count_error_upper_bound(没有在这次聚合中返回、但是可能存在的潜在聚合结果) 和sum_other_doc_count(聚合中没有统计到的文档数)。要注意其中的doc_count_error_upper_bound键名有「上界」的意思，也就是表示在预估的最坏情况下沒有被算进最终结果的值，当然doc_count_error_upper_bound的值越大，最终数据不准确的可能性越大，能确定的是，它的值为 0 表示数据完全正确，但是它不为 0，不代表这次聚合的数据是错误的，大家要记住。</p>
</blockquote></p>
<p>6.<br>下面几条均来自阮一峰的每周更新:<br><a href="http://www.ruanyifeng.com/blog/2019/09/weekly-issue-73.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2019/09/weekly-issue-73.html</a><br><blockquote><p>1)世界最古老的在线摄像头<br>位于旧金山的 FogCam，是目前最古老的网络直播摄影头，从1994年开始上线，至今已经直播了25个年头。它于8月30日正式关闭。<br>他们表示关闭摄像头，主要是因为学校里再也找不到地方放置摄像头了。另外，根据维基百科记载，FogCam 网站也是成立最久，而且一直到现在还在运行的网站之一。</p>
<p>2)中国贫穷地区的发展（中文）<br><a href="https://finance.sina.cn/china/gncj/2019-05-31/detail-ihvhiqay2662671.d.html" target="_blank" rel="external">https://finance.sina.cn/china/gncj/2019-05-31/detail-ihvhiqay2662671.d.html</a><br>Quora 上有人再次针对中国提出尖锐问题：如果中国有那么多钱投资其他国家，为什么不用这些钱发展本国的贫困地区呢？有一个答案内容详实，获赞最高，让围观小伙伴们赞不绝口。<br>3)<br>最黑的黑色汽车<br>宝马发布了 Vantablack 版本的 X6 轿车。Vantablack 是世界最黑的黑色颜料，可以吸收99％以上的光线。这使得宝马 VBX6 是目前世界上最黑的黑色汽车，几乎完全消除了所有反光。理论上，如果一个物体不反射任何光线，本身又不发光，那么视觉上就是一个黑洞。</p>
</blockquote><br>7.<br>为什么说 Prometheus 是足以取代 Zabbix 的监控神器？<br><a href="https://www.infoq.cn/article/275NDkYNZRpcTIL2R8Ms" target="_blank" rel="external">https://www.infoq.cn/article/275NDkYNZRpcTIL2R8Ms</a><br>8.<br>PageRank、最小生成树：ML开发者应该了解的五种图算法<br><a href="https://www.jiqizhixin.com/articles/2019-09-09-5" target="_blank" rel="external">https://www.jiqizhixin.com/articles/2019-09-09-5</a><br>9.<br><a href="http://www.ruanyifeng.com/blog/2019/10/weekly-issue-76.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2019/10/weekly-issue-76.html</a><br>可以用正则表达式检测正则表达式吗？（英文）<br><a href="https://stackoverflow.com/questions/172303/is-there-a-regular-expression-to-detect-a-valid-regular-expression" target="_blank" rel="external">https://stackoverflow.com/questions/172303/is-there-a-regular-expression-to-detect-a-valid-regular-expression</a><br>傅里叶变换交互式入门<br><a href="http://www.jezzamon.com/fourier/zh-cn.html" target="_blank" rel="external">http://www.jezzamon.com/fourier/zh-cn.html</a><br><a href="https://dollarsanity.com/amazon-fba-selling-my-products/" target="_blank" rel="external">https://dollarsanity.com/amazon-fba-selling-my-products/</a><br>我如何一个人实现亚马逊上的100万美元销售额？（英文）一个美国大学生讲述，他如何通过代理中国产品，没有雇佣任何人，一个人在亚马逊上年销售额达到100万美元。<br><a href="https://bpmn.io/toolkit/bpmn-js/" target="_blank" rel="external">https://bpmn.io/toolkit/bpmn-js/</a><br>BPMN-JS,一个在线绘制业务流程图的开源工具<br>10.<br>基于 Javassist 和 Javaagent 实现动态切面<br><a href="https://www.cnblogs.com/chiangchou/p/javassist.html" target="_blank" rel="external">https://www.cnblogs.com/chiangchou/p/javassist.html</a><br>实战结合的介绍，涉及接口比较全<br>11.<br>一个有趣的思考：两个椭圆片能粘合成一个立体吗？<br><a href="https://spaces.ac.cn/archives/6818" target="_blank" rel="external">https://spaces.ac.cn/archives/6818</a><br>12.<br>看到提问现代GC为什么会出现 STW，许多人知道但是讲的原因没到点上，这里提一下：<br>需要Stop The World是因为，比如JAVA，无论是引用计数还是可达性分析，在GC中分析对象的引用关系时，为了保证分析结果的准确性，需要通过停顿所有JVM执行线程，保证引用关系此时不再动态变化.<br>看起来像全局加锁, 虚拟机编译会标记一些位置，表示当执行到该位置时是可以进行GC的，称之 Safepoint</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.&lt;br&gt;&lt;a href=&quot;https://www.easyice.cn/archives/328&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.easyice.cn/archives/328&lt;/a&gt;&lt;br&gt;一次 JBD2进程导致磁盘 IO 高的分析解决过程&lt;br&gt;设计不合理，导致对 zk 执行大量写操作，导致io高。&lt;br&gt;临时措施：将 zk 的数据路径调整到系统盘，系统盘为 ssd&lt;br&gt;使用 sysdig+strace 工具&lt;br&gt;2.&lt;br&gt;软件架构被高估，清晰简单的设计被低估&lt;br&gt;&lt;a href=&quot;https://www.infoq.cn/article/NKLNc0HHtZNaviOX2VdV&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.infoq.cn/article/NKLNc0HHtZNaviOX2VdV&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="weeklyreading" scheme="http://thomaslau.github.io/tags/weeklyreading/"/>
    
  </entry>
  
  <entry>
    <title>如何在kafka-streams实现两次group操作</title>
    <link href="http://thomaslau.github.io/2019/09/13/2019-09-13-how_to_group_twice_in_kafkastreams/"/>
    <id>http://thomaslau.github.io/2019/09/13/2019-09-13-how_to_group_twice_in_kafkastreams/</id>
    <published>2019-09-13T13:00:10.000Z</published>
    <updated>2019-10-10T00:35:06.766Z</updated>
    
    <content type="html"><![CDATA[<p><strong>如何通过kafka-streams实现去重后再groupBy统计频率？</strong><br>使用Kafka-Streams做流计算的大家想必知道，它本身提供了 groupBy 操作可以方便我们做一些聚合计算，比如统计每分钟内每个人发出的消息数量，这个时候就可以 groupBy 用户的uid去，统计用户间互动消息频率就可以使用groupBy 用户uid和他的互动用户uid即可。<br>但如果现在需求是：如何统计每分钟和任一用户互动消息超过某频率的用户？<br><a id="more"></a><br>简化一下，如果，不考虑时间(Time Window)维度，上面需求简化成SQL就是类似如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*), uid <span class="keyword">from</span> (</div><div class="line">    <span class="keyword">select</span> uid,uid+fuid,</div><div class="line">    <span class="keyword">from</span> kafka_stream_A</div><div class="line">    <span class="keyword">group</span> <span class="keyword">by</span> uid+fuid</div><div class="line">) A <span class="keyword">group</span> <span class="keyword">by</span> A.uid <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="keyword">limit</span></div></pre></td></tr></table></figure></p>
<p>找了很久，发现是可以实现的，KS是可以groupByKey时进行aggregate操作的，groupByKey 本身其实也是通过aggregate实现的。<br>简单来说，就是通过 group by uid时候，构建一个 fuid的集合去保存这样的状态，然后再对状态进行聚合，即：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActionRecordAggregate</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> Set&lt;String&gt; users = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ActionRecord rec)</span> </span>&#123;</div><div class="line">    users.add(rec.getUser());</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> users.size();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">stream()</div><div class="line">.map((key, val) -&gt; KeyValue.pair(val.actionType, val))</div><div class="line">.groupByKey()</div><div class="line">.windowedBy(TimeWindows.of(<span class="number">60</span>*<span class="number">1000</span>))</div><div class="line">.aggregate(</div><div class="line">  ActionRecordAggregate::<span class="keyword">new</span>,</div><div class="line">  (key, value, agg) -&gt; agg.add(value),</div><div class="line">  Materialized</div><div class="line">      .&lt;String, ActionRecordAggregate, WindowStore&lt;Bytes, <span class="keyword">byte</span>[]&gt;&gt;as(<span class="string">"actionTypeLookup"</span>)</div><div class="line">      .withValueSerde(getSerdeForActionRecordAggregate())</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>上面这个例子是stackoverflow上的一个问答，原文：<a href="https://stackoverflow.com/questions/51048125/apache-kafka-grouping-twice/51071663" target="_blank" rel="external">https://stackoverflow.com/questions/51048125/apache-kafka-grouping-twice/51071663</a></p>
<p>感兴趣可以试下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamJobDemo</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(StreamJobDemo.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> ONE_MINUTES_in_millis = TimeUnit.MINUTES.toMillis(<span class="number">1</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> ignored_MINUTES_in_millis = TimeUnit.MINUTES.toMillis(<span class="number">500000</span>);</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter dateformat = DateTimeFormatter.ofPattern(<span class="string">"MM-dd HH:mm:ss,SSS"</span>);   </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        String topic = <span class="string">"packet"</span>;</div><div class="line">        String msgKey = <span class="string">"InFromClient"</span>;</div><div class="line">        String group_A = <span class="string">"from"</span>;</div><div class="line">        String group_B = <span class="string">"fuid"</span>;<span class="comment">// "request_time";</span></div><div class="line">       </div><div class="line">        KStreamBuilder builder = <span class="keyword">new</span> KStreamBuilder();</div><div class="line">        KStream&lt;String, String&gt; textLines = builder.stream(topic);</div><div class="line">        KStream&lt;String, Map&lt;String, Object&gt;&gt; mapped_streams = textLines</div><div class="line">                .filter((k, v) -&gt; msgKey.equalsIgnoreCase(k)).mapValues(value -&gt; getValFromJsonQuietly(value));</div><div class="line"></div><div class="line">        mapped_streams.map(<span class="keyword">new</span> KeyValueMapper&lt;String, Map&lt;String, Object&gt;, KeyValue&lt;String, String&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> KeyValue&lt;String, String&gt; <span class="title">apply</span><span class="params">(String key, Map&lt;String, Object&gt; value)</span> </span>&#123;</div><div class="line">                String lineKey = getOrDefault(value, group_A);</div><div class="line">                lineKey = lineKey.replaceAll(<span class="string">"@.*"</span>, <span class="string">""</span>);</div><div class="line">                String mid = getOrDefault(value, group_B);</div><div class="line">                log.info(<span class="string">"source: key-&#123;&#125;-&gt;&#123;&#125;."</span>, lineKey, mid);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> KeyValue&lt;String, String&gt;(lineKey, mid);</div><div class="line">            &#125;</div><div class="line">        &#125;).groupByKey().aggregate(<span class="keyword">new</span> Initializer&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="keyword">new</span> Aggregator&lt;String, String, String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(String aggKey, String value, String aggregate)</span> </span>&#123;</div><div class="line">                <span class="comment">// use Set instead? Serdes.String()</span></div><div class="line">                log.info(<span class="string">"aggr: &#123;&#125;-&#123;&#125;-&#123;&#125;."</span>, aggKey, aggregate, value);</div><div class="line">                <span class="keyword">if</span> (!aggregate.contains(value + <span class="string">";"</span>)) &#123;</div><div class="line">                    aggregate = aggregate + value + <span class="string">";"</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> aggregate;</div><div class="line">            &#125;</div><div class="line">        &#125;, TimeWindows.of(ONE_MINUTES_in_millis).until(ONE_MINUTES_in_millis), Serdes.String(), <span class="string">"cnt"</span>)</div><div class="line">        .toStream().filter((key, value) -&gt; &#123;</div><div class="line">                    log.info(<span class="string">"filter: key-&#123;&#125;-&#123;&#125;"</span>, key, value);</div><div class="line">                    <span class="keyword">return</span> value != <span class="keyword">null</span> &amp;&amp; key.window().end() &gt; System.currentTimeMillis() - ignored_MINUTES_in_millis;</div><div class="line">                &#125;).mapValues(<span class="keyword">new</span> ValueMapper&lt;String, Integer&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> value.split(<span class="string">";"</span>).length;</div><div class="line">                    &#125;</div><div class="line">        &#125;).filter((k,v)-&gt;v.intValue() &gt; <span class="number">2</span>).foreach((key, count) -&gt; &#123;</div><div class="line">                log.info(<span class="string">"grouped: date-&#123;&#125;, key-&#123;&#125;, cnt-&#123;&#125;"</span>,</div><div class="line">                        dateformat.format(LocalDateTime.ofInstant(Instant.ofEpochMilli(key.window().end()), ZoneId.systemDefault())),</div><div class="line">                        key.key(), count);</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        KafkaStreams streams = <span class="keyword">new</span> KafkaStreams(builder,</div><div class="line">                <span class="keyword">new</span> StreamsConfig(ImmutableMap.&lt;String, String&gt;builder()</div><div class="line">                        .put(<span class="string">"application.id"</span>, <span class="string">"nearby-rate"</span>)</div><div class="line">                        .put(<span class="string">"bootstrap.servers"</span>, <span class="string">"10.136.24.103:9091"</span>)</div><div class="line">                        .put(<span class="string">"commit.interval.ms"</span>, <span class="string">"20000"</span>)</div><div class="line">                        .put(<span class="string">"timestamp.extractor"</span>, RQTimeStampExtra.class.getName())</div><div class="line">                        .put(KEY_SERDE_CLASS_CONFIG, Serdes.StringSerde.class.getName())</div><div class="line">                        .put(VALUE_SERDE_CLASS_CONFIG, Serdes.StringSerde.class.getName())</div><div class="line">                        .put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, <span class="string">"latest"</span>).build()));</div><div class="line">        streams.start();</div><div class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread(streams::close));</div><div class="line">        <span class="comment">// return streams;</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">getValFromJsonQuietly</span><span class="params">(String info)</span> </span>&#123;</div><div class="line">        Map&lt;String, Object&gt; kvInfo = Jacksons.parse(info, <span class="keyword">new</span> TypeReference&lt;Map&lt;String, Object&gt;&gt;() &#123;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != kvInfo) &#123;</div><div class="line">            <span class="keyword">return</span> kvInfo;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> Maps.newHashMap();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getOrDefault</span><span class="params">(Map&lt;String, ?&gt; kvInfo, String key)</span> </span>&#123;</div><div class="line">        String default_key = <span class="string">"-1"</span>;</div><div class="line">        Object obj = kvInfo.get(key);</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">null</span> == obj) ? default_key : obj.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;如何通过kafka-streams实现去重后再groupBy统计频率？&lt;/strong&gt;&lt;br&gt;使用Kafka-Streams做流计算的大家想必知道，它本身提供了 groupBy 操作可以方便我们做一些聚合计算，比如统计每分钟内每个人发出的消息数量，这个时候就可以 groupBy 用户的uid去，统计用户间互动消息频率就可以使用groupBy 用户uid和他的互动用户uid即可。&lt;br&gt;但如果现在需求是：如何统计每分钟和任一用户互动消息超过某频率的用户？&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="kafka" scheme="http://thomaslau.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>卡马克是最快的开根号方法吗</title>
    <link href="http://thomaslau.github.io/2019/09/07/2019-09-07-on_carmac_and_java_jit/"/>
    <id>http://thomaslau.github.io/2019/09/07/2019-09-07-on_carmac_and_java_jit/</id>
    <published>2019-09-07T13:00:10.000Z</published>
    <updated>2019-09-07T18:13:06.805Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><i><strong>intro1</strong>：卡马克算法时最快的开根号方式吗？C/Java语言本身是怎么实现开根号的？</i><br><i><strong>intro2</strong>: java的内置sqrt和c的内置sqrt哪个更快？Java的编译/JIT优化和GCC的编译优化是否有不足之处？</i><br><i><strong>intro3</strong>: java的C2优化效果一定比C1效果好吗(对性能而言)？</i></p>
</blockquote>
<h2 id="问题或现象"><a href="#问题或现象" class="headerlink" title="问题或现象"></a>问题或现象</h2><p>这是最近看一位博主解Leet Code题想到的，原题简化一下是：给一个正整数(32位int)开根号后得到x，再对x取整返回。<br>博文的解法是使用二分查找，Java代码实现，不过这里想对该题再讨论几点<br>1）二分查找也可以优化下，建立一个简单的范围表，再二分查找，某几个国产IP库查询也是该做法(因为比BTree省太多内存)。<br>2）其实还可以用 牛顿切线法 ，每个ACMer入门练手时都会碰到的算法。<br>3）因为本题目只是要求返回正整数，那么如果我在 牛顿切分法阈值判断的时候，再加一个条件，判断本轮的整数部分和上一轮的整数部分是否相等，会不会更快？<br>4）开根号怎能少了卡马克算法，要知道在关于开根号方法中祭出卡马克算法，也就基本意味着本次交谈该结束了，但是卡马克是最快的方法吗？<br><a id="more"></a><br>所以下文中我写了几行代码来简单验证下(C/Java版)</p>
<h2 id="先了解下牛顿切分法是什么："><a href="#先了解下牛顿切分法是什么：" class="headerlink" title="先了解下牛顿切分法是什么："></a>先了解下牛顿切分法是什么：</h2><p>许多<a href="https://www.matongxue.com/madocs/205.html#/madoc" target="_blank" rel="external">网站链接</a>有介绍，这里简单描述下，<i>中学课本里的二次方程求根公式正式提出距今不过1000年多，高次方程求根公式知道高斯/阿贝尔/伽罗华才告一段落，在此之前物理学家们怎么做的呢？牛顿提出了牛顿迭代法，但这是在实/复数域上求解方程的近似根，思想就是通过直线逼近曲线(世纪更早的我国数学家刘徽也提出该思想并求出圆周率近似值)，只不过那时候没有系统的考虑连续和收敛的问题。</i><br><strong>牛顿切分转化为牛顿迭代就是比如对方程 f(n) =&gt; x(n+1)=F(x(n))转换，也就是从当前态计算出下一个状态，这是适合人们手工去计算的，更是非常适合计算机代码和执行。</strong><br>我们把上述 f(n) 用于开根号情况，也就是求方程 X^2-c=0 的解，借助于大学里的泰勒展开，我们可以得到：</p>
<pre><code>X(n+1) = ( X(n) + C/X(n) )/2
</code></pre><p>当X(n+1)与X(n) 差值足够小的时候，我们就认为 X(n+1) 接近于真实解了。<br>至于卡马克算法讨论需要更多篇幅，网上有更多介绍。简单来说是基于牛顿迭代使用一个“魔数”免于多次迭代近似对单精度数字求根。</p>
<h2 id="下面代码是C实现。"><a href="#下面代码是C实现。" class="headerlink" title="下面代码是C实现。"></a>下面代码是C实现。</h2><p>其中：<br>1) sqrt_newton：牛顿迭代，sqrt_newton_int int比较的牛顿迭代，InvSqrt 卡马克算法开根号<br>2) 在main函数里，我使用简单的for循环来统计耗时，暂不考虑精度以及其他问题，且先相信只要循环次数大，耗时差距大，就可以得出足够可信的结论。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">double</span> FLT_MIN = <span class="number">1e-7</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">sqrt_newton</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(x &lt;= <span class="number">0</span>)  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">double</span> res, lastres;</div><div class="line">    res = x;    <span class="comment">//初始值，可以为任意非0的值</span></div><div class="line">    <span class="keyword">do</span>&#123;</div><div class="line">        lastres = res;</div><div class="line">        res = (res + x/res)/<span class="number">2</span>;</div><div class="line">    &#125;<span class="keyword">while</span>(<span class="built_in">fabs</span>(lastres-res) &gt; FLT_MIN);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">sqrt_newton_int</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(x &lt;= <span class="number">0</span>)  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">double</span> res, lastres;</div><div class="line">    res = x;</div><div class="line">    <span class="keyword">int</span> last = <span class="number">0</span>;</div><div class="line">    <span class="keyword">do</span>&#123;</div><div class="line">        lastres = res;</div><div class="line">        res = (res + x/res)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> cur = (<span class="keyword">int</span>)res;</div><div class="line">        <span class="keyword">if</span> (last == cur)&#123;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        last = cur;</div><div class="line">    &#125;<span class="keyword">while</span>(<span class="built_in">fabs</span>(lastres-res) &gt; FLT_MIN);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">float</span> <span class="title">InvSqrt</span><span class="params">(<span class="keyword">float</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">float</span> xhalf = <span class="number">0.5f</span> * x;</div><div class="line">    <span class="keyword">int</span> i = *(<span class="keyword">int</span>*)&amp;x;</div><div class="line">    i = <span class="number">0x5f375a86</span> - (i&gt;&gt;<span class="number">1</span>);</div><div class="line">    x = *(<span class="keyword">float</span>*)&amp;i;</div><div class="line">    x = x*(<span class="number">1.5f</span>-xhalf*x*x);</div><div class="line">    x = x*(<span class="number">1.5f</span>-xhalf*x*x);</div><div class="line">    x = x*(<span class="number">1.5f</span>-xhalf*x*x);</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>/x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</div><div class="line">    <span class="keyword">clock_t</span> begin, end;</div><div class="line">    <span class="keyword">int</span> num = atoi(argv[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">double</span> res1=<span class="number">0</span>,res2=<span class="number">0</span>,res4=<span class="number">0</span>;</div><div class="line">    <span class="keyword">float</span> res3=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">float</span> num_f;</div><div class="line">    <span class="keyword">int</span> loopcnts = <span class="number">1000000</span>;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">sizeof</span>(argv)&gt;<span class="number">2</span>)&#123;</div><div class="line">        loopcnts = atoi(argv[<span class="number">2</span>]);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    begin = clock();</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; loopcnts; i++)&#123;</div><div class="line">        res1+=sqrt_newton_int(num+i);</div><div class="line">        res2+=sqrt_newton(num+i);</div><div class="line">        res3+=InvSqrt(num+i);</div><div class="line">        res4+=<span class="built_in">sqrt</span>(num+i);</div><div class="line">    &#125;</div><div class="line">    end = clock();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"hot %f\t:%f,%f,%f,%f\n"</span>, (<span class="keyword">double</span>)(end-begin),res1,res2,res3,res4);</div><div class="line"></div><div class="line">    begin = clock();</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; loopcnts; i++)</div><div class="line">        res1 = sqrt_newton(num);</div><div class="line">    end = clock();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">" newton_cos(%d) = %f, \t\tcost: %f\n"</span>, num, res1, (<span class="keyword">double</span>)(end-begin));</div><div class="line"> </div><div class="line">    begin = clock();</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; loopcnts; i++)</div><div class="line">        res2 = sqrt_newton_int(num);</div><div class="line">    end = clock();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"newton_int(%d) = %f, \t\tcost: %f\n"</span>, num, res2, (<span class="keyword">double</span>)(end-begin));</div><div class="line"> </div><div class="line">    num_f=<span class="number">1.0f</span>*num;</div><div class="line">    begin = clock();</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; loopcnts; i++)</div><div class="line">        res3 = InvSqrt(num_f);</div><div class="line">    end = clock();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">" InvSqrt(%d) = %f, \t\tcost: %f\n"</span>, num, res3, (<span class="keyword">double</span>)(end-begin));</div><div class="line"> </div><div class="line">    begin = clock();</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; loopcnts; i++)</div><div class="line">        res4 = <span class="built_in">sqrt</span>(num);</div><div class="line">    end = clock();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"sys sqrt(%d) = %f, \t\tcost: %f\n"</span>, num, res4, (<span class="keyword">double</span>)(end-begin));</div><div class="line">    <span class="comment">// printf("res:%f, %f, %f, %f", res1,res2,res3,res4);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因int范围限制，故每轮采取循环1亿次，多运行几次，发现输出下面结果<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">➜  Test gcc quic_newton.c -o quic_newton     </div><div class="line">➜  Test ./quic_newton 2855 100000000   </div><div class="line">hot 40405059.000000 :666695110416.069336,666695110197.906128,274877906944.000000,666695110197.906128</div><div class="line"> newton_cos(2855) = 53.432200,    cost: 11803758.000000</div><div class="line">newton_int(2855) = 53.432201,     cost: 10048574.000000</div><div class="line"> InvSqrt(2855) = 53.432198,     cost: 967581.000000</div><div class="line">sys sqrt(2855) = 53.432200,     cost: 614861.000000</div><div class="line">➜  Test</div><div class="line">➜  Test gcc -O3  quic_newton.c -o quic_newton</div><div class="line">➜  Test ./quic_newton 2855 100000000         </div><div class="line">hot 14997438.000000 :666695110416.069336,666695110197.906128,274877906944.000000,666695110197.906128</div><div class="line"> newton_cos(2855) = 53.432200,    cost: 3292126.000000</div><div class="line">newton_int(2855) = 53.432201,     cost: 2845886.000000</div><div class="line"> InvSqrt(2855) = 53.432198,     cost: 1.000000</div><div class="line">sys sqrt(2855) = 53.432200,     cost: 0.000000</div><div class="line">...</div><div class="line">➜  Test gcc -O1  quic_newton.c -o quic_newton</div><div class="line">➜  Test ./quic_newton 2855 100000000         </div><div class="line">hot 19265085.000000 :666695110416.069336,666695110197.906128,274877906944.000000,666695110197.906128</div><div class="line"> newton_cos(2855) = 53.432200,    cost: 1.000000</div><div class="line">newton_int(2855) = 53.432201,     cost: 0.000000</div><div class="line"> InvSqrt(2855) = 53.432198,     cost: 0.000000</div><div class="line">sys sqrt(2855) = 53.432200,     cost: 0.000000</div><div class="line">➜  Test</div></pre></td></tr></table></figure></p>
<p>1) 忽略上述InvSqrt float数值不正确的情况，这里是为了避免类型转换，减少对结果的影响。<br>2) 虽有for循环，以及类型/加操作，但如果测试下来耗时是一半，那有理由相信性能其实是大于一倍的。<br>3) 可发现第一次编译后，运行几次，那段卡马克效果都不如使用C系统库的sqrt函数，相差0.5倍左右，不过已经比牛顿迭代少一个数量级了。<br>4) 当开启 -O3 优化的时候，出现 耗时为1，这是GCC编译优化的缘故，也可看到优化后调用牛顿迭代耗时下降。<br>5) 但如果看 hot 的总耗时，还是可见-O3 效果优于 -O1 优化的。<br>6) 开启 -O1 优化时候，看到耗时都为1。 因为优化实际上相当只运行最后一次循环结果，这点看汇编代码可以看到。<strong>不过这里有个问题是 单是对于main函数而言，-O3优化效果反而不如 -O1。</strong></p>
<p>所以为了避免上述问题，这里需要改进下代码:见<a href="/images/quic_newton.c">附件quic_newton.c</a><br>1) 上文中 res4 = sqrt(num); 都类似对应的改为 res4 += sqrt(num+i)格式<br>2) hot之后将 res1-4都置零一下。<br>3) int num 改为double num，并且相应printf语句里 %d改为%f。<br>（部分可能受制于发生隐式类型转换，不过因为已经是double/float，对于再加int性能消耗是可忽略，或可能通过 -O1优化掉。查计算机指令周期可知，相对于前三个计算方法这个时间影响也很小）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">➜  Test gcc quic_newton.c -o quic_newton</div><div class="line">➜  Test ./quic_newton 2500 100000000</div><div class="line">hot 35850465.000000 :666691578733.306519,666691578514.627563,274877906944.000000,666691578514.627686</div><div class="line"> newton_inl(2500.000000) = 666691578514.627563,     cost: 17829585.000000</div><div class="line"> newton_cos(2500.000000) = 666691578514.627563,     cost: 17944181.000000</div><div class="line">newton_int(2500.000000) = 666691578733.306519,    cost: 18475511.000000</div><div class="line"> InvSqrt(2500.000000) = 274877906944.000000,    cost: 3108139.000000</div><div class="line">sys sqrt(2500.000000) = 666691578514.627686,    cost: 252962.000000</div><div class="line">➜  Test gcc -O3 quic_newton.c -o quic_newton</div><div class="line">➜  Test ./quic_newton 2500 100000000       </div><div class="line">hot 15424798.000000 :666691578733.306519,666691578514.627563,274877906944.000000,666691578514.627686</div><div class="line"> newton_inl(2500.000000) = 666691578514.627563,     cost: 7050614.000000</div><div class="line"> newton_cos(2500.000000) = 666691578514.627563,     cost: 7113696.000000</div><div class="line">newton_int(2500.000000) = 666691578733.306519,    cost: 7668225.000000</div><div class="line"> InvSqrt(2500.000000) = 274877906944.000000,    cost: 417802.000000</div><div class="line">sys sqrt(2500.000000) = 666691578514.627686,    cost: 168760.000000</div><div class="line">➜  Test ./quic_newton 2500 100000000</div><div class="line">hot 15394188.000000 :666691578733.306519,666691578514.627563,274877906944.000000,666691578514.627686</div><div class="line"> newton_inl(2500.000000) = 666691578514.627563,     cost: 7063698.000000</div><div class="line"> newton_cos(2500.000000) = 666691578514.627563,     cost: 7111073.000000</div><div class="line">newton_int(2500.000000) = 666691578733.306519,    cost: 7663540.000000</div><div class="line"> InvSqrt(2500.000000) = 274877906944.000000,    cost: 416777.000000</div><div class="line">sys sqrt(2500.000000) = 666691578514.627686,    cost: 167816.000000</div><div class="line">➜  Test</div></pre></td></tr></table></figure>
<p>请注意上述命令执行时的参数和输出，可以看到InvSqrt接近一个数量级的提升，sys sqrt 40%提升。这里的优化显然是减少了循环体内的指令。<br>比如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">begin = clock();</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; loopcnts; i++)</div><div class="line">    res4 += <span class="built_in">sqrt</span>(num+i);</div><div class="line">end = clock();</div></pre></td></tr></table></figure></p>
<p>对比一下 -O0和-O1关键部分<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"># -O0</div><div class="line">  callq _clock</div><div class="line">  <span class="keyword">movq</span>  %rax, -<span class="number">24</span>(%rbp)</div><div class="line">  movl  <span class="number">$0</span>, -<span class="number">72</span>(%rbp)</div><div class="line"><span class="symbol">LBB3_24:</span>                                ## =&gt;This Inner <span class="keyword">Loop</span> Header: Depth=<span class="number">1</span></div><div class="line">  movl  -<span class="number">72</span>(%rbp), %eax</div><div class="line">  cmpl  -<span class="number">80</span>(%rbp), %eax</div><div class="line">  <span class="keyword">jge</span> LBB3_27</div><div class="line">## %bb<span class="meta">.25</span>:                              ##   <span class="keyword">in</span> <span class="keyword">Loop</span>: Header=BB3_24 Depth=<span class="number">1</span></div><div class="line">  <span class="keyword">movsd</span> -<span class="number">40</span>(%rbp), %xmm0        ## <span class="built_in">xmm0</span> = mem[<span class="number">0</span>],<span class="meta">zero</span></div><div class="line">  movl  -<span class="number">72</span>(%rbp), %eax</div><div class="line">  cvtsi2sdl %eax, %xmm1</div><div class="line">  <span class="keyword">addsd</span> %xmm1, %xmm0</div><div class="line">  <span class="keyword">sqrtsd</span>  %xmm0, %xmm0</div><div class="line">  <span class="keyword">addsd</span> -<span class="number">64</span>(%rbp), %xmm0</div><div class="line">  <span class="keyword">movsd</span> %xmm0, -<span class="number">64</span>(%rbp)</div><div class="line">## %bb<span class="meta">.26</span>:                              ##   <span class="keyword">in</span> <span class="keyword">Loop</span>: Header=BB3_24 Depth=<span class="number">1</span></div><div class="line">  movl  -<span class="number">72</span>(%rbp), %eax</div><div class="line">  addl  <span class="number">$1</span>, %eax</div><div class="line">  movl  %eax, -<span class="number">72</span>(%rbp)</div><div class="line">  <span class="keyword">jmp</span> LBB3_24</div><div class="line"><span class="symbol">LBB3_27:</span></div><div class="line">  callq _clock</div><div class="line"></div><div class="line"></div><div class="line">#-O1</div><div class="line">  callq _clock</div><div class="line">  <span class="keyword">movsd</span> -<span class="number">48</span>(%rbp), %xmm3        ## <span class="number">8</span>-<span class="built_in">byte</span> Reload</div><div class="line">                                        ## <span class="built_in">xmm3</span> = mem[<span class="number">0</span>],<span class="meta">zero</span></div><div class="line">  <span class="keyword">movq</span>  %rax, %r14</div><div class="line">  testl %r15d, %r15d</div><div class="line">  <span class="keyword">xorpd</span> %xmm4, %xmm4</div><div class="line">  <span class="keyword">jle</span> LBB3_22</div><div class="line">## %bb<span class="meta">.20</span>:</div><div class="line">  <span class="keyword">xorpd</span> %xmm0, %xmm0</div><div class="line">  <span class="keyword">movsd</span> LCPI3_0(%rip), %xmm1    ## <span class="built_in">xmm1</span> = mem[<span class="number">0</span>],<span class="meta">zero</span></div><div class="line">  <span class="keyword">xorpd</span> %xmm4, %xmm4</div><div class="line"><span class="meta">  .p2align</span>  <span class="number">4</span>, <span class="number">0x90</span></div><div class="line"><span class="symbol">LBB3_21:</span>                                ## =&gt;This Inner <span class="keyword">Loop</span> Header: Depth=<span class="number">1</span></div><div class="line">  <span class="keyword">movapd</span>  %xmm3, %xmm2</div><div class="line">  <span class="keyword">addsd</span> %xmm0, %xmm2</div><div class="line">  <span class="keyword">sqrtsd</span>  %xmm2, %xmm2</div><div class="line">  <span class="keyword">addsd</span> %xmm2, %xmm4</div><div class="line">  <span class="keyword">addsd</span> %xmm1, %xmm0</div><div class="line">  decl  %r15d</div><div class="line">  <span class="keyword">jne</span> LBB3_21</div><div class="line"><span class="symbol">LBB3_22:</span></div><div class="line">  <span class="keyword">movsd</span> %xmm4, -<span class="number">40</span>(%rbp)        ## <span class="number">8</span>-<span class="built_in">byte</span> Spill</div><div class="line">  callq _clock</div></pre></td></tr></table></figure></p>
<p>-O1 优化掉了一个int转浮点型，而且还巧妙的通过自增的方式减少了指令。即优化后相当于<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> initial=<span class="number">2500f</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">10.</span>.<span class="number">.0</span>;i&gt;<span class="number">0</span>;i--)&#123;</div><div class="line">  <span class="built_in">sqrt</span>(initial);</div><div class="line">  initial=initial+<span class="number">1.0f</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面这个优化有趣，我在后面的Java版代码里也会讨论下这一点。</p>
<p>需要说明一点，改进后的quic_newton.c耗时统计，跟你添加的gcc参数相关(O1/3支持参数多样来控制你的优化)，当然，也跟你的机器，系统，硬件性能相关。比如我在一台旧的intel xeon+centos5上编译后运行，InvSqrt也在4.1秒左右，sys sqrt在1.8秒了，是mac机结果十倍了，这个时候是看不到 -O3和-O1效果的差异的。<br>至此，要说的其实就是，现代计算机(无论intel/amd)浮点处理器大多支持开根号指令，基于硬件的，虽然可能硬件(arm/fpga)不同他们的实现或有区别，比如x86架构该指令就是基于牛顿迭代实现的，因为精度可控。不是所有的处理器都这么干。<br>不过intel系列最初是基于此提供FSQRT指令，后来提供了更快的指令，SQRTSS (对于双精度是 SQRTSD) 。如果算上支持4个浮点数那就更快了。</p>
<p>好了，写这些，就是希望记得有人问最快的开根号代码，切勿上来就撸一个卡马克算法。</p>
<p>不过也有硬件指令(RSQRTSS)是基于卡马克近似算法，性能据说比上述指令快，但是精度就略差了(小于六千分之一),而且仅限单精度。<a href="https://www.felixcloutier.com/x86/rsqrtss" target="_blank" rel="external">RSQRTSS</a></p>
<pre><code>sqrtss gives a correctly rounded result.  rsqrtss gives an approximation to the reciprocal, accurate to about 11 bits.
</code></pre><p>如果你对这方面了解更多，欢迎指教 mail: aXRob21hc2xhdUBxcS5jb20=<br><blockquote><p>需要指出上面c代码测试结果会因平台而异，比如在Intel(R) Xeon某型号 + gcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-18)上就没有sqrt的性能优化，而是call指令调用，导致-O1编译没能够优化到常量(但是 循环跑Invsqrt 则优化到常量时间了)。</p>
</blockquote></p>
<p>同样的，上述测试的是比较的趋势，数值不作为参考，毕竟还可以有比ANSI C 的sqrt更快的选择，比如第三方(fdlibm)优化过的或者含有fpu判断的 __ieee754_sqrt之类函数。<br>但如果你是C和汇编语言高手的话，在Intel平台，你可以直接调用xmmintrin.h库提供的 _mm_rsqrt_ss/_mm_rsqrt<em>sd 之类的函数实现模拟调用汇编开根号\</em>_m128d _mm_sqrt<em>pd(__m128d a)，甚至借助 \</em>_m128d 同时能给四个double数值开根号的特性实现四线程并行，这些就比ANSI C内置的sqrt更快了。</p>
<h2 id="下面来看看Java里效果怎么样"><a href="#下面来看看Java里效果怎么样" class="headerlink" title="下面来看看Java里效果怎么样"></a>下面来看看Java里效果怎么样</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// JAVA 1</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathFunc</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sqrt_</span><span class="params">(<span class="keyword">double</span> t, Double precise)</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> x0 = t, x1, differ;</div><div class="line">        <span class="keyword">double</span> prec = <span class="number">1e-7</span>;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            x1 = (x0/<span class="number">2</span> + t/(<span class="number">2</span>*x0));</div><div class="line">            differ = x1 * x1 - t;</div><div class="line">            <span class="keyword">if</span> (differ &lt; prec &amp;&amp; differ &gt; -prec) &#123;</div><div class="line">                <span class="keyword">return</span> x1;</div><div class="line">            &#125;</div><div class="line">            x0 = x1;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sqrt_INT</span><span class="params">(<span class="keyword">double</span> t, Double precise)</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> x0 = t, x1, differ;</div><div class="line">        <span class="keyword">double</span> prec = <span class="number">1e-7</span>;</div><div class="line">        <span class="keyword">int</span> last = (<span class="keyword">int</span>)x0;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            x1 = (x0/<span class="number">2</span> + t/(<span class="number">2</span>*x0));</div><div class="line">            differ = x1 * x1 - t;</div><div class="line">            <span class="keyword">if</span> ((differ &lt;= prec &amp;&amp; differ &gt;= -prec)) &#123;</div><div class="line">                <span class="keyword">return</span> x1;</div><div class="line">            &#125;</div><div class="line">            x0 = x1;</div><div class="line">            <span class="keyword">int</span> cur = (<span class="keyword">int</span>)x0;</div><div class="line">            <span class="keyword">if</span> (cur == last) &#123;</div><div class="line">                <span class="keyword">return</span> cur;</div><div class="line">            &#125;</div><div class="line">            last = cur;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</div><div class="line">            sqrt_(<span class="number">230</span>, <span class="keyword">null</span>);</div><div class="line">            sqrt_INT(<span class="number">230</span>, <span class="keyword">null</span>);</div><div class="line">            Math.sqrt(<span class="number">230000</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">double</span> MM = <span class="number">2855</span>;<span class="comment">//230000</span></div><div class="line">        <span class="keyword">double</span> s1=<span class="number">0</span>,s2=<span class="number">0</span>,s3=<span class="number">0</span>;</div><div class="line">        <span class="keyword">long</span> start = System.nanoTime();</div><div class="line">        <span class="keyword">int</span> NN = <span class="number">1_0000_0000</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NN; i++) &#123;</div><div class="line">            s1 += sqrt_(MM, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> start2 = System.nanoTime();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NN; i++) &#123;</div><div class="line">            s2+= sqrt_INT(MM, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> start3 = System.nanoTime();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NN; i++) &#123;</div><div class="line">            s3+= Math.sqrt(MM+i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> start4 = System.nanoTime();</div><div class="line">        System.out.println(String.format(<span class="string">"%s-%s-%s"</span>, (start2-start)/<span class="number">1e3</span>, (start3-start2)/<span class="number">1e3</span>, (start4-start3)/<span class="number">1e3</span>));</div><div class="line">        System.out.println(String.format(<span class="string">"%s-%s-%s"</span>, s1,s2,s3));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上文问题3，这里解答下：<br>如果纯粹从理论上讲，通过判断减少循环次数，则耗时应该减少，但实际上并不这样，<strong>因为double强转int也是耗时的操作，当这个耗时足以弥补减少循环的耗时时，才会得到更少的耗时</strong>。可以简单修改 MM 来验证下，实际上MM=2500/100 则确实耗时更少，MM=2837耗时则几乎相等，MM=2839/2840/2850则耗时多。<br>因为接近平方数 INT版本收敛快。<br>上面验证较简单，就不展开。不过从这段代码，让我们看一点有趣的发现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// JAVA 2</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoSqrt</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">double</span> MM = <span class="number">2855</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> NN = <span class="number">1_0000_0000</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">double</span> s3 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">long</span> start3 = <span class="number">0</span>, start4 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">double</span> j = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">            s3 = <span class="number">0</span>;j=<span class="number">0</span>;</div><div class="line">            <span class="keyword">long</span> d = D();</div><div class="line">            System.out.println(<span class="string">"D:"</span> + s3 + <span class="string">"\t"</span> + d / <span class="number">1e3</span>);</div><div class="line">            s3 = <span class="number">0</span>;j=<span class="number">0</span>;</div><div class="line">            <span class="keyword">long</span> dd = DD();</div><div class="line">            System.out.println(<span class="string">"DD:"</span> + s3 + <span class="string">"\t"</span> + dd / <span class="number">1e3</span>);</div><div class="line">            s3 = <span class="number">0</span>;</div><div class="line">            <span class="keyword">long</span> di = DI();</div><div class="line">            System.out.println(<span class="string">"DI:"</span> + s3 + <span class="string">"\t"</span> + di / <span class="number">1e3</span>);</div><div class="line">        &#125;</div><div class="line">       </div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">D</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//int s3=0;</span></div><div class="line">        <span class="keyword">long</span> start3 = System.nanoTime();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NN; i++) &#123;</div><div class="line">            s3 += Math.sqrt(MM);<span class="comment">//0.1;//</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> start4 = System.nanoTime();</div><div class="line">        <span class="keyword">return</span> start4 - start3;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">DD</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> start3 = System.nanoTime();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NN; i++) &#123;</div><div class="line">            s3 += Math.sqrt(MM + j++);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> start4 = System.nanoTime();</div><div class="line">        <span class="keyword">return</span> start4 - start3;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">DI</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> start3 = System.nanoTime();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NN; i++) &#123;</div><div class="line">            s3 += Math.sqrt(MM + i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> start4 = System.nanoTime();</div><div class="line">        <span class="keyword">return</span> start4 - start3;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意上面main函数里，我把每个方法都跑了一百次，并且每个方法内部还有1亿次循环。<br><strong>我在这里新写一个JAVA类，不仅仅是方便JAVA/JVM/汇编代码，还是为了引出下文发现的三个问题。</strong><br>每个函数都赋值给静态变量(该方法作用域外)s3，是为了避免逃逸变量的编译优化，这个简单就不详述。<br>不过，让我们先看 D() 这个方法，含逃逸变量，即可能会被JIT优化的情况<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">D</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> s3=<span class="number">0</span>;</div><div class="line">    <span class="keyword">long</span> start3 = System.nanoTime();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NN; i++) &#123;</div><div class="line">        s3 += Math.sqrt(MM);<span class="comment">//0.1;//i;//0.2;//</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">long</span> start4 = System.nanoTime();</div><div class="line">    <span class="keyword">return</span> start4 - start3;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上述代码的 D() 在外层循环跑两轮之后就会发现 D() 耗时几乎为零了。<br>单单看JVM code可能看不出来<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> <span class="number">0</span>: iconst_0       </div><div class="line"> <span class="number">1</span>: istore_0       </div><div class="line"> <span class="number">2</span>: invokestatic    #<span class="number">20</span>  // Method java/lang/System.nanoTime:()J</div><div class="line"> <span class="number">5</span>: lstore_1       </div><div class="line"> <span class="number">6</span>: iconst_0       </div><div class="line"> <span class="number">7</span>: istore_3       </div><div class="line"> <span class="number">8</span>: iload_3         </div><div class="line"> <span class="number">9</span>: getstatic       #<span class="number">21</span>  // Field NN:I</div><div class="line"><span class="number">12</span>: if_icmpge       <span class="number">25</span>   </div><div class="line"><span class="number">15</span>: iload_0         </div><div class="line"><span class="number">16</span>: iload_3         </div><div class="line"><span class="number">17</span>: iadd           </div><div class="line"><span class="number">18</span>: istore_0       </div><div class="line"><span class="number">19</span>: iinc            <span class="number">3</span>, <span class="number">1</span></div><div class="line"><span class="number">22</span>: goto            <span class="number">8</span>   </div><div class="line"><span class="number">25</span>: invokestatic    #<span class="number">20</span>  // Method java/lang/System.nanoTime:()J</div><div class="line"><span class="number">28</span>: lstore_3       </div><div class="line"><span class="number">29</span>: lload_3         </div><div class="line"><span class="number">30</span>: lload_1         </div><div class="line"><span class="number">31</span>: lsub           </div><div class="line"><span class="number">32</span>: lreturn</div></pre></td></tr></table></figure></p>
<p>我们看看 C2优化之后的汇编代码<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">....</div><div class="line"><span class="number">0x000000011408c5d6</span>: callq *%r10  <span class="comment">;*invokestatic nanoTime</span></div><div class="line">                                 <span class="comment">; - TwoSqrt::D@2 (line 25)</span></div><div class="line"><span class="number">0x000000011408c5d9</span>: <span class="keyword">mov</span> %rax,%rbx</div><div class="line"><span class="number">0x000000011408c5dc</span>: movabs <span class="number">$0</span>x10728ec10,%r10</div><div class="line"><span class="number">0x000000011408c5e6</span>: callq *%r10  <span class="comment">;*invokestatic nanoTime</span></div><div class="line">                                 <span class="comment">; - TwoSqrt::D@25 (line 29)</span></div><div class="line"><span class="number">0x000000011408c5e9</span>: <span class="keyword">sub</span> %rbx,%rax  <span class="comment">;*lsub</span></div><div class="line">                                   <span class="comment">; - TwoSqrt::D@31 (line 30)</span></div><div class="line">....</div></pre></td></tr></table></figure></p>
<p>可以看到for循环其实优化掉了，所以上述改一下，return s3; 这样循环显然是不会消除优化掉的。<br>好了，我们再改一下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">D</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// double s3=0;</span></div><div class="line">    <span class="keyword">long</span> start3 = System.nanoTime();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NN; i++) &#123;</div><div class="line">        s3 += i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">long</span> start4 = System.nanoTime();</div><div class="line">    <span class="keyword">return</span> start4 - start3;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>即使用全局变量 s3以及 改为 s3+=i，那么耗时会是常量还是跟for循环次数有关？<br>更多的，如果这里改为 s3+=0.1 或者 s3+=1；又会怎样？<br>实际上三者耗时不一样，但都不是几纳秒，即这个时间不是常量，和循环次数有关，也就是说，<strong>即便是 C2优化后，循环依旧。</strong><br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="number">0x000000011a2f1130</span>: <span class="keyword">vaddsd</span> %xmm1,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000011a2f1134</span>: <span class="keyword">mov</span>    %r11d,%r8d</div><div class="line"><span class="number">0x000000011a2f1137</span>: <span class="keyword">add</span>    <span class="number">$0</span>xd,%r8d</div><div class="line"><span class="number">0x000000011a2f113b</span>: <span class="keyword">mov</span>    %r11d,%r9d</div><div class="line"><span class="number">0x000000011a2f113e</span>: <span class="keyword">add</span>    <span class="number">$0</span>xe,%r9d</div><div class="line"><span class="number">0x000000011a2f1142</span>: <span class="keyword">vcvtsi2sd</span> %r8d,%xmm3,%xmm3</div><div class="line"><span class="number">0x000000011a2f1147</span>: <span class="keyword">vcvtsi2sd</span> %r9d,%xmm4,%xmm4</div><div class="line"><span class="number">0x000000011a2f114c</span>: <span class="keyword">mov</span>    %r11d,%r8d</div><div class="line"><span class="number">0x000000011a2f114f</span>: <span class="keyword">add</span>    <span class="number">$0</span>xc,%r8d</div><div class="line"><span class="number">0x000000011a2f1153</span>: <span class="keyword">mov</span>    %r11d,%r9d</div><div class="line"><span class="number">0x000000011a2f1156</span>: <span class="keyword">add</span>    <span class="number">$0</span>xb,%r9d</div><div class="line"><span class="number">0x000000011a2f115a</span>: <span class="keyword">vcvtsi2sd</span> %r8d,%xmm5,%xmm5</div><div class="line"><span class="number">0x000000011a2f115f</span>: <span class="keyword">vcvtsi2sd</span> %r9d,%xmm6,%xmm6</div><div class="line"><span class="number">0x000000011a2f1164</span>: <span class="keyword">mov</span>    %r11d,%r8d</div><div class="line"><span class="number">0x000000011a2f1167</span>: <span class="keyword">add</span>    <span class="number">$0</span>xa,%r8d</div><div class="line"><span class="number">0x000000011a2f116b</span>: <span class="keyword">mov</span>    %r11d,%r9d</div><div class="line"><span class="number">0x000000011a2f116e</span>: <span class="keyword">add</span>    <span class="number">$0</span>x8,%r9d</div><div class="line"><span class="number">0x000000011a2f1172</span>: <span class="keyword">vcvtsi2sd</span> %r8d,%xmm7,%xmm7</div><div class="line"><span class="number">0x000000011a2f1177</span>: <span class="keyword">vcvtsi2sd</span> %r9d,%xmm8,%xmm8</div><div class="line"><span class="number">0x000000011a2f117c</span>: <span class="keyword">mov</span>    %r11d,%r8d</div><div class="line"><span class="number">0x000000011a2f117f</span>: <span class="keyword">add</span>    <span class="number">$0</span>x7,%r8d</div><div class="line"><span class="number">0x000000011a2f1183</span>: <span class="keyword">mov</span>    %r11d,%r9d</div><div class="line"><span class="number">0x000000011a2f1186</span>: <span class="keyword">add</span>    <span class="number">$0</span>x6,%r9d</div><div class="line"><span class="number">0x000000011a2f118a</span>: <span class="keyword">vcvtsi2sd</span> %r8d,%xmm9,%xmm9</div><div class="line"><span class="number">0x000000011a2f118f</span>: <span class="keyword">vcvtsi2sd</span> %r9d,%xmm10,%xmm10</div><div class="line"><span class="number">0x000000011a2f1194</span>: <span class="keyword">mov</span>    %r11d,%r8d</div><div class="line"><span class="number">0x000000011a2f1197</span>: <span class="keyword">add</span>    <span class="number">$0</span>x5,%r8d</div><div class="line"><span class="number">0x000000011a2f119b</span>: <span class="keyword">mov</span>    %r11d,%r9d</div><div class="line"><span class="number">0x000000011a2f119e</span>: <span class="keyword">add</span>    <span class="number">$0</span>x4,%r9d</div><div class="line"><span class="number">0x000000011a2f11a2</span>: <span class="keyword">vcvtsi2sd</span> %r8d,%xmm11,%xmm11</div><div class="line"><span class="number">0x000000011a2f11a7</span>: <span class="keyword">vcvtsi2sd</span> %r9d,%xmm12,%xmm12</div><div class="line"><span class="number">0x000000011a2f11ac</span>: <span class="keyword">mov</span>    %r11d,%r8d</div><div class="line"><span class="number">0x000000011a2f11af</span>: <span class="keyword">add</span>    <span class="number">$0</span>x3,%r8d</div><div class="line"><span class="number">0x000000011a2f11b3</span>: <span class="keyword">mov</span>    %r11d,%r9d</div><div class="line"><span class="number">0x000000011a2f11b6</span>: <span class="keyword">add</span>    <span class="number">$0</span>x2,%r9d</div><div class="line"><span class="number">0x000000011a2f11ba</span>: <span class="keyword">vcvtsi2sd</span> %r8d,%xmm13,%xmm13</div><div class="line"><span class="number">0x000000011a2f11bf</span>: <span class="keyword">vcvtsi2sd</span> %r9d,%xmm1,%xmm1</div><div class="line"><span class="number">0x000000011a2f11c4</span>: <span class="keyword">mov</span>    %r11d,%r8d</div><div class="line"><span class="number">0x000000011a2f11c7</span>: <span class="keyword">add</span>    <span class="number">$0</span>xf,%r8d</div><div class="line"><span class="number">0x000000011a2f11cb</span>: <span class="keyword">mov</span>    %r11d,%r9d</div><div class="line"><span class="number">0x000000011a2f11ce</span>: <span class="keyword">inc</span>    %r9d</div><div class="line"><span class="number">0x000000011a2f11d1</span>: <span class="keyword">vcvtsi2sd</span> %r8d,%xmm14,%xmm14</div><div class="line"><span class="number">0x000000011a2f11d6</span>: <span class="keyword">vcvtsi2sd</span> %r9d,%xmm2,%xmm2</div><div class="line"><span class="number">0x000000011a2f11db</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm2,%xmm0</div><div class="line"><span class="number">0x000000011a2f11df</span>: <span class="keyword">vaddsd</span> %xmm1,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000011a2f11e3</span>: <span class="keyword">vaddsd</span> %xmm13,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000011a2f11e8</span>: <span class="keyword">vaddsd</span> %xmm12,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000011a2f11ed</span>: <span class="keyword">vaddsd</span> %xmm11,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000011a2f11f2</span>: <span class="keyword">vaddsd</span> %xmm10,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000011a2f11f7</span>: <span class="keyword">vaddsd</span> %xmm9,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000011a2f11fc</span>: <span class="keyword">vaddsd</span> %xmm8,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000011a2f1201</span>: <span class="keyword">mov</span>    %r11d,%r8d</div><div class="line"><span class="number">0x000000011a2f1204</span>: <span class="keyword">add</span>    <span class="number">$0</span>x9,%r8d</div><div class="line"><span class="number">0x000000011a2f1208</span>: <span class="keyword">vcvtsi2sd</span> %r8d,%xmm1,%xmm1</div><div class="line"><span class="number">0x000000011a2f120d</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm1,%xmm0</div><div class="line"><span class="number">0x000000011a2f1211</span>: <span class="keyword">vaddsd</span> %xmm7,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000011a2f1215</span>: <span class="keyword">vaddsd</span> %xmm6,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000011a2f1219</span>: <span class="keyword">vaddsd</span> %xmm5,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000011a2f121d</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm3,%xmm0</div><div class="line"><span class="number">0x000000011a2f1221</span>: <span class="keyword">vaddsd</span> %xmm4,%xmm0,%xmm0  <span class="comment">;*dadd</span></div><div class="line">                                              <span class="comment">; - TT3::D@18 (line 27)</span></div><div class="line"></div><div class="line"><span class="number">0x000000011a2f1225</span>: <span class="keyword">vmovsd</span> %xmm0,<span class="number">0x70</span>(%rdx)   <span class="comment">;*putstatic s3</span></div><div class="line">                                              <span class="comment">; - TT3::D@19 (line 27)</span></div><div class="line"></div><div class="line"><span class="number">0x000000011a2f122a</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm14,%xmm1  <span class="comment">;*dadd</span></div><div class="line">                                              <span class="comment">; - TT3::D@18 (line 27)</span></div><div class="line"></div><div class="line"><span class="number">0x000000011a2f122e</span>: <span class="keyword">vmovsd</span> %xmm1,<span class="number">0x70</span>(%rdx)   <span class="comment">;*putstatic s3</span></div><div class="line">                                              <span class="comment">; - TT3::D@19 (line 27)</span></div><div class="line"></div><div class="line"><span class="number">0x000000011a2f1233</span>: <span class="keyword">add</span>    <span class="number">$0</span>x10,%r11d        <span class="comment">;*iinc</span></div><div class="line">                                              <span class="comment">; - TT3::D@22 (line 26)</span></div><div class="line"></div><div class="line"><span class="number">0x000000011a2f1237</span>: <span class="keyword">vcvtsi2sd</span> %r11d,%xmm0,%xmm0  <span class="comment">;*i2d</span></div><div class="line">                                              <span class="comment">; - TT3::D@17 (line 27)</span></div><div class="line"></div><div class="line"><span class="number">0x000000011a2f123c</span>: <span class="keyword">cmp</span>    %ecx,%r11d</div><div class="line"><span class="number">0x000000011a2f123f</span>: <span class="keyword">jl</span>     <span class="number">0x000000011a2f1130</span>  <span class="comment">;*if_icmpge</span></div><div class="line">                                              <span class="comment">; - TT3::D@10 (line 26)</span></div></pre></td></tr></table></figure></p>
<p>上面就是 s3 += i 版的 D() C2优化后的代码，即循环确实存在的。<br><strong>GCC会怎么优化呢？实际上，C还是有点不同的地方：C这里优化后耗时为常量。</strong><br>以上文C代码为例：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">begin = clock();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopcnts; i++)</div><div class="line">  res += i;</div><div class="line">end = clock();</div><div class="line"><span class="built_in">printf</span>(<span class="string">"asm(%f) sumd = %ld, \t\tcost: %f\n"</span>, MM, res, (<span class="keyword">double</span>)(end-begin));</div></pre></td></tr></table></figure></p>
<p>比如在gcc -O3 时，当 res为long类型时[JAVA版long跟double都不会有这个优化]，耗时为恒定的时间约4ns，因为此时GCC编译器优化为:<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">leal  -<span class="number">1</span>(%r15), %eax</div><div class="line">leal  -<span class="number">2</span>(%r15), %ebx</div><div class="line">imulq %rax, %rbx</div><div class="line">shrq  %rbx</div></pre></td></tr></table></figure></p>
<p>即 n*M/2 直接得到结果了，而不用再跑完循环了。<br>但是当 res为double类型时，却是需要跑for循环了，即：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">LBB0_17:</span>                                ## =&gt;This Inner <span class="keyword">Loop</span> Header: Depth=<span class="number">1</span></div><div class="line">  <span class="keyword">xorps</span> %xmm0, %xmm0</div><div class="line">  cvtsi2sdl %ecx, %xmm0</div><div class="line">  leal  <span class="number">1</span>(%rcx), %esi</div><div class="line">  <span class="keyword">xorps</span> %xmm1, %xmm1</div><div class="line">  cvtsi2sdl %esi, %xmm1</div><div class="line">  <span class="keyword">addsd</span> %xmm3, %xmm0</div><div class="line">  leal  <span class="number">2</span>(%rcx), %esi</div><div class="line">  <span class="keyword">xorps</span> %xmm2, %xmm2</div><div class="line">  cvtsi2sdl %esi, %xmm2</div><div class="line">  <span class="keyword">addsd</span> %xmm0, %xmm1</div><div class="line">  leal  <span class="number">3</span>(%rcx), %esi</div><div class="line">  <span class="keyword">xorps</span> %xmm0, %xmm0</div><div class="line">  cvtsi2sdl %esi, %xmm0</div><div class="line">  <span class="keyword">addsd</span> %xmm1, %xmm2</div><div class="line">  leal  <span class="number">4</span>(%rcx), %esi</div><div class="line">  <span class="keyword">xorps</span> %xmm1, %xmm1</div><div class="line">  cvtsi2sdl %esi, %xmm1</div><div class="line">  <span class="keyword">addsd</span> %xmm2, %xmm0</div><div class="line">  leal  <span class="number">5</span>(%rcx), %esi</div><div class="line">  <span class="keyword">xorps</span> %xmm2, %xmm2</div><div class="line">  cvtsi2sdl %esi, %xmm2</div><div class="line">  <span class="keyword">addsd</span> %xmm0, %xmm1</div><div class="line">  leal  <span class="number">6</span>(%rcx), %esi</div><div class="line">  <span class="keyword">xorps</span> %xmm0, %xmm0</div><div class="line">  cvtsi2sdl %esi, %xmm0</div><div class="line">  <span class="keyword">addsd</span> %xmm1, %xmm2</div><div class="line">  leal  <span class="number">7</span>(%rcx), %esi</div><div class="line">  <span class="keyword">xorps</span> %xmm3, %xmm3</div><div class="line">  cvtsi2sdl %esi, %xmm3</div><div class="line">  <span class="keyword">addsd</span> %xmm2, %xmm0</div><div class="line">  <span class="keyword">addsd</span> %xmm0, %xmm3</div><div class="line">  addl  <span class="number">$8</span>, %ecxa</div><div class="line">  cmpl  %ecx, %edx</div><div class="line">  <span class="keyword">jne</span> LBB0_17</div><div class="line">## %bb<span class="meta">.6</span>:</div><div class="line">  testl %eax, %eax</div><div class="line">  <span class="keyword">je</span>  LBB0_9</div></pre></td></tr></table></figure></p>
<p>这里插一句，如果你怀疑上文测试是否足够准确，那可以验证下这段代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">begin = clock();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopcnts; i++)</div><div class="line">  res += i;</div><div class="line">end = clock();</div><div class="line"><span class="built_in">printf</span>(<span class="string">"asm(%f) sumd = %f, \t\tcost: %f\n"</span>, MM, res, (<span class="keyword">double</span>)(end-begin));</div><div class="line">res=<span class="number">0</span>;</div><div class="line">begin = clock();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopcnts; i++)</div><div class="line">  res += <span class="built_in">sqrt</span>(MM+i);</div><div class="line">end = clock();</div><div class="line"><span class="built_in">printf</span>(<span class="string">"asm(%f) sums = %f, \t\tcost: %f\n"</span>, MM, res, (<span class="keyword">double</span>)(end-begin));</div></pre></td></tr></table></figure></p>
<p>在我的Mac机器上前者耗时约为后者1/5以内，足以论证之前C的测试结果，说明sqrt指令比手写的卡马克开根号性能提升是大于40%。<br><blockquote><p>1.<br>java -XX:TieredStopAtLevel=4 TwoSqrt<br>使用上面指令可以指定JIT优化级别<br>使用下面命令看lebel级别：<br>java -XX:+PrintFlagsFinal -version | grep CompileThreshold<br>level 0 - interpreter<br>level 1 - C1 with full optimization (no profiling)<br>level 2 - C1 with invocation and backedge counters<br>level 3 - C1 with full profiling (level 2 + MDO)<br>level 4 - C2<br>2.<br>java -XX:TieredStopAtLevel=1 -XX:+UnlockDiagnosticVMOptions -XX:CompileCommand=’print,<em>DL.D</em>‘ DL<br>使用上面命令可以输出指定方法JIT后的ASM代码<br>3.<br>如何查看java的JIT信息，网上可自行搜索教程。</p>
</blockquote><br>好了，让我们切回刚才的JAVA代码。<br>再次对TwoSqrt.java <a href="/images/TwoSqrt.java">做个改动</a>，添加了DL，即跟DD一样只是double换成了 long，运行几次，我们可看到跑出来的数据：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">DD :6.666951101979061e+11 176899.189</div><div class="line">DI :6.666951101979061e+11 672762.318</div><div class="line">DL :6.666951101979061e+11 211739.138</div><div class="line">DIJ:6.666951101979061e+11 292870.325</div><div class="line">II :6.666695084696677e+11 228337.677</div><div class="line">------------</div><div class="line">DD :6.666951101979061e+11 171914.117</div><div class="line">DI :6.666951101979061e+11 732866.289</div><div class="line">DL :6.666951101979061e+11 220012.218</div><div class="line">DIJ:6.666951101979061e+11 405955.404</div><div class="line">II :6.666695084696677e+11 223352.986</div><div class="line">------------</div><div class="line">DD :6.666951101979061e+11 168237.792</div><div class="line">DI :6.666951101979061e+11 254137.578</div><div class="line">DL :6.666951101979061e+11 450223.373</div><div class="line">DIJ:6.666951101979061e+11 265043.075</div><div class="line">II :6.666695084696677e+11 255281.007</div><div class="line">------------</div><div class="line">DD :6.666951101979061e+11 169216.409</div><div class="line">DI :6.666951101979061e+11 258624.100</div><div class="line">DL :6.666951101979061e+11 443366.215</div><div class="line">DIJ:6.666951101979061e+11 265902.974</div><div class="line">II :6.666695084696677e+11 255865.587</div><div class="line">....</div></pre></td></tr></table></figure></p>
<p>这个结果和我用JMH测试下来接近:<a href="/images/JMHBnhSqrt.java">JMHBnhSqrt.java</a><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Benchmark                Mode  Cnt          Score           Error  Units</div><div class="line">JMHBnhSqrt.benchLoopDD   avgt    3  170126363.572 ±  18897173.028  ns/op</div><div class="line">JMHBnhSqrt.benchLoopDI   avgt    3  304366448.848 ±  10242902.502  ns/op</div><div class="line">JMHBnhSqrt.benchLoopDIJ  avgt    3  380274911.025 ± 311415636.755  ns/op</div><div class="line">JMHBnhSqrt.benchLoopII   avgt    3  270527877.936 ±  68992367.132  ns/op</div><div class="line">JMHBnhSqrt.sqrt          avgt    3          1.482 ±         0.059  ns/op</div></pre></td></tr></table></figure></p>
<p>其中：<br>benchLoopDD: sumkk += Math.sqrt(MM + kk++);  // kk为double，0开始，++<br>benchLoopDI: sumkk += Math.sqrt(MM + i);     // i为for循环的i，0开始，++<br>benchLoopDIJ:sumjj += Math.sqrt(MM + jj++);  // jj为int，0开始，++<br>benchLoopII: sumii += Math.sqrt(285 + ii++); // ii为int，0开始，++</p>
<p>1) 需要指出的是，这里其实benchmark的是for循环+sqrt函数的代价，而不仅仅是sqrt的代价了，所以如果你注释掉循环来用JMH benchmark的话再除以循环次数得到的值不一样了(因为for循环下编译优化的缘故)。<br>2) 似乎 JMH得到的 DI/DIJ性能结果和上面2次后的数据有点出入，可能是 对JMH使用掌握的还不够深入，也可能是JMH本身原因，立个flag后面再写篇JMH的文章讨论此问题。<br>3) 总之应该相信JMH测试标准的准确性，但是不要过分迷信JMH的优化，尤其在自己不太确定的影响性能的配置上。</p>
<p>源码中DNO和D因编译优化不再细说了，我们看看几个：<br>1) Java版的DD的耗时已经非常接近之前C代码测出来的sqrt指令耗时–167888000纳秒，差距千分之一以内了。<br>2) 我们看到 DI 的耗时经历了从600多毫秒到稳定在260毫秒左右，DIJ也类似–这是C2的优化。<br>3) 尽管有上面的优化，但是耗时还是大于 DD 很多，30%多了，而他们区别只不过是被加数是double/int的区别，这是什么原因呢？<br>4) DL的耗时，比较奇怪，C1优化耗时(前两轮循环)还在 211739138纳秒左右，但是第三轮之后竟然到了 450223373纳秒。<br><strong>上述问题3，在C版本是无此区别的，也就是说，无论如何解释优化的原因，这里都可看出来，Java的C2对DI的优化(int类型的循环体)不如 GCC 编译器，后者可以做到 DI和DD同样的耗时。</strong><br><strong>上述问题4，我们是不是可以得到结论，C2的优化效果(性能) 未必比 C1 好？</strong><br>后两个问题，我在下一篇技术文里再讨论。</p>
<p>其他：<br>DNO/D的常量消除，上文写了，这里不重复，但看下java相关代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如对于：</span></div><div class="line"><span class="keyword">double</span> ss=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++)</div><div class="line">    ss += sqrt(<span class="number">230000</span>);</div></pre></td></tr></table></figure></p>
<p>实际上，GCC -C1就能把 sqrt(MM) 优化成常量了：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">_main:</span>                                  ## @main</div><div class="line">...</div><div class="line">    movl    <span class="number">$1000000</span>, %eax          ## imm = <span class="number">0xF4240</span></div><div class="line">    <span class="keyword">movsd</span>   LCPI0_0(%rip), %xmm1    ## <span class="built_in">xmm1</span> = mem[<span class="number">0</span>],<span class="meta">zero</span></div><div class="line"><span class="meta">    .p2align</span>        <span class="number">4</span>, <span class="number">0x90</span></div><div class="line"><span class="symbol">LBB0_1:</span>                                 ## =&gt;This Inner <span class="keyword">Loop</span> Header: Depth=<span class="number">1</span></div><div class="line">    <span class="keyword">addsd</span>   %xmm1, %xmm0</div><div class="line">    decl    %eax</div><div class="line">    <span class="keyword">jne</span>     LBB0_1</div></pre></td></tr></table></figure></p>
<p>LCPI0_0(%rip)就是 double 479.58315233127195<br>相比之下，JAVA的JVM code和C1都不会把sqrt(230000)优化成常量，C2则会优化。如java 版 C1优化的循环体内调用的还是下面这句：</p>
<pre><code>0x0000000110f7c229: vsqrtsd %xmm1,%xmm1,%xmm1  ;*invokestatic sqrt ; - TwoSqrt::D@19 (line 46)
</code></pre><p>java 版 C2优化的循环体内调用的还是下面这句：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="symbol"> L0002:</span> <span class="keyword">vaddsd</span> -<span class="number">0x138</span>(%rip),%xmm0,%xmm0  # <span class="number">0x0000000110f84480</span> <span class="comment">;*dadd ; - TwoSqrt::D@22 (line 46) ;</span></div><div class="line"><span class="number">0x0000000110f845b8</span>: <span class="keyword">vmovsd</span> %xmm0,<span class="number">0x70</span>(%r10)  <span class="comment">;*putstatic s3 ; - TwoSqrt::D@23 (line 46)</span></div><div class="line"><span class="number">0x0000000110f845be</span>: <span class="keyword">inc</span> %ecx  <span class="comment">;*iinc ; - TwoSqrt::D@26 (line 45)</span></div><div class="line"><span class="number">0x0000000110f845c0</span>: <span class="keyword">cmp</span> %r8d,%ecx</div><div class="line"><span class="number">0x0000000110f845c3</span>: <span class="keyword">jl</span> L0002  <span class="comment">;*if_icmpge ; - TwoSqrt::D@10 (line 45)</span></div></pre></td></tr></table></figure></p>
<p>就是说循环的相加根号后的数值已经不存在sqrt指令了。即，C2优化和GCC达到同样效果了。</p>
<p>上述也可见，DD和DI耗时在优化前差距还是很明显的，C2优化后差距减少了些。<br>此外，对于for循环，编译器/Java也有优化，比如for循环步长由 1 变为16(add $0x10,%ecx)为一个批次，减少了跳转指令的使用。<br>JAVA C2 针对DD优化采用了和GCC一样的思路，代码在下面可以看到，不过似乎有点区别是JAVA这里16个寄存器都用上了，而C用了四个，看起来不如C优化的那么紧凑。<br>这里贴一下C2之后代码，看看能不能发现什么。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">             L0000:</span> <span class="keyword">vaddsd</span> -<span class="number">0xd8</span>(%rip),%xmm1,%xmm2  # <span class="number">0x000000010feed180</span></div><div class="line">                                                    <span class="comment">;   &#123;section_word&#125;</span></div><div class="line"><span class="number">0x000000010feed258</span>: <span class="keyword">vaddsd</span> -<span class="number">0xe0</span>(%rip),%xmm2,%xmm1  # <span class="number">0x000000010feed180</span></div><div class="line">                                                    <span class="comment">;*dadd</span></div><div class="line">                                                    <span class="comment">; - TwoSqrt::DD@26 (line 64)</span></div><div class="line">                                                    <span class="comment">;   &#123;section_word&#125;</span></div><div class="line"><span class="number">0x000000010feed260</span>: <span class="keyword">vaddsd</span> -<span class="number">0xe0</span>(%rip),%xmm2,%xmm2  # <span class="number">0x000000010feed188</span></div><div class="line">                                                    <span class="comment">;   &#123;section_word&#125;</span></div><div class="line"><span class="number">0x000000010feed268</span>: <span class="keyword">vaddsd</span> -<span class="number">0xe8</span>(%rip),%xmm1,%xmm5  # <span class="number">0x000000010feed188</span></div><div class="line">                                                    <span class="comment">;   &#123;section_word&#125;</span></div><div class="line"><span class="number">0x000000010feed270</span>: <span class="keyword">vsqrtsd</span> %xmm2,%xmm3,%xmm3</div><div class="line"><span class="number">0x000000010feed274</span>: <span class="keyword">vsqrtsd</span> %xmm5,%xmm2,%xmm2  <span class="comment">;*invokestatic sqrt</span></div><div class="line">                                               <span class="comment">; - TwoSqrt::DD@29 (line 64)</span></div><div class="line"><span class="symbol">             L0001:</span> <span class="keyword">vaddsd</span> %xmm4,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000010feed27c</span>: <span class="keyword">vaddsd</span> -<span class="number">0x104</span>(%rip),%xmm1,%xmm1  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed284</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm3,%xmm0</div><div class="line"><span class="number">0x000000010feed288</span>: <span class="keyword">vaddsd</span> -<span class="number">0x108</span>(%rip),%xmm1,%xmm3  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed290</span>: <span class="keyword">vaddsd</span> %xmm2,%xmm0,%xmm4</div><div class="line"><span class="number">0x000000010feed294</span>: <span class="keyword">vaddsd</span> -<span class="number">0x11c</span>(%rip),%xmm1,%xmm0  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed29c</span>: <span class="keyword">vaddsd</span> -<span class="number">0x124</span>(%rip),%xmm0,%xmm1  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed2a4</span>: <span class="keyword">vaddsd</span> -<span class="number">0x124</span>(%rip),%xmm0,%xmm2  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed2ac</span>: <span class="keyword">vaddsd</span> -<span class="number">0x12c</span>(%rip),%xmm1,%xmm5  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed2b4</span>: <span class="keyword">vaddsd</span> -<span class="number">0x13c</span>(%rip),%xmm1,%xmm0  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed2bc</span>: <span class="keyword">vaddsd</span> -<span class="number">0x144</span>(%rip),%xmm0,%xmm1  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed2c4</span>: <span class="keyword">vaddsd</span> -<span class="number">0x144</span>(%rip),%xmm0,%xmm6  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed2cc</span>: <span class="keyword">vaddsd</span> -<span class="number">0x14c</span>(%rip),%xmm1,%xmm7  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed2d4</span>: <span class="keyword">vaddsd</span> -<span class="number">0x15c</span>(%rip),%xmm1,%xmm0  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed2dc</span>: <span class="keyword">vaddsd</span> -<span class="number">0x164</span>(%rip),%xmm0,%xmm1  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed2e4</span>: <span class="keyword">vaddsd</span> -<span class="number">0x164</span>(%rip),%xmm0,%xmm8  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed2ec</span>: <span class="keyword">vaddsd</span> -<span class="number">0x16c</span>(%rip),%xmm1,%xmm9  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed2f4</span>: <span class="keyword">vaddsd</span> -<span class="number">0x17c</span>(%rip),%xmm1,%xmm0  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed2fc</span>: <span class="keyword">vaddsd</span> -<span class="number">0x184</span>(%rip),%xmm0,%xmm1  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed304</span>: <span class="keyword">vaddsd</span> -<span class="number">0x184</span>(%rip),%xmm0,%xmm10  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed30c</span>: <span class="keyword">vaddsd</span> -<span class="number">0x18c</span>(%rip),%xmm1,%xmm11  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed314</span>: <span class="keyword">vaddsd</span> -<span class="number">0x19c</span>(%rip),%xmm1,%xmm0  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed31c</span>: <span class="keyword">vaddsd</span> -<span class="number">0x1a4</span>(%rip),%xmm0,%xmm1  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed324</span>: <span class="keyword">vaddsd</span> -<span class="number">0x1a4</span>(%rip),%xmm0,%xmm12  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed32c</span>: <span class="keyword">vaddsd</span> -<span class="number">0x1ac</span>(%rip),%xmm1,%xmm13  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed334</span>: <span class="keyword">vaddsd</span> -<span class="number">0x1bc</span>(%rip),%xmm1,%xmm0  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed33c</span>: <span class="keyword">vaddsd</span> -<span class="number">0x1c4</span>(%rip),%xmm0,%xmm1  # <span class="number">0x000000010feed180</span></div><div class="line"><span class="number">0x000000010feed344</span>: <span class="keyword">vaddsd</span> -<span class="number">0x1c4</span>(%rip),%xmm0,%xmm0  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed34c</span>: <span class="keyword">vaddsd</span> -<span class="number">0x1cc</span>(%rip),%xmm1,%xmm14  # <span class="number">0x000000010feed188</span></div><div class="line"><span class="number">0x000000010feed354</span>: <span class="keyword">vaddsd</span> -<span class="number">0x1dc</span>(%rip),%xmm1,%xmm1  # <span class="number">0x000000010feed180</span></div><div class="line">                                                     <span class="comment">;*dadd</span></div><div class="line">                                                     <span class="comment">; - TwoSqrt::DD@26 (line 64)</span></div><div class="line">                                                     <span class="comment">;   &#123;section_word&#125;</span></div><div class="line"><span class="number">0x000000010feed35c</span>: <span class="keyword">vaddsd</span> -<span class="number">0x1dc</span>(%rip),%xmm1,%xmm15  # <span class="number">0x000000010feed188</span></div><div class="line">                                                      <span class="comment">;   &#123;section_word&#125;</span></div><div class="line"><span class="number">0x000000010feed364</span>: <span class="keyword">vsqrtsd</span> %xmm3,%xmm3,%xmm3</div><div class="line"><span class="number">0x000000010feed368</span>: <span class="keyword">vaddsd</span> %xmm4,%xmm3,%xmm3</div><div class="line"><span class="number">0x000000010feed36c</span>: <span class="keyword">vsqrtsd</span> %xmm15,%xmm4,%xmm4  <span class="comment">;*invokestatic sqrt</span></div><div class="line">                                                <span class="comment">; - TwoSqrt::DD@29 (line 64)</span></div><div class="line"><span class="number">0x000000010feed371</span>: <span class="keyword">vsqrtsd</span> %xmm14,%xmm14,%xmm14</div><div class="line"><span class="number">0x000000010feed376</span>: <span class="keyword">vsqrtsd</span> %xmm0,%xmm15,%xmm15</div><div class="line"><span class="number">0x000000010feed37a</span>: <span class="keyword">vsqrtsd</span> %xmm13,%xmm13,%xmm13</div><div class="line"><span class="number">0x000000010feed37f</span>: <span class="keyword">vsqrtsd</span> %xmm12,%xmm12,%xmm12</div><div class="line"><span class="number">0x000000010feed384</span>: <span class="keyword">vsqrtsd</span> %xmm11,%xmm11,%xmm11</div><div class="line"><span class="number">0x000000010feed389</span>: <span class="keyword">vsqrtsd</span> %xmm10,%xmm10,%xmm10</div><div class="line"><span class="number">0x000000010feed38e</span>: <span class="keyword">vsqrtsd</span> %xmm9,%xmm9,%xmm9</div><div class="line"><span class="number">0x000000010feed393</span>: <span class="keyword">vsqrtsd</span> %xmm8,%xmm8,%xmm8</div><div class="line"><span class="number">0x000000010feed398</span>: <span class="keyword">vsqrtsd</span> %xmm7,%xmm7,%xmm7</div><div class="line"><span class="number">0x000000010feed39c</span>: <span class="keyword">vsqrtsd</span> %xmm6,%xmm6,%xmm6</div><div class="line"><span class="number">0x000000010feed3a0</span>: <span class="keyword">vsqrtsd</span> %xmm5,%xmm5,%xmm5</div><div class="line"><span class="number">0x000000010feed3a4</span>: <span class="keyword">vsqrtsd</span> %xmm2,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000010feed3a8</span>: <span class="keyword">vaddsd</span> %xmm3,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000010feed3ac</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm5,%xmm0</div><div class="line"><span class="number">0x000000010feed3b0</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm6,%xmm0</div><div class="line"><span class="number">0x000000010feed3b4</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm7,%xmm0</div><div class="line"><span class="number">0x000000010feed3b8</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm8,%xmm0</div><div class="line"><span class="number">0x000000010feed3bc</span>: <span class="keyword">vaddsd</span> %xmm9,%xmm0,%xmm0</div><div class="line"><span class="number">0x000000010feed3c1</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm10,%xmm0</div><div class="line"><span class="number">0x000000010feed3c5</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm11,%xmm0</div><div class="line"><span class="number">0x000000010feed3c9</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm12,%xmm0</div><div class="line"><span class="number">0x000000010feed3cd</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm13,%xmm0</div><div class="line"><span class="number">0x000000010feed3d1</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm15,%xmm0  <span class="comment">;*dadd</span></div><div class="line">                                               <span class="comment">; - TwoSqrt::DD@32 (line 64)</span></div><div class="line"><span class="number">0x000000010feed3d5</span>: <span class="keyword">vmovsd</span> %xmm0,<span class="number">0x70</span>(%r10)  <span class="comment">;*putstatic s3</span></div><div class="line">                                             <span class="comment">; - TwoSqrt::DD@33 (line 64)</span></div><div class="line"><span class="number">0x000000010feed3db</span>: <span class="keyword">vaddsd</span> %xmm0,%xmm14,%xmm0  <span class="comment">;*dadd</span></div><div class="line">                                               <span class="comment">; - TwoSqrt::DD@32 (line 64)</span></div><div class="line"><span class="number">0x000000010feed3df</span>: <span class="keyword">vmovsd</span> %xmm0,<span class="number">0x70</span>(%r10)  <span class="comment">;*putstatic s3</span></div><div class="line">                                             <span class="comment">; - TwoSqrt::DD@33 (line 64)</span></div><div class="line"><span class="number">0x000000010feed3e5</span>: <span class="keyword">add</span> <span class="number">$0</span>x10,%ecx  <span class="comment">;*iinc</span></div><div class="line">                                    <span class="comment">; - TwoSqrt::DD@36 (line 63)</span></div><div class="line"><span class="number">0x000000010feed3e8</span>: <span class="keyword">cmp</span> %r9d,%ecx</div><div class="line"><span class="number">0x000000010feed3eb</span>: <span class="keyword">jl</span> L0000  <span class="comment">;*if_icmpge</span></div><div class="line">                              <span class="comment">; - TwoSqrt::DD@14 (line 63)</span></div><div class="line"><span class="symbol">             L0002:</span> <span class="keyword">cmp</span> %r8d,%ecx</div><div class="line"><span class="number">0x000000010feed3f4</span>: <span class="keyword">jge</span> L0004</div><div class="line"><span class="number">0x000000010feed3f6</span>: <span class="keyword">xchg</span> %ax,%ax  <span class="comment">;*getstatic s3</span></div><div class="line">                                  <span class="comment">; - TwoSqrt::DD@17 (line 64)</span></div></pre></td></tr></table></figure></p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>硬件：MacBook Pro 2017<br>JAVA Version:<br>java version “1.8.0_221”<br>Java(TM) SE Runtime Environment (build 1.8.0_221-b11)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)</p>
<blockquote><p>outro1： 篇幅限制，后面两个问题留到下一篇技术文里解答了。<br>outro2： 8月初开始准备写，中间因太忙，放下一段时间，可能内容不是连贯的，欢迎反馈。</p>
</blockquote>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol>
<li><a href="https://www.jianshu.com/p/dcd73888ac3a" target="_blank" rel="external">牛顿迭代法求开方根</a></li>
<li><a href="https://www.matongxue.com/madocs/205.html#/madoc" target="_blank" rel="external">如何通俗易懂地讲解牛顿迭代法</a></li>
<li><a href="https://www.codeproject.com/Articles/69941/Best-Square-Root-Method-Algorithm-Function-Precisi" target="_blank" rel="external">Best-Square-Root-Method</a></li>
<li><a href="https://www.felixcloutier.com/x86/rsqrtss" target="_blank" rel="external">RSQRTSS — Compute Reciprocal of Square Root of Scalar Single-Precision Floating-Point Value
</a></li>
<li><a href="https://software.intel.com/zh-cn/forums/intel-isa-extensions/topic/780640" target="_blank" rel="external">performance implications of using vmovups and vmovapd</a></li>
<li><a href="https://software.intel.com/sites/default/files/managed/9e/bc/64-ia-32-architectures-optimization-manual.pdf" target="_blank" rel="external">Intel指令周期</a></li>
<li>To my father. [1955-2019.08.23]</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;i&gt;&lt;strong&gt;intro1&lt;/strong&gt;：卡马克算法时最快的开根号方式吗？C/Java语言本身是怎么实现开根号的？&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro2&lt;/strong&gt;: java的内置sqrt和c的内置sqrt哪个更快？Java的编译/JIT优化和GCC的编译优化是否有不足之处？&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro3&lt;/strong&gt;: java的C2优化效果一定比C1效果好吗(对性能而言)？&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题或现象&quot;&gt;&lt;a href=&quot;#问题或现象&quot; class=&quot;headerlink&quot; title=&quot;问题或现象&quot;&gt;&lt;/a&gt;问题或现象&lt;/h2&gt;&lt;p&gt;这是最近看一位博主解Leet Code题想到的，原题简化一下是：给一个正整数(32位int)开根号后得到x，再对x取整返回。&lt;br&gt;博文的解法是使用二分查找，Java代码实现，不过这里想对该题再讨论几点&lt;br&gt;1）二分查找也可以优化下，建立一个简单的范围表，再二分查找，某几个国产IP库查询也是该做法(因为比BTree省太多内存)。&lt;br&gt;2）其实还可以用 牛顿切线法 ，每个ACMer入门练手时都会碰到的算法。&lt;br&gt;3）因为本题目只是要求返回正整数，那么如果我在 牛顿切分法阈值判断的时候，再加一个条件，判断本轮的整数部分和上一轮的整数部分是否相等，会不会更快？&lt;br&gt;4）开根号怎能少了卡马克算法，要知道在关于开根号方法中祭出卡马克算法，也就基本意味着本次交谈该结束了，但是卡马克是最快的方法吗？&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="JIT" scheme="http://thomaslau.github.io/tags/JIT/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch[曾]在布尔类型字段设计上犯的错</title>
    <link href="http://thomaslau.github.io/2019/08/17/2019-08-17-on_elasticsearch_boolean_field/"/>
    <id>http://thomaslau.github.io/2019/08/17/2019-08-17-on_elasticsearch_boolean_field/</id>
    <published>2019-08-17T05:29:10.000Z</published>
    <updated>2019-08-17T17:17:38.362Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><i><strong>intro</strong>: 对于布尔类型字段的处理，Elasticsearch 曾犯了一个错，直到数年后 发布6.0版本才修正过来，这个设计或多或少会遇到，只是没留意，但是查询的时候结果还是让人困惑的。</i></p>
</blockquote>
<h2 id="问题或现象"><a href="#问题或现象" class="headerlink" title="问题或现象"></a>问题或现象</h2><p>前几天刚到公司，同事抛出一个问题，就是发现前一天某个搜索查询条件没有结果，但是第二天却出来结果，不过这个出来的结果是不对的，即搜索result=90时，出现了result=91的结果。<br>于是给我发了链接，我点过去就是下图这样子：<br><a id="more"></a><br><img src="/images/elasticsearch_err.png" width="100%"><br>由于忙于其他问题，所以随口回复了让他使用 result.keyword=90 查询，显然满足条件了。不过一会儿对方又问了个问题“这个字段和其他有什么特殊吗，为什么就要用keyword”，我想了想，的确是个问题，这类索引没有使用特别的分词也没有用特制的打分策略，确实不应该匹配的。<br>但是为什么呢？</p>
<h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><p>好在Elasticsearch(以下可能简称es)提供了一些辅查询相关的助接口，如分词有疑问可使用_analyze理解,打分有疑问可使用_explain, 应早在1.7版本前已经存在了，虽然es的版本有段时间跳跃。<br>当我们无法理解一个document为什么会被匹配时，就可以试试用explain查询那条记录，看看es为何会匹配，于是有下面结果(我简化了下查询)：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line">[java@xx~]$ curl -s <span class="string">'10.135.20.38:9200/aa-2019.08.14/result/AWyQ2s_MQk_27Wzfh6IY/_explain?pretty&amp;q=uid:4537633042845696%20%20AND%20result:90'</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"_index"</span> : <span class="string">"aa-2019.08.14"</span>,</div><div class="line">  <span class="string">"_type"</span> : <span class="string">"result"</span>,</div><div class="line">  <span class="string">"_id"</span> : <span class="string">"AWyQ2s_MQk_27Wzfh6IY"</span>,</div><div class="line">  <span class="string">"matched"</span> : <span class="literal">true</span>,</div><div class="line">  <span class="string">"explanation"</span> : &#123;</div><div class="line">    <span class="string">"value"</span> : 1.0068661,</div><div class="line">    <span class="string">"description"</span> : <span class="string">"sum of:"</span>,</div><div class="line">    <span class="string">"details"</span> : [</div><div class="line">      &#123;</div><div class="line">        <span class="string">"value"</span> : 1.0068661,</div><div class="line">        <span class="string">"description"</span> : <span class="string">"sum of:"</span>,</div><div class="line">        <span class="string">"details"</span> : [</div><div class="line">          &#123;</div><div class="line">            <span class="string">"value"</span> : 1.0,</div><div class="line">            <span class="string">"description"</span> : <span class="string">"uid:[4537633042845696 TO 4537633042845696], product of:"</span>,</div><div class="line">            <span class="string">"details"</span> : [</div><div class="line">              &#123;</div><div class="line">                <span class="string">"value"</span> : 1.0,</div><div class="line">                <span class="string">"description"</span> : <span class="string">"boost"</span>,</div><div class="line">                <span class="string">"details"</span> : [ ]</div><div class="line">              &#125;,</div><div class="line">              &#123;</div><div class="line">                <span class="string">"value"</span> : 1.0,</div><div class="line">                <span class="string">"description"</span> : <span class="string">"queryNorm"</span>,</div><div class="line">                <span class="string">"details"</span> : [ ]</div><div class="line">              &#125;</div><div class="line">            ]</div><div class="line">          &#125;,</div><div class="line">          &#123;</div><div class="line">            <span class="string">"value"</span> : 0.006866124,</div><div class="line">            <span class="string">"description"</span> : <span class="string">"weight(result:T in 59188) [PerFieldSimilarity], result of:"</span>,</div><div class="line">            <span class="string">"details"</span> : [</div><div class="line">              &#123;</div><div class="line">                <span class="string">"value"</span> : 0.006866124,</div><div class="line">                <span class="string">"description"</span> : <span class="string">"score(doc=59188,freq=1.0 = termFreq=1.0\n), product of:"</span>,</div><div class="line">                <span class="string">"details"</span> : [</div><div class="line">                  &#123;</div><div class="line">                    <span class="string">"value"</span> : 0.006866124,</div><div class="line">                    <span class="string">"description"</span> : <span class="string">"idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:"</span>,</div><div class="line">                    <span class="string">"details"</span> : [</div><div class="line">                      &#123;</div><div class="line">                        <span class="string">"value"</span> : 1.7270076E7,</div><div class="line">                        <span class="string">"description"</span> : <span class="string">"docFreq"</span>,</div><div class="line">                        <span class="string">"details"</span> : [ ]</div><div class="line">                      &#125;,</div><div class="line">                      &#123;</div><div class="line">                        <span class="string">"value"</span> : 1.738906E7,</div><div class="line">                        <span class="string">"description"</span> : <span class="string">"docCount"</span>,</div><div class="line">                        <span class="string">"details"</span> : [ ]</div><div class="line">                      &#125;</div><div class="line">                    ]</div><div class="line">                  &#125;,</div><div class="line">                  &#123;</div><div class="line">                    <span class="string">"value"</span> : 1.0,</div><div class="line">                    <span class="string">"description"</span> : <span class="string">"tfNorm, computed as (freq * (k1 + 1)) / (freq + k1) from:"</span>,</div><div class="line">                    <span class="string">"details"</span> : [</div><div class="line">                      &#123;</div><div class="line">                        <span class="string">"value"</span> : 1.0,</div><div class="line">                        <span class="string">"description"</span> : <span class="string">"termFreq=1.0"</span>,</div><div class="line">                        <span class="string">"details"</span> : [ ]</div><div class="line">                      &#125;,</div><div class="line">                      &#123;</div><div class="line">                        <span class="string">"value"</span> : 1.2,</div><div class="line">                        <span class="string">"description"</span> : <span class="string">"parameter k1"</span>,</div><div class="line">                        <span class="string">"details"</span> : [ ]</div><div class="line">                      &#125;,</div><div class="line">                      &#123;</div><div class="line">                        <span class="string">"value"</span> : 0.0,</div><div class="line">                        <span class="string">"description"</span> : <span class="string">"parameter b (norms omitted for field)"</span>,</div><div class="line">                        <span class="string">"details"</span> : [ ]</div><div class="line">                      &#125;</div><div class="line">                    ]</div><div class="line">                  &#125;</div><div class="line">                ]</div><div class="line">              &#125;</div><div class="line">            ]</div><div class="line">          &#125;</div><div class="line">        ]</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="string">"value"</span> : 0.0,</div><div class="line">        <span class="string">"description"</span> : <span class="string">"match on required clause, product of:"</span>,</div><div class="line">        <span class="string">"details"</span> : [</div><div class="line">          &#123;</div><div class="line">            <span class="string">"value"</span> : 0.0,</div><div class="line">            <span class="string">"description"</span> : <span class="string">"# clause"</span>,</div><div class="line">            <span class="string">"details"</span> : [ ]</div><div class="line">          &#125;,</div><div class="line">          &#123;</div><div class="line">            <span class="string">"value"</span> : 1.0,</div><div class="line">            <span class="string">"description"</span> : <span class="string">"_type:result, product of:"</span>,</div><div class="line">            <span class="string">"details"</span> : [</div><div class="line">              &#123;</div><div class="line">                <span class="string">"value"</span> : 1.0,</div><div class="line">                <span class="string">"description"</span> : <span class="string">"boost"</span>,</div><div class="line">                <span class="string">"details"</span> : [ ]</div><div class="line">              &#125;,</div><div class="line">              &#123;</div><div class="line">                <span class="string">"value"</span> : 1.0,</div><div class="line">                <span class="string">"description"</span> : <span class="string">"queryNorm"</span>,</div><div class="line">                <span class="string">"details"</span> : [ ]</div><div class="line">              &#125;</div><div class="line">            ]</div><div class="line">          &#125;</div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们期待的得分是0，即应该有一条是不满足的条件，但上述结果返回的还是得分1.0068661，匹配了，explain接口值得后面再写文章讨论下，这里不展开，如果这里你看不出什么，可以试试下面。</p>
<p>可以再查询下 昨日今日，即aa-2019.08.13/14的mapping配置，于是我得到了这样的结果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 2019.08.13</span></div><div class="line"><span class="string">"result"</span> : &#123;</div><div class="line">  <span class="string">"type"</span> : <span class="string">"boolean"</span></div><div class="line">&#125;,</div><div class="line"><span class="comment"># 2019.08.14</span></div><div class="line"><span class="string">"result"</span> : &#123;</div><div class="line">  <span class="string">"type"</span> : <span class="string">"text"</span>,</div><div class="line">  <span class="string">"fields"</span> : &#123;</div><div class="line">    <span class="string">"keyword"</span> : &#123;</div><div class="line">      <span class="string">"type"</span> : <span class="string">"keyword"</span>,</div><div class="line">      <span class="string">"ignore_above"</span> : 256</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>系统的索引是一天创建一个当天日期后缀的索引，没有特别对字段的mapping配置。<br>那么结论也就出来了，08.13那天的索引里，result类型是boolean，所以当查询条件 result为90或91的时候，他们都是都会被解析为true，也就是匹配索引里的boolean类型的字段的那条记录，所以搜索 result=90时，result=91也就出现在结果里了。</p>
<h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><p>解决方法不难，有几种。<br>先看根原因，由于写es会根据字段 biz=A 聚合到同一索引下，多个服务又会共用 biz=A 的属性，并且由于他们可能使用了同名的字段 act，但是(act在各个服务里的)类型是不同的，比如上文result 有的是boolean，有的是String类型，所以每天凌晨第一条数据(先发出事件的服务)决定该字段在当天该索引的类型了。<br>所以，根本的办法是要求各应用规范统一。<br>但也可以在这里修改es不修改服务，统一设置该类索引的mapping，强制将该字段弱化为 string 类型，这样实现elasticsearch层面的统一。</p>
<h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><p>我好奇的是，这是es的bug吗？<br>于是尝试下载最新版的Elasticsearch，发现该问题已经不存在的了<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  elasticsearch-7.2.1 curl -XPOST -H<span class="string">"Content-Type:application/json"</span> <span class="string">'http://127.0.0.1:9200/people/doc/1'</span> -d<span class="string">'&#123;"name":"hello","man":false&#125;'</span></div><div class="line">&#123;<span class="string">"_index"</span>:<span class="string">"people"</span>,<span class="string">"_type"</span>:<span class="string">"doc"</span>,<span class="string">"_id"</span>:<span class="string">"1"</span>,<span class="string">"_version"</span>:1,<span class="string">"result"</span>:<span class="string">"created"</span>,<span class="string">"_shards"</span>:&#123;<span class="string">"total"</span>:2,<span class="string">"successful"</span>:1,<span class="string">"failed"</span>:0&#125;,<span class="string">"_seq_no"</span>:0,<span class="string">"_primary_term"</span>:1&#125;</div><div class="line">➜  elasticsearch-7.2.1 curl -XPOST -H<span class="string">"Content-Type:application/json"</span> <span class="string">'http://127.0.0.1:9200/people/doc/2'</span> -d<span class="string">'&#123;"name":"hello","man":93&#125;'</span>   </div><div class="line">&#123;<span class="string">"error"</span>:&#123;<span class="string">"root_cause"</span>:[&#123;<span class="string">"type"</span>:<span class="string">"mapper_parsing_exception"</span>,<span class="string">"reason"</span>:<span class="string">"failed to parse field [man] of type [boolean] in document with id '2'"</span>&#125;],<span class="string">"type"</span>:<span class="string">"mapper_parsing_exception"</span>,<span class="string">"reason"</span>:<span class="string">"failed to parse field [man] of type [boolean] in document with id '2'"</span>,<span class="string">"caused_by"</span>:&#123;<span class="string">"type"</span>:<span class="string">"json_parse_exception"</span>,<span class="string">"reason"</span>:<span class="string">"Current token (VALUE_NUMBER_INT) not of boolean type\n at [Source: org.elasticsearch.common.bytes.BytesReference<span class="variable">$MarkSupportingStreamInputWrapper</span>@4bc234e3; line: 1, column: 25]"</span>&#125;&#125;,<span class="string">"status"</span>:400&#125;</div></pre></td></tr></table></figure></p>
<p>这里报了个json解析异常，这看起来有点有趣。<br>我们知道elasticsearch底层其实也用到Jackson的jsonparser去解析json类型内容的，于是我看了下7.2.1的Jackson-core这个jar包，确实升级了个版本。<br><strong>那么这个bug是谁解决的呢？是Elasticsearch团队解决的，还是他们不经意间升级Jackson组件解决的？</strong><br>后者有趣，是软件开发里的信任链问题了。<br>如果对Jackson了解的话，或许已经有答案了，不过我还是希望可以通过搜索到相关主题，更快速些。<br>遗憾的是通过elasticsearch/boolean/BooleanFieldMapper/number等关键字N种组合尝试都没有找到相关主题。</p>
<p>于是我猜测了几个可能的改动文件，就先从 BooleanFieldMapper.java 开始，从github的历史版本里查找，至少二分法查找能找到在哪个版本里有git变更吧。(需要说明的是elasticsearch源码比较能折腾，7.0后代码组织结构大变更，从之前的core分到server目录，module变更等)。巧合的是打开6.0版本就发现BooleanFieldMapper.java的历史变更记录里有一个主题关于 <a href="https://github.com/elastic/elasticsearch/pull/22200" target="_blank" rel="external"> <strong>strict boolean</strong> </a>，点开发现和我的问题很相似。<br>看了下，虽然主题下帖子较多，但是互动人数不多，看评论似乎还未意识到这是个很明显的“看起来合理”的错误，而不是喜好问题。</p>
<h2 id="More-1"><a href="#More-1" class="headerlink" title="More"></a>More</h2><p>该PR涉及几个改动，这里列下和本文问题最相关的改动点(以下讨论时基于<strong>JsonXContentParser</strong>)：<br>1）es的解析原理中，对于document的解析是在org.elasticsearch.index.mapper.DocumentParser里通过 parseObjectOrField 方法完成对各个字段的解析的(index/store是后续逻辑了，无关本文)。<br>2）parseObjectOrField将解析代理给 org.elasticsearch.index.mapper.FieldMapper, 由于我们已经知道该字段是boolean类型的，所以就是通过 BooleanFieldMapper 解析的，对应的入口就是在org.elasticsearch.index.mapper.BooleanFieldMapper.parseCreateField 方法内处理field的。<br>3）5.2.2和 7.2.1 在处理boolean类型field的区别就是下面代码所示：<br>Elasticsearch 5.2.2 的部分代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// boolean org.elasticsearch.common.xcontent.support.AbstractXContentParser.booleanValue() throws IOException</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">booleanValue</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    Token token = currentToken();</div><div class="line">    <span class="keyword">if</span> (token == Token.VALUE_NUMBER) &#123;</div><div class="line">        <span class="keyword">return</span> intValue() != <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (token == Token.VALUE_STRING) &#123;</div><div class="line">        <span class="keyword">return</span> Booleans.parseBoolean(textCharacters(), textOffset(), textLength(), <span class="keyword">false</span> <span class="comment">/* irrelevant */</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> doBooleanValue();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//boolean org.elasticsearch.common.Booleans.parseBoolean(char[] text, int offset, int length, boolean defaultValue)</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Returns &lt;code&gt;false&lt;/code&gt; if text is in &lt;tt&gt;false&lt;/tt&gt;, &lt;tt&gt;0&lt;/tt&gt;, &lt;tt&gt;off&lt;/tt&gt;, &lt;tt&gt;no&lt;/tt&gt;; else, true</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">parseBoolean</span><span class="params">(<span class="keyword">char</span>[] text, <span class="keyword">int</span> offset, <span class="keyword">int</span> length, <span class="keyword">boolean</span> defaultValue)</span> </span>&#123;</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> the leniency here is very dangerous: a simple typo will be misinterpreted and the user won't know.</span></div><div class="line">    <span class="comment">// We should remove it and cutover to https://github.com/rmuir/booleanparser</span></div><div class="line">    <span class="keyword">if</span> (text == <span class="keyword">null</span> || length == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> defaultValue;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (length == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> text[offset] != <span class="string">'0'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (length == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> !(text[offset] == <span class="string">'n'</span> &amp;&amp; text[offset + <span class="number">1</span>] == <span class="string">'o'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (length == <span class="number">3</span>) &#123;</div><div class="line">        <span class="keyword">return</span> !(text[offset] == <span class="string">'o'</span> &amp;&amp; text[offset + <span class="number">1</span>] == <span class="string">'f'</span> &amp;&amp; text[offset + <span class="number">2</span>] == <span class="string">'f'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (length == <span class="number">5</span>) &#123;</div><div class="line">        <span class="keyword">return</span> !(text[offset] == <span class="string">'f'</span> &amp;&amp; text[offset + <span class="number">1</span>] == <span class="string">'a'</span> &amp;&amp; text[offset + <span class="number">2</span>] == <span class="string">'l'</span> &amp;&amp; text[offset + <span class="number">3</span>] == <span class="string">'s'</span> &amp;&amp; text[offset + <span class="number">4</span>] == <span class="string">'e'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Elasticsearch 7.2.1 的部分代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// boolean org.elasticsearch.common.xcontent.support.AbstractXContentParser.booleanValue() throws IOException</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">booleanValue</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    Token token = currentToken();</div><div class="line">    <span class="keyword">if</span> (token == Token.VALUE_STRING) &#123;</div><div class="line">        <span class="keyword">return</span> Booleans.parseBoolean(textCharacters(), textOffset(), textLength(), <span class="keyword">false</span> <span class="comment">/* irrelevant */</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> doBooleanValue();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//boolean org.elasticsearch.common.Booleans.parseBoolean(char[] text, int offset, int length, boolean defaultValue)</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Parses a char[] representation of a boolean value to &lt;code&gt;boolean&lt;/code&gt;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> &lt;code&gt;true&lt;/code&gt; iff the sequence of chars is "true", &lt;code&gt;false&lt;/code&gt; iff the sequence of chars is "false" or the</div><div class="line"> * provided default value iff either text is &lt;code&gt;null&lt;/code&gt; or length == 0.</div><div class="line"> * <span class="doctag">@throws</span> IllegalArgumentException if the string cannot be parsed to boolean.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">parseBoolean</span><span class="params">(<span class="keyword">char</span>[] text, <span class="keyword">int</span> offset, <span class="keyword">int</span> length, <span class="keyword">boolean</span> defaultValue)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (text == <span class="keyword">null</span> || length == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> defaultValue;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> parseBoolean(<span class="keyword">new</span> String(text, offset, length));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">...</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Parses a string representation of a boolean value to &lt;code&gt;boolean&lt;/code&gt;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> &lt;code&gt;true&lt;/code&gt; iff the provided value is "true". &lt;code&gt;false&lt;/code&gt; iff the provided value is "false".</div><div class="line"> * <span class="doctag">@throws</span> IllegalArgumentException if the string cannot be parsed to boolean.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">parseBoolean</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (isFalse(value)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (isTrue(value)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Failed to parse value ["</span> + value + <span class="string">"] as only [true] or [false] are allowed."</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>区别在于 7.2.1中对boolean的解析去掉了 token == Token.VALUE_NUMBER 部分的逻辑(<strong>同时对0/1作为布尔类型也不再支持了</strong>)，而是先判断 VALUE_STRING 这种情况，通过 parseBoolean 处理， <strong>即仅支持“true/false/null”，其他任何都是报 IllegalArgumentException(包括不支持on/off/True/False/yes/no)</strong> ，此外的就交给 doBooleanValue 处理了，即通过Jackson的 JsonParser.getBooleanValue处理。这里其实只是对Jackson有些依赖的。</p>
<pre><code>需要指出是对于True/False是另外一处代码，但最终和 JsonParser.getBooleanValue 类似。
</code></pre><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref:"></a>Ref:</h2><ol>
<li><a href="https://github.com/elastic/elasticsearch/pull/22200" target="_blank" rel="external">Make boolean conversion strict #22200</a></li>
<li><a href="https://github.com/elastic/elasticsearch/pull/22200/commits/b5d642bbadfee6d8a3f7219bf2fb0d20aa63f2fd" target="_blank" rel="external">Elasticsearch#22200/commits</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;i&gt;&lt;strong&gt;intro&lt;/strong&gt;: 对于布尔类型字段的处理，Elasticsearch 曾犯了一个错，直到数年后 发布6.0版本才修正过来，这个设计或多或少会遇到，只是没留意，但是查询的时候结果还是让人困惑的。&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题或现象&quot;&gt;&lt;a href=&quot;#问题或现象&quot; class=&quot;headerlink&quot; title=&quot;问题或现象&quot;&gt;&lt;/a&gt;问题或现象&lt;/h2&gt;&lt;p&gt;前几天刚到公司，同事抛出一个问题，就是发现前一天某个搜索查询条件没有结果，但是第二天却出来结果，不过这个出来的结果是不对的，即搜索result=90时，出现了result=91的结果。&lt;br&gt;于是给我发了链接，我点过去就是下图这样子：&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="Elasticsearch" scheme="http://thomaslau.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>日志传输工具Logstash使用中遇到的几个问题(1)</title>
    <link href="http://thomaslau.github.io/2019/08/14/2019-08-14-on_logstash_quiz1/"/>
    <id>http://thomaslau.github.io/2019/08/14/2019-08-14-on_logstash_quiz1/</id>
    <published>2019-08-14T15:15:07.000Z</published>
    <updated>2019-08-15T00:01:41.651Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><i><strong>intro</strong>：去年记录的logstash几个问题，因为涉及较多且杂乱，主题并不是那么清晰，今天整理时候发现写起来太长了，所以打算分成2-4篇文章，几个小块逐个讨论。</i></p>
</blockquote>
<p><strong>系统概况</strong>：<br>1）各服务产生事件(日志)另有一套Event机制支持，本文讨论的是如何跨数据中心(机房)传输。<br>2）普适性的，适合各语言实现的设计，故基于文件传输，即服务在本地产生滚动的日志，组件去 <strong>tail</strong> 文件的方式，将这些数据 <strong>即时</strong> 传输至另一个机房的Kafka。<br>3）logstash是5.6.4版本，kafka版本 0.10.0.1版本问题（再高版本的logstash 就不支持该版本的Kafka了）<br>4）logstash的input是滚动的日志文件，即tail_mode，output为kafka，无解析，插件开启了metric，queue 为 persistent，即文件模式，硬件为磁盘。<br>5）文件系统为ext4，系统inode是重用的。<br>6）本文贴出配置或数据已做脱敏处理，如有疑问请忽略。</p>
<p><strong>本文先讨论遇到的两个问题</strong><br>1）即便是 kill -15， logstash重启后会丢失数据<br>2）性能问题，可能消息大小会有影响，但观察下来logstash上传速率上限在 1.2万条/秒.</p>
<a id="more"></a>
<h2 id="logstash的配置"><a href="#logstash的配置" class="headerlink" title="logstash的配置"></a>logstash的配置</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    file &#123;</div><div class="line">      path =&gt; ["/data/xxx-*.csv"]</div><div class="line">      start_position =&gt; "beginning"</div><div class="line">      type =&gt; "xyz"</div><div class="line">      sincedb_write_interval =&gt; "1"</div><div class="line">      sincedb_path =&gt; ".sincedbxxx"</div><div class="line">      discover_interval =&gt; "1"</div><div class="line">      tags =&gt; "xxx"</div><div class="line">    &#125;</div><div class="line">    file &#123;</div><div class="line">      path =&gt; ["/data/yyy-*.csv"]</div><div class="line">      start_position =&gt; "beginning"</div><div class="line">      type =&gt; "xyz"</div><div class="line">      sincedb_write_interval =&gt; "1"</div><div class="line">      sincedb_path =&gt; ".sincedbyyy"</div><div class="line">      discover_interval =&gt; "1"</div><div class="line">      tags =&gt; "yyy"</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">filter &#123;</div><div class="line">  mutate &#123;</div><div class="line">    gsub =&gt; [</div><div class="line">      "message","[\\\\]&#123;2,&#125;n","",</div><div class="line">      "message","[\\\\]&#123;2,&#125;r",""</div><div class="line">      ]</div><div class="line">  &#125;</div><div class="line">  metrics &#123;</div><div class="line">     meter =&gt; "events@%&#123;[type]&#125;@%&#123;[path]&#125;"</div><div class="line">     meter =&gt; "events@%&#123;[type]&#125;@sum"</div><div class="line">     ...</div><div class="line">     clear_interval =&gt; 86401</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">  if "metric" in [tags] &#123;</div><div class="line">    stdout &#123; codec =&gt; rubydebug &#125;</div><div class="line">    ...</div><div class="line">  &#125; else &#123;</div><div class="line">      kafka &#123;</div><div class="line">        ...</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="先看问题1–重启后会丢失数据"><a href="#先看问题1–重启后会丢失数据" class="headerlink" title="先看问题1–重启后会丢失数据"></a>先看问题1–重启后会丢失数据</h2><p>导致原因是 <strong>系统inode重用</strong>，通常在高请求的机器上，文件系统都会选择重用inode，那么logstash重启时加载的.sincedb文件里的inode，很可能就是上一次其他文件上报文件的位移记录，不是本文件的，从而导致丢数据。<br>举例来说：<br>因为sincedb记录了inode和inode对应文件的位移，logstash重启时候会加载这些inode和位移，当inode可重用的，就会产生一个问题：<br>假设我们的日志文件是滚动的，比如一小时一个文件，<br>假设之前inode有一条历史记录 “111222 20460”，表示inode=111222对应的文件file-2018030403 的位移是 20460(字节)，即表示上次111222对应文件读到20460这个字节处，但是，其实这时侯 111222 这个inode因为重用，对应的文件已经是 file-2018030503，且其大小是 1020460 字节了。<br>当我们重启时，logstash会加载111222这个inode对应的进度，即重启后 file-2018030503 这个文件其实是从 20460 字节处开始读取并上报，而不是配置的 从0即文件开头开始上报。<br>这就导致在上报 file-2018030503 这个文件时丢失了 20460 个字节(对于行读取还会另做处理)。</p>
<p><i><strong>理解上面后，你可能会疑问，既然 重启 + inode重 用会丢失数据，那么 为什么平时上报滚动的日志文件没有丢失，没有出现上面的情况？</strong></i></p>
<p>这个原因就在于，logstash 在判断新的变更时，会比较inode对应新文件的大小和记录中的文件大小，<strong>小于记录值则将记录值清零</strong>：<br><blockquote><p>1）logstash未重启，内存中记录一条 “111222 20460” 这条记录<br>2）当 111222 这个inode对应文件 file-2018030503 新建时，filewatch插件会检测到 111222 这个inode 的文件大小为0<br>3）0小于20460，则logstash 会将 内存中 “111222 20460” 这条记录更新为 “111222 0”，这个0就是配置中的 from beginning。</p>
</blockquote><br>这样新inode是被正确定位的，故文件不会出现数据丢失。<br>这是bug吗？或者说，可否避免这个问题？<br>可以的，<strong>升级下 logstash-input-file 即可</strong>。5.6.4版本里对应的机制底层实际是由 filewatch插件实现，新版 logstash-input-file 4.1.10 已经将filewatch并入logstash-input-file，<strong>并且新版本有个特性：<br>.sincedb多了几列，有文件路径(filepath)和时间戳列，加载sincedb文件同时也会加载路径，这样，当检测到该inode有数据产生时，除了和低版本一样会对比inode外，还增加了一种判断</strong>，即：</p>
<p><i><strong>inode相等时，会判断filepath是否相等，如否则认为是新的文件。</strong></i></p>
<p>故重启时不会再因inode重用问题导致丢数据了。<br>这里是代码分析，比较长，如果不敢兴趣，可略过。<br>入口在watch.rb里<br>    attr_reader :discoverer, :watched_files_collection</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div></pre></td><td class="code"><pre><div class="line">----</div><div class="line">processor在tail_mode-&gt;processor.rb</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_all_states</span><span class="params">(watched_files)</span></span></div><div class="line">      process_closed(watched_files)</div><div class="line">      <span class="keyword">return</span> <span class="keyword">if</span> watch.quit?</div><div class="line">      process_ignored(watched_files)</div><div class="line">      <span class="keyword">return</span> <span class="keyword">if</span> watch.quit?</div><div class="line">      process_delayed_delete(watched_files)</div><div class="line">      <span class="keyword">return</span> <span class="keyword">if</span> watch.quit?</div><div class="line">      process_restat_for_watched_and_active(watched_files)</div><div class="line">      <span class="keyword">return</span> <span class="keyword">if</span> watch.quit?</div><div class="line">      process_rotation_in_progress(watched_files)</div><div class="line">      <span class="keyword">return</span> <span class="keyword">if</span> watch.quit?</div><div class="line">      process_watched(watched_files)</div><div class="line">      <span class="keyword">return</span> <span class="keyword">if</span> watch.quit?</div><div class="line">      process_active(watched_files)</div><div class="line">    <span class="keyword">end</span></div><div class="line">    。。。</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_watched</span><span class="params">(watched_files)</span></span></div><div class="line">      logger.trace(<span class="string">"Watched processing"</span>)</div><div class="line">      to_take = @settings.max_active - watched_files.count&#123;<span class="params">|wf|</span> wf.active?&#125;</div><div class="line">      <span class="keyword">if</span> to_take &gt; <span class="number">0</span></div><div class="line">        watched_files.select &#123;<span class="params">|wf|</span> wf.watched?&#125;.take(to_take).each <span class="keyword">do</span> <span class="params">|watched_file|</span></div><div class="line">          watched_file.activate</div><div class="line">          <span class="keyword">if</span> watched_file.initial?</div><div class="line">            create_initial(watched_file)</div><div class="line">          <span class="keyword">else</span></div><div class="line">            create(watched_file)</div><div class="line">          <span class="keyword">end</span></div><div class="line">          <span class="keyword">break</span> <span class="keyword">if</span> watch.quit?</div><div class="line">        <span class="keyword">end</span></div><div class="line">      <span class="keyword">else</span></div><div class="line">        now = Time.now.to_i</div><div class="line">        <span class="keyword">if</span> (now - watch.lastwarn_max_files) &gt; MAX_FILES_WARN_INTERVAL</div><div class="line">          waiting = watched_files.size - @settings.max_active</div><div class="line">          logger.warn(@settings.max_warn_msg + <span class="string">", files yet to open: <span class="subst">#&#123;waiting&#125;</span>"</span>)</div><div class="line">          watch.lastwarn_max_files = now</div><div class="line">        <span class="keyword">end</span></div><div class="line">      <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    。。。</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_initial</span><span class="params">(watched_file)</span></span></div><div class="line">      @create_initial.handle(watched_file)</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">------discove 入口</div><div class="line">discover.rb</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">discover_any_files</span><span class="params">(path, ongoing)</span></span></div><div class="line">  fileset = Dir.glob(path).select&#123;<span class="params">|f|</span> File.file?(f)&#125;</div><div class="line">  logger.trace(<span class="string">"discover_files"</span>,  <span class="string">"count"</span> =&gt; fileset.size)</div><div class="line">  logger.warn(<span class="string">"discover_files"</span>,  <span class="string">"count"</span> =&gt; fileset.size)</div><div class="line">  fileset.each <span class="keyword">do</span> <span class="params">|file|</span></div><div class="line">    pathname = Pathname.new(file)</div><div class="line">    new_discovery = <span class="literal">false</span></div><div class="line">    watched_file = @watched_files_collection.watched_file_by_path(file)</div><div class="line">    <span class="keyword">if</span> watched_file.<span class="literal">nil</span>?</div><div class="line">      <span class="keyword">begin</span></div><div class="line">        path_stat = PathStatClass.new(pathname)</div><div class="line">      <span class="keyword">rescue</span> Errno::ENOENT</div><div class="line">        <span class="keyword">next</span></div><div class="line">      <span class="keyword">end</span></div><div class="line">      watched_file = WatchedFile.new(pathname, path_stat, @settings)</div><div class="line">      new_discovery = <span class="literal">true</span></div><div class="line">      logger.info(<span class="string">"discover_files handling:"</span>, <span class="string">"new:"</span>=&gt; new_discovery, <span class="string">"watched_file:"</span> =&gt; watched_file.details)</div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="comment"># if it already unwatched or its excluded then we can skip</span></div><div class="line">    <span class="keyword">next</span> <span class="keyword">if</span> watched_file.unwatched? <span class="params">||</span> can_exclude?(watched_file, new_discovery)</div><div class="line">    logger.trace(<span class="string">"discover_files handling:"</span>, <span class="string">"new discovery"</span>=&gt; new_discovery, <span class="string">"watched_file details"</span> =&gt; watched_file.details)</div><div class="line">    <span class="keyword">if</span> new_discovery</div><div class="line">      watched_file.initial_completed <span class="keyword">if</span> ongoing</div><div class="line">      <span class="comment"># initially when the sincedb collection is filled with records from the persistence file</span></div><div class="line">      <span class="comment"># each value is not associated with a watched file</span></div><div class="line">      <span class="comment"># a sincedb_value can be:</span></div><div class="line">      <span class="comment">#   unassociated</span></div><div class="line">      <span class="comment">#   associated with this watched_file</span></div><div class="line">      <span class="comment">#   associated with a different watched_file</span></div><div class="line">      <span class="keyword">if</span> @sincedb_collection.associate(watched_file)</div><div class="line">        <span class="keyword">if</span> watched_file.file_ignorable?</div><div class="line">          logger.trace(<span class="string">"Discoverer discover_files: <span class="subst">#&#123;file&#125;</span>: skipping because it was last modified more than <span class="subst">#&#123;@settings.ignore_older&#125;</span> seconds ago"</span>)</div><div class="line">          logger.info(<span class="string">"Discoverer discover_files: <span class="subst">#&#123;file&#125;</span>: skipping because it was last modified more than <span class="subst">#&#123;@settings.ignore_older&#125;</span> seconds ago"</span>)</div><div class="line">          <span class="comment"># on discovery ignorable watched_files are put into the ignored state and that</span></div><div class="line">          <span class="comment"># updates the size from the internal stat</span></div><div class="line">          <span class="comment"># so the existing contents are not read.</span></div><div class="line">          <span class="comment"># because, normally, a newly discovered file will</span></div><div class="line">          <span class="comment"># have a watched_file size of zero</span></div><div class="line">          <span class="comment"># they are still added to the collection so we know they are there for the next periodic discovery</span></div><div class="line">          watched_file.ignore_as_unread</div><div class="line">        <span class="keyword">end</span></div><div class="line">        <span class="comment"># now add the discovered file to the watched_files collection and adjust the sincedb collections</span></div><div class="line">        @watched_files_collection.add(watched_file)</div><div class="line">      <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="comment"># at this point the watched file is created, is in the db but not yet opened or being processed</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">------最终发现重命名的inode文件调用是在 tail_mode-&gt;handlers-&gt;base.rb</div><div class="line">base.rb</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(watched_file)</span></span></div><div class="line">  logger.trace(<span class="string">"handling: <span class="subst">#&#123;watched_file.filename&#125;</span>"</span>)</div><div class="line">  logger.info(<span class="string">"handling: <span class="subst">#&#123;watched_file.filename&#125;</span>"</span>)</div><div class="line">  <span class="keyword">unless</span> watched_file.has_listener?</div><div class="line">    watched_file.set_listener(@observer)</div><div class="line">  <span class="keyword">end</span></div><div class="line">  handle_specifically(watched_file)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_new_value_sincedb_collection</span><span class="params">(watched_file)</span></span></div><div class="line">  sincedb_value = get_new_value_specifically(watched_file)</div><div class="line">  logger.trace(<span class="string">"add_new_value_sincedb_collection"</span>, <span class="string">"position"</span> =&gt; sincedb_value.position, <span class="string">"watched_file details"</span> =&gt; watched_file.details)</div><div class="line">  sincedb_collection.set(watched_file.sincedb_key, sincedb_value)</div><div class="line">  sincedb_value</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_new_value_specifically</span><span class="params">(watched_file)</span></span></div><div class="line">  position = watched_file.position_for_new_sincedb_value</div><div class="line">  value = SincedbValue.new(position)</div><div class="line">  value.set_watched_file(watched_file)</div><div class="line">  watched_file.update_bytes_read(position)</div><div class="line">  value</div><div class="line"><span class="keyword">end</span></div><div class="line">---&gt;</div><div class="line">creat_initial.rb</div><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">FileWatch</span> <span class="title">module</span> <span class="title">TailMode</span> <span class="title">module</span> <span class="title">Handlers</span></span></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">CreateInitial</span> &lt; Base</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_specifically</span><span class="params">(watched_file)</span></span></div><div class="line">      <span class="keyword">if</span> open_file(watched_file)</div><div class="line">        logger.trace(<span class="string">"handle_specifically opened file handle: <span class="subst">#&#123;watched_file.file.fileno&#125;</span>, path: <span class="subst">#&#123;watched_file.filename&#125;</span>"</span>)</div><div class="line">        logger.info(<span class="string">"handle_specifically opened file handle: <span class="subst">#&#123;watched_file.file.fileno&#125;</span>, path: <span class="subst">#&#123;watched_file.filename&#125;</span>"</span>)</div><div class="line">        add_or_update_sincedb_collection(watched_file)</div><div class="line">      <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_existing_specifically</span><span class="params">(watched_file, sincedb_value)</span></span></div><div class="line">      position = watched_file.last_stat_size</div><div class="line">      <span class="keyword">if</span> @settings.start_new_files_at == <span class="symbol">:beginning</span></div><div class="line">        position = <span class="number">0</span></div><div class="line">      <span class="keyword">end</span></div><div class="line">      logger.trace(<span class="string">"update_existing_specifically - <span class="subst">#&#123;watched_file.path&#125;</span>: seeking to <span class="subst">#&#123;position&#125;</span>"</span>)</div><div class="line">      logger.info(<span class="string">"update_existing_specifically - <span class="subst">#&#123;watched_file.path&#125;</span>: seeking to <span class="subst">#&#123;position&#125;</span>"</span>)</div><div class="line">      watched_file.update_bytes_read(position)</div><div class="line">      sincedb_value.update_position(position)</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span> <span class="keyword">end</span> <span class="keyword">end</span></div><div class="line">---&gt;</div><div class="line">base.rb</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_or_update_sincedb_collection</span><span class="params">(watched_file)</span></span></div><div class="line">  sincedb_value = @sincedb_collection.find(watched_file)</div><div class="line">  <span class="keyword">if</span> sincedb_value.<span class="literal">nil</span>?</div><div class="line">    sincedb_value = add_new_value_sincedb_collection(watched_file)</div><div class="line">    watched_file.initial_completed</div><div class="line">  <span class="keyword">elsif</span> sincedb_value.watched_file == watched_file</div><div class="line">    update_existing_sincedb_collection_value(watched_file, sincedb_value)</div><div class="line">    watched_file.initial_completed</div><div class="line">  <span class="keyword">else</span></div><div class="line">    msg = <span class="string">"add_or_update_sincedb_collection: found sincedb record"</span></div><div class="line">    logger.trace(msg,</div><div class="line">      <span class="string">"sincedb key"</span> =&gt; watched_file.sincedb_key,</div><div class="line">      <span class="string">"sincedb value"</span> =&gt; sincedb_value</div><div class="line">    )</div><div class="line">    <span class="comment"># detected a rotation, Discoverer can't handle this because this watched file is not a new discovery.</span></div><div class="line">    <span class="comment"># we must handle it here, by transferring state and have the sincedb value track this watched file</span></div><div class="line">    <span class="comment"># rotate_as_file and rotate_from will switch the sincedb key to the inode that the path is now pointing to</span></div><div class="line">    <span class="comment"># and pickup the sincedb_value from before.</span></div><div class="line">    msg = <span class="string">"add_or_update_sincedb_collection: the found sincedb_value has a watched_file - this is a rename, switching inode to this watched file"</span></div><div class="line">    logger.trace(msg)</div><div class="line">    existing_watched_file = sincedb_value.watched_file</div><div class="line">    <span class="keyword">if</span> existing_watched_file.<span class="literal">nil</span>?</div><div class="line">      sincedb_value.set_watched_file(watched_file)</div><div class="line">      logger.trace(<span class="string">"add_or_update_sincedb_collection: switching as new file"</span>)</div><div class="line">      watched_file.rotate_as_file</div><div class="line">      watched_file.update_bytes_read(sincedb_value.position)</div><div class="line">    <span class="keyword">else</span></div><div class="line">      sincedb_value.set_watched_file(watched_file)</div><div class="line">      logger.trace(<span class="string">"add_or_update_sincedb_collection: switching from..."</span>, <span class="string">"watched_file details"</span> =&gt; watched_file.details)</div><div class="line">      watched_file.rotate_from(existing_watched_file)</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">  sincedb_value</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">watched_file.rb--&gt;</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">position_for_new_sincedb_value</span></span></div><div class="line">  <span class="keyword">if</span> @initial</div><div class="line">    <span class="comment"># this file was found in first discovery</span></div><div class="line">    @settings.start_new_files_at == <span class="symbol">:beginning</span> ? <span class="number">0</span> : last_stat_size</div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="comment"># always start at the beginning if found after first discovery</span></div><div class="line">    <span class="number">0</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>logstash-input-file 4.1.10 类似代码有所改进，可找到对应逻辑，总结来说是：<br><blockquote><ol>
<li>watch.rb的discovery机制，扫描当前目录下文件，并：<br>1）如果存在sincedb的key，且文件名相等，且size相等，则放入watched_files 并且设置state为ignored，且sincedb[key]=size<br>2）如果存在sincedb的key，但文件名不相等，则从sincedb中删除该key，但放入watched_files 并且设置state为watched<br>3）其他…</li>
<li>tail_mode-&gt;processor.rb定期 process_all_states中当处理到 process_watched 时，<br>发现该文件，设置 watched_file.activate，并调用 create_initial，create_initial正是<br>Handlers::CreateInitial.new(self, sincedb_collection, observer, @settings)类，<br>则handle方法就是 tail_mode-&gt;handlers-&gt;base.rb的hadle方法，即creat_initial.rb -&gt; handle_specifically 方法<br>handle_specifically调用base.rb的add_or_update_sincedb_collection<br>即最终调用 sincedb_value = add_new_value_sincedb_collection(watched_file)<br>add_new_value_sincedb_collection通过 get_new_value_specifically 获取到sincedb_value，即当前文件offset(get_new_value_specifically的逻辑如下，若配置beginning则为0，否则为last stat 的size)</li>
</ol>
<p>上述完成后，则会进行下一步的process_active，active就是通过监控文件的 @size 是否大于 @bytes_read，来判断文件当前是否在grown</p>
</blockquote></p>
<p>需要指出的是，升级 logstash-input-file 重启前，最好手动修改下 .sincedb文件，否则直到 .sincedb文件里的相关行inode都拥有 filepath 这一列，还是会出现上述丢失情况的。</p>
<p><strong>更多思考</strong>：<br>inode相等，logstash是根据filepath解决重用问题，如果同名新文件或位置变更，应该依旧会导致数据遗失或重复问题。<br>其实这里也可以根据文件的创建时间来判断，但不能解决系统时钟回退问题，即只能处理正向时间。</p>
<h2 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h2><p>一开始以为是跨数据中心 9ms的网络延迟或kafka参数配置导致写kafka性能不高，这个不难优化，但已排除，并非该原因。<br>实际测试同网段kafka性能瓶颈依旧维持1.2万/s。<br>排查过程比较冗长，这里不详述，简单记下结论：</p>
<pre><code>瓶颈在 config/logstash.yml里配置的queue.type: persisted，即使用了持久化的Ack队列。
</code></pre><p>测试机器为本人mac机器，硬盘为SSD/8G内存，如果使用 memory模式，性能可至少在3.6万/秒。<br>但这里为避丢数据，所以优化时不能作改动，其次是把 input 一分为二，性能略提升，在生产机器上至少可达 2.0万条/秒，提升约50%+。<br><strong>更多：如果是SSD，即本人开发机上测试，但input是可以到2.8万/秒，双input可到4万/秒</strong></p>
<p>起初认为增加配置中的 worker threads 数量可以改进性能，但其实不是，因为 worker threads 仅是针对pipeline的多线程，处理的是事件，这里的瓶颈在input和Ackqueue的交互，不过我没找到对应多线程处理input的配置参数，【如果你有发现或了解，感谢邮件给 aXRob21hc2xhdUBxcS5jb20= (base64)】，所以拆分为两个input，确实起到优化效果。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>后续几篇文章，还会分析 logstash 使用过程遇到的一个莫名罢机的问题，以及 传输数据完整性保障的问题，并会分析下 logstash的 WrappedSynchronousQueue/WrappedAckedQueue机制，也会分析一下怎么解决传输Kafka失败不丢数据的问题。</p>
<p>大概说下，虽然logstash那个queue叫做持久化且ACK的queue，听起来像是支持传输失败会重试从而保证数据完整不丢失。<br>但其实不是，但这个ACK甚至都不是针对一次完整性传输的ACK，即 这个ACK机制和 Flume的 Source-Channel-Sink之间的Transaction机制一样，即便是flume支持的持久化的File channel，这个Transaction也只是针对 Source和Channel(Channel和sink)之间传输(或者说 传递)这个动作是transactional的，而不是保证数据一定被传输成功，即事务是针对 传递 这个动作，而不是 传输 整个过程。这点和大多数人理解的新版kafka支持exactly once概念基本是不对的一样。</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>1，或许你或者很多文章认为开发一款普适的日志即时上报工具应该不难，本人一开始也这么认为，即便是只要求支持本地文件读取并推送至kafka。<br>但希望了解logstash使用运行原理后，你可以取消这种想法，除非你有比logstash团队更多的时间。<br>2，或许你可以搜索到网上许多比较几大流行日志上报开源工具的优劣分析，考虑到每个人的开发语言/习惯/经历不同，甚至还有基于容器的上报机制，去推荐用哪个，并不是合适的行为。<br>但几乎可以肯定的是，logstash 相比其他实现，最大(或者唯一)的劣势就是logstash 时JRuby语言写的。<br>3，如果非要建议，最好就是选择一个，把其中的坑和不足都踩一遍(除非该组件不再维护了)，了解了存在的问题后，才能判断使用哪个好。<br>4，除非必须，尽量不要使用logstash解析数据，重复三遍！首先是性能不可控，更重要是解析异常不可控，毕竟对于非Ruby系的开发者来说有点困难。<br>所以我建议尽量留给上下游去处理，仅把logstash做为纯无结构的数据传输工具，尽管其解析插件很丰富。<br>但若对数据异常并不是很敏感，使用Logstash插件解析不影响。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;i&gt;&lt;strong&gt;intro&lt;/strong&gt;：去年记录的logstash几个问题，因为涉及较多且杂乱，主题并不是那么清晰，今天整理时候发现写起来太长了，所以打算分成2-4篇文章，几个小块逐个讨论。&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;系统概况&lt;/strong&gt;：&lt;br&gt;1）各服务产生事件(日志)另有一套Event机制支持，本文讨论的是如何跨数据中心(机房)传输。&lt;br&gt;2）普适性的，适合各语言实现的设计，故基于文件传输，即服务在本地产生滚动的日志，组件去 &lt;strong&gt;tail&lt;/strong&gt; 文件的方式，将这些数据 &lt;strong&gt;即时&lt;/strong&gt; 传输至另一个机房的Kafka。&lt;br&gt;3）logstash是5.6.4版本，kafka版本 0.10.0.1版本问题（再高版本的logstash 就不支持该版本的Kafka了）&lt;br&gt;4）logstash的input是滚动的日志文件，即tail_mode，output为kafka，无解析，插件开启了metric，queue 为 persistent，即文件模式，硬件为磁盘。&lt;br&gt;5）文件系统为ext4，系统inode是重用的。&lt;br&gt;6）本文贴出配置或数据已做脱敏处理，如有疑问请忽略。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文先讨论遇到的两个问题&lt;/strong&gt;&lt;br&gt;1）即便是 kill -15， logstash重启后会丢失数据&lt;br&gt;2）性能问题，可能消息大小会有影响，但观察下来logstash上传速率上限在 1.2万条/秒.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="Tools" scheme="http://thomaslau.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Mac电脑效能神器 Hammerspoon 入门和几个改善</title>
    <link href="http://thomaslau.github.io/2019/08/11/2019-08-11-on_hammerspoon/"/>
    <id>http://thomaslau.github.io/2019/08/11/2019-08-11-on_hammerspoon/</id>
    <published>2019-08-10T17:09:07.000Z</published>
    <updated>2019-08-12T17:12:06.864Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><i><strong>intro1</strong>: 你是否为在Mac电脑上切换不同的应用时也需要切换输入法而觉得恼怒？比如刚在微信中文下聊天，这时转向命令行工具，打了一半才发现是中文，不得不再重新输入？</i><br><i><strong>intro2</strong>: 如果你恰巧还是一名 hacker，是否苦于为了某些系统改进而搜索一堆 Applescript最后发现实现不了你要的功能。</i><br><i><strong>intro3</strong>: 这是去年写的短文，一直没时间(懒)再深入完善，今天修改了些，但也只做了简单的入门和介绍</i></p>
</blockquote>
<h2 id="Hammerspoon"><a href="#Hammerspoon" class="headerlink" title="Hammerspoon"></a>Hammerspoon</h2><p>最近升级了Mac系统，发现之前的hammerspoon有个脚本耗电偏高，该脚本就是实现打开 Terminal/iTerm2(命令行)/Spotlight等可以将输入法自动切换到拼音输入法，打开Chrome/Firefox等可以自动切换中文输入法。<br><a id="more"></a><br><blockquote><p>如果你还不了解Hammerspoon是什么，可以参考下面几个链接：</p>
<ol>
<li><a href="https://sspai.com/post/53992" target="_blank" rel="external">免费又强大的 macOS 自动化工具，Hammerspoon 可以让你少买很多 App</a></li>
<li><a href="https://www.v2ex.com/amp/t/553241" target="_blank" rel="external">推荐一个 MacOS 上用了就无法自拔的神器Hammerspoon</a></li>
<li><a href="https://juejin.im/entry/59737e16f265da6c317de185" target="_blank" rel="external">打造 macOS 的生产力环境 - Hammerspoon</a></li>
</ol>
</blockquote><br>最开始是在某论坛看到的一段脚本实现输入法自动切换，大概功能就是绑定 Alt+Tab快捷键，切换时就切换了输入法，很早期了。最近刚好想到 Hammerspoon 除了事件机制，窗口焦点事件，于是想想是否有这类机制的实现。</p>
<p>于是我尝试用 “Hammerspoon + 窗口事件” 搜索了一番，找到了几篇文章。实际上不看文章，只是看代码的话也并不难，就在 Hammerspoon.app的Contents/Resources/extensions/hs/window目录下，可以看到下图：<br><img src="/images/hammerspoon1.png" width="100%"></p>
<p>在这里，订阅 <strong>hs.window.filter.windowCreated</strong>，<strong>hs.window.filter.windowFocused</strong> 事件一般可以满足上述输入法自动切换的需求了。</p>
<p>但是应该怎样把上述联系起来，编码实现功能？我并不算是个深入了解 Hammerspoon 的用户，所以首先求助其文档，幸亏他的文档写的好又详细，<a href="http://www.hammerspoon.org/docs/hs.window.filter.html" target="_blank" rel="external">在这里hs.window.filter</a></p>
<p>上面帮助文档罗列描述很清楚，如果留意上面提到的 hs/window/filter.lua 的代码，我们还可以发现这段注释：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--- A *default windowfilter* (not to be confused with the default filter *within* a windowfilter) is provided as convenience;</span></div><div class="line"><span class="comment">--- it excludes some known apps and windows that are transient in nature, therefore unlikely to be "interesting" for e.g. window management.</span></div><div class="line"><span class="comment">--- `hs.window.filter.new()` (with no arguments) returns a copy of the default windowfilter that you can further tailor to your needs - see `hs.window.filter.default` and `hs.window.filter.new()` for more information.</span></div><div class="line"></div><div class="line"><span class="comment">---</span></div><div class="line"><span class="comment">--- -- set the exact scope of what you're interested in - see hs.window.filter:setAppFilter()</span></div><div class="line"><span class="comment">--- wf_terminal = wf.new&#123;'Terminal','iTerm2'&#125; -- all visible terminal windows</span></div><div class="line"><span class="comment">--- wf_timewaster = wf.new(false):setAppFilter('Safari',&#123;allowTitles='reddit'&#125;) -- any Safari windows with "reddit" anywhere in the title</span></div><div class="line"><span class="comment">--- wf_leftscreen = wf.new&#123;override=&#123;visible=true,fullscreen=false,allowScreens='-1,0',currentSpace=true&#125;&#125;</span></div><div class="line"><span class="comment">--- -- all visible and non-fullscreen windows that are on the screen to the left of the primary screen in the current Space</span></div><div class="line"><span class="comment">--- wf_editors_righthalf = wf.new&#123;'TextEdit','Sublime Text','BBEdit'&#125;:setRegions(hs.screen.primaryScreen():fromUnitRect'0.5,0/1,1')</span></div><div class="line"><span class="comment">--- -- text editor windows that are on the right half of the primary screen</span></div><div class="line"><span class="comment">--- wf_bigwindows = wf.new(function(w)return w:frame().area&gt;3000000 end) -- only very large windows</span></div><div class="line"><span class="comment">--- wf_notif = wf.new&#123;['Notification Center']=&#123;allowRoles='AXNotificationCenterAlert'&#125;&#125; -- notification center alerts</span></div><div class="line"><span class="comment">---</span></div><div class="line"><span class="comment">--- -- subscribe to events</span></div><div class="line"><span class="comment">--- wf_terminal:subscribe(wf.windowFocused,some_fn) -- run a function whenever a terminal window is focused</span></div><div class="line"><span class="comment">--- wf_timewaster:subscribe(wf.hasWindow,startAnnoyingMe):subscribe(wf.hasNoWindows,stopAnnoyingMe) -- fight procrastination :)</span></div><div class="line"><span class="comment">---</span></div></pre></td></tr></table></figure>
<p>这个注释是不是非常地清晰，看完后代码就出来了呢？<br><i><strong>是的！</strong></i><br>下面就是一个完整可运行的代码，直接拷贝到自己的 ~/.hammerspoon/init.lua  – Finally那段注释上面就可以运行了。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">-----------------------mine start-----------------------------</span></div><div class="line"><span class="comment">-- ADD by Thomas</span></div><div class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">Chinese</span><span class="params">()</span></span></div><div class="line">  hs.console.printStyledtext(<span class="string">"chinese"</span>)</div><div class="line">  hs.keycodes.currentSourceID(<span class="string">"com.apple.inputmethod.SCIM.ITABC"</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">English</span><span class="params">()</span></span></div><div class="line">  hs.console.printStyledtext(hs.keycodes.currentSourceID())</div><div class="line">  hs.keycodes.currentSourceID(<span class="string">"com.apple.keylayout.ABC"</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">hs.console.printStyledtext(<span class="string">"inputM:"</span> + hs.keycodes.currentSourceID())</div><div class="line"></div><div class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">set_app_input_method</span><span class="params">(app_name, set_input_method_function, event)</span></span></div><div class="line">  event = event <span class="keyword">or</span> hs.window.filter.windowFocused</div><div class="line">  hs.window.filter.new(app_name)</div><div class="line">    :subscribe(event, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> set_input_method_function() <span class="keyword">end</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">set_app_input_method(<span class="string">'Hammerspoon'</span>, English, hs.window.filter.windowCreated)</div><div class="line">set_app_input_method(<span class="string">'Spotlight'</span>, English, hs.window.filter.windowCreated)</div><div class="line"><span class="comment">-- set_app_input_method('Emacs', English)</span></div><div class="line">set_app_input_method(<span class="string">'Slack'</span>, English)</div><div class="line">set_app_input_method(<span class="string">'Terminal'</span>, English)</div><div class="line">set_app_input_method(<span class="string">'iTerm2'</span>, English)</div><div class="line">set_app_input_method(<span class="string">'Google Chrome'</span>, English)</div><div class="line">set_app_input_method(<span class="string">'WeChat'</span>, Chinese)</div><div class="line"><span class="comment">-----------------------mine end-----------------------------</span></div></pre></td></tr></table></figure>
<p>其中：</p>
<ol>
<li>“com.apple.inputmethod.SCIM.ITABC”/“com.apple.keylayout.ABC”就是我的电脑上在用的中英文输入法，<br>如果你不知道自己使用的输入法的名称可以切换对应输入法，打开 Hammerspoon 控制台，点击 Hammerspoon的 reload config，就会在Hammerspoon 控制台看到inputM 一段，就是你的输入法，替换上面对应名字即可。</li>
<li>如果有自己的应用需要，可以追加 set_app_input_method。</li>
</ol>
<h2 id="Bing-必应桌面的改进"><a href="#Bing-必应桌面的改进" class="headerlink" title="Bing 必应桌面的改进"></a>Bing 必应桌面的改进</h2><p>使用 awesome-hammerspoon.git 下的Bing脚本，可以自动更新自己的桌面壁纸和必应官方同步，但是我发现有几个问题：<br>1）不支持多桌面。现在大多数工作环境都是两个或多个显示器，使用该脚本，发现只有一个桌面壁纸更新了。<br>原因在于 hammerspoon 默认更新的是mainScreen，它还有一个primaryScreen甚至allScreens区别，所以这里需要改一下。<br>2）下载的壁纸没有保存下来<br>3）桌面壁纸在大陆其实用的是 bing 国内版搜索的壁纸，想使用更适合做背景的国外版壁纸该怎么办？<br>只需要在请求链接的时候加一个 ENSEARCH=BENVER=1 的cookie就可以了。</p>
<p>上面问题的解决方法：<br>修改.hammerspoon/Spoons/BingDaily.spoon/init.lua文件，将下面代码中 +开头的代码行替换-开头的源代码行即可：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">-        <span class="keyword">local</span> localpath = <span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">"HOME"</span>) .. <span class="string">"/.Trash/"</span> .. hs.http.urlParts(obj.full_url).lastPathComponent</div><div class="line">-        hs.screen.mainScreen():desktopImageURL(<span class="string">"file://"</span> .. localpath)</div><div class="line">+        <span class="keyword">local</span> localpath = <span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">"HOME"</span>) .. <span class="string">"/Public/bing/"</span> .. hs.http.urlParts(obj.full_url).queryItems[<span class="number">1</span>].id</div><div class="line">+        hs.console.printStyledtext(<span class="string">"desktopIMG:"</span> .. localpath)</div><div class="line">+        hs.screen.primaryScreen():desktopImageURL(<span class="string">"file://"</span> .. localpath)</div><div class="line">+        <span class="keyword">local</span> scs=hs.screen.allScreens()</div><div class="line">+        <span class="keyword">local</span> count = <span class="number">0</span></div><div class="line">+        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">pairs</span>(scs) <span class="keyword">do</span> count = count + <span class="number">1</span> <span class="keyword">end</span></div><div class="line">+        hs.console.printStyledtext(<span class="string">"table.size: "</span> .. count)</div><div class="line">+        <span class="keyword">for</span> i=<span class="number">1</span>,#scs <span class="keyword">do</span> scs[i]:desktopImageURL(<span class="string">"file://"</span> .. localpath) <span class="keyword">end</span></div><div class="line"></div><div class="line"></div><div class="line">-    <span class="keyword">local</span> user_agent_str = <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/603.2.4 (KHTML, like Gecko) Version/10.1.1 Safari/603.2.4"</span></div><div class="line">+    <span class="keyword">local</span> user_agent_str = <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"</span></div><div class="line">-    hs.http.asyncGet(json_req_url, &#123;[<span class="string">"User-Agent"</span>]=user_agent_str&#125;, <span class="function"><span class="keyword">function</span><span class="params">(stat,body,header)</span></span></div><div class="line">+    hs.http.asyncGet(json_req_url, &#123;[<span class="string">"User-Agent"</span>]=user_agent_str,[<span class="string">"cookie"</span>]=<span class="string">"ENSEARCH=BENVER=1"</span>&#125;, <span class="function"><span class="keyword">function</span><span class="params">(stat,body,header)</span></span></div><div class="line"></div><div class="line">-                    <span class="keyword">local</span> localpath = <span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">"HOME"</span>) .. <span class="string">"/.Trash/"</span> .. hs.http.urlParts(obj.full_url).lastPathComponent</div><div class="line">+                    <span class="keyword">local</span> localpath = <span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">"HOME"</span>) .. <span class="string">"/Public/bing/"</span> .. hs.http.urlParts(obj.full_url).queryItems[<span class="number">1</span>].id</div></pre></td></tr></table></figure>
<h2 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h2><p>在.hammerspoon/Spoons 文件夹下修改canlendar/aclokck的分布位置/大小/用色都较简单直白，就不列代码了。</p>
<p>最后，主要是对 Hammerspoon 扩展支持的功能还没深入了解过，希望有时间可以再做点开发，根据个人使用来看可添加的效率脚本太多了.</p>
<h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><p>上面链接可见 Hammerspoon 是什么以及怎么用，可以重复下，非常简单：</p>
<p>1) 到官网下载并安装 <a href="https://github.com/Hammerspoon/hammerspoon/releases/latest" target="_blank" rel="external">Hammerspoon</a><br>2）最好给 Hammerspoon 授权，点击 “Enable Accessbility”<br><img src="/images/hammerspoon2.png" width="80%"><br>3）如果你是开发者，可以运行：</p>
<pre><code>git clone https://github.com/ashfinal/awesome-hammerspoon.git   .hammerspoon
</code></pre><p>否则可直接下载 并保存到你的home文件夹下 的 .hammerspoon目录。</p>
<p>实际上述2步完成就是可用了，但只提供基本功能，如有需求可以自己写脚本了。不过感谢强大的开源文化，许多网友就开源了许多自己写的脚本，一开始可以用 3 步里的脚本合集，应该是早且权威的。</p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ol>
<li><a href="https://www.v2ex.com/amp/t/553241" target="_blank" rel="external">推荐一个 MacOS 上用了就无法自拔的神器Hammerspoon</a></li>
<li><a href="https://sspai.com/post/53992" target="_blank" rel="external">免费又强大的 macOS 自动化工具，Hammerspoon 可以让你少买很多 App</a></li>
<li><a href="https://yiming.dev/blog/2017/08/09/use-hammerspoon-to-auto-switch-input-methods/" target="_blank" rel="external">Use Hammerspoon to auto switch input methods
</a></li>
<li><a href="https://juejin.im/entry/59737e16f265da6c317de185" target="_blank" rel="external">打造 macOS 的生产力环境 - Hammerspoon</a></li>
<li><a href="http://www.hammerspoon.org/docs/hs.window.filter.html" target="_blank" rel="external">docs » hs.window.filter</a></li>
<li><a href="https://emacs-china.org/t/topic/6348/20" target="_blank" rel="external">Emacs China </a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;i&gt;&lt;strong&gt;intro1&lt;/strong&gt;: 你是否为在Mac电脑上切换不同的应用时也需要切换输入法而觉得恼怒？比如刚在微信中文下聊天，这时转向命令行工具，打了一半才发现是中文，不得不再重新输入？&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro2&lt;/strong&gt;: 如果你恰巧还是一名 hacker，是否苦于为了某些系统改进而搜索一堆 Applescript最后发现实现不了你要的功能。&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;strong&gt;intro3&lt;/strong&gt;: 这是去年写的短文，一直没时间(懒)再深入完善，今天修改了些，但也只做了简单的入门和介绍&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Hammerspoon&quot;&gt;&lt;a href=&quot;#Hammerspoon&quot; class=&quot;headerlink&quot; title=&quot;Hammerspoon&quot;&gt;&lt;/a&gt;Hammerspoon&lt;/h2&gt;&lt;p&gt;最近升级了Mac系统，发现之前的hammerspoon有个脚本耗电偏高，该脚本就是实现打开 Terminal/iTerm2(命令行)/Spotlight等可以将输入法自动切换到拼音输入法，打开Chrome/Firefox等可以自动切换中文输入法。&lt;br&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://thomaslau.github.io/tags/Tech/"/>
    
      <category term="Tools" scheme="http://thomaslau.github.io/tags/Tools/"/>
    
  </entry>
  
</feed>
